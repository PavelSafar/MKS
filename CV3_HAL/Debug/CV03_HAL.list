
CV03_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001884  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001944  08001944  00011944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019ec  080019ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019ec  080019ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019ec  080019ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001a00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001a00  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c9e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001352  00000000  00000000  00026cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  00028028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  000288c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b969  00000000  00000000  000290b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069cc  00000000  00000000  00034a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00043e4d  00000000  00000000  0003b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007f232  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e44  00000000  00000000  0007f2b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800192c 	.word	0x0800192c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800192c 	.word	0x0800192c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa82 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ca 	bl	80003c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f862 	bl	80002f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  sct_init();
 8000234:	f000 f956 	bl	80004e4 <sct_init>
  sct_led(0x7A5C36DE);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <main+0x50>)
 800023a:	0018      	movs	r0, r3
 800023c:	f000 f912 	bl	8000464 <sct_led>
  HAL_Delay(1000);
 8000240:	23fa      	movs	r3, #250	; 0xfa
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fad5 	bl	80007f4 <HAL_Delay>
  HAL_TIM_Encoder_Start(&htim1, htim1.Channel);
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0x54>)
 800024c:	7f1b      	ldrb	r3, [r3, #28]
 800024e:	001a      	movs	r2, r3
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0x54>)
 8000252:	0011      	movs	r1, r2
 8000254:	0018      	movs	r0, r3
 8000256:	f001 fa13 	bl	8001680 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sct_value( __HAL_TIM_GET_COUNTER(&htim1));
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x54>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	b29b      	uxth	r3, r3
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f946 	bl	80004f4 <sct_value>
//	  i+=111;
//	  if(i>999) i = 0;
	  HAL_Delay(50);
 8000268:	2032      	movs	r0, #50	; 0x32
 800026a:	f000 fac3 	bl	80007f4 <HAL_Delay>
	  sct_value( __HAL_TIM_GET_COUNTER(&htim1));
 800026e:	e7f4      	b.n	800025a <main+0x3a>
 8000270:	7a5c36de 	.word	0x7a5c36de
 8000274:	20000028 	.word	0x20000028

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b091      	sub	sp, #68	; 0x44
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2410      	movs	r4, #16
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2330      	movs	r3, #48	; 0x30
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f001 fb47 	bl	800191c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	003b      	movs	r3, r7
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f001 fb40 	bl	800191c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	0021      	movs	r1, r4
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2202      	movs	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2210      	movs	r2, #16
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fcff 	bl	8000cbc <HAL_RCC_OscConfig>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002c2:	f000 f8c9 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	003b      	movs	r3, r7
 80002c8:	2207      	movs	r2, #7
 80002ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	003b      	movs	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	003b      	movs	r3, r7
 80002e0:	2100      	movs	r1, #0
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 f806 	bl	80012f4 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002ec:	f000 f8b4 	bl	8000458 <Error_Handler>
  }
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b011      	add	sp, #68	; 0x44
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b08d      	sub	sp, #52	; 0x34
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002fe:	240c      	movs	r4, #12
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	2324      	movs	r3, #36	; 0x24
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f001 fb07 	bl	800191c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	2308      	movs	r3, #8
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f001 fb00 	bl	800191c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_TIM1_Init+0xc4>)
 800031e:	4a28      	ldr	r2, [pc, #160]	; (80003c0 <MX_TIM1_Init+0xc8>)
 8000320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_TIM1_Init+0xc4>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 800032e:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000330:	2296      	movs	r2, #150	; 0x96
 8000332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_TIM1_Init+0xc4>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000346:	0021      	movs	r1, r4
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2201      	movs	r2, #1
 800034c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2202      	movs	r2, #2
 8000352:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2201      	movs	r2, #1
 8000358:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2201      	movs	r2, #1
 8000370:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800037e:	187a      	adds	r2, r7, r1
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f8e7 	bl	8001558 <HAL_TIM_Encoder_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800038e:	f000 f863 	bl	8000458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800039e:	1d3a      	adds	r2, r7, #4
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_TIM1_Init+0xc4>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fa3d 	bl	8001824 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80003ae:	f000 f853 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00d      	add	sp, #52	; 0x34
 80003b8:	bd90      	pop	{r4, r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b089      	sub	sp, #36	; 0x24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	240c      	movs	r4, #12
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	0018      	movs	r0, r3
 80003d0:	2314      	movs	r3, #20
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f001 faa1 	bl	800191c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <MX_GPIO_Init+0x8c>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <MX_GPIO_Init+0x8c>)
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	02c9      	lsls	r1, r1, #11
 80003e4:	430a      	orrs	r2, r1
 80003e6:	615a      	str	r2, [r3, #20]
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <MX_GPIO_Init+0x8c>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	02db      	lsls	r3, r3, #11
 80003f0:	4013      	ands	r3, r2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_GPIO_Init+0x8c>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_GPIO_Init+0x8c>)
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_GPIO_Init+0x8c>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	4013      	ands	r3, r2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8000412:	2387      	movs	r3, #135	; 0x87
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <MX_GPIO_Init+0x90>)
 8000418:	2200      	movs	r2, #0
 800041a:	0019      	movs	r1, r3
 800041c:	f000 fc30 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000420:	193b      	adds	r3, r7, r4
 8000422:	2287      	movs	r2, #135	; 0x87
 8000424:	00d2      	lsls	r2, r2, #3
 8000426:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	193b      	adds	r3, r7, r4
 800042a:	2201      	movs	r2, #1
 800042c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043a:	193b      	adds	r3, r7, r4
 800043c:	4a05      	ldr	r2, [pc, #20]	; (8000454 <MX_GPIO_Init+0x90>)
 800043e:	0019      	movs	r1, r3
 8000440:	0010      	movs	r0, r2
 8000442:	f000 faad 	bl	80009a0 <HAL_GPIO_Init>

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b009      	add	sp, #36	; 0x24
 800044c:	bd90      	pop	{r4, r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <sct_led>:

#include "sct.h"


void sct_led(uint32_t value)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j<32; j++)
 800046c:	230f      	movs	r3, #15
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
 8000474:	e01e      	b.n	80004b4 <sct_led+0x50>
	{
		HAL_GPIO_WritePin(GPIOB,SCT_SDI_Pin,value&1);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4817      	ldr	r0, [pc, #92]	; (80004e0 <sct_led+0x7c>)
 8000482:	001a      	movs	r2, r3
 8000484:	2110      	movs	r1, #16
 8000486:	f000 fbfb 	bl	8000c80 <HAL_GPIO_WritePin>
		value=value>>1;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, SCT_CLK_Pin, 1);
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <sct_led+0x7c>)
 8000492:	2201      	movs	r2, #1
 8000494:	2108      	movs	r1, #8
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fbf2 	bl	8000c80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SCT_CLK_Pin, 0);
 800049c:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <sct_led+0x7c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	2108      	movs	r1, #8
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fbec 	bl	8000c80 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j<32; j++)
 80004a8:	210f      	movs	r1, #15
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	3201      	adds	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	230f      	movs	r3, #15
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b1f      	cmp	r3, #31
 80004bc:	d9db      	bls.n	8000476 <sct_led+0x12>
	}
	HAL_GPIO_WritePin(GPIOB, SCT_NLA_Pin, 1);
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <sct_led+0x7c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2120      	movs	r1, #32
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fbdb 	bl	8000c80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SCT_NLA_Pin, 0);
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <sct_led+0x7c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	2120      	movs	r1, #32
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fbd5 	bl	8000c80 <HAL_GPIO_WritePin>
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	48000400 	.word	0x48000400

080004e4 <sct_init>:

void sct_init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	sct_led(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff ffbb 	bl	8000464 <sct_led>
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <sct_value>:

void sct_value(uint16_t value)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	0002      	movs	r2, r0
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	801a      	strh	r2, [r3, #0]
	value = value%1000;
 8000500:	1dbc      	adds	r4, r7, #6
 8000502:	1dbb      	adds	r3, r7, #6
 8000504:	881a      	ldrh	r2, [r3, #0]
 8000506:	23fa      	movs	r3, #250	; 0xfa
 8000508:	0099      	lsls	r1, r3, #2
 800050a:	0010      	movs	r0, r2
 800050c:	f7ff fe82 	bl	8000214 <__aeabi_uidivmod>
 8000510:	000b      	movs	r3, r1
 8000512:	8023      	strh	r3, [r4, #0]
	uint32_t out = reg_values[2][value%10];
 8000514:	1dbb      	adds	r3, r7, #6
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	210a      	movs	r1, #10
 800051a:	0018      	movs	r0, r3
 800051c:	f7ff fe7a 	bl	8000214 <__aeabi_uidivmod>
 8000520:	000b      	movs	r3, r1
 8000522:	b29b      	uxth	r3, r3
 8000524:	001a      	movs	r2, r3
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <sct_value+0xc0>)
 8000528:	3214      	adds	r2, #20
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	58d3      	ldr	r3, [r2, r3]
 800052e:	60fb      	str	r3, [r7, #12]
	value = value /10;
 8000530:	1dbc      	adds	r4, r7, #6
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	210a      	movs	r1, #10
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff fde5 	bl	8000108 <__udivsi3>
 800053e:	0003      	movs	r3, r0
 8000540:	8023      	strh	r3, [r4, #0]
	if(value>0)
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d02b      	beq.n	80005a2 <sct_value+0xae>
	{
		out |= reg_values[1][value%10];
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	210a      	movs	r1, #10
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff fe5f 	bl	8000214 <__aeabi_uidivmod>
 8000556:	000b      	movs	r3, r1
 8000558:	b29b      	uxth	r3, r3
 800055a:	001a      	movs	r2, r3
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <sct_value+0xc0>)
 800055e:	320a      	adds	r2, #10
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	58d3      	ldr	r3, [r2, r3]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4313      	orrs	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
		value = value /10;
 800056a:	1dbc      	adds	r4, r7, #6
 800056c:	1dbb      	adds	r3, r7, #6
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	210a      	movs	r1, #10
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff fdc8 	bl	8000108 <__udivsi3>
 8000578:	0003      	movs	r3, r0
 800057a:	8023      	strh	r3, [r4, #0]
		if(value>0)
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00e      	beq.n	80005a2 <sct_value+0xae>
		{
			out |= reg_values[0][value%10];
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	210a      	movs	r1, #10
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff fe42 	bl	8000214 <__aeabi_uidivmod>
 8000590:	000b      	movs	r3, r1
 8000592:	b29b      	uxth	r3, r3
 8000594:	001a      	movs	r2, r3
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <sct_value+0xc0>)
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	58d3      	ldr	r3, [r2, r3]
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4313      	orrs	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
		}
	}
	sct_led(out);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff ff5d 	bl	8000464 <sct_led>
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b005      	add	sp, #20
 80005b0:	bd90      	pop	{r4, r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	08001964 	.word	0x08001964

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x44>)
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_MspInit+0x44>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	619a      	str	r2, [r3, #24]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x44>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_MspInit+0x44>)
 80005d8:	69da      	ldr	r2, [r3, #28]
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_MspInit+0x44>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0549      	lsls	r1, r1, #21
 80005e0:	430a      	orrs	r2, r1
 80005e2:	61da      	str	r2, [r3, #28]
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_MspInit+0x44>)
 80005e6:	69da      	ldr	r2, [r3, #28]
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	055b      	lsls	r3, r3, #21
 80005ec:	4013      	ands	r3, r2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	2314      	movs	r3, #20
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	0018      	movs	r0, r3
 800060e:	2314      	movs	r3, #20
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f001 f982 	bl	800191c <memset>
  if(htim_encoder->Instance==TIM1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <HAL_TIM_Encoder_MspInit+0x94>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d133      	bne.n	800068a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <HAL_TIM_Encoder_MspInit+0x98>)
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <HAL_TIM_Encoder_MspInit+0x98>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0109      	lsls	r1, r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	619a      	str	r2, [r3, #24]
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <HAL_TIM_Encoder_MspInit+0x98>)
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_TIM_Encoder_MspInit+0x98>)
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_TIM_Encoder_MspInit+0x98>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0289      	lsls	r1, r1, #10
 8000648:	430a      	orrs	r2, r1
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_TIM_Encoder_MspInit+0x98>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	029b      	lsls	r3, r3, #10
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800065a:	2114      	movs	r1, #20
 800065c:	187b      	adds	r3, r7, r1
 800065e:	22c0      	movs	r2, #192	; 0xc0
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2202      	movs	r2, #2
 8000668:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	187a      	adds	r2, r7, r1
 800067e:	2390      	movs	r3, #144	; 0x90
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f000 f98b 	bl	80009a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b00a      	add	sp, #40	; 0x28
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	40012c00 	.word	0x40012c00
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f87a 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490e      	ldr	r1, [pc, #56]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0b      	ldr	r4, [pc, #44]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000702:	f7ff ffe4 	bl	80006ce <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000706:	f001 f8e5 	bl	80018d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff fd89 	bl	8000220 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	080019f4 	.word	0x080019f4
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	2000006c 	.word	0x2000006c

08000728 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_IRQHandler>
	...

0800072c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <HAL_Init+0x24>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_Init+0x24>)
 8000736:	2110      	movs	r1, #16
 8000738:	430a      	orrs	r2, r1
 800073a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800073c:	2000      	movs	r0, #0
 800073e:	f000 f809 	bl	8000754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000742:	f7ff ff39 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000746:	2300      	movs	r3, #0
}
 8000748:	0018      	movs	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40022000 	.word	0x40022000

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_InitTick+0x5c>)
 800075e:	681c      	ldr	r4, [r3, #0]
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_InitTick+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0019      	movs	r1, r3
 8000766:	23fa      	movs	r3, #250	; 0xfa
 8000768:	0098      	lsls	r0, r3, #2
 800076a:	f7ff fccd 	bl	8000108 <__udivsi3>
 800076e:	0003      	movs	r3, r0
 8000770:	0019      	movs	r1, r3
 8000772:	0020      	movs	r0, r4
 8000774:	f7ff fcc8 	bl	8000108 <__udivsi3>
 8000778:	0003      	movs	r3, r0
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f903 	bl	8000986 <HAL_SYSTICK_Config>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	e00f      	b.n	80007a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d80b      	bhi.n	80007a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	2301      	movs	r3, #1
 8000792:	425b      	negs	r3, r3
 8000794:	2200      	movs	r2, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f000 f8e0 	bl	800095c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_InitTick+0x64>)
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b003      	add	sp, #12
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x1c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x20>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	18d2      	adds	r2, r2, r3
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_IncTick+0x20>)
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000068 	.word	0x20000068

080007e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <HAL_GetTick+0x10>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000068 	.word	0x20000068

080007f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff fff0 	bl	80007e0 <HAL_GetTick>
 8000800:	0003      	movs	r3, r0
 8000802:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	d005      	beq.n	800081a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_Delay+0x40>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	001a      	movs	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	189b      	adds	r3, r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	f7ff ffe0 	bl	80007e0 <HAL_GetTick>
 8000820:	0002      	movs	r2, r0
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8f7      	bhi.n	800081c <HAL_Delay+0x28>
  {
  }
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000008 	.word	0x20000008

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b7f      	cmp	r3, #127	; 0x7f
 800084c:	d828      	bhi.n	80008a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <__NVIC_SetPriority+0xd4>)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	33c0      	adds	r3, #192	; 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	589b      	ldr	r3, [r3, r2]
 800085e:	1dfa      	adds	r2, r7, #7
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	0011      	movs	r1, r2
 8000864:	2203      	movs	r2, #3
 8000866:	400a      	ands	r2, r1
 8000868:	00d2      	lsls	r2, r2, #3
 800086a:	21ff      	movs	r1, #255	; 0xff
 800086c:	4091      	lsls	r1, r2
 800086e:	000a      	movs	r2, r1
 8000870:	43d2      	mvns	r2, r2
 8000872:	401a      	ands	r2, r3
 8000874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	401a      	ands	r2, r3
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	0018      	movs	r0, r3
 8000884:	2303      	movs	r3, #3
 8000886:	4003      	ands	r3, r0
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	481f      	ldr	r0, [pc, #124]	; (800090c <__NVIC_SetPriority+0xd4>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b25b      	sxtb	r3, r3
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	430a      	orrs	r2, r1
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800089e:	e031      	b.n	8000904 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <__NVIC_SetPriority+0xd8>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0019      	movs	r1, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	400b      	ands	r3, r1
 80008ac:	3b08      	subs	r3, #8
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	3306      	adds	r3, #6
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	3304      	adds	r3, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <__NVIC_SetPriority+0xd8>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001c      	movs	r4, r3
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	3b08      	subs	r3, #8
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	430a      	orrs	r2, r1
 80008fa:	3306      	adds	r3, #6
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	18c3      	adds	r3, r0, r3
 8000900:	3304      	adds	r3, #4
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b003      	add	sp, #12
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <SysTick_Config+0x40>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d901      	bls.n	800092a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000926:	2301      	movs	r3, #1
 8000928:	e010      	b.n	800094c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <SysTick_Config+0x44>)
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	3a01      	subs	r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000932:	2301      	movs	r3, #1
 8000934:	425b      	negs	r3, r3
 8000936:	2103      	movs	r1, #3
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff7d 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SysTick_Config+0x44>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x44>)
 8000946:	2207      	movs	r2, #7
 8000948:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094a:	2300      	movs	r3, #0
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	00ffffff 	.word	0x00ffffff
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	210f      	movs	r1, #15
 8000968:	187b      	adds	r3, r7, r1
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	187b      	adds	r3, r7, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ffbf 	bl	8000914 <SysTick_Config>
 8000996:	0003      	movs	r3, r0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e14f      	b.n	8000c50 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d100      	bne.n	80009c8 <HAL_GPIO_Init+0x28>
 80009c6:	e140      	b.n	8000c4a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d00b      	beq.n	80009e8 <HAL_GPIO_Init+0x48>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d007      	beq.n	80009e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009dc:	2b11      	cmp	r3, #17
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b12      	cmp	r3, #18
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	409a      	lsls	r2, r3
 80009f6:	0013      	movs	r3, r2
 80009f8:	43da      	mvns	r2, r3
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	2201      	movs	r2, #1
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0xea>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b12      	cmp	r3, #18
 8000a88:	d123      	bne.n	8000ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	08da      	lsrs	r2, r3, #3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3208      	adds	r2, #8
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	58d3      	ldr	r3, [r2, r3]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	691a      	ldr	r2, [r3, #16]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2107      	movs	r1, #7
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	08da      	lsrs	r2, r3, #3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3208      	adds	r2, #8
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	6939      	ldr	r1, [r7, #16]
 8000ad0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2203      	movs	r2, #3
 8000af0:	401a      	ands	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	055b      	lsls	r3, r3, #21
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d100      	bne.n	8000b14 <HAL_GPIO_Init+0x174>
 8000b12:	e09a      	b.n	8000c4a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b14:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <HAL_GPIO_Init+0x2c8>)
 8000b16:	699a      	ldr	r2, [r3, #24]
 8000b18:	4b53      	ldr	r3, [pc, #332]	; (8000c68 <HAL_GPIO_Init+0x2c8>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	619a      	str	r2, [r3, #24]
 8000b20:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <HAL_GPIO_Init+0x2c8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4013      	ands	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b2c:	4a4f      	ldr	r2, [pc, #316]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	589b      	ldr	r3, [r3, r2]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	2390      	movs	r3, #144	; 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a44      	ldr	r2, [pc, #272]	; (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d00d      	beq.n	8000b7e <HAL_GPIO_Init+0x1de>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a43      	ldr	r2, [pc, #268]	; (8000c74 <HAL_GPIO_Init+0x2d4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d007      	beq.n	8000b7a <HAL_GPIO_Init+0x1da>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a42      	ldr	r2, [pc, #264]	; (8000c78 <HAL_GPIO_Init+0x2d8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_GPIO_Init+0x1d6>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x1e4>
 8000b76:	2305      	movs	r3, #5
 8000b78:	e004      	b.n	8000b84 <HAL_GPIO_Init+0x1e4>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_Init+0x1e4>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x1e4>
 8000b82:	2300      	movs	r3, #0
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	2103      	movs	r1, #3
 8000b88:	400a      	ands	r2, r1
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b94:	4935      	ldr	r1, [pc, #212]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	025b      	lsls	r3, r3, #9
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43da      	mvns	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	029b      	lsls	r3, r3, #10
 8000be4:	4013      	ands	r3, r2
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	035b      	lsls	r3, r3, #13
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43da      	mvns	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	039b      	lsls	r3, r3, #14
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	40da      	lsrs	r2, r3
 8000c58:	1e13      	subs	r3, r2, #0
 8000c5a:	d000      	beq.n	8000c5e <HAL_GPIO_Init+0x2be>
 8000c5c:	e6a8      	b.n	80009b0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b006      	add	sp, #24
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	0008      	movs	r0, r1
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	1cbb      	adds	r3, r7, #2
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	1c7b      	adds	r3, r7, #1
 8000c94:	1c0a      	adds	r2, r1, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	1c7b      	adds	r3, r7, #1
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d004      	beq.n	8000caa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000caa:	1cbb      	adds	r3, r7, #2
 8000cac:	881a      	ldrh	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e303      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d100      	bne.n	8000cda <HAL_RCC_OscConfig+0x1e>
 8000cd8:	e08d      	b.n	8000df6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cda:	4bc4      	ldr	r3, [pc, #784]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	220c      	movs	r2, #12
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d00e      	beq.n	8000d04 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce6:	4bc1      	ldr	r3, [pc, #772]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	220c      	movs	r2, #12
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x64>
 8000cf2:	4bbe      	ldr	r3, [pc, #760]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d10d      	bne.n	8000d20 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	4bb9      	ldr	r3, [pc, #740]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	029b      	lsls	r3, r3, #10
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d100      	bne.n	8000d12 <HAL_RCC_OscConfig+0x56>
 8000d10:	e070      	b.n	8000df4 <HAL_RCC_OscConfig+0x138>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d000      	beq.n	8000d1c <HAL_RCC_OscConfig+0x60>
 8000d1a:	e06b      	b.n	8000df4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e2da      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d107      	bne.n	8000d38 <HAL_RCC_OscConfig+0x7c>
 8000d28:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4baf      	ldr	r3, [pc, #700]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	430a      	orrs	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e02f      	b.n	8000d98 <HAL_RCC_OscConfig+0xdc>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10c      	bne.n	8000d5a <HAL_RCC_OscConfig+0x9e>
 8000d40:	4baa      	ldr	r3, [pc, #680]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4ba9      	ldr	r3, [pc, #676]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d46:	49aa      	ldr	r1, [pc, #680]	; (8000ff0 <HAL_RCC_OscConfig+0x334>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	4ba7      	ldr	r3, [pc, #668]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4ba6      	ldr	r3, [pc, #664]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d52:	49a8      	ldr	r1, [pc, #672]	; (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e01e      	b.n	8000d98 <HAL_RCC_OscConfig+0xdc>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d10e      	bne.n	8000d80 <HAL_RCC_OscConfig+0xc4>
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4ba1      	ldr	r3, [pc, #644]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	02c9      	lsls	r1, r1, #11
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b9d      	ldr	r3, [pc, #628]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	0249      	lsls	r1, r1, #9
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0xdc>
 8000d80:	4b9a      	ldr	r3, [pc, #616]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b99      	ldr	r3, [pc, #612]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d86:	499a      	ldr	r1, [pc, #616]	; (8000ff0 <HAL_RCC_OscConfig+0x334>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	4b97      	ldr	r3, [pc, #604]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b96      	ldr	r3, [pc, #600]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d92:	4998      	ldr	r1, [pc, #608]	; (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d94:	400a      	ands	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d014      	beq.n	8000dca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fd1e 	bl	80007e0 <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fd19 	bl	80007e0 <HAL_GetTick>
 8000dae:	0002      	movs	r2, r0
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b64      	cmp	r3, #100	; 0x64
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e28c      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbc:	4b8b      	ldr	r3, [pc, #556]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0xee>
 8000dc8:	e015      	b.n	8000df6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff fd09 	bl	80007e0 <HAL_GetTick>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fd04 	bl	80007e0 <HAL_GetTick>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e277      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	4b81      	ldr	r3, [pc, #516]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	029b      	lsls	r3, r3, #10
 8000dee:	4013      	ands	r3, r2
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x118>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d100      	bne.n	8000e02 <HAL_RCC_OscConfig+0x146>
 8000e00:	e069      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e02:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	220c      	movs	r2, #12
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d00b      	beq.n	8000e24 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e0c:	4b77      	ldr	r3, [pc, #476]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	220c      	movs	r2, #12
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d11c      	bne.n	8000e52 <HAL_RCC_OscConfig+0x196>
 8000e18:	4b74      	ldr	r3, [pc, #464]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	025b      	lsls	r3, r3, #9
 8000e20:	4013      	ands	r3, r2
 8000e22:	d116      	bne.n	8000e52 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e24:	4b71      	ldr	r3, [pc, #452]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2202      	movs	r2, #2
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x17e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e24d      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	22f8      	movs	r2, #248	; 0xf8
 8000e40:	4393      	bics	r3, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	00da      	lsls	r2, r3, #3
 8000e4a:	4b68      	ldr	r3, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e50:	e041      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d024      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5a:	4b64      	ldr	r3, [pc, #400]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b63      	ldr	r3, [pc, #396]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fcbb 	bl	80007e0 <HAL_GetTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e70:	f7ff fcb6 	bl	80007e0 <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e229      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e82:	4b5a      	ldr	r3, [pc, #360]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d0f1      	beq.n	8000e70 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b57      	ldr	r3, [pc, #348]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	22f8      	movs	r2, #248	; 0xf8
 8000e92:	4393      	bics	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	00da      	lsls	r2, r3, #3
 8000e9c:	4b53      	ldr	r3, [pc, #332]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e018      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea4:	4b51      	ldr	r3, [pc, #324]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b50      	ldr	r3, [pc, #320]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	438a      	bics	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc96 	bl	80007e0 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc91 	bl	80007e0 <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e204      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ecc:	4b47      	ldr	r3, [pc, #284]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d1f1      	bne.n	8000eba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2208      	movs	r2, #8
 8000edc:	4013      	ands	r3, r2
 8000ede:	d036      	beq.n	8000f4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d019      	beq.n	8000f1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fc74 	bl	80007e0 <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efe:	f7ff fc6f 	bl	80007e0 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e1e2      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	2202      	movs	r2, #2
 8000f16:	4013      	ands	r3, r2
 8000f18:	d0f1      	beq.n	8000efe <HAL_RCC_OscConfig+0x242>
 8000f1a:	e018      	b.n	8000f4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	438a      	bics	r2, r1
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f28:	f7ff fc5a 	bl	80007e0 <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f32:	f7ff fc55 	bl	80007e0 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1c8      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	2202      	movs	r2, #2
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d1f1      	bne.n	8000f32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2204      	movs	r2, #4
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x29e>
 8000f58:	e0b6      	b.n	80010c8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	055b      	lsls	r3, r3, #21
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d111      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0549      	lsls	r1, r1, #21
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	61da      	str	r2, [r3, #28]
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000f7e:	69da      	ldr	r2, [r3, #28]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	055b      	lsls	r3, r3, #21
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f8a:	231f      	movs	r3, #31
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_RCC_OscConfig+0x33c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d11a      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_RCC_OscConfig+0x33c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0049      	lsls	r1, r1, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fc18 	bl	80007e0 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb6:	f7ff fc13 	bl	80007e0 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e186      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_RCC_OscConfig+0x33c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10f      	bne.n	8000ffc <HAL_RCC_OscConfig+0x340>
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_RCC_OscConfig+0x330>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	621a      	str	r2, [r3, #32]
 8000fe8:	e036      	b.n	8001058 <HAL_RCC_OscConfig+0x39c>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	fffeffff 	.word	0xfffeffff
 8000ff4:	fffbffff 	.word	0xfffbffff
 8000ff8:	40007000 	.word	0x40007000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <HAL_RCC_OscConfig+0x362>
 8001004:	4bb6      	ldr	r3, [pc, #728]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001006:	6a1a      	ldr	r2, [r3, #32]
 8001008:	4bb5      	ldr	r3, [pc, #724]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800100a:	2101      	movs	r1, #1
 800100c:	438a      	bics	r2, r1
 800100e:	621a      	str	r2, [r3, #32]
 8001010:	4bb3      	ldr	r3, [pc, #716]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	4bb2      	ldr	r3, [pc, #712]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001016:	2104      	movs	r1, #4
 8001018:	438a      	bics	r2, r1
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	e01c      	b.n	8001058 <HAL_RCC_OscConfig+0x39c>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x384>
 8001026:	4bae      	ldr	r3, [pc, #696]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001028:	6a1a      	ldr	r2, [r3, #32]
 800102a:	4bad      	ldr	r3, [pc, #692]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800102c:	2104      	movs	r1, #4
 800102e:	430a      	orrs	r2, r1
 8001030:	621a      	str	r2, [r3, #32]
 8001032:	4bab      	ldr	r3, [pc, #684]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	4baa      	ldr	r3, [pc, #680]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0x39c>
 8001040:	4ba7      	ldr	r3, [pc, #668]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001042:	6a1a      	ldr	r2, [r3, #32]
 8001044:	4ba6      	ldr	r3, [pc, #664]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001046:	2101      	movs	r1, #1
 8001048:	438a      	bics	r2, r1
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	4ba4      	ldr	r3, [pc, #656]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	4ba3      	ldr	r3, [pc, #652]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001052:	2104      	movs	r1, #4
 8001054:	438a      	bics	r2, r1
 8001056:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fbbe 	bl	80007e0 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	e009      	b.n	800107e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fbb9 	bl	80007e0 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	4a9b      	ldr	r2, [pc, #620]	; (80012e4 <HAL_RCC_OscConfig+0x628>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e12b      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107e:	4b98      	ldr	r3, [pc, #608]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x3ae>
 8001088:	e013      	b.n	80010b2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fba9 	bl	80007e0 <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001092:	e009      	b.n	80010a8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff fba4 	bl	80007e0 <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4a91      	ldr	r2, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x628>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e116      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010b2:	231f      	movs	r3, #31
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010bc:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	4b87      	ldr	r3, [pc, #540]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010c2:	4989      	ldr	r1, [pc, #548]	; (80012e8 <HAL_RCC_OscConfig+0x62c>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2210      	movs	r2, #16
 80010ce:	4013      	ands	r3, r2
 80010d0:	d063      	beq.n	800119a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12a      	bne.n	8001130 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010da:	4b81      	ldr	r3, [pc, #516]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010de:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010e0:	2104      	movs	r1, #4
 80010e2:	430a      	orrs	r2, r1
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010e6:	4b7e      	ldr	r3, [pc, #504]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ea:	4b7d      	ldr	r3, [pc, #500]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb75 	bl	80007e0 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010fc:	f7ff fb70 	bl	80007e0 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e0e3      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800110e:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d0f1      	beq.n	80010fc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001118:	4b71      	ldr	r3, [pc, #452]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	22f8      	movs	r2, #248	; 0xf8
 800111e:	4393      	bics	r3, r2
 8001120:	0019      	movs	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	00da      	lsls	r2, r3, #3
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800112a:	430a      	orrs	r2, r1
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
 800112e:	e034      	b.n	800119a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	3305      	adds	r3, #5
 8001136:	d111      	bne.n	800115c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001138:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800113a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113c:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800113e:	2104      	movs	r1, #4
 8001140:	438a      	bics	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001144:	4b66      	ldr	r3, [pc, #408]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001148:	22f8      	movs	r2, #248	; 0xf8
 800114a:	4393      	bics	r3, r2
 800114c:	0019      	movs	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	00da      	lsls	r2, r3, #3
 8001154:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
 800115a:	e01e      	b.n	800119a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800115c:	4b60      	ldr	r3, [pc, #384]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800115e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001160:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001162:	2104      	movs	r1, #4
 8001164:	430a      	orrs	r2, r1
 8001166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001168:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800116a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116c:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800116e:	2101      	movs	r1, #1
 8001170:	438a      	bics	r2, r1
 8001172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fb34 	bl	80007e0 <HAL_GetTick>
 8001178:	0003      	movs	r3, r0
 800117a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800117e:	f7ff fb2f 	bl	80007e0 <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e0a2      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d1f1      	bne.n	800117e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4e8>
 80011a2:	e097      	b.n	80012d4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	220c      	movs	r2, #12
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d100      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4f6>
 80011b0:	e06b      	b.n	800128a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d14c      	bne.n	8001254 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ba:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80011c0:	494a      	ldr	r1, [pc, #296]	; (80012ec <HAL_RCC_OscConfig+0x630>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fb0b 	bl	80007e0 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff fb06 	bl	80007e0 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e079      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	049b      	lsls	r3, r3, #18
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	220f      	movs	r2, #15
 80011f4:	4393      	bics	r3, r2
 80011f6:	0019      	movs	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a3a      	ldr	r2, [pc, #232]	; (80012f0 <HAL_RCC_OscConfig+0x634>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	431a      	orrs	r2, r3
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0449      	lsls	r1, r1, #17
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fad9 	bl	80007e0 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fad4 	bl	80007e0 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e047      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	049b      	lsls	r3, r3, #18
 800124e:	4013      	ands	r3, r2
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x578>
 8001252:	e03f      	b.n	80012d4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800125a:	4924      	ldr	r1, [pc, #144]	; (80012ec <HAL_RCC_OscConfig+0x630>)
 800125c:	400a      	ands	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fabe 	bl	80007e0 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff fab9 	bl	80007e0 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e02c      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	049b      	lsls	r3, r3, #18
 8001284:	4013      	ands	r3, r2
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x5ae>
 8001288:	e024      	b.n	80012d4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e01f      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_RCC_OscConfig+0x624>)
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	401a      	ands	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d10e      	bne.n	80012d0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	220f      	movs	r2, #15
 80012b6:	401a      	ands	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d107      	bne.n	80012d0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	23f0      	movs	r3, #240	; 0xf0
 80012c4:	039b      	lsls	r3, r3, #14
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b008      	add	sp, #32
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40021000 	.word	0x40021000
 80012e4:	00001388 	.word	0x00001388
 80012e8:	efffffff 	.word	0xefffffff
 80012ec:	feffffff 	.word	0xfeffffff
 80012f0:	ffc2ffff 	.word	0xffc2ffff

080012f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0b3      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2201      	movs	r2, #1
 800130e:	4013      	ands	r3, r2
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d911      	bls.n	800133a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2201      	movs	r2, #1
 800131c:	4393      	bics	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d001      	beq.n	800133a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e09a      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d015      	beq.n	8001370 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2204      	movs	r2, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d006      	beq.n	800135c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 8001354:	21e0      	movs	r1, #224	; 0xe0
 8001356:	00c9      	lsls	r1, r1, #3
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	22f0      	movs	r2, #240	; 0xf0
 8001362:	4393      	bics	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	d040      	beq.n	80013fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	029b      	lsls	r3, r3, #10
 800138a:	4013      	ands	r3, r2
 800138c:	d114      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06e      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	049b      	lsls	r3, r3, #18
 80013a2:	4013      	ands	r3, r2
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e062      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e05b      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	4393      	bics	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fa08 	bl	80007e0 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d4:	e009      	b.n	80013ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d6:	f7ff fa03 	bl	80007e0 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_RCC_ClockConfig+0x18c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e042      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	220c      	movs	r2, #12
 80013f0:	401a      	ands	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1ec      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d211      	bcs.n	800142e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4393      	bics	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_RCC_ClockConfig+0x184>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d001      	beq.n	800142e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e020      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2204      	movs	r2, #4
 8001434:	4013      	ands	r3, r2
 8001436:	d009      	beq.n	800144c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_RCC_ClockConfig+0x190>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800144c:	f000 f820 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 8001450:	0001      	movs	r1, r0
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_RCC_ClockConfig+0x188>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	220f      	movs	r2, #15
 800145a:	4013      	ands	r3, r2
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_RCC_ClockConfig+0x194>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	000a      	movs	r2, r1
 8001462:	40da      	lsrs	r2, r3
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_ClockConfig+0x198>)
 8001466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f973 	bl	8000754 <HAL_InitTick>
  
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40022000 	.word	0x40022000
 800147c:	40021000 	.word	0x40021000
 8001480:	00001388 	.word	0x00001388
 8001484:	fffff8ff 	.word	0xfffff8ff
 8001488:	080019dc 	.word	0x080019dc
 800148c:	20000000 	.word	0x20000000

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b08f      	sub	sp, #60	; 0x3c
 8001494:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001496:	2314      	movs	r3, #20
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800149c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800149e:	c313      	stmia	r3!, {r0, r1, r4}
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4a29      	ldr	r2, [pc, #164]	; (800154c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014aa:	c313      	stmia	r3!, {r0, r1, r4}
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b8:	2300      	movs	r3, #0
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d002      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0x4a>
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d003      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x50>
 80014d8:	e02d      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014de:	e02d      	b.n	800153c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	220f      	movs	r2, #15
 80014e6:	4013      	ands	r3, r2
 80014e8:	2214      	movs	r2, #20
 80014ea:	18ba      	adds	r2, r7, r2
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	220f      	movs	r2, #15
 80014f6:	4013      	ands	r3, r2
 80014f8:	1d3a      	adds	r2, r7, #4
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	4013      	ands	r3, r2
 8001506:	d009      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800150a:	4812      	ldr	r0, [pc, #72]	; (8001554 <HAL_RCC_GetSysClockFreq+0xc4>)
 800150c:	f7fe fdfc 	bl	8000108 <__udivsi3>
 8001510:	0003      	movs	r3, r0
 8001512:	001a      	movs	r2, r3
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	4353      	muls	r3, r2
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
 800151a:	e009      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800151c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151e:	000a      	movs	r2, r1
 8001520:	0152      	lsls	r2, r2, #5
 8001522:	1a52      	subs	r2, r2, r1
 8001524:	0193      	lsls	r3, r2, #6
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	185b      	adds	r3, r3, r1
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001534:	e002      	b.n	800153c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800153a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b00f      	add	sp, #60	; 0x3c
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	08001944 	.word	0x08001944
 800154c:	08001954 	.word	0x08001954
 8001550:	40021000 	.word	0x40021000
 8001554:	007a1200 	.word	0x007a1200

08001558 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e07c      	b.n	8001666 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	223d      	movs	r2, #61	; 0x3d
 8001570:	5c9b      	ldrb	r3, [r3, r2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	223c      	movs	r2, #60	; 0x3c
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff f83c 	bl	8000600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	223d      	movs	r2, #61	; 0x3d
 800158c:	2102      	movs	r1, #2
 800158e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4935      	ldr	r1, [pc, #212]	; (8001670 <HAL_TIM_Encoder_Init+0x118>)
 800159c:	400a      	ands	r2, r1
 800159e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3304      	adds	r3, #4
 80015a8:	0019      	movs	r1, r3
 80015aa:	0010      	movs	r0, r2
 80015ac:	f000 f8a0 	bl	80016f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <HAL_TIM_Encoder_Init+0x11c>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_TIM_Encoder_Init+0x120>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_TIM_Encoder_Init+0x124>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	4313      	orrs	r3, r2
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	011a      	lsls	r2, r3, #4
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	031b      	lsls	r3, r3, #12
 800161a:	4313      	orrs	r3, r2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2222      	movs	r2, #34	; 0x22
 8001626:	4393      	bics	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2288      	movs	r2, #136	; 0x88
 800162e:	4393      	bics	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4313      	orrs	r3, r2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	223d      	movs	r2, #61	; 0x3d
 8001660:	2101      	movs	r1, #1
 8001662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b006      	add	sp, #24
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	ffffbff8 	.word	0xffffbff8
 8001674:	fffffcfc 	.word	0xfffffcfc
 8001678:	fffff3f3 	.word	0xfffff3f3
 800167c:	ffff0f0f 	.word	0xffff0f0f

08001680 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_TIM_Encoder_Start+0x16>
 8001690:	2b04      	cmp	r3, #4
 8001692:	d008      	beq.n	80016a6 <HAL_TIM_Encoder_Start+0x26>
 8001694:	e00f      	b.n	80016b6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	2100      	movs	r1, #0
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 f89c 	bl	80017dc <TIM_CCxChannelCmd>
      break;
 80016a4:	e016      	b.n	80016d4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	2104      	movs	r1, #4
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 f894 	bl	80017dc <TIM_CCxChannelCmd>
      break;
 80016b4:	e00e      	b.n	80016d4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	2100      	movs	r1, #0
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 f88c 	bl	80017dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	2104      	movs	r1, #4
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 f885 	bl	80017dc <TIM_CCxChannelCmd>
      break;
 80016d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2101      	movs	r1, #1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <TIM_Base_SetConfig+0xd0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d003      	beq.n	8001710 <TIM_Base_SetConfig+0x20>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <TIM_Base_SetConfig+0xd4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d108      	bne.n	8001722 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2270      	movs	r2, #112	; 0x70
 8001714:	4393      	bics	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <TIM_Base_SetConfig+0xd0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <TIM_Base_SetConfig+0x62>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <TIM_Base_SetConfig+0xd4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00f      	beq.n	8001752 <TIM_Base_SetConfig+0x62>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <TIM_Base_SetConfig+0xd8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00b      	beq.n	8001752 <TIM_Base_SetConfig+0x62>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a23      	ldr	r2, [pc, #140]	; (80017cc <TIM_Base_SetConfig+0xdc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <TIM_Base_SetConfig+0x62>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <TIM_Base_SetConfig+0xe0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d003      	beq.n	8001752 <TIM_Base_SetConfig+0x62>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <TIM_Base_SetConfig+0xe4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d108      	bne.n	8001764 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <TIM_Base_SetConfig+0xe8>)
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	4393      	bics	r3, r2
 800176a:	001a      	movs	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	4313      	orrs	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <TIM_Base_SetConfig+0xd0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00b      	beq.n	80017aa <TIM_Base_SetConfig+0xba>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <TIM_Base_SetConfig+0xdc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <TIM_Base_SetConfig+0xba>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <TIM_Base_SetConfig+0xe0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d003      	beq.n	80017aa <TIM_Base_SetConfig+0xba>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <TIM_Base_SetConfig+0xe4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d103      	bne.n	80017b2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	615a      	str	r2, [r3, #20]
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40002000 	.word	0x40002000
 80017cc:	40014000 	.word	0x40014000
 80017d0:	40014400 	.word	0x40014400
 80017d4:	40014800 	.word	0x40014800
 80017d8:	fffffcff 	.word	0xfffffcff

080017dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	221f      	movs	r2, #31
 80017ec:	4013      	ands	r3, r2
 80017ee:	2201      	movs	r2, #1
 80017f0:	409a      	lsls	r2, r3
 80017f2:	0013      	movs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	43d2      	mvns	r2, r2
 80017fe:	401a      	ands	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	211f      	movs	r1, #31
 800180c:	400b      	ands	r3, r1
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4099      	lsls	r1, r3
 8001812:	000b      	movs	r3, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	621a      	str	r2, [r3, #32]
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b006      	add	sp, #24
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	223c      	movs	r2, #60	; 0x3c
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001838:	2302      	movs	r3, #2
 800183a:	e041      	b.n	80018c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	223c      	movs	r2, #60	; 0x3c
 8001840:	2101      	movs	r1, #1
 8001842:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	223d      	movs	r2, #61	; 0x3d
 8001848:	2102      	movs	r1, #2
 800184a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2270      	movs	r2, #112	; 0x70
 8001860:	4393      	bics	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d009      	beq.n	8001894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d10c      	bne.n	80018ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	4393      	bics	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	223d      	movs	r2, #61	; 0x3d
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	223c      	movs	r2, #60	; 0x3c
 80018ba:	2100      	movs	r1, #0
 80018bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40014000 	.word	0x40014000

080018d4 <__libc_init_array>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	2600      	movs	r6, #0
 80018d8:	4d0c      	ldr	r5, [pc, #48]	; (800190c <__libc_init_array+0x38>)
 80018da:	4c0d      	ldr	r4, [pc, #52]	; (8001910 <__libc_init_array+0x3c>)
 80018dc:	1b64      	subs	r4, r4, r5
 80018de:	10a4      	asrs	r4, r4, #2
 80018e0:	42a6      	cmp	r6, r4
 80018e2:	d109      	bne.n	80018f8 <__libc_init_array+0x24>
 80018e4:	2600      	movs	r6, #0
 80018e6:	f000 f821 	bl	800192c <_init>
 80018ea:	4d0a      	ldr	r5, [pc, #40]	; (8001914 <__libc_init_array+0x40>)
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <__libc_init_array+0x44>)
 80018ee:	1b64      	subs	r4, r4, r5
 80018f0:	10a4      	asrs	r4, r4, #2
 80018f2:	42a6      	cmp	r6, r4
 80018f4:	d105      	bne.n	8001902 <__libc_init_array+0x2e>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	00b3      	lsls	r3, r6, #2
 80018fa:	58eb      	ldr	r3, [r5, r3]
 80018fc:	4798      	blx	r3
 80018fe:	3601      	adds	r6, #1
 8001900:	e7ee      	b.n	80018e0 <__libc_init_array+0xc>
 8001902:	00b3      	lsls	r3, r6, #2
 8001904:	58eb      	ldr	r3, [r5, r3]
 8001906:	4798      	blx	r3
 8001908:	3601      	adds	r6, #1
 800190a:	e7f2      	b.n	80018f2 <__libc_init_array+0x1e>
 800190c:	080019ec 	.word	0x080019ec
 8001910:	080019ec 	.word	0x080019ec
 8001914:	080019ec 	.word	0x080019ec
 8001918:	080019f0 	.word	0x080019f0

0800191c <memset>:
 800191c:	0003      	movs	r3, r0
 800191e:	1812      	adds	r2, r2, r0
 8001920:	4293      	cmp	r3, r2
 8001922:	d100      	bne.n	8001926 <memset+0xa>
 8001924:	4770      	bx	lr
 8001926:	7019      	strb	r1, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	e7f9      	b.n	8001920 <memset+0x4>

0800192c <_init>:
 800192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001932:	bc08      	pop	{r3}
 8001934:	469e      	mov	lr, r3
 8001936:	4770      	bx	lr

08001938 <_fini>:
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193e:	bc08      	pop	{r3}
 8001940:	469e      	mov	lr, r3
 8001942:	4770      	bx	lr
