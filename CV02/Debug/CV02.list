
CV02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002fc  080002fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002fc  080002fc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002fc  080002fc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002fc  080002fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000308  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000308  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004b8  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000229  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00020710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00020780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000479c  00000000  00000000  000207c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000968  00000000  00000000  00024f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000180e5  00000000  00000000  000258cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003d9b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  0003da2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002e4 	.word	0x080002e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080002e4 	.word	0x080002e4

08000108 <main>:
#endif

uint32_t pole = 0b10101011101110111010101000000000;

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	// GPIO SETUP

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN; // enable CLK
 800010e:	4b27      	ldr	r3, [pc, #156]	; (80001ac <main+0xa4>)
 8000110:	695a      	ldr	r2, [r3, #20]
 8000112:	4b26      	ldr	r3, [pc, #152]	; (80001ac <main+0xa4>)
 8000114:	21a0      	movs	r1, #160	; 0xa0
 8000116:	0309      	lsls	r1, r1, #12
 8000118:	430a      	orrs	r2, r1
 800011a:	615a      	str	r2, [r3, #20]
	 GPIOA->MODER |= GPIO_MODER_MODER4_1; // LED1 = PA4, output
 800011c:	2390      	movs	r3, #144	; 0x90
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	681a      	ldr	r2, [r3, #0]
 8000122:	2390      	movs	r3, #144	; 0x90
 8000124:	05db      	lsls	r3, r3, #23
 8000126:	2180      	movs	r1, #128	; 0x80
 8000128:	0089      	lsls	r1, r1, #2
 800012a:	430a      	orrs	r2, r1
 800012c:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |= GPIO_MODER_MODER0_1; // LED2 = PB0, output
 800012e:	4b20      	ldr	r3, [pc, #128]	; (80001b0 <main+0xa8>)
 8000130:	681a      	ldr	r2, [r3, #0]
 8000132:	4b1f      	ldr	r3, [pc, #124]	; (80001b0 <main+0xa8>)
 8000134:	2102      	movs	r1, #2
 8000136:	430a      	orrs	r2, r1
 8000138:	601a      	str	r2, [r3, #0]
	 GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_0; // S2 = PC0, pullup
 800013a:	4b1e      	ldr	r3, [pc, #120]	; (80001b4 <main+0xac>)
 800013c:	68da      	ldr	r2, [r3, #12]
 800013e:	4b1d      	ldr	r3, [pc, #116]	; (80001b4 <main+0xac>)
 8000140:	2101      	movs	r1, #1
 8000142:	430a      	orrs	r2, r1
 8000144:	60da      	str	r2, [r3, #12]
	 GPIOC->PUPDR |= GPIO_PUPDR_PUPDR1_0; // S1 = PC1, pullup
 8000146:	4b1b      	ldr	r3, [pc, #108]	; (80001b4 <main+0xac>)
 8000148:	68da      	ldr	r2, [r3, #12]
 800014a:	4b1a      	ldr	r3, [pc, #104]	; (80001b4 <main+0xac>)
 800014c:	2104      	movs	r1, #4
 800014e:	430a      	orrs	r2, r1
 8000150:	60da      	str	r2, [r3, #12]


	while(1)
	{
		for(uint8_t i = 0; i<32; i++)
 8000152:	1dfb      	adds	r3, r7, #7
 8000154:	2200      	movs	r2, #0
 8000156:	701a      	strb	r2, [r3, #0]
 8000158:	e018      	b.n	800018c <main+0x84>
		{
			if(pole&0x10000000) GPIOA->BSRR = (1<<5); // set
 800015a:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <main+0xb0>)
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	2380      	movs	r3, #128	; 0x80
 8000160:	055b      	lsls	r3, r3, #21
 8000162:	4013      	ands	r3, r2
 8000164:	d004      	beq.n	8000170 <main+0x68>
 8000166:	2390      	movs	r3, #144	; 0x90
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	2220      	movs	r2, #32
 800016c:	619a      	str	r2, [r3, #24]
 800016e:	e003      	b.n	8000178 <main+0x70>
			else GPIOA->BRR = (1<<5); // reset
 8000170:	2390      	movs	r3, #144	; 0x90
 8000172:	05db      	lsls	r3, r3, #23
 8000174:	2220      	movs	r2, #32
 8000176:	629a      	str	r2, [r3, #40]	; 0x28
			pole = pole <<1;
 8000178:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <main+0xb0>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	005a      	lsls	r2, r3, #1
 800017e:	4b0e      	ldr	r3, [pc, #56]	; (80001b8 <main+0xb0>)
 8000180:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i<32; i++)
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781a      	ldrb	r2, [r3, #0]
 8000186:	1dfb      	adds	r3, r7, #7
 8000188:	3201      	adds	r2, #1
 800018a:	701a      	strb	r2, [r3, #0]
 800018c:	1dfb      	adds	r3, r7, #7
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b1f      	cmp	r3, #31
 8000192:	d9e2      	bls.n	800015a <main+0x52>
		}
		for (volatile uint32_t i = 0; i < 100000; i++); //wait
 8000194:	2300      	movs	r3, #0
 8000196:	603b      	str	r3, [r7, #0]
 8000198:	e002      	b.n	80001a0 <main+0x98>
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	603b      	str	r3, [r7, #0]
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	4a06      	ldr	r2, [pc, #24]	; (80001bc <main+0xb4>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d9f8      	bls.n	800019a <main+0x92>
		for(uint8_t i = 0; i<32; i++)
 80001a8:	e7d3      	b.n	8000152 <main+0x4a>
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	40021000 	.word	0x40021000
 80001b0:	48000400 	.word	0x48000400
 80001b4:	48000800 	.word	0x48000800
 80001b8:	20000000 	.word	0x20000000
 80001bc:	0001869f 	.word	0x0001869f

080001c0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001c4:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <SystemInit+0x70>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <SystemInit+0x70>)
 80001ca:	2101      	movs	r1, #1
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <SystemInit+0x70>)
 80001d2:	685a      	ldr	r2, [r3, #4]
 80001d4:	4b16      	ldr	r3, [pc, #88]	; (8000230 <SystemInit+0x70>)
 80001d6:	4917      	ldr	r1, [pc, #92]	; (8000234 <SystemInit+0x74>)
 80001d8:	400a      	ands	r2, r1
 80001da:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <SystemInit+0x70>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <SystemInit+0x70>)
 80001e2:	4915      	ldr	r1, [pc, #84]	; (8000238 <SystemInit+0x78>)
 80001e4:	400a      	ands	r2, r1
 80001e6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <SystemInit+0x70>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <SystemInit+0x70>)
 80001ee:	4913      	ldr	r1, [pc, #76]	; (800023c <SystemInit+0x7c>)
 80001f0:	400a      	ands	r2, r1
 80001f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <SystemInit+0x70>)
 80001f6:	685a      	ldr	r2, [r3, #4]
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <SystemInit+0x70>)
 80001fa:	4911      	ldr	r1, [pc, #68]	; (8000240 <SystemInit+0x80>)
 80001fc:	400a      	ands	r2, r1
 80001fe:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <SystemInit+0x70>)
 8000202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <SystemInit+0x70>)
 8000206:	210f      	movs	r1, #15
 8000208:	438a      	bics	r2, r1
 800020a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <SystemInit+0x70>)
 800020e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <SystemInit+0x70>)
 8000212:	490c      	ldr	r1, [pc, #48]	; (8000244 <SystemInit+0x84>)
 8000214:	400a      	ands	r2, r1
 8000216:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <SystemInit+0x70>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <SystemInit+0x70>)
 800021e:	2101      	movs	r1, #1
 8000220:	438a      	bics	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <SystemInit+0x70>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]

}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000
 8000234:	08ffb80c 	.word	0x08ffb80c
 8000238:	fef6ffff 	.word	0xfef6ffff
 800023c:	fffbffff 	.word	0xfffbffff
 8000240:	ffc0ffff 	.word	0xffc0ffff
 8000244:	fffffeec 	.word	0xfffffeec

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490e      	ldr	r1, [pc, #56]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0b      	ldr	r4, [pc, #44]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000272:	f7ff ffa5 	bl	80001c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 f811 	bl	800029c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f7ff ff45 	bl	8000108 <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800028c:	08000304 	.word	0x08000304
  ldr r2, =_sbss
 8000290:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000294:	20000020 	.word	0x20000020

08000298 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC_IRQHandler>
	...

0800029c <__libc_init_array>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2600      	movs	r6, #0
 80002a0:	4d0c      	ldr	r5, [pc, #48]	; (80002d4 <__libc_init_array+0x38>)
 80002a2:	4c0d      	ldr	r4, [pc, #52]	; (80002d8 <__libc_init_array+0x3c>)
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	42a6      	cmp	r6, r4
 80002aa:	d109      	bne.n	80002c0 <__libc_init_array+0x24>
 80002ac:	2600      	movs	r6, #0
 80002ae:	f000 f819 	bl	80002e4 <_init>
 80002b2:	4d0a      	ldr	r5, [pc, #40]	; (80002dc <__libc_init_array+0x40>)
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <__libc_init_array+0x44>)
 80002b6:	1b64      	subs	r4, r4, r5
 80002b8:	10a4      	asrs	r4, r4, #2
 80002ba:	42a6      	cmp	r6, r4
 80002bc:	d105      	bne.n	80002ca <__libc_init_array+0x2e>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	00b3      	lsls	r3, r6, #2
 80002c2:	58eb      	ldr	r3, [r5, r3]
 80002c4:	4798      	blx	r3
 80002c6:	3601      	adds	r6, #1
 80002c8:	e7ee      	b.n	80002a8 <__libc_init_array+0xc>
 80002ca:	00b3      	lsls	r3, r6, #2
 80002cc:	58eb      	ldr	r3, [r5, r3]
 80002ce:	4798      	blx	r3
 80002d0:	3601      	adds	r6, #1
 80002d2:	e7f2      	b.n	80002ba <__libc_init_array+0x1e>
 80002d4:	080002fc 	.word	0x080002fc
 80002d8:	080002fc 	.word	0x080002fc
 80002dc:	080002fc 	.word	0x080002fc
 80002e0:	08000300 	.word	0x08000300

080002e4 <_init>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr

080002f0 <_fini>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr
