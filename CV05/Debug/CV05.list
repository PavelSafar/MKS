
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eac  08004eac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004eac  08004eac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eac  08004eac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001dc  08005090  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08005090  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a893  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca5  00000000  00000000  0002aa97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002c740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002d130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d64d  00000000  00000000  0002da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008da8  00000000  00000000  0003b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046f20  00000000  00000000  00043e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008ada5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb4  00000000  00000000  0008ae20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bb8 	.word	0x08004bb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08004bb8 	.word	0x08004bb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char const *buf, int n)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	b29a      	uxth	r2, r3
 8000230:	2301      	movs	r3, #1
 8000232:	425b      	negs	r3, r3
 8000234:	68b9      	ldr	r1, [r7, #8]
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <_write+0x28>)
 8000238:	f002 fe6c 	bl	8002f14 <HAL_UART_Transmit>
 return n;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	200003d8 	.word	0x200003d8

0800024c <uart_process_command>:

void uart_process_command(uint8_t* cmd)
{
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b08e      	sub	sp, #56	; 0x38
 8000250:	af04      	add	r7, sp, #16
 8000252:	6078      	str	r0, [r7, #4]
	char *token;
	token = strtok(cmd, " ");
 8000254:	4acd      	ldr	r2, [pc, #820]	; (800058c <uart_process_command+0x340>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	0011      	movs	r1, r2
 800025a:	0018      	movs	r0, r3
 800025c:	f003 fc54 	bl	8003b08 <strtok>
 8000260:	0003      	movs	r3, r0
 8000262:	623b      	str	r3, [r7, #32]
	if (strcasecmp(token, "HELLO") == 0)//test communication
 8000264:	4aca      	ldr	r2, [pc, #808]	; (8000590 <uart_process_command+0x344>)
 8000266:	6a3b      	ldr	r3, [r7, #32]
 8000268:	0011      	movs	r1, r2
 800026a:	0018      	movs	r0, r3
 800026c:	f003 fc2e 	bl	8003acc <strcasecmp>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d104      	bne.n	800027e <uart_process_command+0x32>
	{
	 printf("Komunikace OK\n");
 8000274:	4bc7      	ldr	r3, [pc, #796]	; (8000594 <uart_process_command+0x348>)
 8000276:	0018      	movs	r0, r3
 8000278:	f003 fc1e 	bl	8003ab8 <puts>
				 printf("Na adresu 0x%04X ", addr);
				 printf("zapsana hodnota 0x%02X.\n", value2);//Confirm correct value
			 }
			 else  printf("Chyba zapisu, zapsana hodnota je 0x%02X\n ", value2);//report wrong value
		}
}
 800027c:	e181      	b.n	8000582 <uart_process_command+0x336>
	else if (strcasecmp(token, "LED1") == 0)// Set/reset LED1
 800027e:	4ac6      	ldr	r2, [pc, #792]	; (8000598 <uart_process_command+0x34c>)
 8000280:	6a3b      	ldr	r3, [r7, #32]
 8000282:	0011      	movs	r1, r2
 8000284:	0018      	movs	r0, r3
 8000286:	f003 fc21 	bl	8003acc <strcasecmp>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d128      	bne.n	80002e0 <uart_process_command+0x94>
		token = strtok(NULL, " ");
 800028e:	4bbf      	ldr	r3, [pc, #764]	; (800058c <uart_process_command+0x340>)
 8000290:	0019      	movs	r1, r3
 8000292:	2000      	movs	r0, #0
 8000294:	f003 fc38 	bl	8003b08 <strtok>
 8000298:	0003      	movs	r3, r0
 800029a:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)//LED1 ON
 800029c:	4abf      	ldr	r2, [pc, #764]	; (800059c <uart_process_command+0x350>)
 800029e:	6a3b      	ldr	r3, [r7, #32]
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f003 fc12 	bl	8003acc <strcasecmp>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d106      	bne.n	80002ba <uart_process_command+0x6e>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_SET);
 80002ac:	4bbc      	ldr	r3, [pc, #752]	; (80005a0 <uart_process_command+0x354>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	2101      	movs	r1, #1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f999 	bl	80015ea <HAL_GPIO_WritePin>
 80002b8:	e00d      	b.n	80002d6 <uart_process_command+0x8a>
		else if (strcasecmp(token, "OFF")==0)//LED1 OFF
 80002ba:	4aba      	ldr	r2, [pc, #744]	; (80005a4 <uart_process_command+0x358>)
 80002bc:	6a3b      	ldr	r3, [r7, #32]
 80002be:	0011      	movs	r1, r2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f003 fc03 	bl	8003acc <strcasecmp>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d105      	bne.n	80002d6 <uart_process_command+0x8a>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_RESET);
 80002ca:	4bb5      	ldr	r3, [pc, #724]	; (80005a0 <uart_process_command+0x354>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	2101      	movs	r1, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 f98a 	bl	80015ea <HAL_GPIO_WritePin>
		printf("OK\n");
 80002d6:	4bb4      	ldr	r3, [pc, #720]	; (80005a8 <uart_process_command+0x35c>)
 80002d8:	0018      	movs	r0, r3
 80002da:	f003 fbed 	bl	8003ab8 <puts>
}
 80002de:	e150      	b.n	8000582 <uart_process_command+0x336>
	else if (strcasecmp(token, "LED2") == 0)// Set/reset LED2
 80002e0:	4ab2      	ldr	r2, [pc, #712]	; (80005ac <uart_process_command+0x360>)
 80002e2:	6a3b      	ldr	r3, [r7, #32]
 80002e4:	0011      	movs	r1, r2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f003 fbf0 	bl	8003acc <strcasecmp>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d12a      	bne.n	8000346 <uart_process_command+0xfa>
		 token = strtok(NULL, " ");
 80002f0:	4ba6      	ldr	r3, [pc, #664]	; (800058c <uart_process_command+0x340>)
 80002f2:	0019      	movs	r1, r3
 80002f4:	2000      	movs	r0, #0
 80002f6:	f003 fc07 	bl	8003b08 <strtok>
 80002fa:	0003      	movs	r3, r0
 80002fc:	623b      	str	r3, [r7, #32]
		 if (strcasecmp(token, "ON") == 0)//LED1 ON
 80002fe:	4aa7      	ldr	r2, [pc, #668]	; (800059c <uart_process_command+0x350>)
 8000300:	6a3b      	ldr	r3, [r7, #32]
 8000302:	0011      	movs	r1, r2
 8000304:	0018      	movs	r0, r3
 8000306:	f003 fbe1 	bl	8003acc <strcasecmp>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d107      	bne.n	800031e <uart_process_command+0xd2>
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 800030e:	2390      	movs	r3, #144	; 0x90
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	0018      	movs	r0, r3
 8000318:	f001 f967 	bl	80015ea <HAL_GPIO_WritePin>
 800031c:	e00e      	b.n	800033c <uart_process_command+0xf0>
		 else if (strcasecmp(token, "OFF")==0)//LED1 OFF
 800031e:	4aa1      	ldr	r2, [pc, #644]	; (80005a4 <uart_process_command+0x358>)
 8000320:	6a3b      	ldr	r3, [r7, #32]
 8000322:	0011      	movs	r1, r2
 8000324:	0018      	movs	r0, r3
 8000326:	f003 fbd1 	bl	8003acc <strcasecmp>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d106      	bne.n	800033c <uart_process_command+0xf0>
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 800032e:	2390      	movs	r3, #144	; 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	2200      	movs	r2, #0
 8000334:	2110      	movs	r1, #16
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f957 	bl	80015ea <HAL_GPIO_WritePin>
		 printf("OK\n");
 800033c:	4b9a      	ldr	r3, [pc, #616]	; (80005a8 <uart_process_command+0x35c>)
 800033e:	0018      	movs	r0, r3
 8000340:	f003 fbba 	bl	8003ab8 <puts>
}
 8000344:	e11d      	b.n	8000582 <uart_process_command+0x336>
	else if (strcasecmp(token, "STATUS") == 0)// Return LEDs state
 8000346:	4a9a      	ldr	r2, [pc, #616]	; (80005b0 <uart_process_command+0x364>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	0011      	movs	r1, r2
 800034c:	0018      	movs	r0, r3
 800034e:	f003 fbbd 	bl	8003acc <strcasecmp>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d121      	bne.n	800039a <uart_process_command+0x14e>
		if (HAL_GPIO_ReadPin(LED0_GPIO_Port,LED0_Pin))//LED1 ON
 8000356:	4b92      	ldr	r3, [pc, #584]	; (80005a0 <uart_process_command+0x354>)
 8000358:	2101      	movs	r1, #1
 800035a:	0018      	movs	r0, r3
 800035c:	f001 f928 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d004      	beq.n	800036e <uart_process_command+0x122>
			 printf("LED1 ON\n");
 8000364:	4b93      	ldr	r3, [pc, #588]	; (80005b4 <uart_process_command+0x368>)
 8000366:	0018      	movs	r0, r3
 8000368:	f003 fba6 	bl	8003ab8 <puts>
 800036c:	e003      	b.n	8000376 <uart_process_command+0x12a>
			 printf("LED1 OFF\n");
 800036e:	4b92      	ldr	r3, [pc, #584]	; (80005b8 <uart_process_command+0x36c>)
 8000370:	0018      	movs	r0, r3
 8000372:	f003 fba1 	bl	8003ab8 <puts>
		 if (HAL_GPIO_ReadPin(LED1_GPIO_Port,LED1_Pin))//LED1 ON
 8000376:	2390      	movs	r3, #144	; 0x90
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	2110      	movs	r1, #16
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f917 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d004      	beq.n	8000390 <uart_process_command+0x144>
		 	 printf("LED2 ON\n");
 8000386:	4b8d      	ldr	r3, [pc, #564]	; (80005bc <uart_process_command+0x370>)
 8000388:	0018      	movs	r0, r3
 800038a:	f003 fb95 	bl	8003ab8 <puts>
}
 800038e:	e0f8      	b.n	8000582 <uart_process_command+0x336>
		 	 printf("LED2 OFF\n");
 8000390:	4b8b      	ldr	r3, [pc, #556]	; (80005c0 <uart_process_command+0x374>)
 8000392:	0018      	movs	r0, r3
 8000394:	f003 fb90 	bl	8003ab8 <puts>
}
 8000398:	e0f3      	b.n	8000582 <uart_process_command+0x336>
	else if (strcasecmp(token, "DUMP") == 0)// dump EEPROM
 800039a:	4a8a      	ldr	r2, [pc, #552]	; (80005c4 <uart_process_command+0x378>)
 800039c:	6a3b      	ldr	r3, [r7, #32]
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f003 fb93 	bl	8003acc <strcasecmp>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d13c      	bne.n	8000424 <uart_process_command+0x1d8>
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, I2C_MEMADD_SIZE_16BIT, data, DUMP_LENGHT, 1000);
 80003aa:	4887      	ldr	r0, [pc, #540]	; (80005c8 <uart_process_command+0x37c>)
 80003ac:	23fa      	movs	r3, #250	; 0xfa
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	9302      	str	r3, [sp, #8]
 80003b2:	2310      	movs	r3, #16
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	230c      	movs	r3, #12
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2302      	movs	r3, #2
 80003be:	2200      	movs	r2, #0
 80003c0:	21a0      	movs	r1, #160	; 0xa0
 80003c2:	f001 faf3 	bl	80019ac <HAL_I2C_Mem_Read>
		for(uint16_t i = 0; i<DUMP_LENGHT;)
 80003c6:	2326      	movs	r3, #38	; 0x26
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	2200      	movs	r2, #0
 80003cc:	801a      	strh	r2, [r3, #0]
 80003ce:	e023      	b.n	8000418 <uart_process_command+0x1cc>
			for(uint8_t j = 0; j<8;j++)
 80003d0:	2325      	movs	r3, #37	; 0x25
 80003d2:	18fb      	adds	r3, r7, r3
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e016      	b.n	8000408 <uart_process_command+0x1bc>
				printf("%02X ", data[i]);
 80003da:	2426      	movs	r4, #38	; 0x26
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	220c      	movs	r2, #12
 80003e2:	18ba      	adds	r2, r7, r2
 80003e4:	5cd3      	ldrb	r3, [r2, r3]
 80003e6:	001a      	movs	r2, r3
 80003e8:	4b78      	ldr	r3, [pc, #480]	; (80005cc <uart_process_command+0x380>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f003 fad5 	bl	800399c <iprintf>
				i++;
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	881a      	ldrh	r2, [r3, #0]
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	3201      	adds	r2, #1
 80003fa:	801a      	strh	r2, [r3, #0]
			for(uint8_t j = 0; j<8;j++)
 80003fc:	2125      	movs	r1, #37	; 0x25
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	781a      	ldrb	r2, [r3, #0]
 8000402:	187b      	adds	r3, r7, r1
 8000404:	3201      	adds	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
 8000408:	2325      	movs	r3, #37	; 0x25
 800040a:	18fb      	adds	r3, r7, r3
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b07      	cmp	r3, #7
 8000410:	d9e3      	bls.n	80003da <uart_process_command+0x18e>
			printf("\n");
 8000412:	200a      	movs	r0, #10
 8000414:	f003 fadc 	bl	80039d0 <putchar>
		for(uint16_t i = 0; i<DUMP_LENGHT;)
 8000418:	2326      	movs	r3, #38	; 0x26
 800041a:	18fb      	adds	r3, r7, r3
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	2b0f      	cmp	r3, #15
 8000420:	d9d6      	bls.n	80003d0 <uart_process_command+0x184>
}
 8000422:	e0ae      	b.n	8000582 <uart_process_command+0x336>
	else if (strcasecmp(token, "READ") == 0)//Read value from EEPROM
 8000424:	4a6a      	ldr	r2, [pc, #424]	; (80005d0 <uart_process_command+0x384>)
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f003 fb4e 	bl	8003acc <strcasecmp>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d130      	bne.n	8000496 <uart_process_command+0x24a>
		 token = strtok(NULL, " ");
 8000434:	4b55      	ldr	r3, [pc, #340]	; (800058c <uart_process_command+0x340>)
 8000436:	0019      	movs	r1, r3
 8000438:	2000      	movs	r0, #0
 800043a:	f003 fb65 	bl	8003b08 <strtok>
 800043e:	0003      	movs	r3, r0
 8000440:	623b      	str	r3, [r7, #32]
		 uint8_t value = 0;
 8000442:	240b      	movs	r4, #11
 8000444:	193b      	adds	r3, r7, r4
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
		 uint16_t addr = atoi(token);
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	0018      	movs	r0, r3
 800044e:	f003 fa6d 	bl	800392c <atoi>
 8000452:	0002      	movs	r2, r0
 8000454:	251c      	movs	r5, #28
 8000456:	197b      	adds	r3, r7, r5
 8000458:	801a      	strh	r2, [r3, #0]
		 HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 800045a:	197b      	adds	r3, r7, r5
 800045c:	881a      	ldrh	r2, [r3, #0]
 800045e:	485a      	ldr	r0, [pc, #360]	; (80005c8 <uart_process_command+0x37c>)
 8000460:	23fa      	movs	r3, #250	; 0xfa
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	9302      	str	r3, [sp, #8]
 8000466:	2301      	movs	r3, #1
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	193b      	adds	r3, r7, r4
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2302      	movs	r3, #2
 8000470:	21a0      	movs	r1, #160	; 0xa0
 8000472:	f001 fa9b 	bl	80019ac <HAL_I2C_Mem_Read>
		 printf("Adresa 0x%04X ", addr);
 8000476:	197b      	adds	r3, r7, r5
 8000478:	881a      	ldrh	r2, [r3, #0]
 800047a:	4b56      	ldr	r3, [pc, #344]	; (80005d4 <uart_process_command+0x388>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f003 fa8c 	bl	800399c <iprintf>
		 printf(" = 0x%0Xx\n ", value);
 8000484:	193b      	adds	r3, r7, r4
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	001a      	movs	r2, r3
 800048a:	4b53      	ldr	r3, [pc, #332]	; (80005d8 <uart_process_command+0x38c>)
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f003 fa84 	bl	800399c <iprintf>
}
 8000494:	e075      	b.n	8000582 <uart_process_command+0x336>
	else if (strcasecmp(token, "WRITE") == 0)
 8000496:	4a51      	ldr	r2, [pc, #324]	; (80005dc <uart_process_command+0x390>)
 8000498:	6a3b      	ldr	r3, [r7, #32]
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f003 fb15 	bl	8003acc <strcasecmp>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d16d      	bne.n	8000582 <uart_process_command+0x336>
			 token = strtok(NULL, " ");
 80004a6:	4b39      	ldr	r3, [pc, #228]	; (800058c <uart_process_command+0x340>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	2000      	movs	r0, #0
 80004ac:	f003 fb2c 	bl	8003b08 <strtok>
 80004b0:	0003      	movs	r3, r0
 80004b2:	623b      	str	r3, [r7, #32]
			 uint16_t addr = atoi(token);
 80004b4:	6a3b      	ldr	r3, [r7, #32]
 80004b6:	0018      	movs	r0, r3
 80004b8:	f003 fa38 	bl	800392c <atoi>
 80004bc:	0002      	movs	r2, r0
 80004be:	241e      	movs	r4, #30
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	801a      	strh	r2, [r3, #0]
			 token = strtok(NULL, " ");
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <uart_process_command+0x340>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	2000      	movs	r0, #0
 80004ca:	f003 fb1d 	bl	8003b08 <strtok>
 80004ce:	0003      	movs	r3, r0
 80004d0:	623b      	str	r3, [r7, #32]
			 uint8_t value = atoi(token);
 80004d2:	6a3b      	ldr	r3, [r7, #32]
 80004d4:	0018      	movs	r0, r3
 80004d6:	f003 fa29 	bl	800392c <atoi>
 80004da:	0003      	movs	r3, r0
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	210a      	movs	r1, #10
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	701a      	strb	r2, [r3, #0]
			 HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	4837      	ldr	r0, [pc, #220]	; (80005c8 <uart_process_command+0x37c>)
 80004ea:	23fa      	movs	r3, #250	; 0xfa
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	9302      	str	r3, [sp, #8]
 80004f0:	2301      	movs	r3, #1
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2302      	movs	r3, #2
 80004fa:	21a0      	movs	r1, #160	; 0xa0
 80004fc:	f001 f928 	bl	8001750 <HAL_I2C_Mem_Write>
			 while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT);
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	23fa      	movs	r3, #250	; 0xfa
 8000504:	0099      	lsls	r1, r3, #2
 8000506:	2396      	movs	r3, #150	; 0x96
 8000508:	005a      	lsls	r2, r3, #1
 800050a:	482f      	ldr	r0, [pc, #188]	; (80005c8 <uart_process_command+0x37c>)
 800050c:	000b      	movs	r3, r1
 800050e:	21a0      	movs	r1, #160	; 0xa0
 8000510:	f001 fb80 	bl	8001c14 <HAL_I2C_IsDeviceReady>
 8000514:	0003      	movs	r3, r0
 8000516:	2b03      	cmp	r3, #3
 8000518:	d0f3      	beq.n	8000502 <uart_process_command+0x2b6>
			 HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr+1, I2C_MEMADD_SIZE_16BIT, &value2, 1, 1000); //check written data
 800051a:	231e      	movs	r3, #30
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	b29a      	uxth	r2, r3
 8000524:	4828      	ldr	r0, [pc, #160]	; (80005c8 <uart_process_command+0x37c>)
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	2301      	movs	r3, #1
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	2409      	movs	r4, #9
 8000532:	193b      	adds	r3, r7, r4
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2302      	movs	r3, #2
 8000538:	21a0      	movs	r1, #160	; 0xa0
 800053a:	f001 fa37 	bl	80019ac <HAL_I2C_Mem_Read>
			 if(value==value2)
 800053e:	230a      	movs	r3, #10
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	193b      	adds	r3, r7, r4
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	d111      	bne.n	8000570 <uart_process_command+0x324>
				 printf("Na adresu 0x%04X ", addr);
 800054c:	231e      	movs	r3, #30
 800054e:	18fb      	adds	r3, r7, r3
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <uart_process_command+0x394>)
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f003 fa20 	bl	800399c <iprintf>
				 printf("zapsana hodnota 0x%02X.\n", value2);//Confirm correct value
 800055c:	2309      	movs	r3, #9
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	001a      	movs	r2, r3
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <uart_process_command+0x398>)
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f003 fa17 	bl	800399c <iprintf>
}
 800056e:	e008      	b.n	8000582 <uart_process_command+0x336>
			 else  printf("Chyba zapisu, zapsana hodnota je 0x%02X\n ", value2);//report wrong value
 8000570:	2309      	movs	r3, #9
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	001a      	movs	r2, r3
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <uart_process_command+0x39c>)
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f003 fa0d 	bl	800399c <iprintf>
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b00a      	add	sp, #40	; 0x28
 8000588:	bdb0      	pop	{r4, r5, r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	08004bd0 	.word	0x08004bd0
 8000590:	08004bd4 	.word	0x08004bd4
 8000594:	08004bdc 	.word	0x08004bdc
 8000598:	08004bec 	.word	0x08004bec
 800059c:	08004bf4 	.word	0x08004bf4
 80005a0:	48000400 	.word	0x48000400
 80005a4:	08004bf8 	.word	0x08004bf8
 80005a8:	08004bfc 	.word	0x08004bfc
 80005ac:	08004c00 	.word	0x08004c00
 80005b0:	08004c08 	.word	0x08004c08
 80005b4:	08004c10 	.word	0x08004c10
 80005b8:	08004c18 	.word	0x08004c18
 80005bc:	08004c24 	.word	0x08004c24
 80005c0:	08004c2c 	.word	0x08004c2c
 80005c4:	08004c38 	.word	0x08004c38
 80005c8:	2000038c 	.word	0x2000038c
 80005cc:	08004c40 	.word	0x08004c40
 80005d0:	08004c48 	.word	0x08004c48
 80005d4:	08004c50 	.word	0x08004c50
 80005d8:	08004c60 	.word	0x08004c60
 80005dc:	08004c6c 	.word	0x08004c6c
 80005e0:	08004c74 	.word	0x08004c74
 80005e4:	08004c88 	.word	0x08004c88
 80005e8:	08004ca4 	.word	0x08004ca4

080005ec <uart_byte_available>:



#define CMD_BUFFER_LEN 255
static void uart_byte_available(uint8_t c)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	701a      	strb	r2, [r3, #0]
 static uint16_t cnt;
 static char data[CMD_BUFFER_LEN];
 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <uart_byte_available+0x74>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2bfe      	cmp	r3, #254	; 0xfe
 80005fe:	d812      	bhi.n	8000626 <uart_byte_available+0x3a>
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b1f      	cmp	r3, #31
 8000606:	d90e      	bls.n	8000626 <uart_byte_available+0x3a>
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b7e      	cmp	r3, #126	; 0x7e
 800060e:	d80a      	bhi.n	8000626 <uart_byte_available+0x3a>
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <uart_byte_available+0x74>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	b291      	uxth	r1, r2
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <uart_byte_available+0x74>)
 800061a:	8011      	strh	r1, [r2, #0]
 800061c:	0019      	movs	r1, r3
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <uart_byte_available+0x78>)
 8000620:	1dfa      	adds	r2, r7, #7
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	545a      	strb	r2, [r3, r1]
 if ((c == '\n' || c == '\r') && cnt > 0)
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b0a      	cmp	r3, #10
 800062c:	d003      	beq.n	8000636 <uart_byte_available+0x4a>
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b0d      	cmp	r3, #13
 8000634:	d110      	bne.n	8000658 <uart_byte_available+0x6c>
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <uart_byte_available+0x74>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00c      	beq.n	8000658 <uart_byte_available+0x6c>
 {
	 data[cnt] = '\0';
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <uart_byte_available+0x74>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	001a      	movs	r2, r3
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <uart_byte_available+0x78>)
 8000646:	2100      	movs	r1, #0
 8000648:	5499      	strb	r1, [r3, r2]
	 uart_process_command(data);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <uart_byte_available+0x78>)
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fdfd 	bl	800024c <uart_process_command>
	 cnt = 0;
 8000652:	4b03      	ldr	r3, [pc, #12]	; (8000660 <uart_byte_available+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	801a      	strh	r2, [r3, #0]
 }
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000023a 	.word	0x2000023a
 8000664:	2000023c 	.word	0x2000023c

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 fb55 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f83d 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f92b 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800067a:	f000 f90b 	bl	8000894 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800067e:	f000 f8d9 	bl	8000834 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000682:	f000 f897 	bl	80007b4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000686:	4916      	ldr	r1, [pc, #88]	; (80006e0 <main+0x78>)
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <main+0x7c>)
 800068a:	2240      	movs	r2, #64	; 0x40
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fce9 	bl	8003064 <HAL_UART_Receive_DMA>





	  while (uart_rx_read_ptr != uart_rx_write_ptr) //process incoming data
 8000692:	e019      	b.n	80006c8 <main+0x60>
	  {
	   uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <main+0x80>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	0019      	movs	r1, r3
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <main+0x78>)
 80006a0:	5c52      	ldrb	r2, [r2, r1]
 80006a2:	701a      	strb	r2, [r3, #0]
	   if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <main+0x80>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <main+0x80>)
 80006b0:	1c19      	adds	r1, r3, #0
 80006b2:	8011      	strh	r1, [r2, #0]
 80006b4:	2b3f      	cmp	r3, #63	; 0x3f
 80006b6:	d902      	bls.n	80006be <main+0x56>
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <main+0x80>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	801a      	strh	r2, [r3, #0]
	   uart_byte_available(b); // process every received byte with the RX state machine
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff ff92 	bl	80005ec <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) //process incoming data
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <main+0x80>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	0019      	movs	r1, r3
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <main+0x84>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	2240      	movs	r2, #64	; 0x40
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	4299      	cmp	r1, r3
 80006dc:	d1da      	bne.n	8000694 <main+0x2c>
 80006de:	e7f3      	b.n	80006c8 <main+0x60>
 80006e0:	200001f8 	.word	0x200001f8
 80006e4:	200003d8 	.word	0x200003d8
 80006e8:	20000238 	.word	0x20000238
 80006ec:	20000348 	.word	0x20000348

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b095      	sub	sp, #84	; 0x54
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	2420      	movs	r4, #32
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	2330      	movs	r3, #48	; 0x30
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f003 f943 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	2310      	movs	r3, #16
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2310      	movs	r3, #16
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 f93b 	bl	800398c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	2310      	movs	r3, #16
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 f934 	bl	800398c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	0021      	movs	r1, r4
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2201      	movs	r2, #1
 8000730:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2210      	movs	r2, #16
 8000736:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2202      	movs	r2, #2
 800073c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	22a0      	movs	r2, #160	; 0xa0
 8000748:	0392      	lsls	r2, r2, #14
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	187b      	adds	r3, r7, r1
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fe4d 	bl	80023f4 <HAL_RCC_OscConfig>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800075e:	f000 f919 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	2110      	movs	r1, #16
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2207      	movs	r2, #7
 8000768:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2101      	movs	r1, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f953 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078a:	f000 f903 	bl	8000994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800078e:	003b      	movs	r3, r7
 8000790:	2220      	movs	r2, #32
 8000792:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079a:	003b      	movs	r3, r7
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fa97 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007a6:	f000 f8f5 	bl	8000994 <Error_Handler>
  }
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b015      	add	sp, #84	; 0x54
 80007b0:	bd90      	pop	{r4, r7, pc}
	...

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C1_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C1_Init+0x74>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 ff17 	bl	8001624 <HAL_I2C_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 f8cb 	bl	8000994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C1_Init+0x74>)
 8000800:	2100      	movs	r1, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fd5e 	bl	80022c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f8c2 	bl	8000994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_I2C1_Init+0x74>)
 8000812:	2100      	movs	r1, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fda1 	bl	800235c <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f8b9 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000038c 	.word	0x2000038c
 800082c:	40005400 	.word	0x40005400
 8000830:	0000020b 	.word	0x0000020b

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	2296      	movs	r2, #150	; 0x96
 8000842:	0212      	lsls	r2, r2, #8
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	0018      	movs	r0, r3
 800087a:	f002 faf7 	bl	8002e6c <HAL_UART_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f887 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200003d8 	.word	0x200003d8
 8000890:	40004400 	.word	0x40004400

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_DMA_Init+0x38>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_DMA_Init+0x38>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_DMA_Init+0x38>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	200b      	movs	r0, #11
 80008b8:	f000 fb40 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80008bc:	200b      	movs	r0, #11
 80008be:	f000 fb52 	bl	8000f66 <HAL_NVIC_EnableIRQ>

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	240c      	movs	r4, #12
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f003 f853 	bl	800398c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_GPIO_Init+0xbc>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_GPIO_Init+0xbc>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0289      	lsls	r1, r1, #10
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <MX_GPIO_Init+0xbc>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	029b      	lsls	r3, r3, #10
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_GPIO_Init+0xbc>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_GPIO_Init+0xbc>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	02c9      	lsls	r1, r1, #11
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_GPIO_Init+0xbc>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	02db      	lsls	r3, r3, #11
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800091e:	2390      	movs	r3, #144	; 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2200      	movs	r2, #0
 8000924:	2110      	movs	r1, #16
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fe5f 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_GPIO_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fe59 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2210      	movs	r2, #16
 800093c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000950:	193a      	adds	r2, r7, r4
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fcb9 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800095e:	0021      	movs	r1, r4
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2201      	movs	r2, #1
 8000970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000978:	187b      	adds	r3, r7, r1
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <MX_GPIO_Init+0xc0>)
 800097c:	0019      	movs	r1, r3
 800097e:	0010      	movs	r0, r2
 8000980:	f000 fca6 	bl	80012d0 <HAL_GPIO_Init>

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b009      	add	sp, #36	; 0x24
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x44>)
 80009a8:	699a      	ldr	r2, [r3, #24]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_MspInit+0x44>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	619a      	str	r2, [r3, #24]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x44>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	2201      	movs	r2, #1
 80009b8:	4013      	ands	r3, r2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x44>)
 80009c0:	69da      	ldr	r2, [r3, #28]
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_MspInit+0x44>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0549      	lsls	r1, r1, #21
 80009c8:	430a      	orrs	r2, r1
 80009ca:	61da      	str	r2, [r3, #28]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_MspInit+0x44>)
 80009ce:	69da      	ldr	r2, [r3, #28]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	055b      	lsls	r3, r3, #21
 80009d4:	4013      	ands	r3, r2
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	2314      	movs	r3, #20
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f002 ffc6 	bl	800398c <memset>
  if(hi2c->Instance==I2C1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <HAL_I2C_MspInit+0x90>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d132      	bne.n	8000a70 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	02c9      	lsls	r1, r1, #11
 8000a14:	430a      	orrs	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	02db      	lsls	r3, r3, #11
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a26:	2114      	movs	r1, #20
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	22c0      	movs	r2, #192	; 0xc0
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2212      	movs	r2, #18
 8000a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_I2C_MspInit+0x98>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 fc3e 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a56:	69da      	ldr	r2, [r3, #28]
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	0389      	lsls	r1, r1, #14
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	61da      	str	r2, [r3, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a64:	69da      	ldr	r2, [r3, #28]
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	039b      	lsls	r3, r3, #14
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b00a      	add	sp, #40	; 0x28
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	0018      	movs	r0, r3
 8000a92:	2314      	movs	r3, #20
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f002 ff78 	bl	800398c <memset>
  if(huart->Instance==USART2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <HAL_UART_MspInit+0xdc>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d158      	bne.n	8000b58 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <HAL_UART_MspInit+0xe0>)
 8000aa8:	69da      	ldr	r2, [r3, #28]
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <HAL_UART_MspInit+0xe0>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0289      	lsls	r1, r1, #10
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	61da      	str	r2, [r3, #28]
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <HAL_UART_MspInit+0xe0>)
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <HAL_UART_MspInit+0xe0>)
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_UART_MspInit+0xe0>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0289      	lsls	r1, r1, #10
 8000acc:	430a      	orrs	r2, r1
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_UART_MspInit+0xe0>)
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ade:	2114      	movs	r1, #20
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2202      	movs	r2, #2
 8000aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2201      	movs	r2, #1
 8000afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	187a      	adds	r2, r7, r1
 8000b00:	2390      	movs	r3, #144	; 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fbe2 	bl	80012d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0xe8>)
 8000b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b32:	2220      	movs	r2, #32
 8000b34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fa2e 	bl	8000fa0 <HAL_DMA_Init>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000b48:	f7ff ff24 	bl	8000994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b50:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_UART_MspInit+0xe4>)
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b00a      	add	sp, #40	; 0x28
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	20000348 	.word	0x20000348
 8000b6c:	40020058 	.word	0x40020058

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f908 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 faa6 	bl	80010fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000348 	.word	0x20000348

08000bbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bce:	e000      	b.n	8000bd2 <_read+0x16>
 8000bd0:	bf00      	nop
 8000bd2:	0001      	movs	r1, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	b2ca      	uxtb	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf0      	blt.n	8000bce <_read+0x12>
	}

return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b006      	add	sp, #24
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	425b      	negs	r3, r3
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0192      	lsls	r2, r2, #6
 8000c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_isatty>:

int _isatty(int file)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f002 fe5a 	bl	8003938 <__errno>
 8000c84:	0003      	movs	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	18d2      	adds	r2, r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b006      	add	sp, #24
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20002000 	.word	0x20002000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	2000033c 	.word	0x2000033c
 8000cb8:	20000460 	.word	0x20000460

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cf2:	f7ff ffe3 	bl	8000cbc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cf6:	f002 fe25 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fcb5 	bl	8000668 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   r0, =_estack
 8000d00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000d0c:	08004eb4 	.word	0x08004eb4
  ldr r2, =_sbss
 8000d10:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000d14:	20000460 	.word	0x20000460

08000d18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_IRQHandler>
	...

08000d1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_Init+0x24>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_Init+0x24>)
 8000d26:	2110      	movs	r1, #16
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f809 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d32:	f7ff fe35 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x5c>)
 8000d4e:	681c      	ldr	r4, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x60>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	0019      	movs	r1, r3
 8000d56:	23fa      	movs	r3, #250	; 0xfa
 8000d58:	0098      	lsls	r0, r3, #2
 8000d5a:	f7ff f9d5 	bl	8000108 <__udivsi3>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	0019      	movs	r1, r3
 8000d62:	0020      	movs	r0, r4
 8000d64:	f7ff f9d0 	bl	8000108 <__udivsi3>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 f90b 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e00f      	b.n	8000d98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d80b      	bhi.n	8000d96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f8d8 	bl	8000f3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_InitTick+0x64>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	001a      	movs	r2, r3
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x20>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	18d2      	adds	r2, r2, r3
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_IncTick+0x20>)
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000458 	.word	0x20000458

08000dd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <HAL_GetTick+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000458 	.word	0x20000458

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	0002      	movs	r2, r0
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b7f      	cmp	r3, #127	; 0x7f
 8000df6:	d809      	bhi.n	8000e0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	231f      	movs	r3, #31
 8000e00:	401a      	ands	r2, r3
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_EnableIRQ+0x30>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	4091      	lsls	r1, r2
 8000e08:	000a      	movs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
  }
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b002      	add	sp, #8
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	0002      	movs	r2, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e2c:	d828      	bhi.n	8000e80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <__NVIC_SetPriority+0xd4>)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	33c0      	adds	r3, #192	; 0xc0
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	589b      	ldr	r3, [r3, r2]
 8000e3e:	1dfa      	adds	r2, r7, #7
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	0011      	movs	r1, r2
 8000e44:	2203      	movs	r2, #3
 8000e46:	400a      	ands	r2, r1
 8000e48:	00d2      	lsls	r2, r2, #3
 8000e4a:	21ff      	movs	r1, #255	; 0xff
 8000e4c:	4091      	lsls	r1, r2
 8000e4e:	000a      	movs	r2, r1
 8000e50:	43d2      	mvns	r2, r2
 8000e52:	401a      	ands	r2, r3
 8000e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	0018      	movs	r0, r3
 8000e64:	2303      	movs	r3, #3
 8000e66:	4003      	ands	r3, r0
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6c:	481f      	ldr	r0, [pc, #124]	; (8000eec <__NVIC_SetPriority+0xd4>)
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	430a      	orrs	r2, r1
 8000e78:	33c0      	adds	r3, #192	; 0xc0
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e7e:	e031      	b.n	8000ee4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <__NVIC_SetPriority+0xd8>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0019      	movs	r1, r3
 8000e88:	230f      	movs	r3, #15
 8000e8a:	400b      	ands	r3, r1
 8000e8c:	3b08      	subs	r3, #8
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3306      	adds	r3, #6
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	18d3      	adds	r3, r2, r3
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	1dfa      	adds	r2, r7, #7
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	00d2      	lsls	r2, r2, #3
 8000ea6:	21ff      	movs	r1, #255	; 0xff
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	000a      	movs	r2, r1
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	401a      	ands	r2, r3
 8000eb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	019b      	lsls	r3, r3, #6
 8000eb6:	22ff      	movs	r2, #255	; 0xff
 8000eb8:	401a      	ands	r2, r3
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	4003      	ands	r3, r0
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <__NVIC_SetPriority+0xd8>)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	001c      	movs	r4, r3
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	4023      	ands	r3, r4
 8000ed4:	3b08      	subs	r3, #8
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	3306      	adds	r3, #6
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	18c3      	adds	r3, r0, r3
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b003      	add	sp, #12
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <SysTick_Config+0x40>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d901      	bls.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e010      	b.n	8000f2c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <SysTick_Config+0x44>)
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	3a01      	subs	r2, #1
 8000f10:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	2103      	movs	r1, #3
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff ff7d 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SysTick_Config+0x44>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x44>)
 8000f26:	2207      	movs	r2, #7
 8000f28:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	00ffffff 	.word	0x00ffffff
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	210f      	movs	r1, #15
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	1c02      	adds	r2, r0, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ff33 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ffaf 	bl	8000ef4 <SysTick_Config>
 8000f96:	0003      	movs	r3, r0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e036      	b.n	8001024 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2221      	movs	r2, #33	; 0x21
 8000fba:	2102      	movs	r1, #2
 8000fbc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_DMA_Init+0x8c>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f946 	bl	8001298 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2221      	movs	r2, #33	; 0x21
 8001016:	2101      	movs	r1, #1
 8001018:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2220      	movs	r2, #32
 800101e:	2100      	movs	r1, #0
 8001020:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}  
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b004      	add	sp, #16
 800102a:	bd80      	pop	{r7, pc}
 800102c:	ffffc00f 	.word	0xffffc00f

08001030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800103e:	2317      	movs	r3, #23
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2220      	movs	r2, #32
 800104a:	5c9b      	ldrb	r3, [r3, r2]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_DMA_Start_IT+0x24>
 8001050:	2302      	movs	r3, #2
 8001052:	e04f      	b.n	80010f4 <HAL_DMA_Start_IT+0xc4>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2220      	movs	r2, #32
 8001058:	2101      	movs	r1, #1
 800105a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2221      	movs	r2, #33	; 0x21
 8001060:	5c9b      	ldrb	r3, [r3, r2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d13a      	bne.n	80010de <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2221      	movs	r2, #33	; 0x21
 800106c:	2102      	movs	r1, #2
 800106e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	438a      	bics	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f8d7 	bl	8001240 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	210e      	movs	r1, #14
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00f      	b.n	80010cc <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	210a      	movs	r1, #10
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2104      	movs	r1, #4
 80010c8:	438a      	bics	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e007      	b.n	80010ee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2220      	movs	r2, #32
 80010e2:	2100      	movs	r1, #0
 80010e4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80010e6:	2317      	movs	r3, #23
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80010ee:	2317      	movs	r3, #23
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	781b      	ldrb	r3, [r3, #0]
} 
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b006      	add	sp, #24
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	2204      	movs	r2, #4
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	d024      	beq.n	800116e <HAL_DMA_IRQHandler+0x72>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2204      	movs	r2, #4
 8001128:	4013      	ands	r3, r2
 800112a:	d020      	beq.n	800116e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2220      	movs	r2, #32
 8001134:	4013      	ands	r3, r2
 8001136:	d107      	bne.n	8001148 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2104      	movs	r1, #4
 8001144:	438a      	bics	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001150:	2104      	movs	r1, #4
 8001152:	4091      	lsls	r1, r2
 8001154:	000a      	movs	r2, r1
 8001156:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	2b00      	cmp	r3, #0
 800115e:	d100      	bne.n	8001162 <HAL_DMA_IRQHandler+0x66>
 8001160:	e06a      	b.n	8001238 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	0010      	movs	r0, r2
 800116a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800116c:	e064      	b.n	8001238 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2202      	movs	r2, #2
 8001174:	409a      	lsls	r2, r3
 8001176:	0013      	movs	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4013      	ands	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_DMA_IRQHandler+0xda>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d027      	beq.n	80011d6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2220      	movs	r2, #32
 800118e:	4013      	ands	r3, r2
 8001190:	d10b      	bne.n	80011aa <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	210a      	movs	r1, #10
 800119e:	438a      	bics	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2221      	movs	r2, #33	; 0x21
 80011a6:	2101      	movs	r1, #1
 80011a8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	2102      	movs	r1, #2
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d036      	beq.n	8001238 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	0010      	movs	r0, r2
 80011d2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011d4:	e030      	b.n	8001238 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2208      	movs	r2, #8
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	d028      	beq.n	8001238 <HAL_DMA_IRQHandler+0x13c>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2208      	movs	r2, #8
 80011ea:	4013      	ands	r3, r2
 80011ec:	d024      	beq.n	8001238 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	210e      	movs	r1, #14
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	2101      	movs	r1, #1
 8001208:	4091      	lsls	r1, r2
 800120a:	000a      	movs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2221      	movs	r2, #33	; 0x21
 8001218:	2101      	movs	r1, #1
 800121a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2220      	movs	r2, #32
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	0010      	movs	r0, r2
 8001234:	4798      	blx	r3
    }
   }
}  
 8001236:	e7ff      	b.n	8001238 <HAL_DMA_IRQHandler+0x13c>
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	2101      	movs	r1, #1
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b10      	cmp	r3, #16
 800126c:	d108      	bne.n	8001280 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800127e:	e007      	b.n	8001290 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}

08001298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <DMA_CalcBaseAndBitshift+0x30>)
 80012a6:	4694      	mov	ip, r2
 80012a8:	4463      	add	r3, ip
 80012aa:	2114      	movs	r1, #20
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7fe ff2b 	bl	8000108 <__udivsi3>
 80012b2:	0003      	movs	r3, r0
 80012b4:	009a      	lsls	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <DMA_CalcBaseAndBitshift+0x34>)
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	bffdfff8 	.word	0xbffdfff8
 80012cc:	40020000 	.word	0x40020000

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e14f      	b.n	8001580 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4091      	lsls	r1, r2
 80012ea:	000a      	movs	r2, r1
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <HAL_GPIO_Init+0x28>
 80012f6:	e140      	b.n	800157a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00b      	beq.n	8001318 <HAL_GPIO_Init+0x48>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130c:	2b11      	cmp	r3, #17
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b12      	cmp	r3, #18
 8001316:	d130      	bne.n	800137a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	409a      	lsls	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134e:	2201      	movs	r2, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	2201      	movs	r2, #1
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0xea>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	58d3      	ldr	r3, [r2, r3]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2207      	movs	r2, #7
 80013cc:	4013      	ands	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2107      	movs	r1, #7
 80013e6:	400b      	ands	r3, r1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	401a      	ands	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	055b      	lsls	r3, r3, #21
 800143e:	4013      	ands	r3, r2
 8001440:	d100      	bne.n	8001444 <HAL_GPIO_Init+0x174>
 8001442:	e09a      	b.n	800157a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	4b54      	ldr	r3, [pc, #336]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	4b53      	ldr	r3, [pc, #332]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	619a      	str	r2, [r3, #24]
 8001450:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x2cc>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	589b      	ldr	r3, [r3, r2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2203      	movs	r2, #3
 800146e:	4013      	ands	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	2390      	movs	r3, #144	; 0x90
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	429a      	cmp	r2, r3
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x1e2>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x1de>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_GPIO_Init+0x2d4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x1da>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <HAL_GPIO_Init+0x2d8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x1d6>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014b2:	2300      	movs	r3, #0
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	2103      	movs	r1, #3
 80014b8:	400a      	ands	r2, r1
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x2cc>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	4013      	ands	r3, r2
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	035b      	lsls	r3, r3, #13
 800153e:	4013      	ands	r3, r2
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43da      	mvns	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	039b      	lsls	r3, r3, #14
 8001568:	4013      	ands	r3, r2
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_GPIO_Init+0x2dc>)
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	40da      	lsrs	r2, r3
 8001588:	1e13      	subs	r3, r2, #0
 800158a:	d000      	beq.n	800158e <HAL_GPIO_Init+0x2be>
 800158c:	e6a8      	b.n	80012e0 <HAL_GPIO_Init+0x10>
  } 
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b006      	add	sp, #24
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000
 80015a0:	48000400 	.word	0x48000400
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000c00 	.word	0x48000c00
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	000a      	movs	r2, r1
 80015ba:	1cbb      	adds	r3, r7, #2
 80015bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	1cba      	adds	r2, r7, #2
 80015c4:	8812      	ldrh	r2, [r2, #0]
 80015c6:	4013      	ands	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015ca:	230f      	movs	r3, #15
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e003      	b.n	80015dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015dc:	230f      	movs	r3, #15
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	781b      	ldrb	r3, [r3, #0]
  }
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	0008      	movs	r0, r1
 80015f4:	0011      	movs	r1, r2
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	1c02      	adds	r2, r0, #0
 80015fa:	801a      	strh	r2, [r3, #0]
 80015fc:	1c7b      	adds	r3, r7, #1
 80015fe:	1c0a      	adds	r2, r1, #0
 8001600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001602:	1c7b      	adds	r3, r7, #1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	1cbb      	adds	r3, r7, #2
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001612:	e003      	b.n	800161c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001614:	1cbb      	adds	r3, r7, #2
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e082      	b.n	800173c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2241      	movs	r2, #65	; 0x41
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d107      	bne.n	8001652 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2240      	movs	r2, #64	; 0x40
 8001646:	2100      	movs	r1, #0
 8001648:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff f9cb 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2241      	movs	r2, #65	; 0x41
 8001656:	2124      	movs	r1, #36	; 0x24
 8001658:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	438a      	bics	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4934      	ldr	r1, [pc, #208]	; (8001744 <HAL_I2C_Init+0x120>)
 8001674:	400a      	ands	r2, r1
 8001676:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4931      	ldr	r1, [pc, #196]	; (8001748 <HAL_I2C_Init+0x124>)
 8001684:	400a      	ands	r2, r1
 8001686:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	0209      	lsls	r1, r1, #8
 800169c:	430a      	orrs	r2, r1
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	e007      	b.n	80016b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2184      	movs	r1, #132	; 0x84
 80016ac:	0209      	lsls	r1, r1, #8
 80016ae:	430a      	orrs	r2, r1
 80016b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d104      	bne.n	80016c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	491f      	ldr	r1, [pc, #124]	; (800174c <HAL_I2C_Init+0x128>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	491a      	ldr	r1, [pc, #104]	; (8001748 <HAL_I2C_Init+0x124>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	0011      	movs	r1, r2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	021a      	lsls	r2, r3, #8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69d9      	ldr	r1, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2241      	movs	r2, #65	; 0x41
 8001728:	2120      	movs	r1, #32
 800172a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2242      	movs	r2, #66	; 0x42
 8001736:	2100      	movs	r1, #0
 8001738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f0ffffff 	.word	0xf0ffffff
 8001748:	ffff7fff 	.word	0xffff7fff
 800174c:	02008000 	.word	0x02008000

08001750 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	000c      	movs	r4, r1
 800175a:	0010      	movs	r0, r2
 800175c:	0019      	movs	r1, r3
 800175e:	230a      	movs	r3, #10
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	1c22      	adds	r2, r4, #0
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	2308      	movs	r3, #8
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	1c02      	adds	r2, r0, #0
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	1dbb      	adds	r3, r7, #6
 8001770:	1c0a      	adds	r2, r1, #0
 8001772:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2241      	movs	r2, #65	; 0x41
 8001778:	5c9b      	ldrb	r3, [r3, r2]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b20      	cmp	r3, #32
 800177e:	d000      	beq.n	8001782 <HAL_I2C_Mem_Write+0x32>
 8001780:	e10c      	b.n	800199c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_I2C_Mem_Write+0x42>
 8001788:	232c      	movs	r3, #44	; 0x2c
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0ff      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	5c9b      	ldrb	r3, [r3, r2]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_I2C_Mem_Write+0x5c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e0f8      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	2101      	movs	r1, #1
 80017b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b4:	f7ff fb0c 	bl	8000dd0 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	0219      	lsls	r1, r3, #8
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2319      	movs	r3, #25
 80017c8:	2201      	movs	r2, #1
 80017ca:	f000 fc25 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0e3      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2241      	movs	r2, #65	; 0x41
 80017da:	2121      	movs	r1, #33	; 0x21
 80017dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2242      	movs	r2, #66	; 0x42
 80017e2:	2140      	movs	r1, #64	; 0x40
 80017e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	222c      	movs	r2, #44	; 0x2c
 80017f6:	18ba      	adds	r2, r7, r2
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001802:	1dbb      	adds	r3, r7, #6
 8001804:	881c      	ldrh	r4, [r3, #0]
 8001806:	2308      	movs	r3, #8
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	230a      	movs	r3, #10
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	8819      	ldrh	r1, [r3, #0]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	0023      	movs	r3, r4
 800181e:	f000 fb13 	bl	8001e48 <I2C_RequestMemoryWrite>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d005      	beq.n	8001832 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0b5      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	2bff      	cmp	r3, #255	; 0xff
 800183a:	d911      	bls.n	8001860 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	22ff      	movs	r2, #255	; 0xff
 8001840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	b2da      	uxtb	r2, r3
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	045c      	lsls	r4, r3, #17
 800184c:	230a      	movs	r3, #10
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	8819      	ldrh	r1, [r3, #0]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	0023      	movs	r3, r4
 800185a:	f000 fcfd 	bl	8002258 <I2C_TransferConfig>
 800185e:	e012      	b.n	8001886 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186e:	b2da      	uxtb	r2, r3
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	049c      	lsls	r4, r3, #18
 8001874:	230a      	movs	r3, #10
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	2300      	movs	r3, #0
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	0023      	movs	r3, r4
 8001882:	f000 fce9 	bl	8002258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0018      	movs	r0, r3
 800188e:	f000 fc02 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e081      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d03a      	beq.n	800194a <HAL_I2C_Mem_Write+0x1fa>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d136      	bne.n	800194a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	0013      	movs	r3, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	f000 fb95 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e053      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d911      	bls.n	8001924 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	b2da      	uxtb	r2, r3
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	045c      	lsls	r4, r3, #17
 8001910:	230a      	movs	r3, #10
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	0023      	movs	r3, r4
 800191e:	f000 fc9b 	bl	8002258 <I2C_TransferConfig>
 8001922:	e012      	b.n	800194a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	b2da      	uxtb	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	049c      	lsls	r4, r3, #18
 8001938:	230a      	movs	r3, #10
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	8819      	ldrh	r1, [r3, #0]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	0023      	movs	r3, r4
 8001946:	f000 fc87 	bl	8002258 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d198      	bne.n	8001886 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fbda 	bl	8002114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e01a      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	490b      	ldr	r1, [pc, #44]	; (80019a8 <HAL_I2C_Mem_Write+0x258>)
 800197c:	400a      	ands	r2, r1
 800197e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2241      	movs	r2, #65	; 0x41
 8001984:	2120      	movs	r1, #32
 8001986:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2242      	movs	r2, #66	; 0x42
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b007      	add	sp, #28
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	fe00e800 	.word	0xfe00e800

080019ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	000c      	movs	r4, r1
 80019b6:	0010      	movs	r0, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	230a      	movs	r3, #10
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	1c22      	adds	r2, r4, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	2308      	movs	r3, #8
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	1c02      	adds	r2, r0, #0
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	1c0a      	adds	r2, r1, #0
 80019ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	; 0x41
 80019d4:	5c9b      	ldrb	r3, [r3, r2]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d000      	beq.n	80019de <HAL_I2C_Mem_Read+0x32>
 80019dc:	e110      	b.n	8001c00 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_I2C_Mem_Read+0x42>
 80019e4:	232c      	movs	r3, #44	; 0x2c
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e103      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_I2C_Mem_Read+0x5c>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e0fc      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a10:	f7ff f9de 	bl	8000dd0 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	0219      	lsls	r1, r3, #8
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2319      	movs	r3, #25
 8001a24:	2201      	movs	r2, #1
 8001a26:	f000 faf7 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0e7      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2241      	movs	r2, #65	; 0x41
 8001a36:	2122      	movs	r1, #34	; 0x22
 8001a38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2242      	movs	r2, #66	; 0x42
 8001a3e:	2140      	movs	r1, #64	; 0x40
 8001a40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	222c      	movs	r2, #44	; 0x2c
 8001a52:	18ba      	adds	r2, r7, r2
 8001a54:	8812      	ldrh	r2, [r2, #0]
 8001a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a5e:	1dbb      	adds	r3, r7, #6
 8001a60:	881c      	ldrh	r4, [r3, #0]
 8001a62:	2308      	movs	r3, #8
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	230a      	movs	r3, #10
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	0023      	movs	r3, r4
 8001a7a:	f000 fa49 	bl	8001f10 <I2C_RequestMemoryRead>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0b9      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2bff      	cmp	r3, #255	; 0xff
 8001a96:	d911      	bls.n	8001abc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	22ff      	movs	r2, #255	; 0xff
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	045c      	lsls	r4, r3, #17
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <HAL_I2C_Mem_Read+0x260>)
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	f000 fbcf 	bl	8002258 <I2C_TransferConfig>
 8001aba:	e012      	b.n	8001ae2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	049c      	lsls	r4, r3, #18
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	8819      	ldrh	r1, [r3, #0]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_I2C_Mem_Read+0x260>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	0023      	movs	r3, r4
 8001ade:	f000 fbbb 	bl	8002258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	0013      	movs	r3, r2
 8001aec:	2200      	movs	r2, #0
 8001aee:	2104      	movs	r1, #4
 8001af0:	f000 fa92 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e082      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03a      	beq.n	8001bae <HAL_I2C_Mem_Read+0x202>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d136      	bne.n	8001bae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	0013      	movs	r3, r2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	f000 fa63 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e053      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2bff      	cmp	r3, #255	; 0xff
 8001b62:	d911      	bls.n	8001b88 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	045c      	lsls	r4, r3, #17
 8001b74:	230a      	movs	r3, #10
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	8819      	ldrh	r1, [r3, #0]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	0023      	movs	r3, r4
 8001b82:	f000 fb69 	bl	8002258 <I2C_TransferConfig>
 8001b86:	e012      	b.n	8001bae <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	049c      	lsls	r4, r3, #18
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	8819      	ldrh	r1, [r3, #0]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	0023      	movs	r3, r4
 8001baa:	f000 fb55 	bl	8002258 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d194      	bne.n	8001ae2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 faa8 	bl	8002114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e01a      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	490c      	ldr	r1, [pc, #48]	; (8001c10 <HAL_I2C_Mem_Read+0x264>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2241      	movs	r2, #65	; 0x41
 8001be8:	2120      	movs	r1, #32
 8001bea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2242      	movs	r2, #66	; 0x42
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b007      	add	sp, #28
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	80002400 	.word	0x80002400
 8001c10:	fe00e800 	.word	0xfe00e800

08001c14 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	230a      	movs	r3, #10
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	1c0a      	adds	r2, r1, #0
 8001c26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2241      	movs	r2, #65	; 0x41
 8001c30:	5c9b      	ldrb	r3, [r3, r2]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d000      	beq.n	8001c3a <HAL_I2C_IsDeviceReady+0x26>
 8001c38:	e0fe      	b.n	8001e38 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	401a      	ands	r2, r3
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0f3      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2C_IsDeviceReady+0x4c>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e0ec      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	2101      	movs	r1, #1
 8001c66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2241      	movs	r2, #65	; 0x41
 8001c6c:	2124      	movs	r1, #36	; 0x24
 8001c6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_I2C_IsDeviceReady+0x7a>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	059b      	lsls	r3, r3, #22
 8001c86:	0d9b      	lsrs	r3, r3, #22
 8001c88:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_I2C_IsDeviceReady+0x230>)
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	e007      	b.n	8001c9e <HAL_I2C_IsDeviceReady+0x8a>
 8001c8e:	230a      	movs	r3, #10
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	059b      	lsls	r3, r3, #22
 8001c96:	0d9b      	lsrs	r3, r3, #22
 8001c98:	22a0      	movs	r2, #160	; 0xa0
 8001c9a:	0192      	lsls	r2, r2, #6
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f894 	bl	8000dd0 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	3b20      	subs	r3, #32
 8001cb8:	425a      	negs	r2, r3
 8001cba:	4153      	adcs	r3, r2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	231f      	movs	r3, #31
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	4013      	ands	r3, r2
 8001cce:	3b10      	subs	r3, #16
 8001cd0:	425a      	negs	r2, r3
 8001cd2:	4153      	adcs	r3, r2
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	231e      	movs	r3, #30
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001cdc:	e035      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	d01a      	beq.n	8001d1a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ce4:	f7ff f874 	bl	8000dd0 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d302      	bcc.n	8001cfa <HAL_I2C_IsDeviceReady+0xe6>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10f      	bne.n	8001d1a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2241      	movs	r2, #65	; 0x41
 8001cfe:	2120      	movs	r1, #32
 8001d00:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	2220      	movs	r2, #32
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	2100      	movs	r1, #0
 8001d14:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e08f      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2220      	movs	r2, #32
 8001d22:	4013      	ands	r3, r2
 8001d24:	3b20      	subs	r3, #32
 8001d26:	425a      	negs	r2, r3
 8001d28:	4153      	adcs	r3, r2
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	231f      	movs	r3, #31
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	3b10      	subs	r3, #16
 8001d3e:	425a      	negs	r2, r3
 8001d40:	4153      	adcs	r3, r2
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	231e      	movs	r3, #30
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d104      	bne.n	8001d5e <HAL_I2C_IsDeviceReady+0x14a>
 8001d54:	231e      	movs	r3, #30
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0bf      	beq.n	8001cde <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2210      	movs	r2, #16
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d01a      	beq.n	8001da2 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	0013      	movs	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	2120      	movs	r1, #32
 8001d7a:	f000 f94d 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e059      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2241      	movs	r2, #65	; 0x41
 8001d92:	2120      	movs	r1, #32
 8001d94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e04b      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	0013      	movs	r3, r2
 8001dac:	2200      	movs	r2, #0
 8001dae:	2120      	movs	r1, #32
 8001db0:	f000 f932 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e03e      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d119      	bne.n	8001e08 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	01c9      	lsls	r1, r1, #7
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	0013      	movs	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	2120      	movs	r1, #32
 8001df4:	f000 f910 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	1e03      	subs	r3, r0, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e01c      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d900      	bls.n	8001e18 <HAL_I2C_IsDeviceReady+0x204>
 8001e16:	e72e      	b.n	8001c76 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2241      	movs	r2, #65	; 0x41
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	2220      	movs	r2, #32
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
  }
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b008      	add	sp, #32
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	02002000 	.word	0x02002000

08001e48 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	000c      	movs	r4, r1
 8001e52:	0010      	movs	r0, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	250a      	movs	r5, #10
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	1c22      	adds	r2, r4, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	2308      	movs	r3, #8
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	1c02      	adds	r2, r0, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	1dbb      	adds	r3, r7, #6
 8001e68:	1c0a      	adds	r2, r1, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	045c      	lsls	r4, r3, #17
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	8819      	ldrh	r1, [r3, #0]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <I2C_RequestMemoryWrite+0xc4>)
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	0023      	movs	r3, r4
 8001e82:	f000 f9e9 	bl	8002258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f902 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e033      	b.n	8001f02 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb0:	e019      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	6a39      	ldr	r1, [r7, #32]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f8e3 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e014      	b.n	8001f02 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed8:	2308      	movs	r3, #8
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee6:	6a3a      	ldr	r2, [r7, #32]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	0013      	movs	r3, r2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	f000 f890 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d001      	beq.n	8001f00 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	80002000 	.word	0x80002000

08001f10 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	000c      	movs	r4, r1
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	250a      	movs	r5, #10
 8001f20:	197b      	adds	r3, r7, r5
 8001f22:	1c22      	adds	r2, r4, #0
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	2308      	movs	r3, #8
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	1c02      	adds	r2, r0, #0
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	1dbb      	adds	r3, r7, #6
 8001f30:	1c0a      	adds	r2, r1, #0
 8001f32:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f34:	1dbb      	adds	r3, r7, #6
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	197b      	adds	r3, r7, r5
 8001f3c:	8819      	ldrh	r1, [r3, #0]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <I2C_RequestMemoryRead+0xc0>)
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2300      	movs	r3, #0
 8001f46:	f000 f987 	bl	8002258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 f8a0 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e033      	b.n	8001fc6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5e:	1dbb      	adds	r3, r7, #6
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f66:	2308      	movs	r3, #8
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
 8001f74:	e019      	b.n	8001faa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f76:	2308      	movs	r3, #8
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	6a39      	ldr	r1, [r7, #32]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f881 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d001      	beq.n	8001f9c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e014      	b.n	8001fc6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001faa:	6a3a      	ldr	r2, [r7, #32]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	f000 f82e 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001fbc:	1e03      	subs	r3, r0, #0
 8001fbe:	d001      	beq.n	8001fc4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b004      	add	sp, #16
 8001fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	80002000 	.word	0x80002000

08001fd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d103      	bne.n	8001ff2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d007      	beq.n	8002010 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	619a      	str	r2, [r3, #24]
  }
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}

08002018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002028:	e021      	b.n	800206e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	d01e      	beq.n	800206e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002030:	f7fe fece 	bl	8000dd0 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d302      	bcc.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d113      	bne.n	800206e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	2220      	movs	r2, #32
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	2120      	movs	r1, #32
 8002058:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2242      	movs	r2, #66	; 0x42
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	425a      	negs	r2, r3
 800207e:	4153      	adcs	r3, r2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	001a      	movs	r2, r3
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d0ce      	beq.n	800202a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}

08002096 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a2:	e02b      	b.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f86e 	bl	800218c <I2C_IsAcknowledgeFailed>
 80020b0:	1e03      	subs	r3, r0, #0
 80020b2:	d001      	beq.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e029      	b.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3301      	adds	r3, #1
 80020bc:	d01e      	beq.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7fe fe87 	bl	8000dd0 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d113      	bne.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	2220      	movs	r2, #32
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2241      	movs	r2, #65	; 0x41
 80020e4:	2120      	movs	r1, #32
 80020e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2242      	movs	r2, #66	; 0x42
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d1cc      	bne.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002120:	e028      	b.n	8002174 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f82f 	bl	800218c <I2C_IsAcknowledgeFailed>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e026      	b.n	8002184 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7fe fe4b 	bl	8000dd0 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d113      	bne.n	8002174 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	2220      	movs	r2, #32
 8002152:	431a      	orrs	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2241      	movs	r2, #65	; 0x41
 800215c:	2120      	movs	r1, #32
 800215e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2242      	movs	r2, #66	; 0x42
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	2100      	movs	r1, #0
 800216e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e007      	b.n	8002184 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2220      	movs	r2, #32
 800217c:	4013      	ands	r3, r2
 800217e:	2b20      	cmp	r3, #32
 8002180:	d1cf      	bne.n	8002122 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}

0800218c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2210      	movs	r2, #16
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d151      	bne.n	800224a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a6:	e021      	b.n	80021ec <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3301      	adds	r3, #1
 80021ac:	d01e      	beq.n	80021ec <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe fe0f 	bl	8000dd0 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_IsAcknowledgeFailed+0x38>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d113      	bne.n	80021ec <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2220      	movs	r2, #32
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2241      	movs	r2, #65	; 0x41
 80021d4:	2120      	movs	r1, #32
 80021d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2242      	movs	r2, #66	; 0x42
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e02f      	b.n	800224c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2220      	movs	r2, #32
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d1d6      	bne.n	80021a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2210      	movs	r2, #16
 8002200:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2220      	movs	r2, #32
 8002208:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff fee1 	bl	8001fd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	490d      	ldr	r1, [pc, #52]	; (8002254 <I2C_IsAcknowledgeFailed+0xc8>)
 800221e:	400a      	ands	r2, r1
 8002220:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	2204      	movs	r2, #4
 8002228:	431a      	orrs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2241      	movs	r2, #65	; 0x41
 8002232:	2120      	movs	r1, #32
 8002234:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2242      	movs	r2, #66	; 0x42
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	2100      	movs	r1, #0
 8002244:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}
 8002254:	fe00e800 	.word	0xfe00e800

08002258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	0008      	movs	r0, r1
 8002262:	0011      	movs	r1, r2
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	240a      	movs	r4, #10
 8002268:	193b      	adds	r3, r7, r4
 800226a:	1c02      	adds	r2, r0, #0
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	2009      	movs	r0, #9
 8002270:	183b      	adds	r3, r7, r0
 8002272:	1c0a      	adds	r2, r1, #0
 8002274:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	0d51      	lsrs	r1, r2, #21
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	00d2      	lsls	r2, r2, #3
 8002284:	400a      	ands	r2, r1
 8002286:	490e      	ldr	r1, [pc, #56]	; (80022c0 <I2C_TransferConfig+0x68>)
 8002288:	430a      	orrs	r2, r1
 800228a:	43d2      	mvns	r2, r2
 800228c:	401a      	ands	r2, r3
 800228e:	0011      	movs	r1, r2
 8002290:	193b      	adds	r3, r7, r4
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	059b      	lsls	r3, r3, #22
 8002296:	0d9a      	lsrs	r2, r3, #22
 8002298:	183b      	adds	r3, r7, r0
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	0418      	lsls	r0, r3, #16
 800229e:	23ff      	movs	r3, #255	; 0xff
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	4003      	ands	r3, r0
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b005      	add	sp, #20
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	03ff63ff 	.word	0x03ff63ff

080022c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2241      	movs	r2, #65	; 0x41
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d138      	bne.n	800234c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2240      	movs	r2, #64	; 0x40
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e032      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	2101      	movs	r1, #1
 80022ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2241      	movs	r2, #65	; 0x41
 80022f4:	2124      	movs	r1, #36	; 0x24
 80022f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4911      	ldr	r1, [pc, #68]	; (8002358 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	; 0x41
 800233c:	2120      	movs	r1, #32
 800233e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	ffffefff 	.word	0xffffefff

0800235c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2241      	movs	r2, #65	; 0x41
 800236a:	5c9b      	ldrb	r3, [r3, r2]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	d139      	bne.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2240      	movs	r2, #64	; 0x40
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800237c:	2302      	movs	r3, #2
 800237e:	e033      	b.n	80023e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2241      	movs	r2, #65	; 0x41
 800238c:	2124      	movs	r1, #36	; 0x24
 800238e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2241      	movs	r2, #65	; 0x41
 80023d6:	2120      	movs	r1, #32
 80023d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	fffff0ff 	.word	0xfffff0ff

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e303      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCC_OscConfig+0x1e>
 8002410:	e08d      	b.n	800252e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002412:	4bc4      	ldr	r3, [pc, #784]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	220c      	movs	r2, #12
 8002418:	4013      	ands	r3, r2
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00e      	beq.n	800243c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241e:	4bc1      	ldr	r3, [pc, #772]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	220c      	movs	r2, #12
 8002424:	4013      	ands	r3, r2
 8002426:	2b08      	cmp	r3, #8
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x64>
 800242a:	4bbe      	ldr	r3, [pc, #760]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	401a      	ands	r2, r3
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	429a      	cmp	r2, r3
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4bb9      	ldr	r3, [pc, #740]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x56>
 8002448:	e070      	b.n	800252c <HAL_RCC_OscConfig+0x138>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d000      	beq.n	8002454 <HAL_RCC_OscConfig+0x60>
 8002452:	e06b      	b.n	800252c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e2da      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x7c>
 8002460:	4bb0      	ldr	r3, [pc, #704]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4baf      	ldr	r3, [pc, #700]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0249      	lsls	r1, r1, #9
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e02f      	b.n	80024d0 <HAL_RCC_OscConfig+0xdc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x9e>
 8002478:	4baa      	ldr	r3, [pc, #680]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4ba9      	ldr	r3, [pc, #676]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800247e:	49aa      	ldr	r1, [pc, #680]	; (8002728 <HAL_RCC_OscConfig+0x334>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4ba7      	ldr	r3, [pc, #668]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4ba6      	ldr	r3, [pc, #664]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800248a:	49a8      	ldr	r1, [pc, #672]	; (800272c <HAL_RCC_OscConfig+0x338>)
 800248c:	400a      	ands	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e01e      	b.n	80024d0 <HAL_RCC_OscConfig+0xdc>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d10e      	bne.n	80024b8 <HAL_RCC_OscConfig+0xc4>
 800249a:	4ba2      	ldr	r3, [pc, #648]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4ba1      	ldr	r3, [pc, #644]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	02c9      	lsls	r1, r1, #11
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b9d      	ldr	r3, [pc, #628]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0249      	lsls	r1, r1, #9
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xdc>
 80024b8:	4b9a      	ldr	r3, [pc, #616]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b99      	ldr	r3, [pc, #612]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024be:	499a      	ldr	r1, [pc, #616]	; (8002728 <HAL_RCC_OscConfig+0x334>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	4b97      	ldr	r3, [pc, #604]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024ca:	4998      	ldr	r1, [pc, #608]	; (800272c <HAL_RCC_OscConfig+0x338>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d014      	beq.n	8002502 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fc7a 	bl	8000dd0 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e2:	f7fe fc75 	bl	8000dd0 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e28c      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	4b8b      	ldr	r3, [pc, #556]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	4013      	ands	r3, r2
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0xee>
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fc65 	bl	8000dd0 <HAL_GetTick>
 8002506:	0003      	movs	r3, r0
 8002508:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fc60 	bl	8000dd0 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e277      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b81      	ldr	r3, [pc, #516]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	4013      	ands	r3, r2
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x118>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d100      	bne.n	800253a <HAL_RCC_OscConfig+0x146>
 8002538:	e069      	b.n	800260e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	220c      	movs	r2, #12
 8002540:	4013      	ands	r3, r2
 8002542:	d00b      	beq.n	800255c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002544:	4b77      	ldr	r3, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	220c      	movs	r2, #12
 800254a:	4013      	ands	r3, r2
 800254c:	2b08      	cmp	r3, #8
 800254e:	d11c      	bne.n	800258a <HAL_RCC_OscConfig+0x196>
 8002550:	4b74      	ldr	r3, [pc, #464]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	4013      	ands	r3, r2
 800255a:	d116      	bne.n	800258a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2202      	movs	r2, #2
 8002562:	4013      	ands	r3, r2
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e24d      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	22f8      	movs	r2, #248	; 0xf8
 8002578:	4393      	bics	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00da      	lsls	r2, r3, #3
 8002582:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002588:	e041      	b.n	800260e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d024      	beq.n	80025dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002592:	4b64      	ldr	r3, [pc, #400]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fc17 	bl	8000dd0 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fc12 	bl	8000dd0 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e229      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d0f1      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	22f8      	movs	r2, #248	; 0xf8
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e018      	b.n	800260e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025dc:	4b51      	ldr	r3, [pc, #324]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	438a      	bics	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fbf2 	bl	8000dd0 <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7fe fbed 	bl	8000dd0 <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e204      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002604:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d1f1      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2208      	movs	r2, #8
 8002614:	4013      	ands	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d019      	beq.n	8002654 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002626:	2101      	movs	r1, #1
 8002628:	430a      	orrs	r2, r1
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe fbd0 	bl	8000dd0 <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002636:	f7fe fbcb 	bl	8000dd0 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1e2      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2202      	movs	r2, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d0f1      	beq.n	8002636 <HAL_RCC_OscConfig+0x242>
 8002652:	e018      	b.n	8002686 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe fbb6 	bl	8000dd0 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe fbb1 	bl	8000dd0 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1c8      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d1f1      	bne.n	800266a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCC_OscConfig+0x29e>
 8002690:	e0b6      	b.n	8002800 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	231f      	movs	r3, #31
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	055b      	lsls	r3, r3, #21
 80026a2:	4013      	ands	r3, r2
 80026a4:	d111      	bne.n	80026ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0549      	lsls	r1, r1, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	61da      	str	r2, [r3, #28]
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026c2:	231f      	movs	r3, #31
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_OscConfig+0x33c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d11a      	bne.n	800270c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_RCC_OscConfig+0x33c>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_RCC_OscConfig+0x33c>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0049      	lsls	r1, r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fb74 	bl	8000dd0 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe fb6f 	bl	8000dd0 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e186      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x33c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d10f      	bne.n	8002734 <HAL_RCC_OscConfig+0x340>
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002716:	6a1a      	ldr	r2, [r3, #32]
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800271a:	2101      	movs	r1, #1
 800271c:	430a      	orrs	r2, r1
 800271e:	621a      	str	r2, [r3, #32]
 8002720:	e036      	b.n	8002790 <HAL_RCC_OscConfig+0x39c>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	40021000 	.word	0x40021000
 8002728:	fffeffff 	.word	0xfffeffff
 800272c:	fffbffff 	.word	0xfffbffff
 8002730:	40007000 	.word	0x40007000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x362>
 800273c:	4bb6      	ldr	r3, [pc, #728]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	4bb5      	ldr	r3, [pc, #724]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002742:	2101      	movs	r1, #1
 8002744:	438a      	bics	r2, r1
 8002746:	621a      	str	r2, [r3, #32]
 8002748:	4bb3      	ldr	r3, [pc, #716]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	4bb2      	ldr	r3, [pc, #712]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800274e:	2104      	movs	r1, #4
 8002750:	438a      	bics	r2, r1
 8002752:	621a      	str	r2, [r3, #32]
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x39c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x384>
 800275e:	4bae      	ldr	r3, [pc, #696]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	4bad      	ldr	r3, [pc, #692]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002764:	2104      	movs	r1, #4
 8002766:	430a      	orrs	r2, r1
 8002768:	621a      	str	r2, [r3, #32]
 800276a:	4bab      	ldr	r3, [pc, #684]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002770:	2101      	movs	r1, #1
 8002772:	430a      	orrs	r2, r1
 8002774:	621a      	str	r2, [r3, #32]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0x39c>
 8002778:	4ba7      	ldr	r3, [pc, #668]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	4ba6      	ldr	r3, [pc, #664]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800277e:	2101      	movs	r1, #1
 8002780:	438a      	bics	r2, r1
 8002782:	621a      	str	r2, [r3, #32]
 8002784:	4ba4      	ldr	r3, [pc, #656]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	4ba3      	ldr	r3, [pc, #652]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d014      	beq.n	80027c2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe fb1a 	bl	8000dd0 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e009      	b.n	80027b6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fb15 	bl	8000dd0 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	4a9b      	ldr	r2, [pc, #620]	; (8002a1c <HAL_RCC_OscConfig+0x628>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e12b      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	4b98      	ldr	r3, [pc, #608]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3ae>
 80027c0:	e013      	b.n	80027ea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fb05 	bl	8000dd0 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	e009      	b.n	80027e0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fb00 	bl	8000dd0 <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	4a91      	ldr	r2, [pc, #580]	; (8002a1c <HAL_RCC_OscConfig+0x628>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e116      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ea:	231f      	movs	r3, #31
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	4b87      	ldr	r3, [pc, #540]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80027fa:	4989      	ldr	r1, [pc, #548]	; (8002a20 <HAL_RCC_OscConfig+0x62c>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	4013      	ands	r3, r2
 8002808:	d063      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d12a      	bne.n	8002868 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002812:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	4b80      	ldr	r3, [pc, #512]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002818:	2104      	movs	r1, #4
 800281a:	430a      	orrs	r2, r1
 800281c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800281e:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002824:	2101      	movs	r1, #1
 8002826:	430a      	orrs	r2, r1
 8002828:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282a:	f7fe fad1 	bl	8000dd0 <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002834:	f7fe facc 	bl	8000dd0 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0e3      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002846:	4b74      	ldr	r3, [pc, #464]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d0f1      	beq.n	8002834 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002850:	4b71      	ldr	r3, [pc, #452]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	22f8      	movs	r2, #248	; 0xf8
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	00da      	lsls	r2, r3, #3
 8002860:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002862:	430a      	orrs	r2, r1
 8002864:	635a      	str	r2, [r3, #52]	; 0x34
 8002866:	e034      	b.n	80028d2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	3305      	adds	r3, #5
 800286e:	d111      	bne.n	8002894 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002876:	2104      	movs	r1, #4
 8002878:	438a      	bics	r2, r1
 800287a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	22f8      	movs	r2, #248	; 0xf8
 8002882:	4393      	bics	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	00da      	lsls	r2, r3, #3
 800288c:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800288e:	430a      	orrs	r2, r1
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
 8002892:	e01e      	b.n	80028d2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002898:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800289a:	2104      	movs	r1, #4
 800289c:	430a      	orrs	r2, r1
 800289e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028a0:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	438a      	bics	r2, r1
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fa90 	bl	8000dd0 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028b6:	f7fe fa8b 	bl	8000dd0 <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0a2      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	d1f1      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d100      	bne.n	80028dc <HAL_RCC_OscConfig+0x4e8>
 80028da:	e097      	b.n	8002a0c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028dc:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	220c      	movs	r2, #12
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d100      	bne.n	80028ea <HAL_RCC_OscConfig+0x4f6>
 80028e8:	e06b      	b.n	80029c2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d14c      	bne.n	800298c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80028f8:	494a      	ldr	r1, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x630>)
 80028fa:	400a      	ands	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fa67 	bl	8000dd0 <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fa62 	bl	8000dd0 <HAL_GetTick>
 800290c:	0002      	movs	r2, r0
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e079      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	049b      	lsls	r3, r3, #18
 8002922:	4013      	ands	r3, r2
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	220f      	movs	r2, #15
 800292c:	4393      	bics	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002936:	430a      	orrs	r2, r1
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_RCC_OscConfig+0x634>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	431a      	orrs	r2, r3
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002950:	430a      	orrs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	0449      	lsls	r1, r1, #17
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fa35 	bl	8000dd0 <HAL_GetTick>
 8002966:	0003      	movs	r3, r0
 8002968:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fa30 	bl	8000dd0 <HAL_GetTick>
 8002970:	0002      	movs	r2, r0
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e047      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	049b      	lsls	r3, r3, #18
 8002986:	4013      	ands	r3, r2
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x578>
 800298a:	e03f      	b.n	8002a0c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 8002992:	4924      	ldr	r1, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x630>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fa1a 	bl	8000dd0 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fa15 	bl	8000dd0 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e02c      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	049b      	lsls	r3, r3, #18
 80029bc:	4013      	ands	r3, r2
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5ae>
 80029c0:	e024      	b.n	8002a0c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01f      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_RCC_OscConfig+0x624>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	025b      	lsls	r3, r3, #9
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10e      	bne.n	8002a08 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	220f      	movs	r2, #15
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	23f0      	movs	r3, #240	; 0xf0
 80029fc:	039b      	lsls	r3, r3, #14
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b008      	add	sp, #32
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	00001388 	.word	0x00001388
 8002a20:	efffffff 	.word	0xefffffff
 8002a24:	feffffff 	.word	0xfeffffff
 8002a28:	ffc2ffff 	.word	0xffc2ffff

08002a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b3      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b5b      	ldr	r3, [pc, #364]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2201      	movs	r2, #1
 8002a46:	4013      	ands	r3, r2
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d911      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e09a      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d015      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2204      	movs	r2, #4
 8002a82:	4013      	ands	r3, r2
 8002a84:	d006      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a86:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002a8c:	21e0      	movs	r1, #224	; 0xe0
 8002a8e:	00c9      	lsls	r1, r1, #3
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	22f0      	movs	r2, #240	; 0xf0
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d040      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d114      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06e      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	049b      	lsls	r3, r3, #18
 8002ada:	4013      	ands	r3, r2
 8002adc:	d108      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e062      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e05b      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af0:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	4393      	bics	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe f964 	bl	8000dd0 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0c:	e009      	b.n	8002b22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0e:	f7fe f95f 	bl	8000dd0 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <HAL_RCC_ClockConfig+0x18c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e042      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	220c      	movs	r2, #12
 8002b28:	401a      	ands	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d211      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4393      	bics	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_RCC_ClockConfig+0x184>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e020      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <HAL_RCC_ClockConfig+0x190>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b84:	f000 f820 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b88:	0001      	movs	r1, r0
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x188>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	220f      	movs	r2, #15
 8002b92:	4013      	ands	r3, r2
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x194>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	000a      	movs	r2, r1
 8002b9a:	40da      	lsrs	r2, r3
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x198>)
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe f8cf 	bl	8000d44 <HAL_InitTick>
  
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	fffff8ff 	.word	0xfffff8ff
 8002bc0:	08004cf0 	.word	0x08004cf0
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b08f      	sub	sp, #60	; 0x3c
 8002bcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002bce:	2314      	movs	r3, #20
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bd6:	c313      	stmia	r3!, {r0, r1, r4}
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002be0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002be2:	c313      	stmia	r3!, {r0, r1, r4}
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	220c      	movs	r2, #12
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d002      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x4a>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d003      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x50>
 8002c10:	e02d      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c16:	e02d      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2214      	movs	r2, #20
 8002c22:	18ba      	adds	r2, r7, r2
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	4013      	ands	r3, r2
 8002c30:	1d3a      	adds	r2, r7, #4
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	025b      	lsls	r3, r3, #9
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c42:	4812      	ldr	r0, [pc, #72]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c44:	f7fd fa60 	bl	8000108 <__udivsi3>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	4353      	muls	r3, r2
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	e009      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c56:	000a      	movs	r2, r1
 8002c58:	0152      	lsls	r2, r2, #5
 8002c5a:	1a52      	subs	r2, r2, r1
 8002c5c:	0193      	lsls	r3, r2, #6
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	185b      	adds	r3, r3, r1
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b00f      	add	sp, #60	; 0x3c
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	08004cd0 	.word	0x08004cd0
 8002c84:	08004ce0 	.word	0x08004ce0
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ca8:	f7ff fff2 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cac:	0001      	movs	r1, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	000b      	movs	r3, r1
}    
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08004d00 	.word	0x08004d00

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d100      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cec:	e08f      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	055b      	lsls	r3, r3, #21
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d111      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0549      	lsls	r1, r1, #21
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	055b      	lsls	r3, r3, #21
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2317      	movs	r3, #23
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d11a      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d32:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	0049      	lsls	r1, r1, #1
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d40:	f7fe f846 	bl	8000dd0 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe f841 	bl	8000dd0 <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e077      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	23c0      	movs	r3, #192	; 0xc0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d034      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d02c      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d8a:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	0249      	lsls	r1, r1, #9
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002da8:	492d      	ldr	r1, [pc, #180]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002daa:	400a      	ands	r2, r1
 8002dac:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f808 	bl	8000dd0 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	e009      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fe f803 	bl	8000dd0 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e038      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df8:	2317      	movs	r3, #23
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e08:	4917      	ldr	r1, [pc, #92]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2201      	movs	r2, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	4393      	bics	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2220      	movs	r2, #32
 8002e32:	4013      	ands	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e46:	430a      	orrs	r2, r1
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b006      	add	sp, #24
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	fffffcff 	.word	0xfffffcff
 8002e60:	fffeffff 	.word	0xfffeffff
 8002e64:	00001388 	.word	0x00001388
 8002e68:	efffffff 	.word	0xefffffff

08002e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e044      	b.n	8002f08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2270      	movs	r2, #112	; 0x70
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7fd fdf7 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2224      	movs	r2, #36	; 0x24
 8002e9a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f988 	bl	80031c4 <UART_SetConfig>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e024      	b.n	8002f08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 fb01 	bl	80034d0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	490d      	ldr	r1, [pc, #52]	; (8002f10 <HAL_UART_Init+0xa4>)
 8002eda:	400a      	ands	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2108      	movs	r1, #8
 8002eea:	438a      	bics	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 fb99 	bl	8003638 <UART_CheckIdleState>
 8002f06:	0003      	movs	r3, r0
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	fffff7ff 	.word	0xfffff7ff

08002f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	1dbb      	adds	r3, r7, #6
 8002f22:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d000      	beq.n	8002f2e <HAL_UART_Transmit+0x1a>
 8002f2c:	e095      	b.n	800305a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_UART_Transmit+0x28>
 8002f34:	1dbb      	adds	r3, r7, #6
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e08d      	b.n	800305c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	015b      	lsls	r3, r3, #5
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d109      	bne.n	8002f60 <HAL_UART_Transmit+0x4c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d001      	beq.n	8002f60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e07d      	b.n	800305c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2270      	movs	r2, #112	; 0x70
 8002f64:	5c9b      	ldrb	r3, [r3, r2]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Transmit+0x5a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e076      	b.n	800305c <HAL_UART_Transmit+0x148>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2270      	movs	r2, #112	; 0x70
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2221      	movs	r2, #33	; 0x21
 8002f80:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f82:	f7fd ff25 	bl	8000dd0 <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1dba      	adds	r2, r7, #6
 8002f8e:	2150      	movs	r1, #80	; 0x50
 8002f90:	8812      	ldrh	r2, [r2, #0]
 8002f92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1dba      	adds	r2, r7, #6
 8002f98:	2152      	movs	r1, #82	; 0x52
 8002f9a:	8812      	ldrh	r2, [r2, #0]
 8002f9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	015b      	lsls	r3, r3, #5
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d108      	bne.n	8002fbc <HAL_UART_Transmit+0xa8>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc4:	e02d      	b.n	8003022 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	0013      	movs	r3, r2
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	f000 fb76 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e03d      	b.n	800305c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	05d2      	lsls	r2, r2, #23
 8002ff0:	0dd2      	lsrs	r2, r2, #23
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e008      	b.n	8003010 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b292      	uxth	r2, r2
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2252      	movs	r2, #82	; 0x52
 8003014:	5a9b      	ldrh	r3, [r3, r2]
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b299      	uxth	r1, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2252      	movs	r2, #82	; 0x52
 8003020:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2252      	movs	r2, #82	; 0x52
 8003026:	5a9b      	ldrh	r3, [r3, r2]
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1cb      	bne.n	8002fc6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	0013      	movs	r3, r2
 8003038:	2200      	movs	r2, #0
 800303a:	2140      	movs	r1, #64	; 0x40
 800303c:	f000 fb42 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e009      	b.n	800305c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2270      	movs	r2, #112	; 0x70
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b008      	add	sp, #32
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	1dbb      	adds	r3, r7, #6
 8003070:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003076:	2b20      	cmp	r3, #32
 8003078:	d000      	beq.n	800307c <HAL_UART_Receive_DMA+0x18>
 800307a:	e07f      	b.n	800317c <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_Receive_DMA+0x26>
 8003082:	1dbb      	adds	r3, r7, #6
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e077      	b.n	800317e <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	015b      	lsls	r3, r3, #5
 8003096:	429a      	cmp	r2, r3
 8003098:	d109      	bne.n	80030ae <HAL_UART_Receive_DMA+0x4a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2201      	movs	r2, #1
 80030a6:	4013      	ands	r3, r2
 80030a8:	d001      	beq.n	80030ae <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e067      	b.n	800317e <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2270      	movs	r2, #112	; 0x70
 80030b2:	5c9b      	ldrb	r3, [r3, r2]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Receive_DMA+0x58>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e060      	b.n	800317e <HAL_UART_Receive_DMA+0x11a>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2270      	movs	r2, #112	; 0x70
 80030c0:	2101      	movs	r1, #1
 80030c2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1dba      	adds	r2, r7, #6
 80030ce:	2158      	movs	r1, #88	; 0x58
 80030d0:	8812      	ldrh	r2, [r2, #0]
 80030d2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2222      	movs	r2, #34	; 0x22
 80030de:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02a      	beq.n	800313e <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <HAL_UART_Receive_DMA+0x124>)
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f4:	4a25      	ldr	r2, [pc, #148]	; (800318c <HAL_UART_Receive_DMA+0x128>)
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fc:	4a24      	ldr	r2, [pc, #144]	; (8003190 <HAL_UART_Receive_DMA+0x12c>)
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003104:	2200      	movs	r2, #0
 8003106:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	0019      	movs	r1, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	001a      	movs	r2, r3
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f7fd ff87 	bl	8001030 <HAL_DMA_Start_IT>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d00b      	beq.n	800313e <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2270      	movs	r2, #112	; 0x70
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e01f      	b.n	800317e <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2270      	movs	r2, #112	; 0x70
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	0049      	lsls	r1, r1, #1
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2101      	movs	r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2140      	movs	r1, #64	; 0x40
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	08003829 	.word	0x08003829
 800318c:	08003891 	.word	0x08003891
 8003190:	080038af 	.word	0x080038af

08003194 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d0:	2317      	movs	r3, #23
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4aad      	ldr	r2, [pc, #692]	; (80034ac <UART_SetConfig+0x2e8>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4aa8      	ldr	r2, [pc, #672]	; (80034b0 <UART_SetConfig+0x2ec>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a9f      	ldr	r2, [pc, #636]	; (80034b4 <UART_SetConfig+0x2f0>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a9b      	ldr	r2, [pc, #620]	; (80034b8 <UART_SetConfig+0x2f4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d125      	bne.n	800329a <UART_SetConfig+0xd6>
 800324e:	4b9b      	ldr	r3, [pc, #620]	; (80034bc <UART_SetConfig+0x2f8>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2203      	movs	r2, #3
 8003254:	4013      	ands	r3, r2
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00f      	beq.n	800327a <UART_SetConfig+0xb6>
 800325a:	d304      	bcc.n	8003266 <UART_SetConfig+0xa2>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d011      	beq.n	8003284 <UART_SetConfig+0xc0>
 8003260:	2b03      	cmp	r3, #3
 8003262:	d005      	beq.n	8003270 <UART_SetConfig+0xac>
 8003264:	e013      	b.n	800328e <UART_SetConfig+0xca>
 8003266:	231f      	movs	r3, #31
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e022      	b.n	80032b6 <UART_SetConfig+0xf2>
 8003270:	231f      	movs	r3, #31
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e01d      	b.n	80032b6 <UART_SetConfig+0xf2>
 800327a:	231f      	movs	r3, #31
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e018      	b.n	80032b6 <UART_SetConfig+0xf2>
 8003284:	231f      	movs	r3, #31
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2208      	movs	r2, #8
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e013      	b.n	80032b6 <UART_SetConfig+0xf2>
 800328e:	231f      	movs	r3, #31
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	2210      	movs	r2, #16
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	e00d      	b.n	80032b6 <UART_SetConfig+0xf2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a88      	ldr	r2, [pc, #544]	; (80034c0 <UART_SetConfig+0x2fc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d104      	bne.n	80032ae <UART_SetConfig+0xea>
 80032a4:	231f      	movs	r3, #31
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e003      	b.n	80032b6 <UART_SetConfig+0xf2>
 80032ae:	231f      	movs	r3, #31
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2210      	movs	r2, #16
 80032b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	429a      	cmp	r2, r3
 80032c0:	d000      	beq.n	80032c4 <UART_SetConfig+0x100>
 80032c2:	e07d      	b.n	80033c0 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80032c4:	231f      	movs	r3, #31
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d01c      	beq.n	8003308 <UART_SetConfig+0x144>
 80032ce:	dc02      	bgt.n	80032d6 <UART_SetConfig+0x112>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <UART_SetConfig+0x11c>
 80032d4:	e04b      	b.n	800336e <UART_SetConfig+0x1aa>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d025      	beq.n	8003326 <UART_SetConfig+0x162>
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d037      	beq.n	800334e <UART_SetConfig+0x18a>
 80032de:	e046      	b.n	800336e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7ff fce0 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	005a      	lsls	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	18d2      	adds	r2, r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0019      	movs	r1, r3
 80032fa:	0010      	movs	r0, r2
 80032fc:	f7fc ff04 	bl	8000108 <__udivsi3>
 8003300:	0003      	movs	r3, r0
 8003302:	b29b      	uxth	r3, r3
 8003304:	61bb      	str	r3, [r7, #24]
        break;
 8003306:	e037      	b.n	8003378 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	4a6d      	ldr	r2, [pc, #436]	; (80034c4 <UART_SetConfig+0x300>)
 8003310:	189a      	adds	r2, r3, r2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0019      	movs	r1, r3
 8003318:	0010      	movs	r0, r2
 800331a:	f7fc fef5 	bl	8000108 <__udivsi3>
 800331e:	0003      	movs	r3, r0
 8003320:	b29b      	uxth	r3, r3
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e028      	b.n	8003378 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7ff fc4f 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 800332a:	0003      	movs	r3, r0
 800332c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	005a      	lsls	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	18d2      	adds	r2, r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	0019      	movs	r1, r3
 8003340:	0010      	movs	r0, r2
 8003342:	f7fc fee1 	bl	8000108 <__udivsi3>
 8003346:	0003      	movs	r3, r0
 8003348:	b29b      	uxth	r3, r3
 800334a:	61bb      	str	r3, [r7, #24]
        break;
 800334c:	e014      	b.n	8003378 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	0252      	lsls	r2, r2, #9
 8003358:	189a      	adds	r2, r3, r2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7fc fed1 	bl	8000108 <__udivsi3>
 8003366:	0003      	movs	r3, r0
 8003368:	b29b      	uxth	r3, r3
 800336a:	61bb      	str	r3, [r7, #24]
        break;
 800336c:	e004      	b.n	8003378 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800336e:	2317      	movs	r3, #23
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
        break;
 8003376:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d91b      	bls.n	80033b6 <UART_SetConfig+0x1f2>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4a51      	ldr	r2, [pc, #324]	; (80034c8 <UART_SetConfig+0x304>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d817      	bhi.n	80033b6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	b29a      	uxth	r2, r3
 800338a:	200a      	movs	r0, #10
 800338c:	183b      	adds	r3, r7, r0
 800338e:	210f      	movs	r1, #15
 8003390:	438a      	bics	r2, r1
 8003392:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	2207      	movs	r2, #7
 800339c:	4013      	ands	r3, r2
 800339e:	b299      	uxth	r1, r3
 80033a0:	183b      	adds	r3, r7, r0
 80033a2:	183a      	adds	r2, r7, r0
 80033a4:	8812      	ldrh	r2, [r2, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	183a      	adds	r2, r7, r0
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	e06c      	b.n	8003490 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80033b6:	2317      	movs	r3, #23
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e067      	b.n	8003490 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80033c0:	231f      	movs	r3, #31
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d01b      	beq.n	8003402 <UART_SetConfig+0x23e>
 80033ca:	dc02      	bgt.n	80033d2 <UART_SetConfig+0x20e>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <UART_SetConfig+0x218>
 80033d0:	e049      	b.n	8003466 <UART_SetConfig+0x2a2>
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d024      	beq.n	8003420 <UART_SetConfig+0x25c>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d035      	beq.n	8003446 <UART_SetConfig+0x282>
 80033da:	e044      	b.n	8003466 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7ff fc62 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80033e0:	0003      	movs	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	085a      	lsrs	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	18d2      	adds	r2, r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0019      	movs	r1, r3
 80033f4:	0010      	movs	r0, r2
 80033f6:	f7fc fe87 	bl	8000108 <__udivsi3>
 80033fa:	0003      	movs	r3, r0
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	61bb      	str	r3, [r7, #24]
        break;
 8003400:	e036      	b.n	8003470 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	4a30      	ldr	r2, [pc, #192]	; (80034cc <UART_SetConfig+0x308>)
 800340a:	189a      	adds	r2, r3, r2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0019      	movs	r1, r3
 8003412:	0010      	movs	r0, r2
 8003414:	f7fc fe78 	bl	8000108 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	b29b      	uxth	r3, r3
 800341c:	61bb      	str	r3, [r7, #24]
        break;
 800341e:	e027      	b.n	8003470 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003420:	f7ff fbd2 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8003424:	0003      	movs	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	085a      	lsrs	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	18d2      	adds	r2, r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0019      	movs	r1, r3
 8003438:	0010      	movs	r0, r2
 800343a:	f7fc fe65 	bl	8000108 <__udivsi3>
 800343e:	0003      	movs	r3, r0
 8003440:	b29b      	uxth	r3, r3
 8003442:	61bb      	str	r3, [r7, #24]
        break;
 8003444:	e014      	b.n	8003470 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	0212      	lsls	r2, r2, #8
 8003450:	189a      	adds	r2, r3, r2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0019      	movs	r1, r3
 8003458:	0010      	movs	r0, r2
 800345a:	f7fc fe55 	bl	8000108 <__udivsi3>
 800345e:	0003      	movs	r3, r0
 8003460:	b29b      	uxth	r3, r3
 8003462:	61bb      	str	r3, [r7, #24]
        break;
 8003464:	e004      	b.n	8003470 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003466:	2317      	movs	r3, #23
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
        break;
 800346e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	d908      	bls.n	8003488 <UART_SetConfig+0x2c4>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <UART_SetConfig+0x304>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d804      	bhi.n	8003488 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e003      	b.n	8003490 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003488:	2317      	movs	r3, #23
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800349c:	2317      	movs	r3, #23
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	781b      	ldrb	r3, [r3, #0]
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b008      	add	sp, #32
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	ffff69f3 	.word	0xffff69f3
 80034b0:	ffffcfff 	.word	0xffffcfff
 80034b4:	fffff4ff 	.word	0xfffff4ff
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40004400 	.word	0x40004400
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	0000ffff 	.word	0x0000ffff
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2201      	movs	r2, #1
 80034de:	4013      	ands	r3, r2
 80034e0:	d00b      	beq.n	80034fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <UART_AdvFeatureConfig+0x144>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2202      	movs	r2, #2
 8003500:	4013      	ands	r3, r2
 8003502:	d00b      	beq.n	800351c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a43      	ldr	r2, [pc, #268]	; (8003618 <UART_AdvFeatureConfig+0x148>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2204      	movs	r2, #4
 8003522:	4013      	ands	r3, r2
 8003524:	d00b      	beq.n	800353e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a3b      	ldr	r2, [pc, #236]	; (800361c <UART_AdvFeatureConfig+0x14c>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2208      	movs	r2, #8
 8003544:	4013      	ands	r3, r2
 8003546:	d00b      	beq.n	8003560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a34      	ldr	r2, [pc, #208]	; (8003620 <UART_AdvFeatureConfig+0x150>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2210      	movs	r2, #16
 8003566:	4013      	ands	r3, r2
 8003568:	d00b      	beq.n	8003582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <UART_AdvFeatureConfig+0x154>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2220      	movs	r2, #32
 8003588:	4013      	ands	r3, r2
 800358a:	d00b      	beq.n	80035a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a25      	ldr	r2, [pc, #148]	; (8003628 <UART_AdvFeatureConfig+0x158>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	4013      	ands	r3, r2
 80035ac:	d01d      	beq.n	80035ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <UART_AdvFeatureConfig+0x15c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	035b      	lsls	r3, r3, #13
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10b      	bne.n	80035ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a15      	ldr	r2, [pc, #84]	; (8003630 <UART_AdvFeatureConfig+0x160>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	4013      	ands	r3, r2
 80035f2:	d00b      	beq.n	800360c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <UART_AdvFeatureConfig+0x164>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fffdffff 	.word	0xfffdffff
 8003618:	fffeffff 	.word	0xfffeffff
 800361c:	fffbffff 	.word	0xfffbffff
 8003620:	ffff7fff 	.word	0xffff7fff
 8003624:	ffffefff 	.word	0xffffefff
 8003628:	ffffdfff 	.word	0xffffdfff
 800362c:	ffefffff 	.word	0xffefffff
 8003630:	ff9fffff 	.word	0xff9fffff
 8003634:	fff7ffff 	.word	0xfff7ffff

08003638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003646:	f7fd fbc3 	bl	8000dd0 <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2208      	movs	r2, #8
 8003656:	4013      	ands	r3, r2
 8003658:	2b08      	cmp	r3, #8
 800365a:	d10d      	bne.n	8003678 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	0399      	lsls	r1, r3, #14
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <UART_CheckIdleState+0x88>)
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	0013      	movs	r3, r2
 800366a:	2200      	movs	r2, #0
 800366c:	f000 f82a 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e01f      	b.n	80036b8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	4013      	ands	r3, r2
 8003682:	2b04      	cmp	r3, #4
 8003684:	d10d      	bne.n	80036a2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	03d9      	lsls	r1, r3, #15
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <UART_CheckIdleState+0x88>)
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	0013      	movs	r3, r2
 8003694:	2200      	movs	r2, #0
 8003696:	f000 f815 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 800369a:	1e03      	subs	r3, r0, #0
 800369c:	d001      	beq.n	80036a2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00a      	b.n	80036b8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2270      	movs	r2, #112	; 0x70
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	01ffffff 	.word	0x01ffffff

080036c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	1dfb      	adds	r3, r7, #7
 80036d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d4:	e05d      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3301      	adds	r3, #1
 80036da:	d05a      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036dc:	f7fd fb78 	bl	8000dd0 <HAL_GetTick>
 80036e0:	0002      	movs	r2, r0
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11b      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	492f      	ldr	r1, [pc, #188]	; (80037bc <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036fe:	400a      	ands	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	438a      	bics	r2, r1
 8003710:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2270      	movs	r2, #112	; 0x70
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e043      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2204      	movs	r2, #4
 8003732:	4013      	ands	r3, r2
 8003734:	d02d      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	401a      	ands	r2, r3
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	429a      	cmp	r2, r3
 8003748:	d123      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4917      	ldr	r1, [pc, #92]	; (80037bc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003760:	400a      	ands	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2101      	movs	r1, #1
 8003770:	438a      	bics	r2, r1
 8003772:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2270      	movs	r2, #112	; 0x70
 800378a:	2100      	movs	r1, #0
 800378c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e00f      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	425a      	negs	r2, r3
 80037a2:	4153      	adcs	r3, r2
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	001a      	movs	r2, r3
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d092      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	fffffe5f 	.word	0xfffffe5f

080037c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	21c0      	movs	r1, #192	; 0xc0
 80037d4:	438a      	bics	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b002      	add	sp, #8
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	490a      	ldr	r1, [pc, #40]	; (8003824 <UART_EndRxTransfer+0x3c>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	438a      	bics	r2, r1
 800380e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	fffffedf 	.word	0xfffffedf

08003828 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b20      	cmp	r3, #32
 800383c:	d01e      	beq.n	800387c <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	225a      	movs	r2, #90	; 0x5a
 8003842:	2100      	movs	r1, #0
 8003844:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <UART_DMAReceiveCplt+0x64>)
 8003852:	400a      	ands	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	438a      	bics	r2, r1
 8003864:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2140      	movs	r1, #64	; 0x40
 8003872:	438a      	bics	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fc88 	bl	8003194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b004      	add	sp, #16
 800388a:	bd80      	pop	{r7, pc}
 800388c:	fffffeff 	.word	0xfffffeff

08003890 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7ff fc7f 	bl	80031a4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d10a      	bne.n	80038ec <UART_DMAError+0x3e>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b21      	cmp	r3, #33	; 0x21
 80038da:	d107      	bne.n	80038ec <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2252      	movs	r2, #82	; 0x52
 80038e0:	2100      	movs	r1, #0
 80038e2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff ff6a 	bl	80037c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d10a      	bne.n	8003910 <UART_DMAError+0x62>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b22      	cmp	r3, #34	; 0x22
 80038fe:	d107      	bne.n	8003910 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	225a      	movs	r2, #90	; 0x5a
 8003904:	2100      	movs	r1, #0
 8003906:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff ff6c 	bl	80037e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003914:	2210      	movs	r2, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	0018      	movs	r0, r3
 8003920:	f7ff fc48 	bl	80031b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b006      	add	sp, #24
 800392a:	bd80      	pop	{r7, pc}

0800392c <atoi>:
 800392c:	b510      	push	{r4, lr}
 800392e:	220a      	movs	r2, #10
 8003930:	2100      	movs	r1, #0
 8003932:	f000 f9c1 	bl	8003cb8 <strtol>
 8003936:	bd10      	pop	{r4, pc}

08003938 <__errno>:
 8003938:	4b01      	ldr	r3, [pc, #4]	; (8003940 <__errno+0x8>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	4770      	bx	lr
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000000c 	.word	0x2000000c

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	2600      	movs	r6, #0
 8003948:	4d0c      	ldr	r5, [pc, #48]	; (800397c <__libc_init_array+0x38>)
 800394a:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	2600      	movs	r6, #0
 8003956:	f001 f92f 	bl	8004bb8 <_init>
 800395a:	4d0a      	ldr	r5, [pc, #40]	; (8003984 <__libc_init_array+0x40>)
 800395c:	4c0a      	ldr	r4, [pc, #40]	; (8003988 <__libc_init_array+0x44>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	00b3      	lsls	r3, r6, #2
 800396a:	58eb      	ldr	r3, [r5, r3]
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	00b3      	lsls	r3, r6, #2
 8003974:	58eb      	ldr	r3, [r5, r3]
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	08004eac 	.word	0x08004eac
 8003980:	08004eac 	.word	0x08004eac
 8003984:	08004eac 	.word	0x08004eac
 8003988:	08004eb0 	.word	0x08004eb0

0800398c <memset>:
 800398c:	0003      	movs	r3, r0
 800398e:	1812      	adds	r2, r2, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	7019      	strb	r1, [r3, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <iprintf>:
 800399c:	b40f      	push	{r0, r1, r2, r3}
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <iprintf+0x30>)
 80039a0:	b513      	push	{r0, r1, r4, lr}
 80039a2:	681c      	ldr	r4, [r3, #0]
 80039a4:	2c00      	cmp	r4, #0
 80039a6:	d005      	beq.n	80039b4 <iprintf+0x18>
 80039a8:	69a3      	ldr	r3, [r4, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <iprintf+0x18>
 80039ae:	0020      	movs	r0, r4
 80039b0:	f000 fb5a 	bl	8004068 <__sinit>
 80039b4:	ab05      	add	r3, sp, #20
 80039b6:	9a04      	ldr	r2, [sp, #16]
 80039b8:	68a1      	ldr	r1, [r4, #8]
 80039ba:	0020      	movs	r0, r4
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	f000 fd4f 	bl	8004460 <_vfiprintf_r>
 80039c2:	bc16      	pop	{r1, r2, r4}
 80039c4:	bc08      	pop	{r3}
 80039c6:	b004      	add	sp, #16
 80039c8:	4718      	bx	r3
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	2000000c 	.word	0x2000000c

080039d0 <putchar>:
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <putchar+0x24>)
 80039d2:	b570      	push	{r4, r5, r6, lr}
 80039d4:	681c      	ldr	r4, [r3, #0]
 80039d6:	0005      	movs	r5, r0
 80039d8:	2c00      	cmp	r4, #0
 80039da:	d005      	beq.n	80039e8 <putchar+0x18>
 80039dc:	69a3      	ldr	r3, [r4, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <putchar+0x18>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f000 fb40 	bl	8004068 <__sinit>
 80039e8:	0029      	movs	r1, r5
 80039ea:	68a2      	ldr	r2, [r4, #8]
 80039ec:	0020      	movs	r0, r4
 80039ee:	f000 ffc3 	bl	8004978 <_putc_r>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <_puts_r>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	0005      	movs	r5, r0
 80039fc:	000e      	movs	r6, r1
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d004      	beq.n	8003a0c <_puts_r+0x14>
 8003a02:	6983      	ldr	r3, [r0, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <_puts_r+0x14>
 8003a08:	f000 fb2e 	bl	8004068 <__sinit>
 8003a0c:	69ab      	ldr	r3, [r5, #24]
 8003a0e:	68ac      	ldr	r4, [r5, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <_puts_r+0x22>
 8003a14:	0028      	movs	r0, r5
 8003a16:	f000 fb27 	bl	8004068 <__sinit>
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <_puts_r+0xb4>)
 8003a1c:	429c      	cmp	r4, r3
 8003a1e:	d10f      	bne.n	8003a40 <_puts_r+0x48>
 8003a20:	686c      	ldr	r4, [r5, #4]
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	d502      	bpl.n	8003a2e <_puts_r+0x36>
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11f      	bne.n	8003a6e <_puts_r+0x76>
 8003a2e:	0021      	movs	r1, r4
 8003a30:	0028      	movs	r0, r5
 8003a32:	f000 f9ab 	bl	8003d8c <__swsetup_r>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d019      	beq.n	8003a6e <_puts_r+0x76>
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	4240      	negs	r0, r0
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <_puts_r+0xb8>)
 8003a42:	429c      	cmp	r4, r3
 8003a44:	d101      	bne.n	8003a4a <_puts_r+0x52>
 8003a46:	68ac      	ldr	r4, [r5, #8]
 8003a48:	e7eb      	b.n	8003a22 <_puts_r+0x2a>
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <_puts_r+0xbc>)
 8003a4c:	429c      	cmp	r4, r3
 8003a4e:	d1e8      	bne.n	8003a22 <_puts_r+0x2a>
 8003a50:	68ec      	ldr	r4, [r5, #12]
 8003a52:	e7e6      	b.n	8003a22 <_puts_r+0x2a>
 8003a54:	3601      	adds	r6, #1
 8003a56:	60a3      	str	r3, [r4, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	da04      	bge.n	8003a66 <_puts_r+0x6e>
 8003a5c:	69a2      	ldr	r2, [r4, #24]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	dc16      	bgt.n	8003a90 <_puts_r+0x98>
 8003a62:	290a      	cmp	r1, #10
 8003a64:	d014      	beq.n	8003a90 <_puts_r+0x98>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	6022      	str	r2, [r4, #0]
 8003a6c:	7019      	strb	r1, [r3, #0]
 8003a6e:	68a3      	ldr	r3, [r4, #8]
 8003a70:	7831      	ldrb	r1, [r6, #0]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	2900      	cmp	r1, #0
 8003a76:	d1ed      	bne.n	8003a54 <_puts_r+0x5c>
 8003a78:	60a3      	str	r3, [r4, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0f      	bge.n	8003a9e <_puts_r+0xa6>
 8003a7e:	0022      	movs	r2, r4
 8003a80:	310a      	adds	r1, #10
 8003a82:	0028      	movs	r0, r5
 8003a84:	f000 f92c 	bl	8003ce0 <__swbuf_r>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d0d6      	beq.n	8003a3a <_puts_r+0x42>
 8003a8c:	200a      	movs	r0, #10
 8003a8e:	e7d6      	b.n	8003a3e <_puts_r+0x46>
 8003a90:	0022      	movs	r2, r4
 8003a92:	0028      	movs	r0, r5
 8003a94:	f000 f924 	bl	8003ce0 <__swbuf_r>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d1e8      	bne.n	8003a6e <_puts_r+0x76>
 8003a9c:	e7cd      	b.n	8003a3a <_puts_r+0x42>
 8003a9e:	200a      	movs	r0, #10
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	6022      	str	r2, [r4, #0]
 8003aa6:	7018      	strb	r0, [r3, #0]
 8003aa8:	e7c9      	b.n	8003a3e <_puts_r+0x46>
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	08004d2c 	.word	0x08004d2c
 8003ab0:	08004d4c 	.word	0x08004d4c
 8003ab4:	08004d0c 	.word	0x08004d0c

08003ab8 <puts>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <puts+0x10>)
 8003abc:	0001      	movs	r1, r0
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	f7ff ff9a 	bl	80039f8 <_puts_r>
 8003ac4:	bd10      	pop	{r4, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	2000000c 	.word	0x2000000c

08003acc <strcasecmp>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	0007      	movs	r7, r0
 8003ad0:	000e      	movs	r6, r1
 8003ad2:	783c      	ldrb	r4, [r7, #0]
 8003ad4:	f000 fb5e 	bl	8004194 <__locale_ctype_ptr>
 8003ad8:	2203      	movs	r2, #3
 8003ada:	1900      	adds	r0, r0, r4
 8003adc:	7843      	ldrb	r3, [r0, #1]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d100      	bne.n	8003ae6 <strcasecmp+0x1a>
 8003ae4:	3420      	adds	r4, #32
 8003ae6:	7835      	ldrb	r5, [r6, #0]
 8003ae8:	f000 fb54 	bl	8004194 <__locale_ctype_ptr>
 8003aec:	2203      	movs	r2, #3
 8003aee:	1940      	adds	r0, r0, r5
 8003af0:	7843      	ldrb	r3, [r0, #1]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d100      	bne.n	8003afa <strcasecmp+0x2e>
 8003af8:	3520      	adds	r5, #32
 8003afa:	1b60      	subs	r0, r4, r5
 8003afc:	d103      	bne.n	8003b06 <strcasecmp+0x3a>
 8003afe:	3701      	adds	r7, #1
 8003b00:	3601      	adds	r6, #1
 8003b02:	2d00      	cmp	r5, #0
 8003b04:	d1e5      	bne.n	8003ad2 <strcasecmp+0x6>
 8003b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b08 <strtok>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <strtok+0x4c>)
 8003b0c:	0006      	movs	r6, r0
 8003b0e:	681d      	ldr	r5, [r3, #0]
 8003b10:	000f      	movs	r7, r1
 8003b12:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	d116      	bne.n	8003b46 <strtok+0x3e>
 8003b18:	2050      	movs	r0, #80	; 0x50
 8003b1a:	f000 fbb5 	bl	8004288 <malloc>
 8003b1e:	65a8      	str	r0, [r5, #88]	; 0x58
 8003b20:	6004      	str	r4, [r0, #0]
 8003b22:	6044      	str	r4, [r0, #4]
 8003b24:	6084      	str	r4, [r0, #8]
 8003b26:	60c4      	str	r4, [r0, #12]
 8003b28:	6104      	str	r4, [r0, #16]
 8003b2a:	6144      	str	r4, [r0, #20]
 8003b2c:	6184      	str	r4, [r0, #24]
 8003b2e:	6284      	str	r4, [r0, #40]	; 0x28
 8003b30:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003b32:	6304      	str	r4, [r0, #48]	; 0x30
 8003b34:	6344      	str	r4, [r0, #52]	; 0x34
 8003b36:	6384      	str	r4, [r0, #56]	; 0x38
 8003b38:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003b3a:	6404      	str	r4, [r0, #64]	; 0x40
 8003b3c:	6444      	str	r4, [r0, #68]	; 0x44
 8003b3e:	6484      	str	r4, [r0, #72]	; 0x48
 8003b40:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003b42:	7704      	strb	r4, [r0, #28]
 8003b44:	6244      	str	r4, [r0, #36]	; 0x24
 8003b46:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003b48:	0039      	movs	r1, r7
 8003b4a:	0030      	movs	r0, r6
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f000 f803 	bl	8003b58 <__strtok_r>
 8003b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b54:	2000000c 	.word	0x2000000c

08003b58 <__strtok_r>:
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d104      	bne.n	8003b68 <__strtok_r+0x10>
 8003b5e:	6810      	ldr	r0, [r2, #0]
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d101      	bne.n	8003b68 <__strtok_r+0x10>
 8003b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b66:	0020      	movs	r0, r4
 8003b68:	000e      	movs	r6, r1
 8003b6a:	7805      	ldrb	r5, [r0, #0]
 8003b6c:	1c44      	adds	r4, r0, #1
 8003b6e:	7837      	ldrb	r7, [r6, #0]
 8003b70:	2f00      	cmp	r7, #0
 8003b72:	d104      	bne.n	8003b7e <__strtok_r+0x26>
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	d110      	bne.n	8003b9a <__strtok_r+0x42>
 8003b78:	6015      	str	r5, [r2, #0]
 8003b7a:	0028      	movs	r0, r5
 8003b7c:	e7f2      	b.n	8003b64 <__strtok_r+0xc>
 8003b7e:	3601      	adds	r6, #1
 8003b80:	42bd      	cmp	r5, r7
 8003b82:	d1f4      	bne.n	8003b6e <__strtok_r+0x16>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ee      	bne.n	8003b66 <__strtok_r+0xe>
 8003b88:	6014      	str	r4, [r2, #0]
 8003b8a:	7003      	strb	r3, [r0, #0]
 8003b8c:	e7ea      	b.n	8003b64 <__strtok_r+0xc>
 8003b8e:	0033      	movs	r3, r6
 8003b90:	e00d      	b.n	8003bae <__strtok_r+0x56>
 8003b92:	3501      	adds	r5, #1
 8003b94:	2f00      	cmp	r7, #0
 8003b96:	d103      	bne.n	8003ba0 <__strtok_r+0x48>
 8003b98:	001c      	movs	r4, r3
 8003b9a:	000d      	movs	r5, r1
 8003b9c:	7826      	ldrb	r6, [r4, #0]
 8003b9e:	1c63      	adds	r3, r4, #1
 8003ba0:	782f      	ldrb	r7, [r5, #0]
 8003ba2:	42be      	cmp	r6, r7
 8003ba4:	d1f5      	bne.n	8003b92 <__strtok_r+0x3a>
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	d0f1      	beq.n	8003b8e <__strtok_r+0x36>
 8003baa:	2100      	movs	r1, #0
 8003bac:	7021      	strb	r1, [r4, #0]
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e7d8      	b.n	8003b64 <__strtok_r+0xc>
	...

08003bb4 <_strtol_l.isra.0>:
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	001f      	movs	r7, r3
 8003bb8:	000e      	movs	r6, r1
 8003bba:	b087      	sub	sp, #28
 8003bbc:	9005      	str	r0, [sp, #20]
 8003bbe:	9101      	str	r1, [sp, #4]
 8003bc0:	9202      	str	r2, [sp, #8]
 8003bc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003bc4:	7834      	ldrb	r4, [r6, #0]
 8003bc6:	f000 fae2 	bl	800418e <__locale_ctype_ptr_l>
 8003bca:	2208      	movs	r2, #8
 8003bcc:	1900      	adds	r0, r0, r4
 8003bce:	7843      	ldrb	r3, [r0, #1]
 8003bd0:	1c75      	adds	r5, r6, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d136      	bne.n	8003c44 <_strtol_l.isra.0+0x90>
 8003bd6:	2c2d      	cmp	r4, #45	; 0x2d
 8003bd8:	d136      	bne.n	8003c48 <_strtol_l.isra.0+0x94>
 8003bda:	1cb5      	adds	r5, r6, #2
 8003bdc:	7874      	ldrb	r4, [r6, #1]
 8003bde:	2601      	movs	r6, #1
 8003be0:	2f00      	cmp	r7, #0
 8003be2:	d062      	beq.n	8003caa <_strtol_l.isra.0+0xf6>
 8003be4:	2f10      	cmp	r7, #16
 8003be6:	d109      	bne.n	8003bfc <_strtol_l.isra.0+0x48>
 8003be8:	2c30      	cmp	r4, #48	; 0x30
 8003bea:	d107      	bne.n	8003bfc <_strtol_l.isra.0+0x48>
 8003bec:	2220      	movs	r2, #32
 8003bee:	782b      	ldrb	r3, [r5, #0]
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	2b58      	cmp	r3, #88	; 0x58
 8003bf4:	d154      	bne.n	8003ca0 <_strtol_l.isra.0+0xec>
 8003bf6:	2710      	movs	r7, #16
 8003bf8:	786c      	ldrb	r4, [r5, #1]
 8003bfa:	3502      	adds	r5, #2
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <_strtol_l.isra.0+0x100>)
 8003bfe:	0039      	movs	r1, r7
 8003c00:	18f3      	adds	r3, r6, r3
 8003c02:	0018      	movs	r0, r3
 8003c04:	9303      	str	r3, [sp, #12]
 8003c06:	f7fc fb05 	bl	8000214 <__aeabi_uidivmod>
 8003c0a:	9104      	str	r1, [sp, #16]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2300      	movs	r3, #0
 8003c10:	4249      	negs	r1, r1
 8003c12:	0002      	movs	r2, r0
 8003c14:	468c      	mov	ip, r1
 8003c16:	0018      	movs	r0, r3
 8003c18:	0021      	movs	r1, r4
 8003c1a:	3930      	subs	r1, #48	; 0x30
 8003c1c:	2909      	cmp	r1, #9
 8003c1e:	d81a      	bhi.n	8003c56 <_strtol_l.isra.0+0xa2>
 8003c20:	000c      	movs	r4, r1
 8003c22:	42a7      	cmp	r7, r4
 8003c24:	dd23      	ble.n	8003c6e <_strtol_l.isra.0+0xba>
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	d009      	beq.n	8003c3e <_strtol_l.isra.0+0x8a>
 8003c2a:	4663      	mov	r3, ip
 8003c2c:	4282      	cmp	r2, r0
 8003c2e:	d306      	bcc.n	8003c3e <_strtol_l.isra.0+0x8a>
 8003c30:	d102      	bne.n	8003c38 <_strtol_l.isra.0+0x84>
 8003c32:	9904      	ldr	r1, [sp, #16]
 8003c34:	42a1      	cmp	r1, r4
 8003c36:	db02      	blt.n	8003c3e <_strtol_l.isra.0+0x8a>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	4378      	muls	r0, r7
 8003c3c:	1820      	adds	r0, r4, r0
 8003c3e:	782c      	ldrb	r4, [r5, #0]
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7e9      	b.n	8003c18 <_strtol_l.isra.0+0x64>
 8003c44:	002e      	movs	r6, r5
 8003c46:	e7bc      	b.n	8003bc2 <_strtol_l.isra.0+0xe>
 8003c48:	2c2b      	cmp	r4, #43	; 0x2b
 8003c4a:	d001      	beq.n	8003c50 <_strtol_l.isra.0+0x9c>
 8003c4c:	001e      	movs	r6, r3
 8003c4e:	e7c7      	b.n	8003be0 <_strtol_l.isra.0+0x2c>
 8003c50:	1cb5      	adds	r5, r6, #2
 8003c52:	7874      	ldrb	r4, [r6, #1]
 8003c54:	e7fa      	b.n	8003c4c <_strtol_l.isra.0+0x98>
 8003c56:	0021      	movs	r1, r4
 8003c58:	3941      	subs	r1, #65	; 0x41
 8003c5a:	2919      	cmp	r1, #25
 8003c5c:	d801      	bhi.n	8003c62 <_strtol_l.isra.0+0xae>
 8003c5e:	3c37      	subs	r4, #55	; 0x37
 8003c60:	e7df      	b.n	8003c22 <_strtol_l.isra.0+0x6e>
 8003c62:	0021      	movs	r1, r4
 8003c64:	3961      	subs	r1, #97	; 0x61
 8003c66:	2919      	cmp	r1, #25
 8003c68:	d801      	bhi.n	8003c6e <_strtol_l.isra.0+0xba>
 8003c6a:	3c57      	subs	r4, #87	; 0x57
 8003c6c:	e7d9      	b.n	8003c22 <_strtol_l.isra.0+0x6e>
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	d108      	bne.n	8003c84 <_strtol_l.isra.0+0xd0>
 8003c72:	9a05      	ldr	r2, [sp, #20]
 8003c74:	3323      	adds	r3, #35	; 0x23
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	9b02      	ldr	r3, [sp, #8]
 8003c7a:	9803      	ldr	r0, [sp, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <_strtol_l.isra.0+0xe0>
 8003c80:	b007      	add	sp, #28
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	d000      	beq.n	8003c8a <_strtol_l.isra.0+0xd6>
 8003c88:	4240      	negs	r0, r0
 8003c8a:	9a02      	ldr	r2, [sp, #8]
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	d0f7      	beq.n	8003c80 <_strtol_l.isra.0+0xcc>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <_strtol_l.isra.0+0xe4>
 8003c94:	1e6b      	subs	r3, r5, #1
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	9b02      	ldr	r3, [sp, #8]
 8003c9a:	9a01      	ldr	r2, [sp, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e7ef      	b.n	8003c80 <_strtol_l.isra.0+0xcc>
 8003ca0:	2430      	movs	r4, #48	; 0x30
 8003ca2:	2f00      	cmp	r7, #0
 8003ca4:	d1aa      	bne.n	8003bfc <_strtol_l.isra.0+0x48>
 8003ca6:	2708      	movs	r7, #8
 8003ca8:	e7a8      	b.n	8003bfc <_strtol_l.isra.0+0x48>
 8003caa:	2c30      	cmp	r4, #48	; 0x30
 8003cac:	d09e      	beq.n	8003bec <_strtol_l.isra.0+0x38>
 8003cae:	270a      	movs	r7, #10
 8003cb0:	e7a4      	b.n	8003bfc <_strtol_l.isra.0+0x48>
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	7fffffff 	.word	0x7fffffff

08003cb8 <strtol>:
 8003cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cba:	0013      	movs	r3, r2
 8003cbc:	4a06      	ldr	r2, [pc, #24]	; (8003cd8 <strtol+0x20>)
 8003cbe:	0005      	movs	r5, r0
 8003cc0:	6810      	ldr	r0, [r2, #0]
 8003cc2:	6a04      	ldr	r4, [r0, #32]
 8003cc4:	2c00      	cmp	r4, #0
 8003cc6:	d100      	bne.n	8003cca <strtol+0x12>
 8003cc8:	4c04      	ldr	r4, [pc, #16]	; (8003cdc <strtol+0x24>)
 8003cca:	000a      	movs	r2, r1
 8003ccc:	9400      	str	r4, [sp, #0]
 8003cce:	0029      	movs	r1, r5
 8003cd0:	f7ff ff70 	bl	8003bb4 <_strtol_l.isra.0>
 8003cd4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	20000070 	.word	0x20000070

08003ce0 <__swbuf_r>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	0005      	movs	r5, r0
 8003ce4:	000e      	movs	r6, r1
 8003ce6:	0014      	movs	r4, r2
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d004      	beq.n	8003cf6 <__swbuf_r+0x16>
 8003cec:	6983      	ldr	r3, [r0, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <__swbuf_r+0x16>
 8003cf2:	f000 f9b9 	bl	8004068 <__sinit>
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <__swbuf_r+0xa0>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	d12d      	bne.n	8003d58 <__swbuf_r+0x78>
 8003cfc:	686c      	ldr	r4, [r5, #4]
 8003cfe:	69a3      	ldr	r3, [r4, #24]
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	071b      	lsls	r3, r3, #28
 8003d06:	d531      	bpl.n	8003d6c <__swbuf_r+0x8c>
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02e      	beq.n	8003d6c <__swbuf_r+0x8c>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	6922      	ldr	r2, [r4, #16]
 8003d12:	b2f7      	uxtb	r7, r6
 8003d14:	1a98      	subs	r0, r3, r2
 8003d16:	6963      	ldr	r3, [r4, #20]
 8003d18:	b2f6      	uxtb	r6, r6
 8003d1a:	4283      	cmp	r3, r0
 8003d1c:	dc05      	bgt.n	8003d2a <__swbuf_r+0x4a>
 8003d1e:	0021      	movs	r1, r4
 8003d20:	0028      	movs	r0, r5
 8003d22:	f000 f933 	bl	8003f8c <_fflush_r>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d126      	bne.n	8003d78 <__swbuf_r+0x98>
 8003d2a:	68a3      	ldr	r3, [r4, #8]
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	60a3      	str	r3, [r4, #8]
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	6022      	str	r2, [r4, #0]
 8003d38:	701f      	strb	r7, [r3, #0]
 8003d3a:	6963      	ldr	r3, [r4, #20]
 8003d3c:	4283      	cmp	r3, r0
 8003d3e:	d004      	beq.n	8003d4a <__swbuf_r+0x6a>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	07db      	lsls	r3, r3, #31
 8003d44:	d51a      	bpl.n	8003d7c <__swbuf_r+0x9c>
 8003d46:	2e0a      	cmp	r6, #10
 8003d48:	d118      	bne.n	8003d7c <__swbuf_r+0x9c>
 8003d4a:	0021      	movs	r1, r4
 8003d4c:	0028      	movs	r0, r5
 8003d4e:	f000 f91d 	bl	8003f8c <_fflush_r>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d012      	beq.n	8003d7c <__swbuf_r+0x9c>
 8003d56:	e00f      	b.n	8003d78 <__swbuf_r+0x98>
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <__swbuf_r+0xa4>)
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	d101      	bne.n	8003d62 <__swbuf_r+0x82>
 8003d5e:	68ac      	ldr	r4, [r5, #8]
 8003d60:	e7cd      	b.n	8003cfe <__swbuf_r+0x1e>
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <__swbuf_r+0xa8>)
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d1ca      	bne.n	8003cfe <__swbuf_r+0x1e>
 8003d68:	68ec      	ldr	r4, [r5, #12]
 8003d6a:	e7c8      	b.n	8003cfe <__swbuf_r+0x1e>
 8003d6c:	0021      	movs	r1, r4
 8003d6e:	0028      	movs	r0, r5
 8003d70:	f000 f80c 	bl	8003d8c <__swsetup_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d0ca      	beq.n	8003d0e <__swbuf_r+0x2e>
 8003d78:	2601      	movs	r6, #1
 8003d7a:	4276      	negs	r6, r6
 8003d7c:	0030      	movs	r0, r6
 8003d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d80:	08004d2c 	.word	0x08004d2c
 8003d84:	08004d4c 	.word	0x08004d4c
 8003d88:	08004d0c 	.word	0x08004d0c

08003d8c <__swsetup_r>:
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <__swsetup_r+0xdc>)
 8003d8e:	b570      	push	{r4, r5, r6, lr}
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	0006      	movs	r6, r0
 8003d94:	000c      	movs	r4, r1
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	d005      	beq.n	8003da6 <__swsetup_r+0x1a>
 8003d9a:	69ab      	ldr	r3, [r5, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <__swsetup_r+0x1a>
 8003da0:	0028      	movs	r0, r5
 8003da2:	f000 f961 	bl	8004068 <__sinit>
 8003da6:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <__swsetup_r+0xe0>)
 8003da8:	429c      	cmp	r4, r3
 8003daa:	d10f      	bne.n	8003dcc <__swsetup_r+0x40>
 8003dac:	686c      	ldr	r4, [r5, #4]
 8003dae:	230c      	movs	r3, #12
 8003db0:	5ee2      	ldrsh	r2, [r4, r3]
 8003db2:	b293      	uxth	r3, r2
 8003db4:	0719      	lsls	r1, r3, #28
 8003db6:	d42d      	bmi.n	8003e14 <__swsetup_r+0x88>
 8003db8:	06d9      	lsls	r1, r3, #27
 8003dba:	d411      	bmi.n	8003de0 <__swsetup_r+0x54>
 8003dbc:	2309      	movs	r3, #9
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	3337      	adds	r3, #55	; 0x37
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	4240      	negs	r0, r0
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <__swsetup_r+0xe4>)
 8003dce:	429c      	cmp	r4, r3
 8003dd0:	d101      	bne.n	8003dd6 <__swsetup_r+0x4a>
 8003dd2:	68ac      	ldr	r4, [r5, #8]
 8003dd4:	e7eb      	b.n	8003dae <__swsetup_r+0x22>
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <__swsetup_r+0xe8>)
 8003dd8:	429c      	cmp	r4, r3
 8003dda:	d1e8      	bne.n	8003dae <__swsetup_r+0x22>
 8003ddc:	68ec      	ldr	r4, [r5, #12]
 8003dde:	e7e6      	b.n	8003dae <__swsetup_r+0x22>
 8003de0:	075b      	lsls	r3, r3, #29
 8003de2:	d513      	bpl.n	8003e0c <__swsetup_r+0x80>
 8003de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003de6:	2900      	cmp	r1, #0
 8003de8:	d008      	beq.n	8003dfc <__swsetup_r+0x70>
 8003dea:	0023      	movs	r3, r4
 8003dec:	3344      	adds	r3, #68	; 0x44
 8003dee:	4299      	cmp	r1, r3
 8003df0:	d002      	beq.n	8003df8 <__swsetup_r+0x6c>
 8003df2:	0030      	movs	r0, r6
 8003df4:	f000 fa64 	bl	80042c0 <_free_r>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6363      	str	r3, [r4, #52]	; 0x34
 8003dfc:	2224      	movs	r2, #36	; 0x24
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	4393      	bics	r3, r2
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	2300      	movs	r3, #0
 8003e06:	6063      	str	r3, [r4, #4]
 8003e08:	6923      	ldr	r3, [r4, #16]
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	89a2      	ldrh	r2, [r4, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	6923      	ldr	r3, [r4, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <__swsetup_r+0xa6>
 8003e1a:	21a0      	movs	r1, #160	; 0xa0
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	0089      	lsls	r1, r1, #2
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	400b      	ands	r3, r1
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <__swsetup_r+0xa6>
 8003e2a:	0021      	movs	r1, r4
 8003e2c:	0030      	movs	r0, r6
 8003e2e:	f000 f9e7 	bl	8004200 <__smakebuf_r>
 8003e32:	2301      	movs	r3, #1
 8003e34:	89a2      	ldrh	r2, [r4, #12]
 8003e36:	4013      	ands	r3, r2
 8003e38:	d011      	beq.n	8003e5e <__swsetup_r+0xd2>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60a3      	str	r3, [r4, #8]
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	425b      	negs	r3, r3
 8003e42:	61a3      	str	r3, [r4, #24]
 8003e44:	2000      	movs	r0, #0
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	4283      	cmp	r3, r0
 8003e4a:	d1be      	bne.n	8003dca <__swsetup_r+0x3e>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	5ee2      	ldrsh	r2, [r4, r3]
 8003e50:	0613      	lsls	r3, r2, #24
 8003e52:	d5ba      	bpl.n	8003dca <__swsetup_r+0x3e>
 8003e54:	2340      	movs	r3, #64	; 0x40
 8003e56:	4313      	orrs	r3, r2
 8003e58:	81a3      	strh	r3, [r4, #12]
 8003e5a:	3801      	subs	r0, #1
 8003e5c:	e7b5      	b.n	8003dca <__swsetup_r+0x3e>
 8003e5e:	0792      	lsls	r2, r2, #30
 8003e60:	d400      	bmi.n	8003e64 <__swsetup_r+0xd8>
 8003e62:	6963      	ldr	r3, [r4, #20]
 8003e64:	60a3      	str	r3, [r4, #8]
 8003e66:	e7ed      	b.n	8003e44 <__swsetup_r+0xb8>
 8003e68:	2000000c 	.word	0x2000000c
 8003e6c:	08004d2c 	.word	0x08004d2c
 8003e70:	08004d4c 	.word	0x08004d4c
 8003e74:	08004d0c 	.word	0x08004d0c

08003e78 <__sflush_r>:
 8003e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7a:	898a      	ldrh	r2, [r1, #12]
 8003e7c:	0005      	movs	r5, r0
 8003e7e:	000c      	movs	r4, r1
 8003e80:	0713      	lsls	r3, r2, #28
 8003e82:	d460      	bmi.n	8003f46 <__sflush_r+0xce>
 8003e84:	684b      	ldr	r3, [r1, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dc04      	bgt.n	8003e94 <__sflush_r+0x1c>
 8003e8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dc01      	bgt.n	8003e94 <__sflush_r+0x1c>
 8003e90:	2000      	movs	r0, #0
 8003e92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e96:	2f00      	cmp	r7, #0
 8003e98:	d0fa      	beq.n	8003e90 <__sflush_r+0x18>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	682e      	ldr	r6, [r5, #0]
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	015b      	lsls	r3, r3, #5
 8003ea4:	6a21      	ldr	r1, [r4, #32]
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	d034      	beq.n	8003f14 <__sflush_r+0x9c>
 8003eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	075b      	lsls	r3, r3, #29
 8003eb0:	d506      	bpl.n	8003ec0 <__sflush_r+0x48>
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	1ac0      	subs	r0, r0, r3
 8003eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <__sflush_r+0x48>
 8003ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ebe:	1ac0      	subs	r0, r0, r3
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	6a21      	ldr	r1, [r4, #32]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	0028      	movs	r0, r5
 8003ec8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003eca:	47b8      	blx	r7
 8003ecc:	89a1      	ldrh	r1, [r4, #12]
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d106      	bne.n	8003ee0 <__sflush_r+0x68>
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	2b1d      	cmp	r3, #29
 8003ed6:	d830      	bhi.n	8003f3a <__sflush_r+0xc2>
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <__sflush_r+0x110>)
 8003eda:	40da      	lsrs	r2, r3
 8003edc:	07d3      	lsls	r3, r2, #31
 8003ede:	d52c      	bpl.n	8003f3a <__sflush_r+0xc2>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	6923      	ldr	r3, [r4, #16]
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	04cb      	lsls	r3, r1, #19
 8003eea:	d505      	bpl.n	8003ef8 <__sflush_r+0x80>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <__sflush_r+0x7e>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d100      	bne.n	8003ef8 <__sflush_r+0x80>
 8003ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efa:	602e      	str	r6, [r5, #0]
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d0c7      	beq.n	8003e90 <__sflush_r+0x18>
 8003f00:	0023      	movs	r3, r4
 8003f02:	3344      	adds	r3, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__sflush_r+0x96>
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f000 f9d9 	bl	80042c0 <_free_r>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	6360      	str	r0, [r4, #52]	; 0x34
 8003f12:	e7be      	b.n	8003e92 <__sflush_r+0x1a>
 8003f14:	2301      	movs	r3, #1
 8003f16:	0028      	movs	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	d1c6      	bne.n	8003eac <__sflush_r+0x34>
 8003f1e:	682b      	ldr	r3, [r5, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0c3      	beq.n	8003eac <__sflush_r+0x34>
 8003f24:	2b1d      	cmp	r3, #29
 8003f26:	d001      	beq.n	8003f2c <__sflush_r+0xb4>
 8003f28:	2b16      	cmp	r3, #22
 8003f2a:	d101      	bne.n	8003f30 <__sflush_r+0xb8>
 8003f2c:	602e      	str	r6, [r5, #0]
 8003f2e:	e7af      	b.n	8003e90 <__sflush_r+0x18>
 8003f30:	2340      	movs	r3, #64	; 0x40
 8003f32:	89a2      	ldrh	r2, [r4, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	81a3      	strh	r3, [r4, #12]
 8003f38:	e7ab      	b.n	8003e92 <__sflush_r+0x1a>
 8003f3a:	2340      	movs	r3, #64	; 0x40
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	2001      	movs	r0, #1
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	4240      	negs	r0, r0
 8003f44:	e7a5      	b.n	8003e92 <__sflush_r+0x1a>
 8003f46:	690f      	ldr	r7, [r1, #16]
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	d0a1      	beq.n	8003e90 <__sflush_r+0x18>
 8003f4c:	680b      	ldr	r3, [r1, #0]
 8003f4e:	600f      	str	r7, [r1, #0]
 8003f50:	1bdb      	subs	r3, r3, r7
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	2300      	movs	r3, #0
 8003f56:	0792      	lsls	r2, r2, #30
 8003f58:	d100      	bne.n	8003f5c <__sflush_r+0xe4>
 8003f5a:	694b      	ldr	r3, [r1, #20]
 8003f5c:	60a3      	str	r3, [r4, #8]
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	dc00      	bgt.n	8003f66 <__sflush_r+0xee>
 8003f64:	e794      	b.n	8003e90 <__sflush_r+0x18>
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	003a      	movs	r2, r7
 8003f6a:	6a21      	ldr	r1, [r4, #32]
 8003f6c:	0028      	movs	r0, r5
 8003f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f70:	47b0      	blx	r6
 8003f72:	2800      	cmp	r0, #0
 8003f74:	dc03      	bgt.n	8003f7e <__sflush_r+0x106>
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	89a2      	ldrh	r2, [r4, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	e7df      	b.n	8003f3e <__sflush_r+0xc6>
 8003f7e:	9b01      	ldr	r3, [sp, #4]
 8003f80:	183f      	adds	r7, r7, r0
 8003f82:	1a1b      	subs	r3, r3, r0
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	e7ea      	b.n	8003f5e <__sflush_r+0xe6>
 8003f88:	20400001 	.word	0x20400001

08003f8c <_fflush_r>:
 8003f8c:	690b      	ldr	r3, [r1, #16]
 8003f8e:	b570      	push	{r4, r5, r6, lr}
 8003f90:	0005      	movs	r5, r0
 8003f92:	000c      	movs	r4, r1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <_fflush_r+0x10>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d004      	beq.n	8003faa <_fflush_r+0x1e>
 8003fa0:	6983      	ldr	r3, [r0, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <_fflush_r+0x1e>
 8003fa6:	f000 f85f 	bl	8004068 <__sinit>
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <_fflush_r+0x4c>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	d109      	bne.n	8003fc4 <_fflush_r+0x38>
 8003fb0:	686c      	ldr	r4, [r5, #4]
 8003fb2:	220c      	movs	r2, #12
 8003fb4:	5ea3      	ldrsh	r3, [r4, r2]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ee      	beq.n	8003f98 <_fflush_r+0xc>
 8003fba:	0021      	movs	r1, r4
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	f7ff ff5b 	bl	8003e78 <__sflush_r>
 8003fc2:	e7ea      	b.n	8003f9a <_fflush_r+0xe>
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <_fflush_r+0x50>)
 8003fc6:	429c      	cmp	r4, r3
 8003fc8:	d101      	bne.n	8003fce <_fflush_r+0x42>
 8003fca:	68ac      	ldr	r4, [r5, #8]
 8003fcc:	e7f1      	b.n	8003fb2 <_fflush_r+0x26>
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <_fflush_r+0x54>)
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	d1ee      	bne.n	8003fb2 <_fflush_r+0x26>
 8003fd4:	68ec      	ldr	r4, [r5, #12]
 8003fd6:	e7ec      	b.n	8003fb2 <_fflush_r+0x26>
 8003fd8:	08004d2c 	.word	0x08004d2c
 8003fdc:	08004d4c 	.word	0x08004d4c
 8003fe0:	08004d0c 	.word	0x08004d0c

08003fe4 <std>:
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	0004      	movs	r4, r0
 8003fea:	6003      	str	r3, [r0, #0]
 8003fec:	6043      	str	r3, [r0, #4]
 8003fee:	6083      	str	r3, [r0, #8]
 8003ff0:	8181      	strh	r1, [r0, #12]
 8003ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ff4:	81c2      	strh	r2, [r0, #14]
 8003ff6:	6103      	str	r3, [r0, #16]
 8003ff8:	6143      	str	r3, [r0, #20]
 8003ffa:	6183      	str	r3, [r0, #24]
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	2208      	movs	r2, #8
 8004000:	305c      	adds	r0, #92	; 0x5c
 8004002:	f7ff fcc3 	bl	800398c <memset>
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <std+0x38>)
 8004008:	6224      	str	r4, [r4, #32]
 800400a:	6263      	str	r3, [r4, #36]	; 0x24
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <std+0x3c>)
 800400e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <std+0x40>)
 8004012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <std+0x44>)
 8004016:	6323      	str	r3, [r4, #48]	; 0x30
 8004018:	bd10      	pop	{r4, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	08004a09 	.word	0x08004a09
 8004020:	08004a31 	.word	0x08004a31
 8004024:	08004a69 	.word	0x08004a69
 8004028:	08004a95 	.word	0x08004a95

0800402c <_cleanup_r>:
 800402c:	b510      	push	{r4, lr}
 800402e:	4902      	ldr	r1, [pc, #8]	; (8004038 <_cleanup_r+0xc>)
 8004030:	f000 f88c 	bl	800414c <_fwalk_reent>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	08003f8d 	.word	0x08003f8d

0800403c <__sfmoreglue>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	2568      	movs	r5, #104	; 0x68
 8004040:	1e4a      	subs	r2, r1, #1
 8004042:	4355      	muls	r5, r2
 8004044:	000e      	movs	r6, r1
 8004046:	0029      	movs	r1, r5
 8004048:	3174      	adds	r1, #116	; 0x74
 800404a:	f000 f983 	bl	8004354 <_malloc_r>
 800404e:	1e04      	subs	r4, r0, #0
 8004050:	d008      	beq.n	8004064 <__sfmoreglue+0x28>
 8004052:	2100      	movs	r1, #0
 8004054:	002a      	movs	r2, r5
 8004056:	6001      	str	r1, [r0, #0]
 8004058:	6046      	str	r6, [r0, #4]
 800405a:	300c      	adds	r0, #12
 800405c:	60a0      	str	r0, [r4, #8]
 800405e:	3268      	adds	r2, #104	; 0x68
 8004060:	f7ff fc94 	bl	800398c <memset>
 8004064:	0020      	movs	r0, r4
 8004066:	bd70      	pop	{r4, r5, r6, pc}

08004068 <__sinit>:
 8004068:	6983      	ldr	r3, [r0, #24]
 800406a:	b513      	push	{r0, r1, r4, lr}
 800406c:	0004      	movs	r4, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d128      	bne.n	80040c4 <__sinit+0x5c>
 8004072:	6483      	str	r3, [r0, #72]	; 0x48
 8004074:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004076:	6503      	str	r3, [r0, #80]	; 0x50
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <__sinit+0x60>)
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <__sinit+0x64>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6282      	str	r2, [r0, #40]	; 0x28
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	4298      	cmp	r0, r3
 8004084:	d101      	bne.n	800408a <__sinit+0x22>
 8004086:	2301      	movs	r3, #1
 8004088:	6183      	str	r3, [r0, #24]
 800408a:	0020      	movs	r0, r4
 800408c:	f000 f820 	bl	80040d0 <__sfp>
 8004090:	6060      	str	r0, [r4, #4]
 8004092:	0020      	movs	r0, r4
 8004094:	f000 f81c 	bl	80040d0 <__sfp>
 8004098:	60a0      	str	r0, [r4, #8]
 800409a:	0020      	movs	r0, r4
 800409c:	f000 f818 	bl	80040d0 <__sfp>
 80040a0:	2200      	movs	r2, #0
 80040a2:	60e0      	str	r0, [r4, #12]
 80040a4:	2104      	movs	r1, #4
 80040a6:	6860      	ldr	r0, [r4, #4]
 80040a8:	f7ff ff9c 	bl	8003fe4 <std>
 80040ac:	2201      	movs	r2, #1
 80040ae:	2109      	movs	r1, #9
 80040b0:	68a0      	ldr	r0, [r4, #8]
 80040b2:	f7ff ff97 	bl	8003fe4 <std>
 80040b6:	2202      	movs	r2, #2
 80040b8:	2112      	movs	r1, #18
 80040ba:	68e0      	ldr	r0, [r4, #12]
 80040bc:	f7ff ff92 	bl	8003fe4 <std>
 80040c0:	2301      	movs	r3, #1
 80040c2:	61a3      	str	r3, [r4, #24]
 80040c4:	bd13      	pop	{r0, r1, r4, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	08004d08 	.word	0x08004d08
 80040cc:	0800402d 	.word	0x0800402d

080040d0 <__sfp>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <__sfp+0x74>)
 80040d4:	0007      	movs	r7, r0
 80040d6:	681e      	ldr	r6, [r3, #0]
 80040d8:	69b3      	ldr	r3, [r6, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <__sfp+0x14>
 80040de:	0030      	movs	r0, r6
 80040e0:	f7ff ffc2 	bl	8004068 <__sinit>
 80040e4:	3648      	adds	r6, #72	; 0x48
 80040e6:	68b4      	ldr	r4, [r6, #8]
 80040e8:	6873      	ldr	r3, [r6, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	d504      	bpl.n	80040f8 <__sfp+0x28>
 80040ee:	6833      	ldr	r3, [r6, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <__sfp+0x34>
 80040f4:	6836      	ldr	r6, [r6, #0]
 80040f6:	e7f6      	b.n	80040e6 <__sfp+0x16>
 80040f8:	220c      	movs	r2, #12
 80040fa:	5ea5      	ldrsh	r5, [r4, r2]
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	d00d      	beq.n	800411c <__sfp+0x4c>
 8004100:	3468      	adds	r4, #104	; 0x68
 8004102:	e7f2      	b.n	80040ea <__sfp+0x1a>
 8004104:	2104      	movs	r1, #4
 8004106:	0038      	movs	r0, r7
 8004108:	f7ff ff98 	bl	800403c <__sfmoreglue>
 800410c:	6030      	str	r0, [r6, #0]
 800410e:	2800      	cmp	r0, #0
 8004110:	d1f0      	bne.n	80040f4 <__sfp+0x24>
 8004112:	230c      	movs	r3, #12
 8004114:	0004      	movs	r4, r0
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	0020      	movs	r0, r4
 800411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411c:	0020      	movs	r0, r4
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <__sfp+0x78>)
 8004120:	6665      	str	r5, [r4, #100]	; 0x64
 8004122:	6025      	str	r5, [r4, #0]
 8004124:	6065      	str	r5, [r4, #4]
 8004126:	60a5      	str	r5, [r4, #8]
 8004128:	60e3      	str	r3, [r4, #12]
 800412a:	6125      	str	r5, [r4, #16]
 800412c:	6165      	str	r5, [r4, #20]
 800412e:	61a5      	str	r5, [r4, #24]
 8004130:	2208      	movs	r2, #8
 8004132:	0029      	movs	r1, r5
 8004134:	305c      	adds	r0, #92	; 0x5c
 8004136:	f7ff fc29 	bl	800398c <memset>
 800413a:	6365      	str	r5, [r4, #52]	; 0x34
 800413c:	63a5      	str	r5, [r4, #56]	; 0x38
 800413e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004140:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004142:	e7e9      	b.n	8004118 <__sfp+0x48>
 8004144:	08004d08 	.word	0x08004d08
 8004148:	ffff0001 	.word	0xffff0001

0800414c <_fwalk_reent>:
 800414c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800414e:	0004      	movs	r4, r0
 8004150:	0007      	movs	r7, r0
 8004152:	2600      	movs	r6, #0
 8004154:	9101      	str	r1, [sp, #4]
 8004156:	3448      	adds	r4, #72	; 0x48
 8004158:	2c00      	cmp	r4, #0
 800415a:	d101      	bne.n	8004160 <_fwalk_reent+0x14>
 800415c:	0030      	movs	r0, r6
 800415e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004160:	6863      	ldr	r3, [r4, #4]
 8004162:	68a5      	ldr	r5, [r4, #8]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	9b00      	ldr	r3, [sp, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	d501      	bpl.n	8004172 <_fwalk_reent+0x26>
 800416e:	6824      	ldr	r4, [r4, #0]
 8004170:	e7f2      	b.n	8004158 <_fwalk_reent+0xc>
 8004172:	89ab      	ldrh	r3, [r5, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d908      	bls.n	800418a <_fwalk_reent+0x3e>
 8004178:	220e      	movs	r2, #14
 800417a:	5eab      	ldrsh	r3, [r5, r2]
 800417c:	3301      	adds	r3, #1
 800417e:	d004      	beq.n	800418a <_fwalk_reent+0x3e>
 8004180:	0029      	movs	r1, r5
 8004182:	0038      	movs	r0, r7
 8004184:	9b01      	ldr	r3, [sp, #4]
 8004186:	4798      	blx	r3
 8004188:	4306      	orrs	r6, r0
 800418a:	3568      	adds	r5, #104	; 0x68
 800418c:	e7eb      	b.n	8004166 <_fwalk_reent+0x1a>

0800418e <__locale_ctype_ptr_l>:
 800418e:	30ec      	adds	r0, #236	; 0xec
 8004190:	6800      	ldr	r0, [r0, #0]
 8004192:	4770      	bx	lr

08004194 <__locale_ctype_ptr>:
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <__locale_ctype_ptr+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d100      	bne.n	80041a0 <__locale_ctype_ptr+0xc>
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <__locale_ctype_ptr+0x18>)
 80041a0:	33ec      	adds	r3, #236	; 0xec
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	2000000c 	.word	0x2000000c
 80041ac:	20000070 	.word	0x20000070

080041b0 <__swhatbuf_r>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	000e      	movs	r6, r1
 80041b4:	001d      	movs	r5, r3
 80041b6:	230e      	movs	r3, #14
 80041b8:	5ec9      	ldrsh	r1, [r1, r3]
 80041ba:	b096      	sub	sp, #88	; 0x58
 80041bc:	0014      	movs	r4, r2
 80041be:	2900      	cmp	r1, #0
 80041c0:	da07      	bge.n	80041d2 <__swhatbuf_r+0x22>
 80041c2:	2300      	movs	r3, #0
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	89b3      	ldrh	r3, [r6, #12]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	d411      	bmi.n	80041f0 <__swhatbuf_r+0x40>
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	e00f      	b.n	80041f2 <__swhatbuf_r+0x42>
 80041d2:	466a      	mov	r2, sp
 80041d4:	f000 fc96 	bl	8004b04 <_fstat_r>
 80041d8:	2800      	cmp	r0, #0
 80041da:	dbf2      	blt.n	80041c2 <__swhatbuf_r+0x12>
 80041dc:	22f0      	movs	r2, #240	; 0xf0
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	0212      	lsls	r2, r2, #8
 80041e2:	4013      	ands	r3, r2
 80041e4:	4a05      	ldr	r2, [pc, #20]	; (80041fc <__swhatbuf_r+0x4c>)
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	425a      	negs	r2, r3
 80041ea:	4153      	adcs	r3, r2
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	e7ed      	b.n	80041cc <__swhatbuf_r+0x1c>
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	2000      	movs	r0, #0
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	b016      	add	sp, #88	; 0x58
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	ffffe000 	.word	0xffffe000

08004200 <__smakebuf_r>:
 8004200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004202:	2602      	movs	r6, #2
 8004204:	898b      	ldrh	r3, [r1, #12]
 8004206:	0005      	movs	r5, r0
 8004208:	000c      	movs	r4, r1
 800420a:	4233      	tst	r3, r6
 800420c:	d006      	beq.n	800421c <__smakebuf_r+0x1c>
 800420e:	0023      	movs	r3, r4
 8004210:	3347      	adds	r3, #71	; 0x47
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	2301      	movs	r3, #1
 8004218:	6163      	str	r3, [r4, #20]
 800421a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800421c:	ab01      	add	r3, sp, #4
 800421e:	466a      	mov	r2, sp
 8004220:	f7ff ffc6 	bl	80041b0 <__swhatbuf_r>
 8004224:	9900      	ldr	r1, [sp, #0]
 8004226:	0007      	movs	r7, r0
 8004228:	0028      	movs	r0, r5
 800422a:	f000 f893 	bl	8004354 <_malloc_r>
 800422e:	2800      	cmp	r0, #0
 8004230:	d108      	bne.n	8004244 <__smakebuf_r+0x44>
 8004232:	220c      	movs	r2, #12
 8004234:	5ea3      	ldrsh	r3, [r4, r2]
 8004236:	059a      	lsls	r2, r3, #22
 8004238:	d4ef      	bmi.n	800421a <__smakebuf_r+0x1a>
 800423a:	2203      	movs	r2, #3
 800423c:	4393      	bics	r3, r2
 800423e:	431e      	orrs	r6, r3
 8004240:	81a6      	strh	r6, [r4, #12]
 8004242:	e7e4      	b.n	800420e <__smakebuf_r+0xe>
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <__smakebuf_r+0x84>)
 8004246:	62ab      	str	r3, [r5, #40]	; 0x28
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	89a2      	ldrh	r2, [r4, #12]
 800424c:	6020      	str	r0, [r4, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	9b00      	ldr	r3, [sp, #0]
 8004254:	6120      	str	r0, [r4, #16]
 8004256:	6163      	str	r3, [r4, #20]
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <__smakebuf_r+0x7a>
 800425e:	230e      	movs	r3, #14
 8004260:	5ee1      	ldrsh	r1, [r4, r3]
 8004262:	0028      	movs	r0, r5
 8004264:	f000 fc60 	bl	8004b28 <_isatty_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	d006      	beq.n	800427a <__smakebuf_r+0x7a>
 800426c:	2203      	movs	r2, #3
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	4393      	bics	r3, r2
 8004272:	001a      	movs	r2, r3
 8004274:	2301      	movs	r3, #1
 8004276:	4313      	orrs	r3, r2
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	89a0      	ldrh	r0, [r4, #12]
 800427c:	4338      	orrs	r0, r7
 800427e:	81a0      	strh	r0, [r4, #12]
 8004280:	e7cb      	b.n	800421a <__smakebuf_r+0x1a>
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	0800402d 	.word	0x0800402d

08004288 <malloc>:
 8004288:	b510      	push	{r4, lr}
 800428a:	4b03      	ldr	r3, [pc, #12]	; (8004298 <malloc+0x10>)
 800428c:	0001      	movs	r1, r0
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	f000 f860 	bl	8004354 <_malloc_r>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	2000000c 	.word	0x2000000c

0800429c <__ascii_mbtowc>:
 800429c:	b082      	sub	sp, #8
 800429e:	2900      	cmp	r1, #0
 80042a0:	d100      	bne.n	80042a4 <__ascii_mbtowc+0x8>
 80042a2:	a901      	add	r1, sp, #4
 80042a4:	1e10      	subs	r0, r2, #0
 80042a6:	d006      	beq.n	80042b6 <__ascii_mbtowc+0x1a>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <__ascii_mbtowc+0x1e>
 80042ac:	7813      	ldrb	r3, [r2, #0]
 80042ae:	600b      	str	r3, [r1, #0]
 80042b0:	7810      	ldrb	r0, [r2, #0]
 80042b2:	1e43      	subs	r3, r0, #1
 80042b4:	4198      	sbcs	r0, r3
 80042b6:	b002      	add	sp, #8
 80042b8:	4770      	bx	lr
 80042ba:	2002      	movs	r0, #2
 80042bc:	4240      	negs	r0, r0
 80042be:	e7fa      	b.n	80042b6 <__ascii_mbtowc+0x1a>

080042c0 <_free_r>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	0005      	movs	r5, r0
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d010      	beq.n	80042ea <_free_r+0x2a>
 80042c8:	1f0c      	subs	r4, r1, #4
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	da00      	bge.n	80042d2 <_free_r+0x12>
 80042d0:	18e4      	adds	r4, r4, r3
 80042d2:	0028      	movs	r0, r5
 80042d4:	f000 fc59 	bl	8004b8a <__malloc_lock>
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <_free_r+0x90>)
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <_free_r+0x2c>
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6014      	str	r4, [r2, #0]
 80042e4:	0028      	movs	r0, r5
 80042e6:	f000 fc51 	bl	8004b8c <__malloc_unlock>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d909      	bls.n	8004304 <_free_r+0x44>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	1860      	adds	r0, r4, r1
 80042f4:	4283      	cmp	r3, r0
 80042f6:	d1f3      	bne.n	80042e0 <_free_r+0x20>
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	1841      	adds	r1, r0, r1
 80042fe:	6021      	str	r1, [r4, #0]
 8004300:	e7ee      	b.n	80042e0 <_free_r+0x20>
 8004302:	0013      	movs	r3, r2
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	2a00      	cmp	r2, #0
 8004308:	d001      	beq.n	800430e <_free_r+0x4e>
 800430a:	42a2      	cmp	r2, r4
 800430c:	d9f9      	bls.n	8004302 <_free_r+0x42>
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	1858      	adds	r0, r3, r1
 8004312:	42a0      	cmp	r0, r4
 8004314:	d10b      	bne.n	800432e <_free_r+0x6e>
 8004316:	6820      	ldr	r0, [r4, #0]
 8004318:	1809      	adds	r1, r1, r0
 800431a:	1858      	adds	r0, r3, r1
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	4282      	cmp	r2, r0
 8004320:	d1e0      	bne.n	80042e4 <_free_r+0x24>
 8004322:	6810      	ldr	r0, [r2, #0]
 8004324:	6852      	ldr	r2, [r2, #4]
 8004326:	1841      	adds	r1, r0, r1
 8004328:	6019      	str	r1, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e7da      	b.n	80042e4 <_free_r+0x24>
 800432e:	42a0      	cmp	r0, r4
 8004330:	d902      	bls.n	8004338 <_free_r+0x78>
 8004332:	230c      	movs	r3, #12
 8004334:	602b      	str	r3, [r5, #0]
 8004336:	e7d5      	b.n	80042e4 <_free_r+0x24>
 8004338:	6821      	ldr	r1, [r4, #0]
 800433a:	1860      	adds	r0, r4, r1
 800433c:	4282      	cmp	r2, r0
 800433e:	d103      	bne.n	8004348 <_free_r+0x88>
 8004340:	6810      	ldr	r0, [r2, #0]
 8004342:	6852      	ldr	r2, [r2, #4]
 8004344:	1841      	adds	r1, r0, r1
 8004346:	6021      	str	r1, [r4, #0]
 8004348:	6062      	str	r2, [r4, #4]
 800434a:	605c      	str	r4, [r3, #4]
 800434c:	e7ca      	b.n	80042e4 <_free_r+0x24>
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000340 	.word	0x20000340

08004354 <_malloc_r>:
 8004354:	2303      	movs	r3, #3
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	1ccd      	adds	r5, r1, #3
 800435a:	439d      	bics	r5, r3
 800435c:	3508      	adds	r5, #8
 800435e:	0006      	movs	r6, r0
 8004360:	2d0c      	cmp	r5, #12
 8004362:	d21e      	bcs.n	80043a2 <_malloc_r+0x4e>
 8004364:	250c      	movs	r5, #12
 8004366:	42a9      	cmp	r1, r5
 8004368:	d81d      	bhi.n	80043a6 <_malloc_r+0x52>
 800436a:	0030      	movs	r0, r6
 800436c:	f000 fc0d 	bl	8004b8a <__malloc_lock>
 8004370:	4a25      	ldr	r2, [pc, #148]	; (8004408 <_malloc_r+0xb4>)
 8004372:	6814      	ldr	r4, [r2, #0]
 8004374:	0021      	movs	r1, r4
 8004376:	2900      	cmp	r1, #0
 8004378:	d119      	bne.n	80043ae <_malloc_r+0x5a>
 800437a:	4c24      	ldr	r4, [pc, #144]	; (800440c <_malloc_r+0xb8>)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <_malloc_r+0x36>
 8004382:	0030      	movs	r0, r6
 8004384:	f000 fb2e 	bl	80049e4 <_sbrk_r>
 8004388:	6020      	str	r0, [r4, #0]
 800438a:	0029      	movs	r1, r5
 800438c:	0030      	movs	r0, r6
 800438e:	f000 fb29 	bl	80049e4 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d12b      	bne.n	80043ee <_malloc_r+0x9a>
 8004396:	230c      	movs	r3, #12
 8004398:	0030      	movs	r0, r6
 800439a:	6033      	str	r3, [r6, #0]
 800439c:	f000 fbf6 	bl	8004b8c <__malloc_unlock>
 80043a0:	e003      	b.n	80043aa <_malloc_r+0x56>
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	dadf      	bge.n	8004366 <_malloc_r+0x12>
 80043a6:	230c      	movs	r3, #12
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	2000      	movs	r0, #0
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
 80043ae:	680b      	ldr	r3, [r1, #0]
 80043b0:	1b5b      	subs	r3, r3, r5
 80043b2:	d419      	bmi.n	80043e8 <_malloc_r+0x94>
 80043b4:	2b0b      	cmp	r3, #11
 80043b6:	d903      	bls.n	80043c0 <_malloc_r+0x6c>
 80043b8:	600b      	str	r3, [r1, #0]
 80043ba:	18cc      	adds	r4, r1, r3
 80043bc:	6025      	str	r5, [r4, #0]
 80043be:	e003      	b.n	80043c8 <_malloc_r+0x74>
 80043c0:	684b      	ldr	r3, [r1, #4]
 80043c2:	428c      	cmp	r4, r1
 80043c4:	d10d      	bne.n	80043e2 <_malloc_r+0x8e>
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	0030      	movs	r0, r6
 80043ca:	f000 fbdf 	bl	8004b8c <__malloc_unlock>
 80043ce:	0020      	movs	r0, r4
 80043d0:	2207      	movs	r2, #7
 80043d2:	300b      	adds	r0, #11
 80043d4:	1d23      	adds	r3, r4, #4
 80043d6:	4390      	bics	r0, r2
 80043d8:	1ac3      	subs	r3, r0, r3
 80043da:	d0e7      	beq.n	80043ac <_malloc_r+0x58>
 80043dc:	425a      	negs	r2, r3
 80043de:	50e2      	str	r2, [r4, r3]
 80043e0:	e7e4      	b.n	80043ac <_malloc_r+0x58>
 80043e2:	6063      	str	r3, [r4, #4]
 80043e4:	000c      	movs	r4, r1
 80043e6:	e7ef      	b.n	80043c8 <_malloc_r+0x74>
 80043e8:	000c      	movs	r4, r1
 80043ea:	6849      	ldr	r1, [r1, #4]
 80043ec:	e7c3      	b.n	8004376 <_malloc_r+0x22>
 80043ee:	2303      	movs	r3, #3
 80043f0:	1cc4      	adds	r4, r0, #3
 80043f2:	439c      	bics	r4, r3
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d0e1      	beq.n	80043bc <_malloc_r+0x68>
 80043f8:	1a21      	subs	r1, r4, r0
 80043fa:	0030      	movs	r0, r6
 80043fc:	f000 faf2 	bl	80049e4 <_sbrk_r>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d1db      	bne.n	80043bc <_malloc_r+0x68>
 8004404:	e7c7      	b.n	8004396 <_malloc_r+0x42>
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	20000340 	.word	0x20000340
 800440c:	20000344 	.word	0x20000344

08004410 <__sfputc_r>:
 8004410:	6893      	ldr	r3, [r2, #8]
 8004412:	b510      	push	{r4, lr}
 8004414:	3b01      	subs	r3, #1
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	da04      	bge.n	8004426 <__sfputc_r+0x16>
 800441c:	6994      	ldr	r4, [r2, #24]
 800441e:	42a3      	cmp	r3, r4
 8004420:	db07      	blt.n	8004432 <__sfputc_r+0x22>
 8004422:	290a      	cmp	r1, #10
 8004424:	d005      	beq.n	8004432 <__sfputc_r+0x22>
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	1c58      	adds	r0, r3, #1
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	7019      	strb	r1, [r3, #0]
 800442e:	0008      	movs	r0, r1
 8004430:	bd10      	pop	{r4, pc}
 8004432:	f7ff fc55 	bl	8003ce0 <__swbuf_r>
 8004436:	0001      	movs	r1, r0
 8004438:	e7f9      	b.n	800442e <__sfputc_r+0x1e>

0800443a <__sfputs_r>:
 800443a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443c:	0006      	movs	r6, r0
 800443e:	000f      	movs	r7, r1
 8004440:	0014      	movs	r4, r2
 8004442:	18d5      	adds	r5, r2, r3
 8004444:	42ac      	cmp	r4, r5
 8004446:	d101      	bne.n	800444c <__sfputs_r+0x12>
 8004448:	2000      	movs	r0, #0
 800444a:	e007      	b.n	800445c <__sfputs_r+0x22>
 800444c:	7821      	ldrb	r1, [r4, #0]
 800444e:	003a      	movs	r2, r7
 8004450:	0030      	movs	r0, r6
 8004452:	f7ff ffdd 	bl	8004410 <__sfputc_r>
 8004456:	3401      	adds	r4, #1
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d1f3      	bne.n	8004444 <__sfputs_r+0xa>
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004460 <_vfiprintf_r>:
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b0a1      	sub	sp, #132	; 0x84
 8004464:	9003      	str	r0, [sp, #12]
 8004466:	000f      	movs	r7, r1
 8004468:	0016      	movs	r6, r2
 800446a:	001d      	movs	r5, r3
 800446c:	2800      	cmp	r0, #0
 800446e:	d005      	beq.n	800447c <_vfiprintf_r+0x1c>
 8004470:	6983      	ldr	r3, [r0, #24]
 8004472:	9305      	str	r3, [sp, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <_vfiprintf_r+0x1c>
 8004478:	f7ff fdf6 	bl	8004068 <__sinit>
 800447c:	4b7b      	ldr	r3, [pc, #492]	; (800466c <_vfiprintf_r+0x20c>)
 800447e:	429f      	cmp	r7, r3
 8004480:	d15c      	bne.n	800453c <_vfiprintf_r+0xdc>
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	685f      	ldr	r7, [r3, #4]
 8004486:	89bb      	ldrh	r3, [r7, #12]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	d563      	bpl.n	8004554 <_vfiprintf_r+0xf4>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d060      	beq.n	8004554 <_vfiprintf_r+0xf4>
 8004492:	2300      	movs	r3, #0
 8004494:	ac08      	add	r4, sp, #32
 8004496:	6163      	str	r3, [r4, #20]
 8004498:	3320      	adds	r3, #32
 800449a:	7663      	strb	r3, [r4, #25]
 800449c:	3310      	adds	r3, #16
 800449e:	76a3      	strb	r3, [r4, #26]
 80044a0:	9507      	str	r5, [sp, #28]
 80044a2:	0035      	movs	r5, r6
 80044a4:	782b      	ldrb	r3, [r5, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <_vfiprintf_r+0x4e>
 80044aa:	2b25      	cmp	r3, #37	; 0x25
 80044ac:	d15c      	bne.n	8004568 <_vfiprintf_r+0x108>
 80044ae:	1bab      	subs	r3, r5, r6
 80044b0:	9305      	str	r3, [sp, #20]
 80044b2:	d00c      	beq.n	80044ce <_vfiprintf_r+0x6e>
 80044b4:	0032      	movs	r2, r6
 80044b6:	0039      	movs	r1, r7
 80044b8:	9803      	ldr	r0, [sp, #12]
 80044ba:	f7ff ffbe 	bl	800443a <__sfputs_r>
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	d100      	bne.n	80044c4 <_vfiprintf_r+0x64>
 80044c2:	e0c4      	b.n	800464e <_vfiprintf_r+0x1ee>
 80044c4:	6962      	ldr	r2, [r4, #20]
 80044c6:	9b05      	ldr	r3, [sp, #20]
 80044c8:	4694      	mov	ip, r2
 80044ca:	4463      	add	r3, ip
 80044cc:	6163      	str	r3, [r4, #20]
 80044ce:	782b      	ldrb	r3, [r5, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d100      	bne.n	80044d6 <_vfiprintf_r+0x76>
 80044d4:	e0bb      	b.n	800464e <_vfiprintf_r+0x1ee>
 80044d6:	2201      	movs	r2, #1
 80044d8:	2300      	movs	r3, #0
 80044da:	4252      	negs	r2, r2
 80044dc:	6062      	str	r2, [r4, #4]
 80044de:	a904      	add	r1, sp, #16
 80044e0:	3254      	adds	r2, #84	; 0x54
 80044e2:	1852      	adds	r2, r2, r1
 80044e4:	1c6e      	adds	r6, r5, #1
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	60e3      	str	r3, [r4, #12]
 80044ea:	60a3      	str	r3, [r4, #8]
 80044ec:	7013      	strb	r3, [r2, #0]
 80044ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80044f0:	7831      	ldrb	r1, [r6, #0]
 80044f2:	2205      	movs	r2, #5
 80044f4:	485e      	ldr	r0, [pc, #376]	; (8004670 <_vfiprintf_r+0x210>)
 80044f6:	f000 fb3d 	bl	8004b74 <memchr>
 80044fa:	1c75      	adds	r5, r6, #1
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d135      	bne.n	800456c <_vfiprintf_r+0x10c>
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	06d3      	lsls	r3, r2, #27
 8004504:	d504      	bpl.n	8004510 <_vfiprintf_r+0xb0>
 8004506:	2353      	movs	r3, #83	; 0x53
 8004508:	a904      	add	r1, sp, #16
 800450a:	185b      	adds	r3, r3, r1
 800450c:	2120      	movs	r1, #32
 800450e:	7019      	strb	r1, [r3, #0]
 8004510:	0713      	lsls	r3, r2, #28
 8004512:	d504      	bpl.n	800451e <_vfiprintf_r+0xbe>
 8004514:	2353      	movs	r3, #83	; 0x53
 8004516:	a904      	add	r1, sp, #16
 8004518:	185b      	adds	r3, r3, r1
 800451a:	212b      	movs	r1, #43	; 0x2b
 800451c:	7019      	strb	r1, [r3, #0]
 800451e:	7833      	ldrb	r3, [r6, #0]
 8004520:	2b2a      	cmp	r3, #42	; 0x2a
 8004522:	d02c      	beq.n	800457e <_vfiprintf_r+0x11e>
 8004524:	0035      	movs	r5, r6
 8004526:	2100      	movs	r1, #0
 8004528:	200a      	movs	r0, #10
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	782a      	ldrb	r2, [r5, #0]
 800452e:	1c6e      	adds	r6, r5, #1
 8004530:	3a30      	subs	r2, #48	; 0x30
 8004532:	2a09      	cmp	r2, #9
 8004534:	d964      	bls.n	8004600 <_vfiprintf_r+0x1a0>
 8004536:	2900      	cmp	r1, #0
 8004538:	d02e      	beq.n	8004598 <_vfiprintf_r+0x138>
 800453a:	e026      	b.n	800458a <_vfiprintf_r+0x12a>
 800453c:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <_vfiprintf_r+0x214>)
 800453e:	429f      	cmp	r7, r3
 8004540:	d102      	bne.n	8004548 <_vfiprintf_r+0xe8>
 8004542:	9b03      	ldr	r3, [sp, #12]
 8004544:	689f      	ldr	r7, [r3, #8]
 8004546:	e79e      	b.n	8004486 <_vfiprintf_r+0x26>
 8004548:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <_vfiprintf_r+0x218>)
 800454a:	429f      	cmp	r7, r3
 800454c:	d19b      	bne.n	8004486 <_vfiprintf_r+0x26>
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	68df      	ldr	r7, [r3, #12]
 8004552:	e798      	b.n	8004486 <_vfiprintf_r+0x26>
 8004554:	0039      	movs	r1, r7
 8004556:	9803      	ldr	r0, [sp, #12]
 8004558:	f7ff fc18 	bl	8003d8c <__swsetup_r>
 800455c:	2800      	cmp	r0, #0
 800455e:	d098      	beq.n	8004492 <_vfiprintf_r+0x32>
 8004560:	2001      	movs	r0, #1
 8004562:	4240      	negs	r0, r0
 8004564:	b021      	add	sp, #132	; 0x84
 8004566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004568:	3501      	adds	r5, #1
 800456a:	e79b      	b.n	80044a4 <_vfiprintf_r+0x44>
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <_vfiprintf_r+0x210>)
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	1ac0      	subs	r0, r0, r3
 8004572:	2301      	movs	r3, #1
 8004574:	4083      	lsls	r3, r0
 8004576:	4313      	orrs	r3, r2
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	002e      	movs	r6, r5
 800457c:	e7b8      	b.n	80044f0 <_vfiprintf_r+0x90>
 800457e:	9b07      	ldr	r3, [sp, #28]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	9107      	str	r1, [sp, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db01      	blt.n	800458e <_vfiprintf_r+0x12e>
 800458a:	930b      	str	r3, [sp, #44]	; 0x2c
 800458c:	e004      	b.n	8004598 <_vfiprintf_r+0x138>
 800458e:	425b      	negs	r3, r3
 8004590:	60e3      	str	r3, [r4, #12]
 8004592:	2302      	movs	r3, #2
 8004594:	4313      	orrs	r3, r2
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	782b      	ldrb	r3, [r5, #0]
 800459a:	2b2e      	cmp	r3, #46	; 0x2e
 800459c:	d10a      	bne.n	80045b4 <_vfiprintf_r+0x154>
 800459e:	786b      	ldrb	r3, [r5, #1]
 80045a0:	2b2a      	cmp	r3, #42	; 0x2a
 80045a2:	d135      	bne.n	8004610 <_vfiprintf_r+0x1b0>
 80045a4:	9b07      	ldr	r3, [sp, #28]
 80045a6:	3502      	adds	r5, #2
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9207      	str	r2, [sp, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db2b      	blt.n	800460a <_vfiprintf_r+0x1aa>
 80045b2:	9309      	str	r3, [sp, #36]	; 0x24
 80045b4:	4e31      	ldr	r6, [pc, #196]	; (800467c <_vfiprintf_r+0x21c>)
 80045b6:	7829      	ldrb	r1, [r5, #0]
 80045b8:	2203      	movs	r2, #3
 80045ba:	0030      	movs	r0, r6
 80045bc:	f000 fada 	bl	8004b74 <memchr>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d006      	beq.n	80045d2 <_vfiprintf_r+0x172>
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	1b80      	subs	r0, r0, r6
 80045c8:	4083      	lsls	r3, r0
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	3501      	adds	r5, #1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	7829      	ldrb	r1, [r5, #0]
 80045d4:	2206      	movs	r2, #6
 80045d6:	482a      	ldr	r0, [pc, #168]	; (8004680 <_vfiprintf_r+0x220>)
 80045d8:	1c6e      	adds	r6, r5, #1
 80045da:	7621      	strb	r1, [r4, #24]
 80045dc:	f000 faca 	bl	8004b74 <memchr>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d03a      	beq.n	800465a <_vfiprintf_r+0x1fa>
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <_vfiprintf_r+0x224>)
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d125      	bne.n	8004636 <_vfiprintf_r+0x1d6>
 80045ea:	2207      	movs	r2, #7
 80045ec:	9b07      	ldr	r3, [sp, #28]
 80045ee:	3307      	adds	r3, #7
 80045f0:	4393      	bics	r3, r2
 80045f2:	3308      	adds	r3, #8
 80045f4:	9307      	str	r3, [sp, #28]
 80045f6:	6963      	ldr	r3, [r4, #20]
 80045f8:	9a04      	ldr	r2, [sp, #16]
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	6163      	str	r3, [r4, #20]
 80045fe:	e750      	b.n	80044a2 <_vfiprintf_r+0x42>
 8004600:	4343      	muls	r3, r0
 8004602:	2101      	movs	r1, #1
 8004604:	189b      	adds	r3, r3, r2
 8004606:	0035      	movs	r5, r6
 8004608:	e790      	b.n	800452c <_vfiprintf_r+0xcc>
 800460a:	2301      	movs	r3, #1
 800460c:	425b      	negs	r3, r3
 800460e:	e7d0      	b.n	80045b2 <_vfiprintf_r+0x152>
 8004610:	2300      	movs	r3, #0
 8004612:	200a      	movs	r0, #10
 8004614:	001a      	movs	r2, r3
 8004616:	3501      	adds	r5, #1
 8004618:	6063      	str	r3, [r4, #4]
 800461a:	7829      	ldrb	r1, [r5, #0]
 800461c:	1c6e      	adds	r6, r5, #1
 800461e:	3930      	subs	r1, #48	; 0x30
 8004620:	2909      	cmp	r1, #9
 8004622:	d903      	bls.n	800462c <_vfiprintf_r+0x1cc>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0c5      	beq.n	80045b4 <_vfiprintf_r+0x154>
 8004628:	9209      	str	r2, [sp, #36]	; 0x24
 800462a:	e7c3      	b.n	80045b4 <_vfiprintf_r+0x154>
 800462c:	4342      	muls	r2, r0
 800462e:	2301      	movs	r3, #1
 8004630:	1852      	adds	r2, r2, r1
 8004632:	0035      	movs	r5, r6
 8004634:	e7f1      	b.n	800461a <_vfiprintf_r+0x1ba>
 8004636:	ab07      	add	r3, sp, #28
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	003a      	movs	r2, r7
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <_vfiprintf_r+0x228>)
 800463e:	0021      	movs	r1, r4
 8004640:	9803      	ldr	r0, [sp, #12]
 8004642:	e000      	b.n	8004646 <_vfiprintf_r+0x1e6>
 8004644:	bf00      	nop
 8004646:	9004      	str	r0, [sp, #16]
 8004648:	9b04      	ldr	r3, [sp, #16]
 800464a:	3301      	adds	r3, #1
 800464c:	d1d3      	bne.n	80045f6 <_vfiprintf_r+0x196>
 800464e:	89bb      	ldrh	r3, [r7, #12]
 8004650:	065b      	lsls	r3, r3, #25
 8004652:	d500      	bpl.n	8004656 <_vfiprintf_r+0x1f6>
 8004654:	e784      	b.n	8004560 <_vfiprintf_r+0x100>
 8004656:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004658:	e784      	b.n	8004564 <_vfiprintf_r+0x104>
 800465a:	ab07      	add	r3, sp, #28
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	003a      	movs	r2, r7
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <_vfiprintf_r+0x228>)
 8004662:	0021      	movs	r1, r4
 8004664:	9803      	ldr	r0, [sp, #12]
 8004666:	f000 f87f 	bl	8004768 <_printf_i>
 800466a:	e7ec      	b.n	8004646 <_vfiprintf_r+0x1e6>
 800466c:	08004d2c 	.word	0x08004d2c
 8004670:	08004d76 	.word	0x08004d76
 8004674:	08004d4c 	.word	0x08004d4c
 8004678:	08004d0c 	.word	0x08004d0c
 800467c:	08004d7c 	.word	0x08004d7c
 8004680:	08004d80 	.word	0x08004d80
 8004684:	00000000 	.word	0x00000000
 8004688:	0800443b 	.word	0x0800443b

0800468c <_printf_common>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	0015      	movs	r5, r2
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	688a      	ldr	r2, [r1, #8]
 8004694:	690b      	ldr	r3, [r1, #16]
 8004696:	9000      	str	r0, [sp, #0]
 8004698:	000c      	movs	r4, r1
 800469a:	4293      	cmp	r3, r2
 800469c:	da00      	bge.n	80046a0 <_printf_common+0x14>
 800469e:	0013      	movs	r3, r2
 80046a0:	0022      	movs	r2, r4
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	3243      	adds	r2, #67	; 0x43
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d001      	beq.n	80046b0 <_printf_common+0x24>
 80046ac:	3301      	adds	r3, #1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	d502      	bpl.n	80046bc <_printf_common+0x30>
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	3302      	adds	r3, #2
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	2706      	movs	r7, #6
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	401f      	ands	r7, r3
 80046c2:	d027      	beq.n	8004714 <_printf_common+0x88>
 80046c4:	0023      	movs	r3, r4
 80046c6:	3343      	adds	r3, #67	; 0x43
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	4193      	sbcs	r3, r2
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	0692      	lsls	r2, r2, #26
 80046d2:	d430      	bmi.n	8004736 <_printf_common+0xaa>
 80046d4:	0022      	movs	r2, r4
 80046d6:	9901      	ldr	r1, [sp, #4]
 80046d8:	3243      	adds	r2, #67	; 0x43
 80046da:	9800      	ldr	r0, [sp, #0]
 80046dc:	9e08      	ldr	r6, [sp, #32]
 80046de:	47b0      	blx	r6
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d025      	beq.n	8004730 <_printf_common+0xa4>
 80046e4:	2306      	movs	r3, #6
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	682a      	ldr	r2, [r5, #0]
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	4003      	ands	r3, r0
 80046ee:	2500      	movs	r5, #0
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d103      	bne.n	80046fc <_printf_common+0x70>
 80046f4:	1a8d      	subs	r5, r1, r2
 80046f6:	43eb      	mvns	r3, r5
 80046f8:	17db      	asrs	r3, r3, #31
 80046fa:	401d      	ands	r5, r3
 80046fc:	68a3      	ldr	r3, [r4, #8]
 80046fe:	6922      	ldr	r2, [r4, #16]
 8004700:	4293      	cmp	r3, r2
 8004702:	dd01      	ble.n	8004708 <_printf_common+0x7c>
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	18ed      	adds	r5, r5, r3
 8004708:	2700      	movs	r7, #0
 800470a:	42bd      	cmp	r5, r7
 800470c:	d120      	bne.n	8004750 <_printf_common+0xc4>
 800470e:	2000      	movs	r0, #0
 8004710:	e010      	b.n	8004734 <_printf_common+0xa8>
 8004712:	3701      	adds	r7, #1
 8004714:	68e3      	ldr	r3, [r4, #12]
 8004716:	682a      	ldr	r2, [r5, #0]
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	42bb      	cmp	r3, r7
 800471c:	ddd2      	ble.n	80046c4 <_printf_common+0x38>
 800471e:	0022      	movs	r2, r4
 8004720:	2301      	movs	r3, #1
 8004722:	3219      	adds	r2, #25
 8004724:	9901      	ldr	r1, [sp, #4]
 8004726:	9800      	ldr	r0, [sp, #0]
 8004728:	9e08      	ldr	r6, [sp, #32]
 800472a:	47b0      	blx	r6
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d1f0      	bne.n	8004712 <_printf_common+0x86>
 8004730:	2001      	movs	r0, #1
 8004732:	4240      	negs	r0, r0
 8004734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004736:	2030      	movs	r0, #48	; 0x30
 8004738:	18e1      	adds	r1, r4, r3
 800473a:	3143      	adds	r1, #67	; 0x43
 800473c:	7008      	strb	r0, [r1, #0]
 800473e:	0021      	movs	r1, r4
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	3145      	adds	r1, #69	; 0x45
 8004744:	7809      	ldrb	r1, [r1, #0]
 8004746:	18a2      	adds	r2, r4, r2
 8004748:	3243      	adds	r2, #67	; 0x43
 800474a:	3302      	adds	r3, #2
 800474c:	7011      	strb	r1, [r2, #0]
 800474e:	e7c1      	b.n	80046d4 <_printf_common+0x48>
 8004750:	0022      	movs	r2, r4
 8004752:	2301      	movs	r3, #1
 8004754:	321a      	adds	r2, #26
 8004756:	9901      	ldr	r1, [sp, #4]
 8004758:	9800      	ldr	r0, [sp, #0]
 800475a:	9e08      	ldr	r6, [sp, #32]
 800475c:	47b0      	blx	r6
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	d0e6      	beq.n	8004730 <_printf_common+0xa4>
 8004762:	3701      	adds	r7, #1
 8004764:	e7d1      	b.n	800470a <_printf_common+0x7e>
	...

08004768 <_printf_i>:
 8004768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	9204      	str	r2, [sp, #16]
 800476e:	000a      	movs	r2, r1
 8004770:	3243      	adds	r2, #67	; 0x43
 8004772:	9305      	str	r3, [sp, #20]
 8004774:	9003      	str	r0, [sp, #12]
 8004776:	9202      	str	r2, [sp, #8]
 8004778:	7e0a      	ldrb	r2, [r1, #24]
 800477a:	000c      	movs	r4, r1
 800477c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800477e:	2a6e      	cmp	r2, #110	; 0x6e
 8004780:	d100      	bne.n	8004784 <_printf_i+0x1c>
 8004782:	e086      	b.n	8004892 <_printf_i+0x12a>
 8004784:	d81f      	bhi.n	80047c6 <_printf_i+0x5e>
 8004786:	2a63      	cmp	r2, #99	; 0x63
 8004788:	d033      	beq.n	80047f2 <_printf_i+0x8a>
 800478a:	d808      	bhi.n	800479e <_printf_i+0x36>
 800478c:	2a00      	cmp	r2, #0
 800478e:	d100      	bne.n	8004792 <_printf_i+0x2a>
 8004790:	e08c      	b.n	80048ac <_printf_i+0x144>
 8004792:	2a58      	cmp	r2, #88	; 0x58
 8004794:	d04d      	beq.n	8004832 <_printf_i+0xca>
 8004796:	0025      	movs	r5, r4
 8004798:	3542      	adds	r5, #66	; 0x42
 800479a:	702a      	strb	r2, [r5, #0]
 800479c:	e030      	b.n	8004800 <_printf_i+0x98>
 800479e:	2a64      	cmp	r2, #100	; 0x64
 80047a0:	d001      	beq.n	80047a6 <_printf_i+0x3e>
 80047a2:	2a69      	cmp	r2, #105	; 0x69
 80047a4:	d1f7      	bne.n	8004796 <_printf_i+0x2e>
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	6825      	ldr	r5, [r4, #0]
 80047aa:	1d0a      	adds	r2, r1, #4
 80047ac:	0628      	lsls	r0, r5, #24
 80047ae:	d529      	bpl.n	8004804 <_printf_i+0x9c>
 80047b0:	6808      	ldr	r0, [r1, #0]
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2800      	cmp	r0, #0
 80047b6:	da03      	bge.n	80047c0 <_printf_i+0x58>
 80047b8:	232d      	movs	r3, #45	; 0x2d
 80047ba:	9a02      	ldr	r2, [sp, #8]
 80047bc:	4240      	negs	r0, r0
 80047be:	7013      	strb	r3, [r2, #0]
 80047c0:	4e6b      	ldr	r6, [pc, #428]	; (8004970 <_printf_i+0x208>)
 80047c2:	270a      	movs	r7, #10
 80047c4:	e04f      	b.n	8004866 <_printf_i+0xfe>
 80047c6:	2a73      	cmp	r2, #115	; 0x73
 80047c8:	d074      	beq.n	80048b4 <_printf_i+0x14c>
 80047ca:	d808      	bhi.n	80047de <_printf_i+0x76>
 80047cc:	2a6f      	cmp	r2, #111	; 0x6f
 80047ce:	d01f      	beq.n	8004810 <_printf_i+0xa8>
 80047d0:	2a70      	cmp	r2, #112	; 0x70
 80047d2:	d1e0      	bne.n	8004796 <_printf_i+0x2e>
 80047d4:	2220      	movs	r2, #32
 80047d6:	6809      	ldr	r1, [r1, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	e003      	b.n	80047e6 <_printf_i+0x7e>
 80047de:	2a75      	cmp	r2, #117	; 0x75
 80047e0:	d016      	beq.n	8004810 <_printf_i+0xa8>
 80047e2:	2a78      	cmp	r2, #120	; 0x78
 80047e4:	d1d7      	bne.n	8004796 <_printf_i+0x2e>
 80047e6:	0022      	movs	r2, r4
 80047e8:	2178      	movs	r1, #120	; 0x78
 80047ea:	3245      	adds	r2, #69	; 0x45
 80047ec:	7011      	strb	r1, [r2, #0]
 80047ee:	4e61      	ldr	r6, [pc, #388]	; (8004974 <_printf_i+0x20c>)
 80047f0:	e022      	b.n	8004838 <_printf_i+0xd0>
 80047f2:	0025      	movs	r5, r4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	3542      	adds	r5, #66	; 0x42
 80047f8:	1d11      	adds	r1, r2, #4
 80047fa:	6019      	str	r1, [r3, #0]
 80047fc:	6813      	ldr	r3, [r2, #0]
 80047fe:	702b      	strb	r3, [r5, #0]
 8004800:	2301      	movs	r3, #1
 8004802:	e065      	b.n	80048d0 <_printf_i+0x168>
 8004804:	6808      	ldr	r0, [r1, #0]
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	0669      	lsls	r1, r5, #25
 800480a:	d5d3      	bpl.n	80047b4 <_printf_i+0x4c>
 800480c:	b200      	sxth	r0, r0
 800480e:	e7d1      	b.n	80047b4 <_printf_i+0x4c>
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	1d08      	adds	r0, r1, #4
 8004816:	6018      	str	r0, [r3, #0]
 8004818:	6808      	ldr	r0, [r1, #0]
 800481a:	062e      	lsls	r6, r5, #24
 800481c:	d505      	bpl.n	800482a <_printf_i+0xc2>
 800481e:	4e54      	ldr	r6, [pc, #336]	; (8004970 <_printf_i+0x208>)
 8004820:	2708      	movs	r7, #8
 8004822:	2a6f      	cmp	r2, #111	; 0x6f
 8004824:	d01b      	beq.n	800485e <_printf_i+0xf6>
 8004826:	270a      	movs	r7, #10
 8004828:	e019      	b.n	800485e <_printf_i+0xf6>
 800482a:	066d      	lsls	r5, r5, #25
 800482c:	d5f7      	bpl.n	800481e <_printf_i+0xb6>
 800482e:	b280      	uxth	r0, r0
 8004830:	e7f5      	b.n	800481e <_printf_i+0xb6>
 8004832:	3145      	adds	r1, #69	; 0x45
 8004834:	4e4e      	ldr	r6, [pc, #312]	; (8004970 <_printf_i+0x208>)
 8004836:	700a      	strb	r2, [r1, #0]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	1d01      	adds	r1, r0, #4
 800483e:	6800      	ldr	r0, [r0, #0]
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	0615      	lsls	r5, r2, #24
 8004844:	d521      	bpl.n	800488a <_printf_i+0x122>
 8004846:	07d3      	lsls	r3, r2, #31
 8004848:	d502      	bpl.n	8004850 <_printf_i+0xe8>
 800484a:	2320      	movs	r3, #32
 800484c:	431a      	orrs	r2, r3
 800484e:	6022      	str	r2, [r4, #0]
 8004850:	2710      	movs	r7, #16
 8004852:	2800      	cmp	r0, #0
 8004854:	d103      	bne.n	800485e <_printf_i+0xf6>
 8004856:	2320      	movs	r3, #32
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	439a      	bics	r2, r3
 800485c:	6022      	str	r2, [r4, #0]
 800485e:	0023      	movs	r3, r4
 8004860:	2200      	movs	r2, #0
 8004862:	3343      	adds	r3, #67	; 0x43
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	6863      	ldr	r3, [r4, #4]
 8004868:	60a3      	str	r3, [r4, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	db58      	blt.n	8004920 <_printf_i+0x1b8>
 800486e:	2204      	movs	r2, #4
 8004870:	6821      	ldr	r1, [r4, #0]
 8004872:	4391      	bics	r1, r2
 8004874:	6021      	str	r1, [r4, #0]
 8004876:	2800      	cmp	r0, #0
 8004878:	d154      	bne.n	8004924 <_printf_i+0x1bc>
 800487a:	9d02      	ldr	r5, [sp, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05a      	beq.n	8004936 <_printf_i+0x1ce>
 8004880:	0025      	movs	r5, r4
 8004882:	7833      	ldrb	r3, [r6, #0]
 8004884:	3542      	adds	r5, #66	; 0x42
 8004886:	702b      	strb	r3, [r5, #0]
 8004888:	e055      	b.n	8004936 <_printf_i+0x1ce>
 800488a:	0655      	lsls	r5, r2, #25
 800488c:	d5db      	bpl.n	8004846 <_printf_i+0xde>
 800488e:	b280      	uxth	r0, r0
 8004890:	e7d9      	b.n	8004846 <_printf_i+0xde>
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	680d      	ldr	r5, [r1, #0]
 8004896:	1d10      	adds	r0, r2, #4
 8004898:	6949      	ldr	r1, [r1, #20]
 800489a:	6018      	str	r0, [r3, #0]
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	062e      	lsls	r6, r5, #24
 80048a0:	d501      	bpl.n	80048a6 <_printf_i+0x13e>
 80048a2:	6019      	str	r1, [r3, #0]
 80048a4:	e002      	b.n	80048ac <_printf_i+0x144>
 80048a6:	066d      	lsls	r5, r5, #25
 80048a8:	d5fb      	bpl.n	80048a2 <_printf_i+0x13a>
 80048aa:	8019      	strh	r1, [r3, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9d02      	ldr	r5, [sp, #8]
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	e04f      	b.n	8004954 <_printf_i+0x1ec>
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	1d11      	adds	r1, r2, #4
 80048b8:	6019      	str	r1, [r3, #0]
 80048ba:	6815      	ldr	r5, [r2, #0]
 80048bc:	2100      	movs	r1, #0
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	0028      	movs	r0, r5
 80048c2:	f000 f957 	bl	8004b74 <memchr>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d001      	beq.n	80048ce <_printf_i+0x166>
 80048ca:	1b40      	subs	r0, r0, r5
 80048cc:	6060      	str	r0, [r4, #4]
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	2300      	movs	r3, #0
 80048d4:	9a02      	ldr	r2, [sp, #8]
 80048d6:	7013      	strb	r3, [r2, #0]
 80048d8:	e03c      	b.n	8004954 <_printf_i+0x1ec>
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	002a      	movs	r2, r5
 80048de:	9904      	ldr	r1, [sp, #16]
 80048e0:	9803      	ldr	r0, [sp, #12]
 80048e2:	9d05      	ldr	r5, [sp, #20]
 80048e4:	47a8      	blx	r5
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	d03e      	beq.n	8004968 <_printf_i+0x200>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	079b      	lsls	r3, r3, #30
 80048ee:	d415      	bmi.n	800491c <_printf_i+0x1b4>
 80048f0:	9b07      	ldr	r3, [sp, #28]
 80048f2:	68e0      	ldr	r0, [r4, #12]
 80048f4:	4298      	cmp	r0, r3
 80048f6:	da39      	bge.n	800496c <_printf_i+0x204>
 80048f8:	0018      	movs	r0, r3
 80048fa:	e037      	b.n	800496c <_printf_i+0x204>
 80048fc:	0022      	movs	r2, r4
 80048fe:	2301      	movs	r3, #1
 8004900:	3219      	adds	r2, #25
 8004902:	9904      	ldr	r1, [sp, #16]
 8004904:	9803      	ldr	r0, [sp, #12]
 8004906:	9e05      	ldr	r6, [sp, #20]
 8004908:	47b0      	blx	r6
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	d02c      	beq.n	8004968 <_printf_i+0x200>
 800490e:	3501      	adds	r5, #1
 8004910:	68e3      	ldr	r3, [r4, #12]
 8004912:	9a07      	ldr	r2, [sp, #28]
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	42ab      	cmp	r3, r5
 8004918:	dcf0      	bgt.n	80048fc <_printf_i+0x194>
 800491a:	e7e9      	b.n	80048f0 <_printf_i+0x188>
 800491c:	2500      	movs	r5, #0
 800491e:	e7f7      	b.n	8004910 <_printf_i+0x1a8>
 8004920:	2800      	cmp	r0, #0
 8004922:	d0ad      	beq.n	8004880 <_printf_i+0x118>
 8004924:	9d02      	ldr	r5, [sp, #8]
 8004926:	0039      	movs	r1, r7
 8004928:	f7fb fc74 	bl	8000214 <__aeabi_uidivmod>
 800492c:	5c73      	ldrb	r3, [r6, r1]
 800492e:	3d01      	subs	r5, #1
 8004930:	702b      	strb	r3, [r5, #0]
 8004932:	2800      	cmp	r0, #0
 8004934:	d1f7      	bne.n	8004926 <_printf_i+0x1be>
 8004936:	2f08      	cmp	r7, #8
 8004938:	d109      	bne.n	800494e <_printf_i+0x1e6>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	07db      	lsls	r3, r3, #31
 800493e:	d506      	bpl.n	800494e <_printf_i+0x1e6>
 8004940:	6863      	ldr	r3, [r4, #4]
 8004942:	6922      	ldr	r2, [r4, #16]
 8004944:	4293      	cmp	r3, r2
 8004946:	dc02      	bgt.n	800494e <_printf_i+0x1e6>
 8004948:	2330      	movs	r3, #48	; 0x30
 800494a:	3d01      	subs	r5, #1
 800494c:	702b      	strb	r3, [r5, #0]
 800494e:	9b02      	ldr	r3, [sp, #8]
 8004950:	1b5b      	subs	r3, r3, r5
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	9b05      	ldr	r3, [sp, #20]
 8004956:	aa07      	add	r2, sp, #28
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	0021      	movs	r1, r4
 800495c:	9b04      	ldr	r3, [sp, #16]
 800495e:	9803      	ldr	r0, [sp, #12]
 8004960:	f7ff fe94 	bl	800468c <_printf_common>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d1b8      	bne.n	80048da <_printf_i+0x172>
 8004968:	2001      	movs	r0, #1
 800496a:	4240      	negs	r0, r0
 800496c:	b009      	add	sp, #36	; 0x24
 800496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004970:	08004d87 	.word	0x08004d87
 8004974:	08004d98 	.word	0x08004d98

08004978 <_putc_r>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	0006      	movs	r6, r0
 800497c:	000d      	movs	r5, r1
 800497e:	0014      	movs	r4, r2
 8004980:	2800      	cmp	r0, #0
 8004982:	d004      	beq.n	800498e <_putc_r+0x16>
 8004984:	6983      	ldr	r3, [r0, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <_putc_r+0x16>
 800498a:	f7ff fb6d 	bl	8004068 <__sinit>
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <_putc_r+0x60>)
 8004990:	429c      	cmp	r4, r3
 8004992:	d111      	bne.n	80049b8 <_putc_r+0x40>
 8004994:	6874      	ldr	r4, [r6, #4]
 8004996:	68a3      	ldr	r3, [r4, #8]
 8004998:	3b01      	subs	r3, #1
 800499a:	60a3      	str	r3, [r4, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	da05      	bge.n	80049ac <_putc_r+0x34>
 80049a0:	69a2      	ldr	r2, [r4, #24]
 80049a2:	4293      	cmp	r3, r2
 80049a4:	db12      	blt.n	80049cc <_putc_r+0x54>
 80049a6:	b2eb      	uxtb	r3, r5
 80049a8:	2b0a      	cmp	r3, #10
 80049aa:	d00f      	beq.n	80049cc <_putc_r+0x54>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	b2e8      	uxtb	r0, r5
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	6022      	str	r2, [r4, #0]
 80049b4:	701d      	strb	r5, [r3, #0]
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <_putc_r+0x64>)
 80049ba:	429c      	cmp	r4, r3
 80049bc:	d101      	bne.n	80049c2 <_putc_r+0x4a>
 80049be:	68b4      	ldr	r4, [r6, #8]
 80049c0:	e7e9      	b.n	8004996 <_putc_r+0x1e>
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <_putc_r+0x68>)
 80049c4:	429c      	cmp	r4, r3
 80049c6:	d1e6      	bne.n	8004996 <_putc_r+0x1e>
 80049c8:	68f4      	ldr	r4, [r6, #12]
 80049ca:	e7e4      	b.n	8004996 <_putc_r+0x1e>
 80049cc:	0022      	movs	r2, r4
 80049ce:	0029      	movs	r1, r5
 80049d0:	0030      	movs	r0, r6
 80049d2:	f7ff f985 	bl	8003ce0 <__swbuf_r>
 80049d6:	e7ee      	b.n	80049b6 <_putc_r+0x3e>
 80049d8:	08004d2c 	.word	0x08004d2c
 80049dc:	08004d4c 	.word	0x08004d4c
 80049e0:	08004d0c 	.word	0x08004d0c

080049e4 <_sbrk_r>:
 80049e4:	2300      	movs	r3, #0
 80049e6:	b570      	push	{r4, r5, r6, lr}
 80049e8:	4c06      	ldr	r4, [pc, #24]	; (8004a04 <_sbrk_r+0x20>)
 80049ea:	0005      	movs	r5, r0
 80049ec:	0008      	movs	r0, r1
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	f7fc f92e 	bl	8000c50 <_sbrk>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d103      	bne.n	8004a00 <_sbrk_r+0x1c>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d000      	beq.n	8004a00 <_sbrk_r+0x1c>
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	2000045c 	.word	0x2000045c

08004a08 <__sread>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	000c      	movs	r4, r1
 8004a0c:	250e      	movs	r5, #14
 8004a0e:	5f49      	ldrsh	r1, [r1, r5]
 8004a10:	f000 f8be 	bl	8004b90 <_read_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	db03      	blt.n	8004a20 <__sread+0x18>
 8004a18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a1a:	181b      	adds	r3, r3, r0
 8004a1c:	6563      	str	r3, [r4, #84]	; 0x54
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	4a02      	ldr	r2, [pc, #8]	; (8004a2c <__sread+0x24>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	e7f9      	b.n	8004a1e <__sread+0x16>
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	ffffefff 	.word	0xffffefff

08004a30 <__swrite>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	001f      	movs	r7, r3
 8004a34:	898b      	ldrh	r3, [r1, #12]
 8004a36:	0005      	movs	r5, r0
 8004a38:	000c      	movs	r4, r1
 8004a3a:	0016      	movs	r6, r2
 8004a3c:	05db      	lsls	r3, r3, #23
 8004a3e:	d505      	bpl.n	8004a4c <__swrite+0x1c>
 8004a40:	230e      	movs	r3, #14
 8004a42:	5ec9      	ldrsh	r1, [r1, r3]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2302      	movs	r3, #2
 8004a48:	f000 f880 	bl	8004b4c <_lseek_r>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <__swrite+0x34>)
 8004a50:	0028      	movs	r0, r5
 8004a52:	4013      	ands	r3, r2
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	0032      	movs	r2, r6
 8004a58:	230e      	movs	r3, #14
 8004a5a:	5ee1      	ldrsh	r1, [r4, r3]
 8004a5c:	003b      	movs	r3, r7
 8004a5e:	f000 f82b 	bl	8004ab8 <_write_r>
 8004a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a64:	ffffefff 	.word	0xffffefff

08004a68 <__sseek>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	000c      	movs	r4, r1
 8004a6c:	250e      	movs	r5, #14
 8004a6e:	5f49      	ldrsh	r1, [r1, r5]
 8004a70:	f000 f86c 	bl	8004b4c <_lseek_r>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	1c42      	adds	r2, r0, #1
 8004a78:	d103      	bne.n	8004a82 <__sseek+0x1a>
 8004a7a:	4a05      	ldr	r2, [pc, #20]	; (8004a90 <__sseek+0x28>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	2280      	movs	r2, #128	; 0x80
 8004a84:	0152      	lsls	r2, r2, #5
 8004a86:	4313      	orrs	r3, r2
 8004a88:	81a3      	strh	r3, [r4, #12]
 8004a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a8c:	e7f8      	b.n	8004a80 <__sseek+0x18>
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	ffffefff 	.word	0xffffefff

08004a94 <__sclose>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	230e      	movs	r3, #14
 8004a98:	5ec9      	ldrsh	r1, [r1, r3]
 8004a9a:	f000 f821 	bl	8004ae0 <_close_r>
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <__ascii_wctomb>:
 8004aa0:	1e0b      	subs	r3, r1, #0
 8004aa2:	d004      	beq.n	8004aae <__ascii_wctomb+0xe>
 8004aa4:	2aff      	cmp	r2, #255	; 0xff
 8004aa6:	d904      	bls.n	8004ab2 <__ascii_wctomb+0x12>
 8004aa8:	238a      	movs	r3, #138	; 0x8a
 8004aaa:	6003      	str	r3, [r0, #0]
 8004aac:	3b8b      	subs	r3, #139	; 0x8b
 8004aae:	0018      	movs	r0, r3
 8004ab0:	4770      	bx	lr
 8004ab2:	700a      	strb	r2, [r1, #0]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e7fa      	b.n	8004aae <__ascii_wctomb+0xe>

08004ab8 <_write_r>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	0005      	movs	r5, r0
 8004abc:	0008      	movs	r0, r1
 8004abe:	0011      	movs	r1, r2
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4c06      	ldr	r4, [pc, #24]	; (8004adc <_write_r+0x24>)
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	f7fb fbaa 	bl	8000220 <_write>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d103      	bne.n	8004ad8 <_write_r+0x20>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d000      	beq.n	8004ad8 <_write_r+0x20>
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	2000045c 	.word	0x2000045c

08004ae0 <_close_r>:
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	b570      	push	{r4, r5, r6, lr}
 8004ae4:	4c06      	ldr	r4, [pc, #24]	; (8004b00 <_close_r+0x20>)
 8004ae6:	0005      	movs	r5, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	f7fc f883 	bl	8000bf6 <_close>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d103      	bne.n	8004afc <_close_r+0x1c>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d000      	beq.n	8004afc <_close_r+0x1c>
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	2000045c 	.word	0x2000045c

08004b04 <_fstat_r>:
 8004b04:	2300      	movs	r3, #0
 8004b06:	b570      	push	{r4, r5, r6, lr}
 8004b08:	4c06      	ldr	r4, [pc, #24]	; (8004b24 <_fstat_r+0x20>)
 8004b0a:	0005      	movs	r5, r0
 8004b0c:	0008      	movs	r0, r1
 8004b0e:	0011      	movs	r1, r2
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	f7fc f87a 	bl	8000c0a <_fstat>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	d103      	bne.n	8004b22 <_fstat_r+0x1e>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d000      	beq.n	8004b22 <_fstat_r+0x1e>
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	2000045c 	.word	0x2000045c

08004b28 <_isatty_r>:
 8004b28:	2300      	movs	r3, #0
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	4c06      	ldr	r4, [pc, #24]	; (8004b48 <_isatty_r+0x20>)
 8004b2e:	0005      	movs	r5, r0
 8004b30:	0008      	movs	r0, r1
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	f7fc f877 	bl	8000c26 <_isatty>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d103      	bne.n	8004b44 <_isatty_r+0x1c>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d000      	beq.n	8004b44 <_isatty_r+0x1c>
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	2000045c 	.word	0x2000045c

08004b4c <_lseek_r>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	0005      	movs	r5, r0
 8004b50:	0008      	movs	r0, r1
 8004b52:	0011      	movs	r1, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	4c06      	ldr	r4, [pc, #24]	; (8004b70 <_lseek_r+0x24>)
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	f7fc f86c 	bl	8000c38 <_lseek>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d103      	bne.n	8004b6c <_lseek_r+0x20>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d000      	beq.n	8004b6c <_lseek_r+0x20>
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	2000045c 	.word	0x2000045c

08004b74 <memchr>:
 8004b74:	b2c9      	uxtb	r1, r1
 8004b76:	1882      	adds	r2, r0, r2
 8004b78:	4290      	cmp	r0, r2
 8004b7a:	d101      	bne.n	8004b80 <memchr+0xc>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	4770      	bx	lr
 8004b80:	7803      	ldrb	r3, [r0, #0]
 8004b82:	428b      	cmp	r3, r1
 8004b84:	d0fb      	beq.n	8004b7e <memchr+0xa>
 8004b86:	3001      	adds	r0, #1
 8004b88:	e7f6      	b.n	8004b78 <memchr+0x4>

08004b8a <__malloc_lock>:
 8004b8a:	4770      	bx	lr

08004b8c <__malloc_unlock>:
 8004b8c:	4770      	bx	lr
	...

08004b90 <_read_r>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	0005      	movs	r5, r0
 8004b94:	0008      	movs	r0, r1
 8004b96:	0011      	movs	r1, r2
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4c06      	ldr	r4, [pc, #24]	; (8004bb4 <_read_r+0x24>)
 8004b9c:	6022      	str	r2, [r4, #0]
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	f7fc f80c 	bl	8000bbc <_read>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_read_r+0x20>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d000      	beq.n	8004bb0 <_read_r+0x20>
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	2000045c 	.word	0x2000045c

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
