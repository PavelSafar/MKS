
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080026b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080026b0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008659  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017bf  00000000  00000000  0002868d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0002a760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ba46  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ef1  00000000  00000000  000369de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00041bdd  00000000  00000000  0003e8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000804ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f90  00000000  00000000  00080528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800264c 	.word	0x0800264c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800264c 	.word	0x0800264c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fad3 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f819 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f907 	bl	8000440 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f8e7 	bl	8000404 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8b5 	bl	80003a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800023a:	f000 f873 	bl	8000324 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
 800023e:	2301      	movs	r3, #1
 8000240:	425b      	negs	r3, r3
 8000242:	1df9      	adds	r1, r7, #7
 8000244:	4805      	ldr	r0, [pc, #20]	; (800025c <main+0x3c>)
 8000246:	2201      	movs	r2, #1
 8000248:	f001 fdfe 	bl	8001e48 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 800024c:	2301      	movs	r3, #1
 800024e:	425b      	negs	r3, r3
 8000250:	1df9      	adds	r1, r7, #7
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <main+0x3c>)
 8000254:	2201      	movs	r2, #1
 8000256:	f001 fd4f 	bl	8001cf8 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
 800025a:	e7f0      	b.n	800023e <main+0x1e>
 800025c:	200000b8 	.word	0x200000b8

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b095      	sub	sp, #84	; 0x54
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2420      	movs	r4, #32
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	; 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f9e3 	bl	800263c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	2310      	movs	r3, #16
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f002 f9db 	bl	800263c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	003b      	movs	r3, r7
 8000288:	0018      	movs	r0, r3
 800028a:	2310      	movs	r3, #16
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f002 f9d4 	bl	800263c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2202      	movs	r2, #2
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2201      	movs	r2, #1
 80002a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2210      	movs	r2, #16
 80002a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2202      	movs	r2, #2
 80002ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	22a0      	movs	r2, #160	; 0xa0
 80002b8:	0392      	lsls	r2, r2, #14
 80002ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 ff87 	bl	80011d8 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ce:	f000 f93b 	bl	8000548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	2110      	movs	r1, #16
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2207      	movs	r2, #7
 80002d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2202      	movs	r2, #2
 80002de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2101      	movs	r1, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 fa8d 	bl	8001810 <HAL_RCC_ClockConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002fa:	f000 f925 	bl	8000548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2220      	movs	r2, #32
 8000302:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fbd1 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000316:	f000 f917 	bl	8000548 <Error_Handler>
  }
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b015      	add	sp, #84	; 0x54
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_I2C1_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_I2C1_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_I2C1_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <MX_I2C1_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_I2C1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C1_Init+0x74>)
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fe0b 	bl	8000f7c <HAL_I2C_Init>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 f8ed 	bl	8000548 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C1_Init+0x74>)
 8000370:	2100      	movs	r1, #0
 8000372:	0018      	movs	r0, r3
 8000374:	f000 fe98 	bl	80010a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 f8e4 	bl	8000548 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <MX_I2C1_Init+0x74>)
 8000382:	2100      	movs	r1, #0
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fedb 	bl	8001140 <HAL_I2CEx_ConfigDigitalFilter>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f8db 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000006c 	.word	0x2000006c
 800039c:	40005400 	.word	0x40005400
 80003a0:	0000020b 	.word	0x0000020b

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <MX_USART2_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b0:	2296      	movs	r2, #150	; 0x96
 80003b2:	0212      	lsls	r2, r2, #8
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fc31 	bl	8001c50 <HAL_UART_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f8a9 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200000b8 	.word	0x200000b8
 8000400:	40004400 	.word	0x40004400

08000404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_DMA_Init+0x38>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_DMA_Init+0x38>)
 8000410:	2101      	movs	r1, #1
 8000412:	430a      	orrs	r2, r1
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_DMA_Init+0x38>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	2201      	movs	r2, #1
 800041c:	4013      	ands	r3, r2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	200b      	movs	r0, #11
 8000428:	f000 fae2 	bl	80009f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800042c:	200b      	movs	r0, #11
 800042e:	f000 faf4 	bl	8000a1a <HAL_NVIC_EnableIRQ>

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40021000 	.word	0x40021000

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b089      	sub	sp, #36	; 0x24
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	240c      	movs	r4, #12
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	2314      	movs	r3, #20
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f002 f8f3 	bl	800263c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000456:	4b38      	ldr	r3, [pc, #224]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b37      	ldr	r3, [pc, #220]	; (8000538 <MX_GPIO_Init+0xf8>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0309      	lsls	r1, r1, #12
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b34      	ldr	r3, [pc, #208]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	031b      	lsls	r3, r3, #12
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b31      	ldr	r3, [pc, #196]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b30      	ldr	r3, [pc, #192]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <MX_GPIO_Init+0xf8>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	02c9      	lsls	r1, r1, #11
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <MX_GPIO_Init+0xf8>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	02db      	lsls	r3, r3, #11
 80004a4:	4013      	ands	r3, r2
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80004aa:	2390      	movs	r3, #144	; 0x90
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	2130      	movs	r1, #48	; 0x30
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fd44 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <MX_GPIO_Init+0xfc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	2101      	movs	r1, #1
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fd3e 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	0192      	lsls	r2, r2, #6
 80004ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <MX_GPIO_Init+0x100>)
 80004d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	4a1a      	ldr	r2, [pc, #104]	; (8000544 <MX_GPIO_Init+0x104>)
 80004dc:	0019      	movs	r1, r3
 80004de:	0010      	movs	r0, r2
 80004e0:	f000 fbbe 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2201      	movs	r2, #1
 80004ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	193a      	adds	r2, r7, r4
 80004fe:	2390      	movs	r3, #144	; 0x90
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fbab 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800050a:	0021      	movs	r1, r4
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000524:	187b      	adds	r3, r7, r1
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <MX_GPIO_Init+0xfc>)
 8000528:	0019      	movs	r1, r3
 800052a:	0010      	movs	r0, r2
 800052c:	f000 fb98 	bl	8000c60 <HAL_GPIO_Init>

}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b009      	add	sp, #36	; 0x24
 8000536:	bd90      	pop	{r4, r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400
 8000540:	10210000 	.word	0x10210000
 8000544:	48000800 	.word	0x48000800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x44>)
 800055c:	699a      	ldr	r2, [r3, #24]
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_MspInit+0x44>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	619a      	str	r2, [r3, #24]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_MspInit+0x44>)
 8000574:	69da      	ldr	r2, [r3, #28]
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_MspInit+0x44>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0549      	lsls	r1, r1, #21
 800057c:	430a      	orrs	r2, r1
 800057e:	61da      	str	r2, [r3, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_MspInit+0x44>)
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	055b      	lsls	r3, r3, #21
 8000588:	4013      	ands	r3, r2
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	2314      	movs	r3, #20
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	0018      	movs	r0, r3
 80005aa:	2314      	movs	r3, #20
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f002 f844 	bl	800263c <memset>
  if(hi2c->Instance==I2C1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1c      	ldr	r2, [pc, #112]	; (800062c <HAL_I2C_MspInit+0x90>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d131      	bne.n	8000622 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <HAL_I2C_MspInit+0x94>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_I2C_MspInit+0x94>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	02c9      	lsls	r1, r1, #11
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_I2C_MspInit+0x94>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	02db      	lsls	r3, r3, #11
 80005d4:	4013      	ands	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005da:	2114      	movs	r1, #20
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	22c0      	movs	r2, #192	; 0xc0
 80005e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2212      	movs	r2, #18
 80005e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2201      	movs	r2, #1
 80005ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2203      	movs	r2, #3
 80005f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2201      	movs	r2, #1
 80005f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <HAL_I2C_MspInit+0x98>)
 80005fe:	0019      	movs	r1, r3
 8000600:	0010      	movs	r0, r2
 8000602:	f000 fb2d 	bl	8000c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_I2C_MspInit+0x94>)
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_I2C_MspInit+0x94>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0389      	lsls	r1, r1, #14
 8000610:	430a      	orrs	r2, r1
 8000612:	61da      	str	r2, [r3, #28]
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_I2C_MspInit+0x94>)
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	039b      	lsls	r3, r3, #14
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b00a      	add	sp, #40	; 0x28
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40005400 	.word	0x40005400
 8000630:	40021000 	.word	0x40021000
 8000634:	48000400 	.word	0x48000400

08000638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	2314      	movs	r3, #20
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f001 fff6 	bl	800263c <memset>
  if(huart->Instance==USART2)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a2f      	ldr	r2, [pc, #188]	; (8000714 <HAL_UART_MspInit+0xdc>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d158      	bne.n	800070c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <HAL_UART_MspInit+0xe0>)
 800065c:	69da      	ldr	r2, [r3, #28]
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <HAL_UART_MspInit+0xe0>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0289      	lsls	r1, r1, #10
 8000664:	430a      	orrs	r2, r1
 8000666:	61da      	str	r2, [r3, #28]
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <HAL_UART_MspInit+0xe0>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	029b      	lsls	r3, r3, #10
 8000670:	4013      	ands	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <HAL_UART_MspInit+0xe0>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b27      	ldr	r3, [pc, #156]	; (8000718 <HAL_UART_MspInit+0xe0>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0289      	lsls	r1, r1, #10
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <HAL_UART_MspInit+0xe0>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	029b      	lsls	r3, r3, #10
 800068c:	4013      	ands	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000692:	2114      	movs	r1, #20
 8000694:	187b      	adds	r3, r7, r1
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2202      	movs	r2, #2
 800069e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	187a      	adds	r2, r7, r1
 80006b4:	2390      	movs	r3, #144	; 0x90
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fad0 	bl	8000c60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_UART_MspInit+0xe8>)
 80006c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006e6:	2220      	movs	r2, #32
 80006e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_UART_MspInit+0xe4>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f9ae 	bl	8000a54 <HAL_DMA_Init>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80006fc:	f7ff ff24 	bl	8000548 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a06      	ldr	r2, [pc, #24]	; (800071c <HAL_UART_MspInit+0xe4>)
 8000704:	66da      	str	r2, [r3, #108]	; 0x6c
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_UART_MspInit+0xe4>)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b00a      	add	sp, #40	; 0x28
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004400 	.word	0x40004400
 8000718:	40021000 	.word	0x40021000
 800071c:	20000028 	.word	0x20000028
 8000720:	40020058 	.word	0x40020058

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f888 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <DMA1_Channel4_5_IRQHandler+0x14>)
 800075e:	0018      	movs	r0, r3
 8000760:	f000 f9c0 	bl	8000ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000028 	.word	0x20000028

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490e      	ldr	r1, [pc, #56]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0b      	ldr	r4, [pc, #44]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007a6:	f7ff ffe3 	bl	8000770 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007aa:	f001 ff23 	bl	80025f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fd37 	bl	8000220 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   r0, =_estack
 80007b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c0:	080026a4 	.word	0x080026a4
  ldr r2, =_sbss
 80007c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c8:	2000013c 	.word	0x2000013c

080007cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_IRQHandler>
	...

080007d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <HAL_Init+0x24>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_Init+0x24>)
 80007da:	2110      	movs	r1, #16
 80007dc:	430a      	orrs	r2, r1
 80007de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 f809 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e6:	f7ff feb5 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_InitTick+0x5c>)
 8000802:	681c      	ldr	r4, [r3, #0]
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_InitTick+0x60>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	0019      	movs	r1, r3
 800080a:	23fa      	movs	r3, #250	; 0xfa
 800080c:	0098      	lsls	r0, r3, #2
 800080e:	f7ff fc7b 	bl	8000108 <__udivsi3>
 8000812:	0003      	movs	r3, r0
 8000814:	0019      	movs	r1, r3
 8000816:	0020      	movs	r0, r4
 8000818:	f7ff fc76 	bl	8000108 <__udivsi3>
 800081c:	0003      	movs	r3, r0
 800081e:	0018      	movs	r0, r3
 8000820:	f000 f90b 	bl	8000a3a <HAL_SYSTICK_Config>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	e00f      	b.n	800084c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d80b      	bhi.n	800084a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	2301      	movs	r3, #1
 8000836:	425b      	negs	r3, r3
 8000838:	2200      	movs	r2, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f8d8 	bl	80009f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_InitTick+0x64>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b003      	add	sp, #12
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	18d2      	adds	r2, r2, r3
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_IncTick+0x20>)
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000008 	.word	0x20000008
 8000880:	20000138 	.word	0x20000138

08000884 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_GetTick+0x10>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000138 	.word	0x20000138

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b7f      	cmp	r3, #127	; 0x7f
 80008aa:	d809      	bhi.n	80008c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	001a      	movs	r2, r3
 80008b2:	231f      	movs	r3, #31
 80008b4:	401a      	ands	r2, r3
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_EnableIRQ+0x30>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	4091      	lsls	r1, r2
 80008bc:	000a      	movs	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
  }
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	e000e100 	.word	0xe000e100

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b7f      	cmp	r3, #127	; 0x7f
 80008e0:	d828      	bhi.n	8000934 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <__NVIC_SetPriority+0xd4>)
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	33c0      	adds	r3, #192	; 0xc0
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	589b      	ldr	r3, [r3, r2]
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0011      	movs	r1, r2
 80008f8:	2203      	movs	r2, #3
 80008fa:	400a      	ands	r2, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	401a      	ands	r2, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	2303      	movs	r3, #3
 800091a:	4003      	ands	r3, r0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	481f      	ldr	r0, [pc, #124]	; (80009a0 <__NVIC_SetPriority+0xd4>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b25b      	sxtb	r3, r3
 8000928:	089b      	lsrs	r3, r3, #2
 800092a:	430a      	orrs	r2, r1
 800092c:	33c0      	adds	r3, #192	; 0xc0
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000932:	e031      	b.n	8000998 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <__NVIC_SetPriority+0xd8>)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0019      	movs	r1, r3
 800093c:	230f      	movs	r3, #15
 800093e:	400b      	ands	r3, r1
 8000940:	3b08      	subs	r3, #8
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	3306      	adds	r3, #6
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	3304      	adds	r3, #4
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1dfa      	adds	r2, r7, #7
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	0011      	movs	r1, r2
 8000954:	2203      	movs	r2, #3
 8000956:	400a      	ands	r2, r1
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	21ff      	movs	r1, #255	; 0xff
 800095c:	4091      	lsls	r1, r2
 800095e:	000a      	movs	r2, r1
 8000960:	43d2      	mvns	r2, r2
 8000962:	401a      	ands	r2, r3
 8000964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	401a      	ands	r2, r3
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0018      	movs	r0, r3
 8000974:	2303      	movs	r3, #3
 8000976:	4003      	ands	r3, r0
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <__NVIC_SetPriority+0xd8>)
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001c      	movs	r4, r3
 8000984:	230f      	movs	r3, #15
 8000986:	4023      	ands	r3, r4
 8000988:	3b08      	subs	r3, #8
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	430a      	orrs	r2, r1
 800098e:	3306      	adds	r3, #6
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	18c3      	adds	r3, r0, r3
 8000994:	3304      	adds	r3, #4
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <SysTick_Config+0x40>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d901      	bls.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e010      	b.n	80009e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <SysTick_Config+0x44>)
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	3a01      	subs	r2, #1
 80009c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	2301      	movs	r3, #1
 80009c8:	425b      	negs	r3, r3
 80009ca:	2103      	movs	r1, #3
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff7d 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SysTick_Config+0x44>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Config+0x44>)
 80009da:	2207      	movs	r2, #7
 80009dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009de:	2300      	movs	r3, #0
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	00ffffff 	.word	0x00ffffff
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	210f      	movs	r1, #15
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	1c02      	adds	r2, r0, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ff5d 	bl	80008cc <__NVIC_SetPriority>
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	0002      	movs	r2, r0
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ff33 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ffaf 	bl	80009a8 <SysTick_Config>
 8000a4a:	0003      	movs	r3, r0
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e036      	b.n	8000ad8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2221      	movs	r2, #33	; 0x21
 8000a6e:	2102      	movs	r1, #2
 8000a70:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_DMA_Init+0x8c>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8b4 	bl	8000c28 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2221      	movs	r2, #33	; 0x21
 8000aca:	2101      	movs	r1, #1
 8000acc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
}  
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b004      	add	sp, #16
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	ffffc00f 	.word	0xffffc00f

08000ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	2204      	movs	r2, #4
 8000b02:	409a      	lsls	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d024      	beq.n	8000b56 <HAL_DMA_IRQHandler+0x72>
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	4013      	ands	r3, r2
 8000b12:	d020      	beq.n	8000b56 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d107      	bne.n	8000b30 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d100      	bne.n	8000b4a <HAL_DMA_IRQHandler+0x66>
 8000b48:	e06a      	b.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	0010      	movs	r0, r2
 8000b52:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b54:	e064      	b.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	0013      	movs	r3, r2
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	d02b      	beq.n	8000bbe <HAL_DMA_IRQHandler+0xda>
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	2202      	movs	r2, #2
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d027      	beq.n	8000bbe <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2220      	movs	r2, #32
 8000b76:	4013      	ands	r3, r2
 8000b78:	d10b      	bne.n	8000b92 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	210a      	movs	r1, #10
 8000b86:	438a      	bics	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2221      	movs	r2, #33	; 0x21
 8000b8e:	2101      	movs	r1, #1
 8000b90:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d036      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	0010      	movs	r0, r2
 8000bba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000bbc:	e030      	b.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d028      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d024      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	210e      	movs	r1, #14
 8000be2:	438a      	bics	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2221      	movs	r2, #33	; 0x21
 8000c00:	2101      	movs	r1, #1
 8000c02:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2220      	movs	r2, #32
 8000c08:	2100      	movs	r1, #0
 8000c0a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	4798      	blx	r3
    }
   }
}  
 8000c1e:	e7ff      	b.n	8000c20 <HAL_DMA_IRQHandler+0x13c>
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b004      	add	sp, #16
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <DMA_CalcBaseAndBitshift+0x30>)
 8000c36:	4694      	mov	ip, r2
 8000c38:	4463      	add	r3, ip
 8000c3a:	2114      	movs	r1, #20
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fa63 	bl	8000108 <__udivsi3>
 8000c42:	0003      	movs	r3, r0
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <DMA_CalcBaseAndBitshift+0x34>)
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	bffdfff8 	.word	0xbffdfff8
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e14f      	b.n	8000f10 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d100      	bne.n	8000c88 <HAL_GPIO_Init+0x28>
 8000c86:	e140      	b.n	8000f0a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d00b      	beq.n	8000ca8 <HAL_GPIO_Init+0x48>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d007      	beq.n	8000ca8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9c:	2b11      	cmp	r3, #17
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b12      	cmp	r3, #18
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	0013      	movs	r3, r2
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0xea>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2107      	movs	r1, #7
 8000d76:	400b      	ands	r3, r1
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	6939      	ldr	r1, [r7, #16]
 8000d90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	401a      	ands	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	055b      	lsls	r3, r3, #21
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d100      	bne.n	8000dd4 <HAL_GPIO_Init+0x174>
 8000dd2:	e09a      	b.n	8000f0a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <HAL_GPIO_Init+0x2c8>)
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <HAL_GPIO_Init+0x2c8>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	619a      	str	r2, [r3, #24]
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <HAL_GPIO_Init+0x2c8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dec:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	589b      	ldr	r3, [r3, r2]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	2390      	movs	r3, #144	; 0x90
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x1e2>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a44      	ldr	r2, [pc, #272]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x1de>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a43      	ldr	r2, [pc, #268]	; (8000f34 <HAL_GPIO_Init+0x2d4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x1da>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <HAL_GPIO_Init+0x2d8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x1d6>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x1e4>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x1e4>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x1e4>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x1e4>
 8000e42:	2300      	movs	r3, #0
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	2103      	movs	r1, #3
 8000e48:	400a      	ands	r2, r1
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e54:	4935      	ldr	r1, [pc, #212]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	025b      	lsls	r3, r3, #9
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	035b      	lsls	r3, r3, #13
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	039b      	lsls	r3, r3, #14
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	40da      	lsrs	r2, r3
 8000f18:	1e13      	subs	r3, r2, #0
 8000f1a:	d000      	beq.n	8000f1e <HAL_GPIO_Init+0x2be>
 8000f1c:	e6a8      	b.n	8000c70 <HAL_GPIO_Init+0x10>
  } 
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b006      	add	sp, #24
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00
 8000f3c:	40010400 	.word	0x40010400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	0008      	movs	r0, r1
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	1cbb      	adds	r3, r7, #2
 8000f4e:	1c02      	adds	r2, r0, #0
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	1c7b      	adds	r3, r7, #1
 8000f54:	1c0a      	adds	r2, r1, #0
 8000f56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f58:	1c7b      	adds	r3, r7, #1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f68:	e003      	b.n	8000f72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6a:	1cbb      	adds	r3, r7, #2
 8000f6c:	881a      	ldrh	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e082      	b.n	8001094 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2241      	movs	r2, #65	; 0x41
 8000f92:	5c9b      	ldrb	r3, [r3, r2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d107      	bne.n	8000faa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff faf9 	bl	800059c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2241      	movs	r2, #65	; 0x41
 8000fae:	2124      	movs	r1, #36	; 0x24
 8000fb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4934      	ldr	r1, [pc, #208]	; (800109c <HAL_I2C_Init+0x120>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4931      	ldr	r1, [pc, #196]	; (80010a0 <HAL_I2C_Init+0x124>)
 8000fdc:	400a      	ands	r2, r1
 8000fde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	0209      	lsls	r1, r1, #8
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	e007      	b.n	800100a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2184      	movs	r1, #132	; 0x84
 8001004:	0209      	lsls	r1, r1, #8
 8001006:	430a      	orrs	r2, r1
 8001008:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d104      	bne.n	800101c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	491f      	ldr	r1, [pc, #124]	; (80010a4 <HAL_I2C_Init+0x128>)
 8001028:	430a      	orrs	r2, r1
 800102a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	491a      	ldr	r1, [pc, #104]	; (80010a0 <HAL_I2C_Init+0x124>)
 8001038:	400a      	ands	r2, r1
 800103a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	431a      	orrs	r2, r3
 8001046:	0011      	movs	r1, r2
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	021a      	lsls	r2, r3, #8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69d9      	ldr	r1, [r3, #28]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2241      	movs	r2, #65	; 0x41
 8001080:	2120      	movs	r1, #32
 8001082:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2242      	movs	r2, #66	; 0x42
 800108e:	2100      	movs	r1, #0
 8001090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}
 800109c:	f0ffffff 	.word	0xf0ffffff
 80010a0:	ffff7fff 	.word	0xffff7fff
 80010a4:	02008000 	.word	0x02008000

080010a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2241      	movs	r2, #65	; 0x41
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d138      	bne.n	8001130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2240      	movs	r2, #64	; 0x40
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e032      	b.n	8001132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	2101      	movs	r1, #1
 80010d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2241      	movs	r2, #65	; 0x41
 80010d8:	2124      	movs	r1, #36	; 0x24
 80010da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4911      	ldr	r1, [pc, #68]	; (800113c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80010f8:	400a      	ands	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2101      	movs	r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2241      	movs	r2, #65	; 0x41
 8001120:	2120      	movs	r1, #32
 8001122:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2240      	movs	r2, #64	; 0x40
 8001128:	2100      	movs	r1, #0
 800112a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	e000      	b.n	8001132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001130:	2302      	movs	r3, #2
  }
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	ffffefff 	.word	0xffffefff

08001140 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2241      	movs	r2, #65	; 0x41
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b20      	cmp	r3, #32
 8001154:	d139      	bne.n	80011ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2240      	movs	r2, #64	; 0x40
 800115a:	5c9b      	ldrb	r3, [r3, r2]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001160:	2302      	movs	r3, #2
 8001162:	e033      	b.n	80011cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	2101      	movs	r1, #1
 800116a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2241      	movs	r2, #65	; 0x41
 8001170:	2124      	movs	r1, #36	; 0x24
 8001172:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2241      	movs	r2, #65	; 0x41
 80011ba:	2120      	movs	r1, #32
 80011bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2240      	movs	r2, #64	; 0x40
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
  }
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	fffff0ff 	.word	0xfffff0ff

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e303      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x1e>
 80011f4:	e08d      	b.n	8001312 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011f6:	4bc4      	ldr	r3, [pc, #784]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	220c      	movs	r2, #12
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00e      	beq.n	8001220 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001202:	4bc1      	ldr	r3, [pc, #772]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	220c      	movs	r2, #12
 8001208:	4013      	ands	r3, r2
 800120a:	2b08      	cmp	r3, #8
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x64>
 800120e:	4bbe      	ldr	r3, [pc, #760]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	401a      	ands	r2, r3
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	429a      	cmp	r2, r3
 800121e:	d10d      	bne.n	800123c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4bb9      	ldr	r3, [pc, #740]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x56>
 800122c:	e070      	b.n	8001310 <HAL_RCC_OscConfig+0x138>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d000      	beq.n	8001238 <HAL_RCC_OscConfig+0x60>
 8001236:	e06b      	b.n	8001310 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e2da      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d107      	bne.n	8001254 <HAL_RCC_OscConfig+0x7c>
 8001244:	4bb0      	ldr	r3, [pc, #704]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4baf      	ldr	r3, [pc, #700]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	0249      	lsls	r1, r1, #9
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e02f      	b.n	80012b4 <HAL_RCC_OscConfig+0xdc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10c      	bne.n	8001276 <HAL_RCC_OscConfig+0x9e>
 800125c:	4baa      	ldr	r3, [pc, #680]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001262:	49aa      	ldr	r1, [pc, #680]	; (800150c <HAL_RCC_OscConfig+0x334>)
 8001264:	400a      	ands	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	4ba7      	ldr	r3, [pc, #668]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4ba6      	ldr	r3, [pc, #664]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800126e:	49a8      	ldr	r1, [pc, #672]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e01e      	b.n	80012b4 <HAL_RCC_OscConfig+0xdc>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d10e      	bne.n	800129c <HAL_RCC_OscConfig+0xc4>
 800127e:	4ba2      	ldr	r3, [pc, #648]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4ba1      	ldr	r3, [pc, #644]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	02c9      	lsls	r1, r1, #11
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	0249      	lsls	r1, r1, #9
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xdc>
 800129c:	4b9a      	ldr	r3, [pc, #616]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012a2:	499a      	ldr	r1, [pc, #616]	; (800150c <HAL_RCC_OscConfig+0x334>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	4b97      	ldr	r3, [pc, #604]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b96      	ldr	r3, [pc, #600]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012ae:	4998      	ldr	r1, [pc, #608]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d014      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fae2 	bl	8000884 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fadd 	bl	8000884 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e28c      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d8:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	4013      	ands	r3, r2
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0xee>
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff facd 	bl	8000884 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fac8 	bl	8000884 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e277      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	4013      	ands	r3, r2
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x118>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x146>
 800131c:	e069      	b.n	80013f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800131e:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	220c      	movs	r2, #12
 8001324:	4013      	ands	r3, r2
 8001326:	d00b      	beq.n	8001340 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001328:	4b77      	ldr	r3, [pc, #476]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	220c      	movs	r2, #12
 800132e:	4013      	ands	r3, r2
 8001330:	2b08      	cmp	r3, #8
 8001332:	d11c      	bne.n	800136e <HAL_RCC_OscConfig+0x196>
 8001334:	4b74      	ldr	r3, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	4013      	ands	r3, r2
 800133e:	d116      	bne.n	800136e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001340:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e24d      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b6c      	ldr	r3, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	22f8      	movs	r2, #248	; 0xf8
 800135c:	4393      	bics	r3, r2
 800135e:	0019      	movs	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	00da      	lsls	r2, r3, #3
 8001366:	4b68      	ldr	r3, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136c:	e041      	b.n	80013f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d024      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001376:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b63      	ldr	r3, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800137c:	2101      	movs	r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fa7f 	bl	8000884 <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fa7a 	bl	8000884 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e229      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f1      	beq.n	800138c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	22f8      	movs	r2, #248	; 0xf8
 80013ae:	4393      	bics	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	00da      	lsls	r2, r3, #3
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e018      	b.n	80013f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c0:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fa5a 	bl	8000884 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fa55 	bl	8000884 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e204      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e8:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	4013      	ands	r3, r2
 80013f0:	d1f1      	bne.n	80013d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2208      	movs	r2, #8
 80013f8:	4013      	ands	r3, r2
 80013fa:	d036      	beq.n	800146a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d019      	beq.n	8001438 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001404:	4b40      	ldr	r3, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001410:	f7ff fa38 	bl	8000884 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff fa33 	bl	8000884 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1e2      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d0f1      	beq.n	800141a <HAL_RCC_OscConfig+0x242>
 8001436:	e018      	b.n	800146a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fa1e 	bl	8000884 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fa19 	bl	8000884 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1c8      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f1      	bne.n	800144e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2204      	movs	r2, #4
 8001470:	4013      	ands	r3, r2
 8001472:	d100      	bne.n	8001476 <HAL_RCC_OscConfig+0x29e>
 8001474:	e0b6      	b.n	80015e4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001476:	231f      	movs	r3, #31
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	055b      	lsls	r3, r3, #21
 8001486:	4013      	ands	r3, r2
 8001488:	d111      	bne.n	80014ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800148c:	69da      	ldr	r2, [r3, #28]
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0549      	lsls	r1, r1, #21
 8001494:	430a      	orrs	r2, r1
 8001496:	61da      	str	r2, [r3, #28]
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014a6:	231f      	movs	r3, #31
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d11a      	bne.n	80014f0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0049      	lsls	r1, r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f9dc 	bl	8000884 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff f9d7 	bl	8000884 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b64      	cmp	r3, #100	; 0x64
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e186      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10f      	bne.n	8001518 <HAL_RCC_OscConfig+0x340>
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014fe:	2101      	movs	r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	621a      	str	r2, [r3, #32]
 8001504:	e036      	b.n	8001574 <HAL_RCC_OscConfig+0x39c>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	fffeffff 	.word	0xfffeffff
 8001510:	fffbffff 	.word	0xfffbffff
 8001514:	40007000 	.word	0x40007000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x362>
 8001520:	4bb6      	ldr	r3, [pc, #728]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	4bb5      	ldr	r3, [pc, #724]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001526:	2101      	movs	r1, #1
 8001528:	438a      	bics	r2, r1
 800152a:	621a      	str	r2, [r3, #32]
 800152c:	4bb3      	ldr	r3, [pc, #716]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	4bb2      	ldr	r3, [pc, #712]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001532:	2104      	movs	r1, #4
 8001534:	438a      	bics	r2, r1
 8001536:	621a      	str	r2, [r3, #32]
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x39c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x384>
 8001542:	4bae      	ldr	r3, [pc, #696]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	4bad      	ldr	r3, [pc, #692]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001548:	2104      	movs	r1, #4
 800154a:	430a      	orrs	r2, r1
 800154c:	621a      	str	r2, [r3, #32]
 800154e:	4bab      	ldr	r3, [pc, #684]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001550:	6a1a      	ldr	r2, [r3, #32]
 8001552:	4baa      	ldr	r3, [pc, #680]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	621a      	str	r2, [r3, #32]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x39c>
 800155c:	4ba7      	ldr	r3, [pc, #668]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	4ba6      	ldr	r3, [pc, #664]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	621a      	str	r2, [r3, #32]
 8001568:	4ba4      	ldr	r3, [pc, #656]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800156a:	6a1a      	ldr	r2, [r3, #32]
 800156c:	4ba3      	ldr	r3, [pc, #652]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800156e:	2104      	movs	r1, #4
 8001570:	438a      	bics	r2, r1
 8001572:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d014      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff f982 	bl	8000884 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e009      	b.n	800159a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff f97d 	bl	8000884 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4a9b      	ldr	r2, [pc, #620]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e12b      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4b98      	ldr	r3, [pc, #608]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x3ae>
 80015a4:	e013      	b.n	80015ce <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff f96d 	bl	8000884 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e009      	b.n	80015c4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff f968 	bl	8000884 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4a91      	ldr	r2, [pc, #580]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e116      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4b8d      	ldr	r3, [pc, #564]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ce:	231f      	movs	r3, #31
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b88      	ldr	r3, [pc, #544]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	4b87      	ldr	r3, [pc, #540]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80015de:	4989      	ldr	r1, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	4013      	ands	r3, r2
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d12a      	bne.n	800164c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80015f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fa:	4b80      	ldr	r3, [pc, #512]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80015fc:	2104      	movs	r1, #4
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001602:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001608:	2101      	movs	r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff f939 	bl	8000884 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001618:	f7ff f934 	bl	8000884 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0e3      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800162a:	4b74      	ldr	r3, [pc, #464]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d0f1      	beq.n	8001618 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001634:	4b71      	ldr	r3, [pc, #452]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	22f8      	movs	r2, #248	; 0xf8
 800163a:	4393      	bics	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	00da      	lsls	r2, r3, #3
 8001644:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
 800164a:	e034      	b.n	80016b6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	3305      	adds	r3, #5
 8001652:	d111      	bne.n	8001678 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001654:	4b69      	ldr	r3, [pc, #420]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800165a:	2104      	movs	r1, #4
 800165c:	438a      	bics	r2, r1
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001660:	4b66      	ldr	r3, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001664:	22f8      	movs	r2, #248	; 0xf8
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4b62      	ldr	r3, [pc, #392]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001672:	430a      	orrs	r2, r1
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
 8001676:	e01e      	b.n	80016b6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001678:	4b60      	ldr	r3, [pc, #384]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800167a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167c:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800167e:	2104      	movs	r1, #4
 8001680:	430a      	orrs	r2, r1
 8001682:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001684:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001688:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800168a:	2101      	movs	r1, #1
 800168c:	438a      	bics	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff f8f8 	bl	8000884 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800169a:	f7ff f8f3 	bl	8000884 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0a2      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f1      	bne.n	800169a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d100      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4e8>
 80016be:	e097      	b.n	80017f0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	220c      	movs	r2, #12
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x4f6>
 80016cc:	e06b      	b.n	80017a6 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d14c      	bne.n	8001770 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80016dc:	494a      	ldr	r1, [pc, #296]	; (8001808 <HAL_RCC_OscConfig+0x630>)
 80016de:	400a      	ands	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff f8cf 	bl	8000884 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff f8ca 	bl	8000884 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e079      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	049b      	lsls	r3, r3, #18
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	220f      	movs	r2, #15
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800171a:	430a      	orrs	r2, r1
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a3a      	ldr	r2, [pc, #232]	; (800180c <HAL_RCC_OscConfig+0x634>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	431a      	orrs	r2, r3
 8001732:	4b32      	ldr	r3, [pc, #200]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001734:	430a      	orrs	r2, r1
 8001736:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0449      	lsls	r1, r1, #17
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff f89d 	bl	8000884 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f898 	bl	8000884 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e047      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	049b      	lsls	r3, r3, #18
 800176a:	4013      	ands	r3, r2
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x578>
 800176e:	e03f      	b.n	80017f0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 8001776:	4924      	ldr	r1, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x630>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff f882 	bl	8000884 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff f87d 	bl	8000884 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e02c      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	049b      	lsls	r3, r3, #18
 80017a0:	4013      	ands	r3, r2
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x5ae>
 80017a4:	e024      	b.n	80017f0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e01f      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_RCC_OscConfig+0x624>)
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	401a      	ands	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d10e      	bne.n	80017ec <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	220f      	movs	r2, #15
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d107      	bne.n	80017ec <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	23f0      	movs	r3, #240	; 0xf0
 80017e0:	039b      	lsls	r3, r3, #14
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b008      	add	sp, #32
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000
 8001800:	00001388 	.word	0x00001388
 8001804:	efffffff 	.word	0xefffffff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	ffc2ffff 	.word	0xffc2ffff

08001810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b3      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001824:	4b5b      	ldr	r3, [pc, #364]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d911      	bls.n	8001856 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001832:	4b58      	ldr	r3, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	4393      	bics	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	4b55      	ldr	r3, [pc, #340]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e09a      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d015      	beq.n	800188c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2204      	movs	r2, #4
 8001866:	4013      	ands	r3, r2
 8001868:	d006      	beq.n	8001878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800186a:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 8001870:	21e0      	movs	r1, #224	; 0xe0
 8001872:	00c9      	lsls	r1, r1, #3
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	22f0      	movs	r2, #240	; 0xf0
 800187e:	4393      	bics	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	029b      	lsls	r3, r3, #10
 80018a6:	4013      	ands	r3, r2
 80018a8:	d114      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06e      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	049b      	lsls	r3, r3, #18
 80018be:	4013      	ands	r3, r2
 80018c0:	d108      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e062      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e05b      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	4393      	bics	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7fe ffcc 	bl	8000884 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f0:	e009      	b.n	8001906 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f2:	f7fe ffc7 	bl	8000884 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_RCC_ClockConfig+0x18c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e042      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	220c      	movs	r2, #12
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1ec      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2201      	movs	r2, #1
 800191e:	4013      	ands	r3, r2
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d211      	bcs.n	800194a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4393      	bics	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x184>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e020      	b.n	800198c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d009      	beq.n	8001968 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_RCC_ClockConfig+0x190>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001968:	f000 f820 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800196c:	0001      	movs	r1, r0
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x188>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	220f      	movs	r2, #15
 8001976:	4013      	ands	r3, r2
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x194>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	000a      	movs	r2, r1
 800197e:	40da      	lsrs	r2, r3
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x198>)
 8001982:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001984:	2000      	movs	r0, #0
 8001986:	f7fe ff37 	bl	80007f8 <HAL_InitTick>
  
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	00001388 	.word	0x00001388
 80019a0:	fffff8ff 	.word	0xfffff8ff
 80019a4:	08002684 	.word	0x08002684
 80019a8:	20000000 	.word	0x20000000

080019ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b08f      	sub	sp, #60	; 0x3c
 80019b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80019b2:	2314      	movs	r3, #20
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019ba:	c313      	stmia	r3!, {r0, r1, r4}
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019c6:	c313      	stmia	r3!, {r0, r1, r4}
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	220c      	movs	r2, #12
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d002      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d003      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x50>
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019fa:	e02d      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	220f      	movs	r2, #15
 8001a02:	4013      	ands	r3, r2
 8001a04:	2214      	movs	r2, #20
 8001a06:	18ba      	adds	r2, r7, r2
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	220f      	movs	r2, #15
 8001a12:	4013      	ands	r3, r2
 8001a14:	1d3a      	adds	r2, r7, #4
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	4013      	ands	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a28:	f7fe fb6e 	bl	8000108 <__udivsi3>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	001a      	movs	r2, r3
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	4353      	muls	r3, r2
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
 8001a36:	e009      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a3a:	000a      	movs	r2, r1
 8001a3c:	0152      	lsls	r2, r2, #5
 8001a3e:	1a52      	subs	r2, r2, r1
 8001a40:	0193      	lsls	r3, r2, #6
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	185b      	adds	r3, r3, r1
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a50:	e002      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b00f      	add	sp, #60	; 0x3c
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	08002664 	.word	0x08002664
 8001a68:	08002674 	.word	0x08002674
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	007a1200 	.word	0x007a1200

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	0001      	movs	r1, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	2207      	movs	r2, #7
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	000b      	movs	r3, r1
}    
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002694 	.word	0x08002694

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ad0:	e08f      	b.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2317      	movs	r3, #23
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d111      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0549      	lsls	r1, r1, #21
 8001af0:	430a      	orrs	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	2317      	movs	r3, #23
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	d11a      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0049      	lsls	r1, r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b24:	f7fe feae 	bl	8000884 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7fe fea9 	bl	8000884 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e077      	b.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b4e:	6a1a      	ldr	r2, [r3, #32]
 8001b50:	23c0      	movs	r3, #192	; 0xc0
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d034      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d02c      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a33      	ldr	r2, [pc, #204]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	0249      	lsls	r1, r1, #9
 8001b82:	430a      	orrs	r2, r1
 8001b84:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b88:	6a1a      	ldr	r2, [r3, #32]
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8c:	492d      	ldr	r1, [pc, #180]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7fe fe70 	bl	8000884 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe fe6b 	bl	8000884 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e038      	b.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	2317      	movs	r3, #23
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bec:	4917      	ldr	r1, [pc, #92]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	2203      	movs	r2, #3
 8001c02:	4393      	bics	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2220      	movs	r2, #32
 8001c16:	4013      	ands	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	2210      	movs	r2, #16
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b006      	add	sp, #24
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	fffffcff 	.word	0xfffffcff
 8001c44:	fffeffff 	.word	0xfffeffff
 8001c48:	00001388 	.word	0x00001388
 8001c4c:	efffffff 	.word	0xefffffff

08001c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e044      	b.n	8001cec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2270      	movs	r2, #112	; 0x70
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7fe fcdf 	bl	8000638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2224      	movs	r2, #36	; 0x24
 8001c7e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 f9b0 	bl	8001ff8 <UART_SetConfig>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e024      	b.n	8001cec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 fb29 	bl	8002304 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <HAL_UART_Init+0xa4>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2108      	movs	r1, #8
 8001cce:	438a      	bics	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fbc1 	bl	800246c <UART_CheckIdleState>
 8001cea:	0003      	movs	r3, r0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	fffff7ff 	.word	0xfffff7ff

08001cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d000      	beq.n	8001d12 <HAL_UART_Transmit+0x1a>
 8001d10:	e095      	b.n	8001e3e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_UART_Transmit+0x28>
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e08d      	b.n	8001e40 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d109      	bne.n	8001d44 <HAL_UART_Transmit+0x4c>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d001      	beq.n	8001d44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07d      	b.n	8001e40 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2270      	movs	r2, #112	; 0x70
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Transmit+0x5a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e076      	b.n	8001e40 <HAL_UART_Transmit+0x148>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2270      	movs	r2, #112	; 0x70
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2221      	movs	r2, #33	; 0x21
 8001d64:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d66:	f7fe fd8d 	bl	8000884 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1dba      	adds	r2, r7, #6
 8001d72:	2150      	movs	r1, #80	; 0x50
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1dba      	adds	r2, r7, #6
 8001d7c:	2152      	movs	r1, #82	; 0x52
 8001d7e:	8812      	ldrh	r2, [r2, #0]
 8001d80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	015b      	lsls	r3, r3, #5
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d108      	bne.n	8001da0 <HAL_UART_Transmit+0xa8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d104      	bne.n	8001da0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	e003      	b.n	8001da8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001da8:	e02d      	b.n	8001e06 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	0013      	movs	r3, r2
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	f000 fb9e 	bl	80024f8 <UART_WaitOnFlagUntilTimeout>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e03d      	b.n	8001e40 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10b      	bne.n	8001de2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	881a      	ldrh	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	05d2      	lsls	r2, r2, #23
 8001dd4:	0dd2      	lsrs	r2, r2, #23
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e008      	b.n	8001df4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b292      	uxth	r2, r2
 8001dec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2252      	movs	r2, #82	; 0x52
 8001df8:	5a9b      	ldrh	r3, [r3, r2]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b299      	uxth	r1, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2252      	movs	r2, #82	; 0x52
 8001e04:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2252      	movs	r2, #82	; 0x52
 8001e0a:	5a9b      	ldrh	r3, [r3, r2]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1cb      	bne.n	8001daa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2140      	movs	r1, #64	; 0x40
 8001e20:	f000 fb6a 	bl	80024f8 <UART_WaitOnFlagUntilTimeout>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e009      	b.n	8001e40 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2270      	movs	r2, #112	; 0x70
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
  }
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b008      	add	sp, #32
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d000      	beq.n	8001e62 <HAL_UART_Receive+0x1a>
 8001e60:	e0c2      	b.n	8001fe8 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_UART_Receive+0x28>
 8001e68:	1dbb      	adds	r3, r7, #6
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0ba      	b.n	8001fea <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	015b      	lsls	r3, r3, #5
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d109      	bne.n	8001e94 <HAL_UART_Receive+0x4c>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d001      	beq.n	8001e94 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0aa      	b.n	8001fea <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2270      	movs	r2, #112	; 0x70
 8001e98:	5c9b      	ldrb	r3, [r3, r2]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Receive+0x5a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e0a3      	b.n	8001fea <HAL_UART_Receive+0x1a2>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2270      	movs	r2, #112	; 0x70
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2222      	movs	r2, #34	; 0x22
 8001eb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fce5 	bl	8000884 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1dba      	adds	r2, r7, #6
 8001ec2:	2158      	movs	r1, #88	; 0x58
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1dba      	adds	r2, r7, #6
 8001ecc:	215a      	movs	r1, #90	; 0x5a
 8001ece:	8812      	ldrh	r2, [r2, #0]
 8001ed0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d10d      	bne.n	8001efa <HAL_UART_Receive+0xb2>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <HAL_UART_Receive+0xa8>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	225c      	movs	r2, #92	; 0x5c
 8001eea:	4942      	ldr	r1, [pc, #264]	; (8001ff4 <HAL_UART_Receive+0x1ac>)
 8001eec:	5299      	strh	r1, [r3, r2]
 8001eee:	e01a      	b.n	8001f26 <HAL_UART_Receive+0xde>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	225c      	movs	r2, #92	; 0x5c
 8001ef4:	21ff      	movs	r1, #255	; 0xff
 8001ef6:	5299      	strh	r1, [r3, r2]
 8001ef8:	e015      	b.n	8001f26 <HAL_UART_Receive+0xde>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_UART_Receive+0xd6>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <HAL_UART_Receive+0xcc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	225c      	movs	r2, #92	; 0x5c
 8001f0e:	21ff      	movs	r1, #255	; 0xff
 8001f10:	5299      	strh	r1, [r3, r2]
 8001f12:	e008      	b.n	8001f26 <HAL_UART_Receive+0xde>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	225c      	movs	r2, #92	; 0x5c
 8001f18:	217f      	movs	r1, #127	; 0x7f
 8001f1a:	5299      	strh	r1, [r3, r2]
 8001f1c:	e003      	b.n	8001f26 <HAL_UART_Receive+0xde>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	225c      	movs	r2, #92	; 0x5c
 8001f22:	2100      	movs	r1, #0
 8001f24:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001f26:	2312      	movs	r3, #18
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	215c      	movs	r1, #92	; 0x5c
 8001f2e:	5a52      	ldrh	r2, [r2, r1]
 8001f30:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	015b      	lsls	r3, r3, #5
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d108      	bne.n	8001f50 <HAL_UART_Receive+0x108>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	e003      	b.n	8001f58 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001f58:	e037      	b.n	8001fca <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	0013      	movs	r3, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	2120      	movs	r1, #32
 8001f68:	f000 fac6 	bl	80024f8 <UART_WaitOnFlagUntilTimeout>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e03a      	b.n	8001fea <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10e      	bne.n	8001f98 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2212      	movs	r2, #18
 8001f84:	18ba      	adds	r2, r7, r2
 8001f86:	8812      	ldrh	r2, [r2, #0]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	3302      	adds	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	e00f      	b.n	8001fb8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2212      	movs	r2, #18
 8001fa4:	18ba      	adds	r2, r7, r2
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	4013      	ands	r3, r2
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	225a      	movs	r2, #90	; 0x5a
 8001fbc:	5a9b      	ldrh	r3, [r3, r2]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	225a      	movs	r2, #90	; 0x5a
 8001fc8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	225a      	movs	r2, #90	; 0x5a
 8001fce:	5a9b      	ldrh	r3, [r3, r2]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1c1      	bne.n	8001f5a <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2270      	movs	r2, #112	; 0x70
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b008      	add	sp, #32
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	000001ff 	.word	0x000001ff

08001ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002004:	2317      	movs	r3, #23
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4aad      	ldr	r2, [pc, #692]	; (80022e0 <UART_SetConfig+0x2e8>)
 800202c:	4013      	ands	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4aa8      	ldr	r2, [pc, #672]	; (80022e4 <UART_SetConfig+0x2ec>)
 8002042:	4013      	ands	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a9f      	ldr	r2, [pc, #636]	; (80022e8 <UART_SetConfig+0x2f0>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a9b      	ldr	r2, [pc, #620]	; (80022ec <UART_SetConfig+0x2f4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d125      	bne.n	80020ce <UART_SetConfig+0xd6>
 8002082:	4b9b      	ldr	r3, [pc, #620]	; (80022f0 <UART_SetConfig+0x2f8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	2203      	movs	r2, #3
 8002088:	4013      	ands	r3, r2
 800208a:	2b01      	cmp	r3, #1
 800208c:	d00f      	beq.n	80020ae <UART_SetConfig+0xb6>
 800208e:	d304      	bcc.n	800209a <UART_SetConfig+0xa2>
 8002090:	2b02      	cmp	r3, #2
 8002092:	d011      	beq.n	80020b8 <UART_SetConfig+0xc0>
 8002094:	2b03      	cmp	r3, #3
 8002096:	d005      	beq.n	80020a4 <UART_SetConfig+0xac>
 8002098:	e013      	b.n	80020c2 <UART_SetConfig+0xca>
 800209a:	231f      	movs	r3, #31
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e022      	b.n	80020ea <UART_SetConfig+0xf2>
 80020a4:	231f      	movs	r3, #31
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2202      	movs	r2, #2
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e01d      	b.n	80020ea <UART_SetConfig+0xf2>
 80020ae:	231f      	movs	r3, #31
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2204      	movs	r2, #4
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e018      	b.n	80020ea <UART_SetConfig+0xf2>
 80020b8:	231f      	movs	r3, #31
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2208      	movs	r2, #8
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e013      	b.n	80020ea <UART_SetConfig+0xf2>
 80020c2:	231f      	movs	r3, #31
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	2210      	movs	r2, #16
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	e00d      	b.n	80020ea <UART_SetConfig+0xf2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a88      	ldr	r2, [pc, #544]	; (80022f4 <UART_SetConfig+0x2fc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d104      	bne.n	80020e2 <UART_SetConfig+0xea>
 80020d8:	231f      	movs	r3, #31
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e003      	b.n	80020ea <UART_SetConfig+0xf2>
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2210      	movs	r2, #16
 80020e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d000      	beq.n	80020f8 <UART_SetConfig+0x100>
 80020f6:	e07d      	b.n	80021f4 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80020f8:	231f      	movs	r3, #31
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d01c      	beq.n	800213c <UART_SetConfig+0x144>
 8002102:	dc02      	bgt.n	800210a <UART_SetConfig+0x112>
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <UART_SetConfig+0x11c>
 8002108:	e04b      	b.n	80021a2 <UART_SetConfig+0x1aa>
 800210a:	2b04      	cmp	r3, #4
 800210c:	d025      	beq.n	800215a <UART_SetConfig+0x162>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d037      	beq.n	8002182 <UART_SetConfig+0x18a>
 8002112:	e046      	b.n	80021a2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002114:	f7ff fcb8 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002118:	0003      	movs	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	005a      	lsls	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	18d2      	adds	r2, r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0019      	movs	r1, r3
 800212e:	0010      	movs	r0, r2
 8002130:	f7fd ffea 	bl	8000108 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	b29b      	uxth	r3, r3
 8002138:	61bb      	str	r3, [r7, #24]
        break;
 800213a:	e037      	b.n	80021ac <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <UART_SetConfig+0x300>)
 8002144:	189a      	adds	r2, r3, r2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0019      	movs	r1, r3
 800214c:	0010      	movs	r0, r2
 800214e:	f7fd ffdb 	bl	8000108 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	b29b      	uxth	r3, r3
 8002156:	61bb      	str	r3, [r7, #24]
        break;
 8002158:	e028      	b.n	80021ac <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800215a:	f7ff fc27 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800215e:	0003      	movs	r3, r0
 8002160:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	005a      	lsls	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	18d2      	adds	r2, r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0019      	movs	r1, r3
 8002174:	0010      	movs	r0, r2
 8002176:	f7fd ffc7 	bl	8000108 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	b29b      	uxth	r3, r3
 800217e:	61bb      	str	r3, [r7, #24]
        break;
 8002180:	e014      	b.n	80021ac <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	0252      	lsls	r2, r2, #9
 800218c:	189a      	adds	r2, r3, r2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f7fd ffb7 	bl	8000108 <__udivsi3>
 800219a:	0003      	movs	r3, r0
 800219c:	b29b      	uxth	r3, r3
 800219e:	61bb      	str	r3, [r7, #24]
        break;
 80021a0:	e004      	b.n	80021ac <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80021a2:	2317      	movs	r3, #23
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
        break;
 80021aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	d91b      	bls.n	80021ea <UART_SetConfig+0x1f2>
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <UART_SetConfig+0x304>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d817      	bhi.n	80021ea <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	200a      	movs	r0, #10
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	210f      	movs	r1, #15
 80021c4:	438a      	bics	r2, r1
 80021c6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	b299      	uxth	r1, r3
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	183a      	adds	r2, r7, r0
 80021d8:	8812      	ldrh	r2, [r2, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	183a      	adds	r2, r7, r0
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	e06c      	b.n	80022c4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80021ea:	2317      	movs	r3, #23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e067      	b.n	80022c4 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80021f4:	231f      	movs	r3, #31
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d01b      	beq.n	8002236 <UART_SetConfig+0x23e>
 80021fe:	dc02      	bgt.n	8002206 <UART_SetConfig+0x20e>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <UART_SetConfig+0x218>
 8002204:	e049      	b.n	800229a <UART_SetConfig+0x2a2>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d024      	beq.n	8002254 <UART_SetConfig+0x25c>
 800220a:	2b08      	cmp	r3, #8
 800220c:	d035      	beq.n	800227a <UART_SetConfig+0x282>
 800220e:	e044      	b.n	800229a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002210:	f7ff fc3a 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002214:	0003      	movs	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	085a      	lsrs	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	18d2      	adds	r2, r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0019      	movs	r1, r3
 8002228:	0010      	movs	r0, r2
 800222a:	f7fd ff6d 	bl	8000108 <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	b29b      	uxth	r3, r3
 8002232:	61bb      	str	r3, [r7, #24]
        break;
 8002234:	e036      	b.n	80022a4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	4a30      	ldr	r2, [pc, #192]	; (8002300 <UART_SetConfig+0x308>)
 800223e:	189a      	adds	r2, r3, r2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0019      	movs	r1, r3
 8002246:	0010      	movs	r0, r2
 8002248:	f7fd ff5e 	bl	8000108 <__udivsi3>
 800224c:	0003      	movs	r3, r0
 800224e:	b29b      	uxth	r3, r3
 8002250:	61bb      	str	r3, [r7, #24]
        break;
 8002252:	e027      	b.n	80022a4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002254:	f7ff fbaa 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8002258:	0003      	movs	r3, r0
 800225a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	085a      	lsrs	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	18d2      	adds	r2, r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0019      	movs	r1, r3
 800226c:	0010      	movs	r0, r2
 800226e:	f7fd ff4b 	bl	8000108 <__udivsi3>
 8002272:	0003      	movs	r3, r0
 8002274:	b29b      	uxth	r3, r3
 8002276:	61bb      	str	r3, [r7, #24]
        break;
 8002278:	e014      	b.n	80022a4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	0212      	lsls	r2, r2, #8
 8002284:	189a      	adds	r2, r3, r2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0019      	movs	r1, r3
 800228c:	0010      	movs	r0, r2
 800228e:	f7fd ff3b 	bl	8000108 <__udivsi3>
 8002292:	0003      	movs	r3, r0
 8002294:	b29b      	uxth	r3, r3
 8002296:	61bb      	str	r3, [r7, #24]
        break;
 8002298:	e004      	b.n	80022a4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800229a:	2317      	movs	r3, #23
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
        break;
 80022a2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	d908      	bls.n	80022bc <UART_SetConfig+0x2c4>
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4a13      	ldr	r2, [pc, #76]	; (80022fc <UART_SetConfig+0x304>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d804      	bhi.n	80022bc <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e003      	b.n	80022c4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80022bc:	2317      	movs	r3, #23
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80022d0:	2317      	movs	r3, #23
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b008      	add	sp, #32
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	ffff69f3 	.word	0xffff69f3
 80022e4:	ffffcfff 	.word	0xffffcfff
 80022e8:	fffff4ff 	.word	0xfffff4ff
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40004400 	.word	0x40004400
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	0000ffff 	.word	0x0000ffff
 8002300:	007a1200 	.word	0x007a1200

08002304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2201      	movs	r2, #1
 8002312:	4013      	ands	r3, r2
 8002314:	d00b      	beq.n	800232e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <UART_AdvFeatureConfig+0x144>)
 800231e:	4013      	ands	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d00b      	beq.n	8002350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a43      	ldr	r2, [pc, #268]	; (800244c <UART_AdvFeatureConfig+0x148>)
 8002340:	4013      	ands	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2204      	movs	r2, #4
 8002356:	4013      	ands	r3, r2
 8002358:	d00b      	beq.n	8002372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <UART_AdvFeatureConfig+0x14c>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2208      	movs	r2, #8
 8002378:	4013      	ands	r3, r2
 800237a:	d00b      	beq.n	8002394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a34      	ldr	r2, [pc, #208]	; (8002454 <UART_AdvFeatureConfig+0x150>)
 8002384:	4013      	ands	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2210      	movs	r2, #16
 800239a:	4013      	ands	r3, r2
 800239c:	d00b      	beq.n	80023b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <UART_AdvFeatureConfig+0x154>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2220      	movs	r2, #32
 80023bc:	4013      	ands	r3, r2
 80023be:	d00b      	beq.n	80023d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <UART_AdvFeatureConfig+0x158>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	4013      	ands	r3, r2
 80023e0:	d01d      	beq.n	800241e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <UART_AdvFeatureConfig+0x15c>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	035b      	lsls	r3, r3, #13
 8002402:	429a      	cmp	r2, r3
 8002404:	d10b      	bne.n	800241e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <UART_AdvFeatureConfig+0x160>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	4013      	ands	r3, r2
 8002426:	d00b      	beq.n	8002440 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <UART_AdvFeatureConfig+0x164>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
  }
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}
 8002448:	fffdffff 	.word	0xfffdffff
 800244c:	fffeffff 	.word	0xfffeffff
 8002450:	fffbffff 	.word	0xfffbffff
 8002454:	ffff7fff 	.word	0xffff7fff
 8002458:	ffffefff 	.word	0xffffefff
 800245c:	ffffdfff 	.word	0xffffdfff
 8002460:	ffefffff 	.word	0xffefffff
 8002464:	ff9fffff 	.word	0xff9fffff
 8002468:	fff7ffff 	.word	0xfff7ffff

0800246c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af02      	add	r7, sp, #8
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800247a:	f7fe fa03 	bl	8000884 <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2208      	movs	r2, #8
 800248a:	4013      	ands	r3, r2
 800248c:	2b08      	cmp	r3, #8
 800248e:	d10d      	bne.n	80024ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	0399      	lsls	r1, r3, #14
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <UART_CheckIdleState+0x88>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	0013      	movs	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	f000 f82a 	bl	80024f8 <UART_WaitOnFlagUntilTimeout>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d001      	beq.n	80024ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e01f      	b.n	80024ec <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d10d      	bne.n	80024d6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	03d9      	lsls	r1, r3, #15
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <UART_CheckIdleState+0x88>)
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	0013      	movs	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	f000 f815 	bl	80024f8 <UART_WaitOnFlagUntilTimeout>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d001      	beq.n	80024d6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e00a      	b.n	80024ec <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2270      	movs	r2, #112	; 0x70
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	01ffffff 	.word	0x01ffffff

080024f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	1dfb      	adds	r3, r7, #7
 8002506:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002508:	e05d      	b.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	3301      	adds	r3, #1
 800250e:	d05a      	beq.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7fe f9b8 	bl	8000884 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	429a      	cmp	r2, r3
 800251e:	d302      	bcc.n	8002526 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11b      	bne.n	800255e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	492f      	ldr	r1, [pc, #188]	; (80025f0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	438a      	bics	r2, r1
 8002544:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2270      	movs	r2, #112	; 0x70
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e043      	b.n	80025e6 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	4013      	ands	r3, r2
 8002568:	d02d      	beq.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	401a      	ands	r2, r3
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	429a      	cmp	r2, r3
 800257c:	d123      	bne.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4917      	ldr	r1, [pc, #92]	; (80025f0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002594:	400a      	ands	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2101      	movs	r1, #1
 80025a4:	438a      	bics	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2270      	movs	r2, #112	; 0x70
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e00f      	b.n	80025e6 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	425a      	negs	r2, r3
 80025d6:	4153      	adcs	r3, r2
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	001a      	movs	r2, r3
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d092      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	fffffe5f 	.word	0xfffffe5f

080025f4 <__libc_init_array>:
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	2600      	movs	r6, #0
 80025f8:	4d0c      	ldr	r5, [pc, #48]	; (800262c <__libc_init_array+0x38>)
 80025fa:	4c0d      	ldr	r4, [pc, #52]	; (8002630 <__libc_init_array+0x3c>)
 80025fc:	1b64      	subs	r4, r4, r5
 80025fe:	10a4      	asrs	r4, r4, #2
 8002600:	42a6      	cmp	r6, r4
 8002602:	d109      	bne.n	8002618 <__libc_init_array+0x24>
 8002604:	2600      	movs	r6, #0
 8002606:	f000 f821 	bl	800264c <_init>
 800260a:	4d0a      	ldr	r5, [pc, #40]	; (8002634 <__libc_init_array+0x40>)
 800260c:	4c0a      	ldr	r4, [pc, #40]	; (8002638 <__libc_init_array+0x44>)
 800260e:	1b64      	subs	r4, r4, r5
 8002610:	10a4      	asrs	r4, r4, #2
 8002612:	42a6      	cmp	r6, r4
 8002614:	d105      	bne.n	8002622 <__libc_init_array+0x2e>
 8002616:	bd70      	pop	{r4, r5, r6, pc}
 8002618:	00b3      	lsls	r3, r6, #2
 800261a:	58eb      	ldr	r3, [r5, r3]
 800261c:	4798      	blx	r3
 800261e:	3601      	adds	r6, #1
 8002620:	e7ee      	b.n	8002600 <__libc_init_array+0xc>
 8002622:	00b3      	lsls	r3, r6, #2
 8002624:	58eb      	ldr	r3, [r5, r3]
 8002626:	4798      	blx	r3
 8002628:	3601      	adds	r6, #1
 800262a:	e7f2      	b.n	8002612 <__libc_init_array+0x1e>
 800262c:	0800269c 	.word	0x0800269c
 8002630:	0800269c 	.word	0x0800269c
 8002634:	0800269c 	.word	0x0800269c
 8002638:	080026a0 	.word	0x080026a0

0800263c <memset>:
 800263c:	0003      	movs	r3, r0
 800263e:	1812      	adds	r2, r2, r0
 8002640:	4293      	cmp	r3, r2
 8002642:	d100      	bne.n	8002646 <memset+0xa>
 8002644:	4770      	bx	lr
 8002646:	7019      	strb	r1, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	e7f9      	b.n	8002640 <memset+0x4>

0800264c <_init>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr

08002658 <_fini>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr
