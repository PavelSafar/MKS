
CV09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009208  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009520  08009520  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009528  08009528  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08009530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  240001cc  080096fc  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000b68  080096fc  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b72  00000000  00000000  000201fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bce  00000000  00000000  00041d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00045940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  00046a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003862e  00000000  00000000  00047948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c4b  00000000  00000000  0007ff76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00157f8b  00000000  00000000  00090bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e8b4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045cc  00000000  00000000  001e8bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001cc 	.word	0x240001cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009488 	.word	0x08009488

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d0 	.word	0x240001d0
 80002d4:	08009488 	.word	0x08009488

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fb78 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f824 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f92c 	bl	8000840 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f8de 	bl	80007a8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005ec:	f008 fa10 	bl	8008a10 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  buff[0] = 0x01; // stiskni leve tlacitko
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <main+0x4c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
	  buff[1] = (int8_t)(10); // posun X +10
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <main+0x4c>)
 80005f8:	220a      	movs	r2, #10
 80005fa:	705a      	strb	r2, [r3, #1]
	  buff[2] = (int8_t)(-3); // posun Y -3
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x4c>)
 80005fe:	22fd      	movs	r2, #253	; 0xfd
 8000600:	709a      	strb	r2, [r3, #2]
	  buff[3] = 0; // bez scrollu
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <main+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000608:	2204      	movs	r2, #4
 800060a:	4906      	ldr	r1, [pc, #24]	; (8000624 <main+0x4c>)
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0x50>)
 800060e:	f007 f88f 	bl	8007730 <USBD_HID_SendReport>
	  HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x50>)
 8000614:	f007 f8ae 	bl	8007774 <USBD_HID_GetPollingInterval>
 8000618:	4603      	mov	r3, r0
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fbea 	bl	8000df4 <HAL_Delay>
	  buff[0] = 0x01; // stiskni leve tlacitko
 8000620:	e7e6      	b.n	80005f0 <main+0x18>
 8000622:	bf00      	nop
 8000624:	24000284 	.word	0x24000284
 8000628:	2400028c 	.word	0x2400028c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0cc      	sub	sp, #304	; 0x130
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f008 fe62 	bl	8009304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000644:	2220      	movs	r2, #32
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f008 fe5b 	bl	8009304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4618      	mov	r0, r3
 8000654:	23bc      	movs	r3, #188	; 0xbc
 8000656:	461a      	mov	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f008 fe53 	bl	8009304 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800065e:	2002      	movs	r0, #2
 8000660:	f002 f892 	bl	8002788 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <SystemClock_Config+0x170>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a4b      	ldr	r2, [pc, #300]	; (800079c <SystemClock_Config+0x170>)
 8000670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <SystemClock_Config+0x170>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <SystemClock_Config+0x174>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	4a46      	ldr	r2, [pc, #280]	; (80007a0 <SystemClock_Config+0x174>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800068e:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <SystemClock_Config+0x174>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	f003 0201 	and.w	r2, r3, #1
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069e:	bf00      	nop
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <SystemClock_Config+0x170>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ac:	d1f8      	bne.n	80006a0 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006ae:	2322      	movs	r3, #34	; 0x22
 80006b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006d8:	233c      	movs	r3, #60	; 0x3c
 80006da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f0:	230c      	movs	r3, #12
 80006f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f888 	bl	800281c <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000712:	f000 f939 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	233f      	movs	r3, #63	; 0x3f
 8000718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000728:	2308      	movs	r3, #8
 800072a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000748:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fc74 	bl	800303c <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800075a:	f000 f915 	bl	8000988 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <SystemClock_Config+0x178>)
 8000764:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4618      	mov	r0, r3
 8000780:	f002 ffe0 	bl	8003744 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x162>
  {
    Error_Handler();
 800078a:	f000 f8fd 	bl	8000988 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800078e:	f002 f835 	bl	80027fc <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000792:	bf00      	nop
 8000794:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58024800 	.word	0x58024800
 80007a0:	58000400 	.word	0x58000400
 80007a4:	00040002 	.word	0x00040002

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_USART3_UART_Init+0x94>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007f2:	f004 faa7 	bl	8004d44 <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f8c4 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000804:	f005 fa41 	bl	8005c8a <HAL_UARTEx_SetTxFifoThreshold>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800080e:	f000 f8bb 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000816:	f005 fa76 	bl	8005d06 <HAL_UARTEx_SetRxFifoThreshold>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000820:	f000 f8b2 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000826:	f005 f9f7 	bl	8005c18 <HAL_UARTEx_DisableFifoMode>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000830:	f000 f8aa 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240001f8 	.word	0x240001f8
 800083c:	40004800 	.word	0x40004800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b48      	ldr	r3, [pc, #288]	; (8000978 <MX_GPIO_Init+0x138>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a46      	ldr	r2, [pc, #280]	; (8000978 <MX_GPIO_Init+0x138>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b44      	ldr	r3, [pc, #272]	; (8000978 <MX_GPIO_Init+0x138>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <MX_GPIO_Init+0x138>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087a:	4a3f      	ldr	r2, [pc, #252]	; (8000978 <MX_GPIO_Init+0x138>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000884:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <MX_GPIO_Init+0x138>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b39      	ldr	r3, [pc, #228]	; (8000978 <MX_GPIO_Init+0x138>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a37      	ldr	r2, [pc, #220]	; (8000978 <MX_GPIO_Init+0x138>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <MX_GPIO_Init+0x138>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <MX_GPIO_Init+0x138>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	4a30      	ldr	r2, [pc, #192]	; (8000978 <MX_GPIO_Init+0x138>)
 80008b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_GPIO_Init+0x138>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_GPIO_Init+0x138>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a28      	ldr	r2, [pc, #160]	; (8000978 <MX_GPIO_Init+0x138>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_GPIO_Init+0x138>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008f2:	4822      	ldr	r0, [pc, #136]	; (800097c <MX_GPIO_Init+0x13c>)
 80008f4:	f000 fd6c 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	; 0x40
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <MX_GPIO_Init+0x140>)
 80008fe:	f000 fd67 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090c:	2301      	movs	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	481b      	ldr	r0, [pc, #108]	; (8000984 <MX_GPIO_Init+0x144>)
 8000918:	f000 fbaa 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800091c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0x13c>)
 8000936:	f000 fb9b 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <MX_GPIO_Init+0x140>)
 8000952:	f000 fb8d 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_GPIO_Init+0x140>)
 800096a:	f000 fb81 	bl	8001070 <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	58024400 	.word	0x58024400
 800097c:	58020400 	.word	0x58020400
 8000980:	58021800 	.word	0x58021800
 8000984:	58020800 	.word	0x58020800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x30>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x30>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	58024400 	.word	0x58024400

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12e      	bne.n	8000a4c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 80009f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009f4:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 80009f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_UART_MspInit+0x90>)
 8000a48:	f000 fb12 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004800 	.word	0x40004800
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	58020c00 	.word	0x58020c00

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f97e 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8000ac2:	f000 fdf5 	bl	80016b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400075c 	.word	0x2400075c

08000ad0 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8000ad6:	f000 fdeb 	bl	80016b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2400075c 	.word	0x2400075c

08000ae4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <OTG_FS_IRQHandler+0x10>)
 8000aea:	f000 fde1 	bl	80016b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2400075c 	.word	0x2400075c

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f008 fbb2 	bl	8009290 <__errno>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	230c      	movs	r3, #12
 8000b30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24080000 	.word	0x24080000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	240001e8 	.word	0x240001e8
 8000b60:	24000b68 	.word	0x24000b68

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b68:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <SystemInit+0xec>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <SystemInit+0xec>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b78:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <SystemInit+0xf0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	2b06      	cmp	r3, #6
 8000b82:	d807      	bhi.n	8000b94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <SystemInit+0xf0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 030f 	bic.w	r3, r3, #15
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <SystemInit+0xf0>)
 8000b8e:	f043 0307 	orr.w	r3, r3, #7
 8000b92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b94:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <SystemInit+0xf4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <SystemInit+0xf4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <SystemInit+0xf4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <SystemInit+0xf4>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	492b      	ldr	r1, [pc, #172]	; (8000c58 <SystemInit+0xf4>)
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <SystemInit+0xf8>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <SystemInit+0xf0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	2b07      	cmp	r3, #7
 8000bbc:	d907      	bls.n	8000bce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <SystemInit+0xf0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f023 030f 	bic.w	r3, r3, #15
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <SystemInit+0xf0>)
 8000bc8:	f043 0307 	orr.w	r3, r3, #7
 8000bcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <SystemInit+0xf4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <SystemInit+0xf4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <SystemInit+0xf4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <SystemInit+0xf4>)
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <SystemInit+0xfc>)
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <SystemInit+0xf4>)
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <SystemInit+0x100>)
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <SystemInit+0xf4>)
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <SystemInit+0x104>)
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <SystemInit+0xf4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <SystemInit+0xf4>)
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <SystemInit+0x104>)
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <SystemInit+0xf4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <SystemInit+0xf4>)
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <SystemInit+0x104>)
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <SystemInit+0xf4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <SystemInit+0xf4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <SystemInit+0xf4>)
 8000c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <SystemInit+0xf4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <SystemInit+0x108>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <SystemInit+0x10c>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c2e:	d202      	bcs.n	8000c36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <SystemInit+0x110>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <SystemInit+0x114>)
 8000c38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c3c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SystemInit+0xec>)
 8000c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c44:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	52002000 	.word	0x52002000
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c60:	02020200 	.word	0x02020200
 8000c64:	01ff0000 	.word	0x01ff0000
 8000c68:	01010280 	.word	0x01010280
 8000c6c:	5c001000 	.word	0x5c001000
 8000c70:	ffff0000 	.word	0xffff0000
 8000c74:	51008108 	.word	0x51008108
 8000c78:	52004000 	.word	0x52004000

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c80:	f7ff ff70 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
  ldr  r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f008 faf7 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc93 	bl	80005d8 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000cb8:	08009530 	.word	0x08009530
  ldr  r0, =_sdata
 8000cbc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000cc0:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8000cc4:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8000cc8:	24000b68 	.word	0x24000b68

08000ccc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC3_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f000 f98a 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cdc:	f002 fb64 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_Init+0x68>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_Init+0x6c>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	f003 031f 	and.w	r3, r3, #31
 8000cf4:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_Init+0x68>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_Init+0x6c>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	f003 031f 	and.w	r3, r3, #31
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_Init+0x70>)
 8000d12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_Init+0x74>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f814 	bl	8000d48 <HAL_InitTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e002      	b.n	8000d30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2a:	f7ff fe35 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	080094f8 	.word	0x080094f8
 8000d40:	24000004 	.word	0x24000004
 8000d44:	24000000 	.word	0x24000000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_InitTick+0x60>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e021      	b.n	8000da0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_InitTick+0x64>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_InitTick+0x60>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f96f 	bl	8001056 <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f939 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x68>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2400000c 	.word	0x2400000c
 8000dac:	24000000 	.word	0x24000000
 8000db0:	24000008 	.word	0x24000008

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2400000c 	.word	0x2400000c
 8000dd8:	24000288 	.word	0x24000288

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000288 	.word	0x24000288

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2400000c 	.word	0x2400000c

08000e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetREVID+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0c1b      	lsrs	r3, r3, #16
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	5c001000 	.word	0x5c001000

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <__NVIC_SetPriorityGrouping+0x40>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x40>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	05fa0000 	.word	0x05fa0000

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff40 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff33 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa4 	bl	8000fac <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800107e:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <HAL_GPIO_Init+0x234>)
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001082:	e194      	b.n	80013ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8186 	beq.w	80013a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00b      	beq.n	80010bc <HAL_GPIO_Init+0x4c>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	2b11      	cmp	r3, #17
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0xee>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b12      	cmp	r3, #18
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	69b9      	ldr	r1, [r7, #24]
 80011a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0203 	and.w	r2, r3, #3
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80e0 	beq.w	80013a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x238>)
 80011ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ee:	4a2e      	ldr	r2, [pc, #184]	; (80012a8 <HAL_GPIO_Init+0x238>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_GPIO_Init+0x238>)
 80011fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a29      	ldr	r2, [pc, #164]	; (80012ac <HAL_GPIO_Init+0x23c>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <HAL_GPIO_Init+0x240>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d052      	beq.n	80012d8 <HAL_GPIO_Init+0x268>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <HAL_GPIO_Init+0x244>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d031      	beq.n	800129e <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_GPIO_Init+0x248>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x22a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_GPIO_Init+0x24c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_GPIO_Init+0x250>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <HAL_GPIO_Init+0x254>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_GPIO_Init+0x258>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x25c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <HAL_GPIO_Init+0x260>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_GPIO_Init+0x264>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x20e>
 800127a:	2309      	movs	r3, #9
 800127c:	e02d      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800127e:	230a      	movs	r3, #10
 8001280:	e02b      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001282:	2308      	movs	r3, #8
 8001284:	e029      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001286:	2307      	movs	r3, #7
 8001288:	e027      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800128a:	2306      	movs	r3, #6
 800128c:	e025      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800128e:	2305      	movs	r3, #5
 8001290:	e023      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001292:	2304      	movs	r3, #4
 8001294:	e021      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001296:	2303      	movs	r3, #3
 8001298:	e01f      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800129a:	2302      	movs	r3, #2
 800129c:	e01d      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e01b      	b.n	80012da <HAL_GPIO_Init+0x26a>
 80012a2:	bf00      	nop
 80012a4:	58000080 	.word	0x58000080
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58000400 	.word	0x58000400
 80012b0:	58020000 	.word	0x58020000
 80012b4:	58020400 	.word	0x58020400
 80012b8:	58020800 	.word	0x58020800
 80012bc:	58020c00 	.word	0x58020c00
 80012c0:	58021000 	.word	0x58021000
 80012c4:	58021400 	.word	0x58021400
 80012c8:	58021800 	.word	0x58021800
 80012cc:	58021c00 	.word	0x58021c00
 80012d0:	58022000 	.word	0x58022000
 80012d4:	58022400 	.word	0x58022400
 80012d8:	2300      	movs	r3, #0
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ea:	4938      	ldr	r1, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x35c>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f ae63 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 80013be:	bf00      	nop
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	58000400 	.word	0x58000400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001404:	b08f      	sub	sp, #60	; 0x3c
 8001406:	af0a      	add	r7, sp, #40	; 0x28
 8001408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e116      	b.n	8001642 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d106      	bne.n	8001434 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f007 fc24 	bl	8008c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2203      	movs	r2, #3
 8001438:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fe13 	bl	800607e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	687e      	ldr	r6, [r7, #4]
 8001460:	466d      	mov	r5, sp
 8001462:	f106 0410 	add.w	r4, r6, #16
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001472:	e885 0003 	stmia.w	r5, {r0, r1}
 8001476:	1d33      	adds	r3, r6, #4
 8001478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f004 fcea 	bl	8005e54 <USB_CoreInit>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0d7      	b.n	8001642 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f004 fe01 	bl	80060a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e04a      	b.n	800153a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	333d      	adds	r3, #61	; 0x3d
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	333c      	adds	r3, #60	; 0x3c
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	b298      	uxth	r0, r3
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3342      	adds	r3, #66	; 0x42
 80014e0:	4602      	mov	r2, r0
 80014e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	333f      	adds	r3, #63	; 0x3f
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3344      	adds	r3, #68	; 0x44
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3348      	adds	r3, #72	; 0x48
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	3350      	adds	r3, #80	; 0x50
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	3301      	adds	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3af      	bcc.n	80014a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e044      	b.n	80015d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	3301      	adds	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3b5      	bcc.n	800154a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	687e      	ldr	r6, [r7, #4]
 80015e6:	466d      	mov	r5, sp
 80015e8:	f106 0410 	add.w	r4, r6, #16
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015fc:	1d33      	adds	r3, r6, #4
 80015fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f004 fd77 	bl	80060f4 <USB_DevInit>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e014      	b.n	8001642 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2b01      	cmp	r3, #1
 800162e:	d102      	bne.n	8001636 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f001 f879 	bl	8002728 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fdb6 	bl	80071ac <USB_DevDisconnect>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800164a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_PCD_Start+0x1c>
 8001662:	2302      	movs	r3, #2
 8001664:	e020      	b.n	80016a8 <HAL_PCD_Start+0x5e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	2b01      	cmp	r3, #1
 8001674:	d109      	bne.n	800168a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800167a:	2b01      	cmp	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fd74 	bl	800717c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fcdf 	bl	800605c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b08d      	sub	sp, #52	; 0x34
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fe1b 	bl	8007302 <USB_GetMode>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 83ca 	bne.w	8001e68 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 fd7f 	bl	80071dc <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 83c0 	beq.w	8001e66 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 fd76 	bl	80071dc <USB_ReadInterrupts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d107      	bne.n	800170a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f002 0202 	and.w	r2, r2, #2
 8001708:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f005 fd64 	bl	80071dc <USB_ReadInterrupts>
 8001714:	4603      	mov	r3, r0
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b10      	cmp	r3, #16
 800171c:	d161      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0210 	bic.w	r2, r2, #16
 800172c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f003 020f 	and.w	r2, r3, #15
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	0c5b      	lsrs	r3, r3, #17
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	2b02      	cmp	r3, #2
 8001758:	d124      	bne.n	80017a4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d035      	beq.n	80017d2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	6a38      	ldr	r0, [r7, #32]
 800177a:	f005 fbdc 	bl	8006f36 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178a:	441a      	add	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800179c:	441a      	add	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	619a      	str	r2, [r3, #24]
 80017a2:	e016      	b.n	80017d2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	0c5b      	lsrs	r3, r3, #17
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	2b06      	cmp	r3, #6
 80017ae:	d110      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017b6:	2208      	movs	r2, #8
 80017b8:	4619      	mov	r1, r3
 80017ba:	6a38      	ldr	r0, [r7, #32]
 80017bc:	f005 fbbb 	bl	8006f36 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017cc:	441a      	add	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0210 	orr.w	r2, r2, #16
 80017e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 fcf8 	bl	80071dc <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017f6:	d16e      	bne.n	80018d6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 fcfe 	bl	8007202 <USB_ReadDevAllOutEpInterrupt>
 8001806:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001808:	e062      	b.n	80018d0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d057      	beq.n	80018c4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f005 fd23 	bl	800726a <USB_ReadDevOutEPInterrupt>
 8001824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00c      	beq.n	800184a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183c:	461a      	mov	r2, r3
 800183e:	2301      	movs	r3, #1
 8001840:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fdc5 	bl	80023d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00c      	beq.n	800186e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001860:	461a      	mov	r2, r3
 8001862:	2308      	movs	r3, #8
 8001864:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 febf 	bl	80025ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001884:	461a      	mov	r2, r3
 8001886:	2310      	movs	r3, #16
 8001888:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a0:	461a      	mov	r2, r3
 80018a2:	2320      	movs	r3, #32
 80018a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018bc:	461a      	mov	r2, r3
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	3301      	adds	r3, #1
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d199      	bne.n	800180a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f005 fc7e 	bl	80071dc <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018ea:	f040 80c0 	bne.w	8001a6e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f005 fc9f 	bl	8007236 <USB_ReadDevAllInEpInterrupt>
 80018f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018fe:	e0b2      	b.n	8001a66 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80a7 	beq.w	8001a5a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fcc5 	bl	80072a6 <USB_ReadDevInEPInterrupt>
 800191c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d057      	beq.n	80019d8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	2201      	movs	r2, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	69f9      	ldr	r1, [r7, #28]
 8001944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001948:	4013      	ands	r3, r2
 800194a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001958:	461a      	mov	r2, r3
 800195a:	2301      	movs	r3, #1
 800195c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d132      	bne.n	80019cc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3348      	adds	r3, #72	; 0x48
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4403      	add	r3, r0
 8001986:	3344      	adds	r3, #68	; 0x44
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4419      	add	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	3348      	adds	r3, #72	; 0x48
 800199c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d113      	bne.n	80019cc <HAL_PCD_IRQHandler+0x31c>
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3350      	adds	r3, #80	; 0x50
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d108      	bne.n	80019cc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019c4:	461a      	mov	r2, r3
 80019c6:	2101      	movs	r1, #1
 80019c8:	f005 fcce 	bl	8007368 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f007 f9ef 	bl	8008db6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ee:	461a      	mov	r2, r3
 80019f0:	2308      	movs	r3, #8
 80019f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a26:	461a      	mov	r2, r3
 8001a28:	2340      	movs	r3, #64	; 0x40
 8001a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a42:	461a      	mov	r2, r3
 8001a44:	2302      	movs	r3, #2
 8001a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fc30 	bl	80022ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f47f af49 	bne.w	8001900 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 fbb2 	bl	80071dc <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a82:	d122      	bne.n	8001aca <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fe5f 	bl	8002770 <HAL_PCDEx_LPM_Callback>
 8001ab2:	e002      	b.n	8001aba <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f007 f9f5 	bl	8008ea4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f005 fb84 	bl	80071dc <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ade:	d112      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f007 f9b1 	bl	8008e58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b04:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 fb66 	bl	80071dc <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b1a:	d121      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b2a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d111      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	f003 020f 	and.w	r2, r3, #15
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b50:	2101      	movs	r1, #1
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fe0c 	bl	8002770 <HAL_PCDEx_LPM_Callback>
 8001b58:	e002      	b.n	8001b60 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f007 f97c 	bl	8008e58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f005 fb39 	bl	80071dc <USB_ReadInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b74:	f040 80c7 	bne.w	8001d06 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2110      	movs	r1, #16
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 fc0c 	bl	80063b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9c:	e056      	b.n	8001c4c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001baa:	461a      	mov	r2, r3
 8001bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc2:	0151      	lsls	r1, r2, #5
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	440a      	add	r2, r1
 8001bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	015a      	lsls	r2, r3, #5
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be2:	0151      	lsls	r1, r2, #5
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	440a      	add	r2, r1
 8001be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	0151      	lsls	r1, r2, #5
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	440a      	add	r2, r1
 8001c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c36:	0151      	lsls	r1, r2, #5
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	440a      	add	r2, r1
 8001c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	3301      	adds	r3, #1
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3a3      	bcc.n	8001b9e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c82:	f043 030b 	orr.w	r3, r3, #11
 8001c86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c98:	f043 030b 	orr.w	r3, r3, #11
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	e015      	b.n	8001ccc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f242 032b 	movw	r3, #8235	; 0x202b
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc6:	f043 030b 	orr.w	r3, r3, #11
 8001cca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f005 fb39 	bl	8007368 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 fa66 	bl	80071dc <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1a:	d124      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 fafd 	bl	8007320 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 fba1 	bl	8006472 <USB_GetDevSpeed>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	f001 fca6 	bl	800368c <HAL_RCC_GetHCLKFreq>
 8001d40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f004 f8e4 	bl	8005f18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f007 f858 	bl	8008e06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 fa36 	bl	80071dc <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d10a      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f007 f835 	bl	8008dea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f002 0208 	and.w	r2, r2, #8
 8001d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fa21 	bl	80071dc <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da4:	d10f      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f007 f897 	bl	8008ee4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fa06 	bl	80071dc <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dda:	d10f      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f007 f86a 	bl	8008ec0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 f9eb 	bl	80071dc <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d10a      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f007 f878 	bl	8008f08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 f9d5 	bl	80071dc <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d115      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f007 f868 	bl	8008f24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	e000      	b.n	8001e68 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001e66:	bf00      	nop
    }
  }
}
 8001e68:	3734      	adds	r7, #52	; 0x34
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}

08001e6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_SetAddress+0x1a>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e013      	b.n	8001eb0 <HAL_PCD_SetAddress+0x42>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f005 f945 	bl	8007130 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	70fb      	strb	r3, [r7, #3]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	803b      	strh	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da0f      	bge.n	8001efe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	3338      	adds	r3, #56	; 0x38
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	705a      	strb	r2, [r3, #1]
 8001efc:	e00f      	b.n	8001f1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f2a:	883a      	ldrh	r2, [r7, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	78ba      	ldrb	r2, [r7, #2]
 8001f34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f48:	78bb      	ldrb	r3, [r7, #2]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d102      	bne.n	8001f54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_PCD_EP_Open+0xaa>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e00e      	b.n	8001f80 <HAL_PCD_EP_Open+0xc8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 faa3 	bl	80064bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da0f      	bge.n	8001fbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	3338      	adds	r3, #56	; 0x38
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	705a      	strb	r2, [r3, #1]
 8001fba:	e00f      	b.n	8001fdc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_PCD_EP_Close+0x6e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e00e      	b.n	8002014 <HAL_PCD_EP_Close+0x8c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fae1 	bl	80065cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	b2da      	uxtb	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	6979      	ldr	r1, [r7, #20]
 8002090:	f004 fdc4 	bl	8006c1c <USB_EP0StartXfer>
 8002094:	e008      	b.n	80020a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	f004 fb6e 	bl	8006784 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	460b      	mov	r3, r1
 80020c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	3338      	adds	r3, #56	; 0x38
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2201      	movs	r2, #1
 80020f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6979      	ldr	r1, [r7, #20]
 8002124:	f004 fd7a 	bl	8006c1c <USB_EP0StartXfer>
 8002128:	e008      	b.n	800213c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6979      	ldr	r1, [r7, #20]
 8002138:	f004 fb24 	bl	8006784 <USB_EPStartXfer>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 020f 	and.w	r2, r3, #15
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	d901      	bls.n	8002164 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e050      	b.n	8002206 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da0f      	bge.n	800218c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
 800218a:	e00d      	b.n	80021a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	3304      	adds	r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_PCD_EP_SetStall+0x82>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e01e      	b.n	8002206 <HAL_PCD_EP_SetStall+0xc0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fed6 	bl	8006f88 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021f6:	461a      	mov	r2, r3
 80021f8:	f005 f8b6 	bl	8007368 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f003 020f 	and.w	r2, r3, #15
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d901      	bls.n	800222c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e042      	b.n	80022b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800222c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002230:	2b00      	cmp	r3, #0
 8002232:	da0f      	bge.n	8002254 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 020f 	and.w	r2, r3, #15
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	3338      	adds	r3, #56	; 0x38
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	705a      	strb	r2, [r3, #1]
 8002252:	e00f      	b.n	8002274 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_ClrStall+0x86>
 8002290:	2302      	movs	r3, #2
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_ClrStall+0xa4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fede 	bl	8007064 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b08a      	sub	sp, #40	; 0x28
 80022be:	af02      	add	r7, sp, #8
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	3338      	adds	r3, #56	; 0x38
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d901      	bls.n	80022f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06c      	b.n	80023cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	429a      	cmp	r2, r3
 8002306:	d902      	bls.n	800230e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3303      	adds	r3, #3
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002316:	e02b      	b.n	8002370 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	429a      	cmp	r2, r3
 800232c:	d902      	bls.n	8002334 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3303      	adds	r3, #3
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800234c:	b2db      	uxtb	r3, r3
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f004 fdba 	bl	8006ecc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	441a      	add	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	441a      	add	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	b29b      	uxth	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	429a      	cmp	r2, r3
 8002384:	d809      	bhi.n	800239a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800238e:	429a      	cmp	r2, r3
 8002390:	d203      	bcs.n	800239a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1be      	bne.n	8002318 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d811      	bhi.n	80023ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2201      	movs	r2, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	43db      	mvns	r3, r3
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023c6:	4013      	ands	r3, r2
 80023c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	333c      	adds	r3, #60	; 0x3c
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 80a0 	bne.w	800254c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a72      	ldr	r2, [pc, #456]	; (80025e4 <PCD_EP_OutXfrComplete_int+0x210>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f240 80dd 	bls.w	80025da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80d7 	beq.w	80025da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243e:	6093      	str	r3, [r2, #8]
 8002440:	e0cb      	b.n	80025da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	2320      	movs	r3, #32
 800245c:	6093      	str	r3, [r2, #8]
 800245e:	e0bc      	b.n	80025da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 80b7 	bne.w	80025da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d90f      	bls.n	8002494 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248a:	461a      	mov	r2, r3
 800248c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002490:	6093      	str	r3, [r2, #8]
 8002492:	e0a2      	b.n	80025da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	0159      	lsls	r1, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80024ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4403      	add	r3, r0
 80024ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4403      	add	r3, r0
 80024f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4419      	add	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4403      	add	r3, r0
 8002508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800250c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d114      	bne.n	800253e <PCD_EP_OutXfrComplete_int+0x16a>
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002536:	461a      	mov	r2, r3
 8002538:	2101      	movs	r1, #1
 800253a:	f004 ff15 	bl	8007368 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f006 fc1b 	bl	8008d80 <HAL_PCD_DataOutStageCallback>
 800254a:	e046      	b.n	80025da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d124      	bne.n	800259e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	461a      	mov	r2, r3
 800256c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002570:	6093      	str	r3, [r2, #8]
 8002572:	e032      	b.n	80025da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258a:	461a      	mov	r2, r3
 800258c:	2320      	movs	r3, #32
 800258e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f006 fbf2 	bl	8008d80 <HAL_PCD_DataOutStageCallback>
 800259c:	e01d      	b.n	80025da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d114      	bne.n	80025ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d108      	bne.n	80025ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025c6:	461a      	mov	r2, r3
 80025c8:	2100      	movs	r1, #0
 80025ca:	f004 fecd 	bl	8007368 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f006 fbd3 	bl	8008d80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	4f54300a 	.word	0x4f54300a
 80025e8:	4f54310a 	.word	0x4f54310a

080025ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	333c      	adds	r3, #60	; 0x3c
 8002604:	3304      	adds	r3, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <PCD_EP_OutSetupPacket_int+0x88>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d90e      	bls.n	8002640 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f006 fb8b 	bl	8008d5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <PCD_EP_OutSetupPacket_int+0x88>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d90c      	bls.n	8002668 <PCD_EP_OutSetupPacket_int+0x7c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002660:	461a      	mov	r2, r3
 8002662:	2101      	movs	r1, #1
 8002664:	f004 fe80 	bl	8007368 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	4f54300a 	.word	0x4f54300a

08002678 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
 8002684:	4613      	mov	r3, r2
 8002686:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002696:	883b      	ldrh	r3, [r7, #0]
 8002698:	0419      	lsls	r1, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
 80026a4:	e028      	b.n	80026f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4413      	add	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e00d      	b.n	80026d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	3340      	adds	r3, #64	; 0x40
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	3301      	adds	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	3b01      	subs	r3, #1
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3ec      	bcc.n	80026ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026e0:	883b      	ldrh	r3, [r7, #0]
 80026e2:	0418      	lsls	r0, r3, #16
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	4302      	orrs	r2, r0
 80026f0:	3340      	adds	r3, #64	; 0x40
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_PCDEx_ActivateLPM+0x44>)
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	10000003 	.word	0x10000003

08002770 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00a      	beq.n	80027b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d001      	beq.n	80027ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e01f      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e01d      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	490f      	ldr	r1, [pc, #60]	; (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027c2:	f7fe fb0b 	bl	8000ddc <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027c8:	e009      	b.n	80027de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027ca:	f7fe fb07 	bl	8000ddc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d8:	d901      	bls.n	80027de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e007      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	d1ee      	bne.n	80027ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	58024800 	.word	0x58024800

080027fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	58024800 	.word	0x58024800

0800281c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	; 0x30
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e3ff      	b.n	800302e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8087 	beq.w	800294a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283c:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002846:	4b97      	ldr	r3, [pc, #604]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	2b10      	cmp	r3, #16
 8002850:	d007      	beq.n	8002862 <HAL_RCC_OscConfig+0x46>
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2b18      	cmp	r3, #24
 8002856:	d110      	bne.n	800287a <HAL_RCC_OscConfig+0x5e>
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d10b      	bne.n	800287a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	4b90      	ldr	r3, [pc, #576]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d06c      	beq.n	8002948 <HAL_RCC_OscConfig+0x12c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d168      	bne.n	8002948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e3d9      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x76>
 8002884:	4b87      	ldr	r3, [pc, #540]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a86      	ldr	r2, [pc, #536]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e02e      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x98>
 800289a:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a81      	ldr	r2, [pc, #516]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7e      	ldr	r2, [pc, #504]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0xbc>
 80028be:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 80028d8:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa70 	bl	8000ddc <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe fa6c 	bl	8000ddc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e38d      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002912:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0xe4>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fa5c 	bl	8000ddc <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fa58 	bl	8000ddc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e379      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x10c>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80ae 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002958:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002960:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_RCC_OscConfig+0x162>
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b18      	cmp	r3, #24
 8002972:	d13a      	bne.n	80029ea <HAL_RCC_OscConfig+0x1ce>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d135      	bne.n	80029ea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x17a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e34b      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	f7fe fa4f 	bl	8000e38 <HAL_GetREVID>
 800299a:	4602      	mov	r2, r0
 800299c:	f241 0303 	movw	r3, #4099	; 0x1003
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d817      	bhi.n	80029d4 <HAL_RCC_OscConfig+0x1b8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d108      	bne.n	80029be <HAL_RCC_OscConfig+0x1a2>
 80029ac:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029b4:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029bc:	e07a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	031b      	lsls	r3, r3, #12
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d2:	e06f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	4930      	ldr	r1, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	e064      	b.n	8002ab4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d045      	beq.n	8002a7e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0219 	bic.w	r2, r3, #25
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4929      	ldr	r1, [pc, #164]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe f9ea 	bl	8000ddc <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe f9e6 	bl	8000ddc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e307      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	f7fe fa05 	bl	8000e38 <HAL_GetREVID>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d817      	bhi.n	8002a68 <HAL_RCC_OscConfig+0x24c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d108      	bne.n	8002a52 <HAL_RCC_OscConfig+0x236>
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4e:	6053      	str	r3, [r2, #4]
 8002a50:	e030      	b.n	8002ab4 <HAL_RCC_OscConfig+0x298>
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	031b      	lsls	r3, r3, #12
 8002a60:	4910      	ldr	r1, [pc, #64]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e025      	b.n	8002ab4 <HAL_RCC_OscConfig+0x298>
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	490b      	ldr	r1, [pc, #44]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e01a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_RCC_OscConfig+0x288>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f9a7 	bl	8000ddc <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe f9a3 	bl	8000ddc <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d903      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e2c4      	b.n	800302e <HAL_RCC_OscConfig+0x812>
 8002aa4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa8:	4ba4      	ldr	r3, [pc, #656]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a9 	beq.w	8002c14 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac2:	4b9e      	ldr	r3, [pc, #632]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002acc:	4b9b      	ldr	r3, [pc, #620]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x2cc>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b18      	cmp	r3, #24
 8002adc:	d13a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x338>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d135      	bne.n	8002b54 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae8:	4b94      	ldr	r3, [pc, #592]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2e4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e296      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b00:	f7fe f99a 	bl	8000e38 <HAL_GetREVID>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d817      	bhi.n	8002b3e <HAL_RCC_OscConfig+0x322>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x30c>
 8002b16:	4b89      	ldr	r3, [pc, #548]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b26:	e075      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b28:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	069b      	lsls	r3, r3, #26
 8002b36:	4981      	ldr	r1, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b3c:	e06a      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	061b      	lsls	r3, r3, #24
 8002b4c:	497b      	ldr	r1, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b52:	e05f      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d042      	beq.n	8002be2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b5c:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a76      	ldr	r2, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe f938 	bl	8000ddc <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b70:	f7fe f934 	bl	8000ddc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e255      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b82:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b8e:	f7fe f953 	bl	8000e38 <HAL_GetREVID>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d817      	bhi.n	8002bcc <HAL_RCC_OscConfig+0x3b0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d108      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x39a>
 8002ba4:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bac:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	6053      	str	r3, [r2, #4]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f8>
 8002bb6:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	069b      	lsls	r3, r3, #26
 8002bc4:	495d      	ldr	r1, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	e023      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f8>
 8002bcc:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	4958      	ldr	r1, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe f8f5 	bl	8000ddc <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bf6:	f7fe f8f1 	bl	8000ddc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e212      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d036      	beq.n	8002c8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d019      	beq.n	8002c5c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c28:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe f8d2 	bl	8000ddc <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7fe f8ce 	bl	8000ddc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1ef      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x420>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c60:	4a36      	ldr	r2, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f8b8 	bl	8000ddc <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c70:	f7fe f8b4 	bl	8000ddc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1d5      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d036      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d019      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cae:	f7fe f895 	bl	8000ddc <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cb6:	f7fe f891 	bl	8000ddc <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1b2      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x49a>
 8002cd4:	e018      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f87b 	bl	8000ddc <HAL_GetTick>
 8002ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cea:	f7fe f877 	bl	8000ddc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e198      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_RCC_OscConfig+0x520>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8085 	beq.w	8002e20 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x524>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x524>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d22:	f7fe f85b 	bl	8000ddc <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d28:	e00c      	b.n	8002d44 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fe f857 	bl	8000ddc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d905      	bls.n	8002d44 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e178      	b.n	800302e <HAL_RCC_OscConfig+0x812>
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d44:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <HAL_RCC_OscConfig+0x784>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ec      	beq.n	8002d2a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x54a>
 8002d58:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a91      	ldr	r2, [pc, #580]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e02d      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5a6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x56c>
 8002d6e:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a8c      	ldr	r2, [pc, #560]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a89      	ldr	r2, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d80:	f023 0304 	bic.w	r3, r3, #4
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e01c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5a6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0x58e>
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a83      	ldr	r2, [pc, #524]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a80      	ldr	r2, [pc, #512]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5a6>
 8002daa:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a7d      	ldr	r2, [pc, #500]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a7a      	ldr	r2, [pc, #488]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d015      	beq.n	8002df6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe f807 	bl	8000ddc <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f803 	bl	8000ddc <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e122      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de8:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ee      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x5b6>
 8002df4:	e014      	b.n	8002e20 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fd fff1 	bl	8000ddc <HAL_GetTick>
 8002dfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fd ffed 	bl	8000ddc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e10c      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e14:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8101 	beq.w	800302c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e32:	2b18      	cmp	r3, #24
 8002e34:	f000 80bc 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 8095 	bne.w	8002f6c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fd ffc5 	bl	8000ddc <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fd ffc1 	bl	8000ddc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0e2      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e68:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e78:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_RCC_OscConfig+0x78c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	430a      	orrs	r2, r1
 8002e88:	4946      	ldr	r1, [pc, #280]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	628b      	str	r3, [r1, #40]	; 0x28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ebe:	4939      	ldr	r1, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	4a36      	ldr	r2, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <HAL_RCC_OscConfig+0x790>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002edc:	00d2      	lsls	r2, r2, #3
 8002ede:	4931      	ldr	r1, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	f023 020c 	bic.w	r2, r3, #12
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	492c      	ldr	r1, [pc, #176]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	f023 0202 	bic.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4928      	ldr	r1, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f08:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd ff4a 	bl	8000ddc <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fd ff46 	bl	8000ddc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e067      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x730>
 8002f6a:	e05f      	b.n	800302c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd ff30 	bl	8000ddc <HAL_GetTick>
 8002f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fd ff2c 	bl	8000ddc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04d      	b.n	800302e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_RCC_OscConfig+0x788>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x764>
 8002f9e:	e045      	b.n	800302c <HAL_RCC_OscConfig+0x810>
 8002fa0:	58024800 	.word	0x58024800
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	fffffc0c 	.word	0xfffffc0c
 8002fac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x81c>)
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x81c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d031      	beq.n	8003028 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d12a      	bne.n	8003028 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d122      	bne.n	8003028 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d11a      	bne.n	8003028 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d111      	bne.n	8003028 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0e1b      	lsrs	r3, r3, #24
 800301a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3730      	adds	r7, #48	; 0x30
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	58024400 	.word	0x58024400

0800303c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e19c      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b8a      	ldr	r3, [pc, #552]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b87      	ldr	r3, [pc, #540]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 020f 	bic.w	r2, r3, #15
 8003066:	4985      	ldr	r1, [pc, #532]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b83      	ldr	r3, [pc, #524]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e184      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d010      	beq.n	80030ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003098:	429a      	cmp	r2, r3
 800309a:	d908      	bls.n	80030ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800309c:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	4975      	ldr	r1, [pc, #468]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d908      	bls.n	80030dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	496a      	ldr	r1, [pc, #424]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d908      	bls.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	495e      	ldr	r1, [pc, #376]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003106:	4313      	orrs	r3, r2
 8003108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003122:	429a      	cmp	r2, r3
 8003124:	d908      	bls.n	8003138 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4953      	ldr	r1, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003134:	4313      	orrs	r3, r2
 8003136:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	429a      	cmp	r2, r3
 8003152:	d908      	bls.n	8003166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f023 020f 	bic.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4947      	ldr	r1, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003162:	4313      	orrs	r3, r2
 8003164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d055      	beq.n	800321e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4940      	ldr	r1, [pc, #256]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d121      	bne.n	80031dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0f6      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0ea      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0de      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031cc:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d6      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f023 0207 	bic.w	r2, r3, #7
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4925      	ldr	r1, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fd fdf5 	bl	8000ddc <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	e00a      	b.n	800320c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f6:	f7fd fdf1 	bl	8000ddc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0be      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	429a      	cmp	r2, r3
 800321c:	d1eb      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d010      	beq.n	800324c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	429a      	cmp	r2, r3
 8003238:	d208      	bcs.n	800324c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f023 020f 	bic.w	r2, r3, #15
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003248:	4313      	orrs	r3, r2
 800324a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d214      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 020f 	bic.w	r2, r3, #15
 8003262:	4906      	ldr	r1, [pc, #24]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e086      	b.n	800338a <HAL_RCC_ClockConfig+0x34e>
 800327c:	52002000 	.word	0x52002000
 8003280:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329c:	429a      	cmp	r2, r3
 800329e:	d208      	bcs.n	80032b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032a0:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	4939      	ldr	r1, [pc, #228]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d208      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ce:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	492e      	ldr	r1, [pc, #184]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d208      	bcs.n	800330e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4922      	ldr	r1, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 800330a:	4313      	orrs	r3, r2
 800330c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003326:	429a      	cmp	r2, r3
 8003328:	d208      	bcs.n	800333c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4917      	ldr	r1, [pc, #92]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 8003338:	4313      	orrs	r3, r2
 800333a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800333c:	f000 f834 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003340:	4601      	mov	r1, r0
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	4a12      	ldr	r2, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x35c>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa21 f303 	lsr.w	r3, r1, r3
 8003358:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_RCC_ClockConfig+0x358>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <HAL_RCC_ClockConfig+0x35c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x360>)
 8003372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x364>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x368>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fce2 	bl	8000d48 <HAL_InitTick>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	58024400 	.word	0x58024400
 8003398:	080094f8 	.word	0x080094f8
 800339c:	24000004 	.word	0x24000004
 80033a0:	24000000 	.word	0x24000000
 80033a4:	24000008 	.word	0x24000008

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ae:	4baf      	ldr	r3, [pc, #700]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b6:	2b18      	cmp	r3, #24
 80033b8:	f200 814e 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x2b0>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	08003429 	.word	0x08003429
 80033c8:	08003659 	.word	0x08003659
 80033cc:	08003659 	.word	0x08003659
 80033d0:	08003659 	.word	0x08003659
 80033d4:	08003659 	.word	0x08003659
 80033d8:	08003659 	.word	0x08003659
 80033dc:	08003659 	.word	0x08003659
 80033e0:	08003659 	.word	0x08003659
 80033e4:	0800344f 	.word	0x0800344f
 80033e8:	08003659 	.word	0x08003659
 80033ec:	08003659 	.word	0x08003659
 80033f0:	08003659 	.word	0x08003659
 80033f4:	08003659 	.word	0x08003659
 80033f8:	08003659 	.word	0x08003659
 80033fc:	08003659 	.word	0x08003659
 8003400:	08003659 	.word	0x08003659
 8003404:	08003455 	.word	0x08003455
 8003408:	08003659 	.word	0x08003659
 800340c:	08003659 	.word	0x08003659
 8003410:	08003659 	.word	0x08003659
 8003414:	08003659 	.word	0x08003659
 8003418:	08003659 	.word	0x08003659
 800341c:	08003659 	.word	0x08003659
 8003420:	08003659 	.word	0x08003659
 8003424:	0800345b 	.word	0x0800345b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003428:	4b90      	ldr	r3, [pc, #576]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003434:	4b8d      	ldr	r3, [pc, #564]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	08db      	lsrs	r3, r3, #3
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	4a8c      	ldr	r2, [pc, #560]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
 8003444:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003446:	e10a      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003448:	4b89      	ldr	r3, [pc, #548]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800344a:	61bb      	str	r3, [r7, #24]
    break;
 800344c:	e107      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800344e:	4b89      	ldr	r3, [pc, #548]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003450:	61bb      	str	r3, [r7, #24]
    break;
 8003452:	e104      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003454:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003456:	61bb      	str	r3, [r7, #24]
    break;
 8003458:	e101      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800345a:	4b84      	ldr	r3, [pc, #528]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800347a:	4b7c      	ldr	r3, [pc, #496]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	08db      	lsrs	r3, r3, #3
 8003480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80da 	beq.w	8003652 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d05a      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x1b2>
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d302      	bcc.n	80034ae <HAL_RCC_GetSysClockFreq+0x106>
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d078      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x1f6>
 80034ac:	e099      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ae:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02d      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034ba:	4b6c      	ldr	r3, [pc, #432]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80034f8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800367c <HAL_RCC_GetSysClockFreq+0x2d4>
 80034fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800350c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003510:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003514:	e087      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003520:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003538:	ed97 6a02 	vldr	s12, [r7, #8]
 800353c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800367c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800354c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003558:	e065      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003564:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003580:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800367c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003598:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800359c:	e043      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003688 <HAL_RCC_GetSysClockFreq+0x2e0>
 80035ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b0:	4b2e      	ldr	r3, [pc, #184]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800367c <HAL_RCC_GetSysClockFreq+0x2d4>
 80035c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e0:	e021      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2dc>
 80035f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003604:	ed97 6a02 	vldr	s12, [r7, #8]
 8003608:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800367c <HAL_RCC_GetSysClockFreq+0x2d4>
 800360c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003624:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	0a5b      	lsrs	r3, r3, #9
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	3301      	adds	r3, #1
 8003632:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800363e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364a:	ee17 3a90 	vmov	r3, s15
 800364e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003650:	e005      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
    break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800365a:	61bb      	str	r3, [r7, #24]
    break;
 800365c:	bf00      	nop
  }

  return sysclockfreq;
 800365e:	69bb      	ldr	r3, [r7, #24]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3724      	adds	r7, #36	; 0x24
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	58024400 	.word	0x58024400
 8003670:	03d09000 	.word	0x03d09000
 8003674:	003d0900 	.word	0x003d0900
 8003678:	007a1200 	.word	0x007a1200
 800367c:	46000000 	.word	0x46000000
 8003680:	4c742400 	.word	0x4c742400
 8003684:	4a742400 	.word	0x4a742400
 8003688:	4af42400 	.word	0x4af42400

0800368c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003692:	f7ff fe89 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_GetHCLKFreq+0x50>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	fa21 f303 	lsr.w	r3, r1, r3
 80036ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_GetHCLKFreq+0x50>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400
 80036e0:	080094f8 	.word	0x080094f8
 80036e4:	24000004 	.word	0x24000004
 80036e8:	24000000 	.word	0x24000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036f0:	f7ff ffcc 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036f4:	4601      	mov	r1, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	58024400 	.word	0x58024400
 8003714:	080094f8 	.word	0x080094f8

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800371c:	f7ff ffb6 	bl	800368c <HAL_RCC_GetHCLKFreq>
 8003720:	4601      	mov	r1, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	58024400 	.word	0x58024400
 8003740:	080094f8 	.word	0x080094f8

08003744 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003750:	2300      	movs	r3, #0
 8003752:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003768:	d013      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d802      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003774:	e01f      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377a:	d013      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800377c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003780:	d01c      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003782:	e018      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4baf      	ldr	r3, [pc, #700]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4aae      	ldr	r2, [pc, #696]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003790:	e015      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f96f 	bl	8004a7c <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037a2:	e00c      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3324      	adds	r3, #36	; 0x24
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fa18 	bl	8004be0 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
      break;
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037c4:	4b9f      	ldr	r3, [pc, #636]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d0:	499c      	ldr	r1, [pc, #624]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	650b      	str	r3, [r1, #80]	; 0x50
 80037d6:	e001      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d03d      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d826      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80037f0:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	0800380d 	.word	0x0800380d
 80037fc:	0800381b 	.word	0x0800381b
 8003800:	0800382d 	.word	0x0800382d
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4b8d      	ldr	r3, [pc, #564]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a8c      	ldr	r2, [pc, #560]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003818:	e015      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f001 f92b 	bl	8004a7c <RCCEx_PLL2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800382a:	e00c      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f9d4 	bl	8004be0 <RCCEx_PLL3_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
      break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384c:	4b7d      	ldr	r3, [pc, #500]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	497a      	ldr	r1, [pc, #488]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800385a:	4313      	orrs	r3, r2
 800385c:	650b      	str	r3, [r1, #80]	; 0x50
 800385e:	e001      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03e      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d01c      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d804      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d00d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003884:	e01e      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003886:	2bc0      	cmp	r3, #192	; 0xc0
 8003888:	d01f      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800388a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388e:	d01e      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003890:	e018      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003892:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	4a6b      	ldr	r2, [pc, #428]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800389e:	e017      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 f8e8 	bl	8004a7c <RCCEx_PLL2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038b0:	e00e      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3324      	adds	r3, #36	; 0x24
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 f991 	bl	8004be0 <RCCEx_PLL3_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038c2:	e005      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	75fb      	strb	r3, [r7, #23]
      break;
 80038c8:	e002      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80038ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038d6:	4b5b      	ldr	r3, [pc, #364]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4958      	ldr	r1, [pc, #352]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	650b      	str	r3, [r1, #80]	; 0x50
 80038e8:	e001      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d044      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003904:	d01f      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d805      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003914:	d00e      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003916:	e01f      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003918:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800391c:	d01f      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800391e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003922:	d01e      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003924:	e018      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	4a46      	ldr	r2, [pc, #280]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800392c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003932:	e017      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f89e 	bl	8004a7c <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003944:	e00e      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3324      	adds	r3, #36	; 0x24
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f947 	bl	8004be0 <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003956:	e005      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	75fb      	strb	r3, [r7, #23]
      break;
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003978:	4932      	ldr	r1, [pc, #200]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800397a:	4313      	orrs	r3, r2
 800397c:	658b      	str	r3, [r1, #88]	; 0x58
 800397e:	e001      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398c:	2b00      	cmp	r3, #0
 800398e:	d044      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800399a:	d01f      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800399c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a0:	d805      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80039a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039aa:	d00e      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039ac:	e01f      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80039ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b2:	d01f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b8:	d01e      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039ba:	e018      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039c8:	e017      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f853 	bl	8004a7c <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039da:	e00e      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f8fc 	bl	8004be0 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039ec:	e005      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
      break;
 80039f2:	e002      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80039f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a0e:	490d      	ldr	r1, [pc, #52]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	658b      	str	r3, [r1, #88]	; 0x58
 8003a14:	e001      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d035      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d00c      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d802      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01b      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003a36:	e017      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d00c      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d018      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003a40:	e012      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a42:	bf00      	nop
 8003a44:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4baf      	ldr	r3, [pc, #700]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4aae      	ldr	r2, [pc, #696]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a54:	e00e      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 f80d 	bl	8004a7c <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a66:	e005      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6c:	e002      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a7a:	4ba3      	ldr	r3, [pc, #652]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a86:	49a0      	ldr	r1, [pc, #640]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a8c:	e001      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d042      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aac:	d805      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003ab8:	e01f      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003aba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003abe:	d01f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ac4:	d01e      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003ac6:	e018      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac8:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	4a8e      	ldr	r2, [pc, #568]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ad4:	e017      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 ffcd 	bl	8004a7c <RCCEx_PLL2_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ae6:	e00e      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f876 	bl	8004be0 <RCCEx_PLL3_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003af8:	e005      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b0c:	4b7e      	ldr	r3, [pc, #504]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	497b      	ldr	r1, [pc, #492]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d042      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b38:	d01b      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b3e:	d805      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d022      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b4a:	e01b      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003b4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b50:	d01d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b56:	d01c      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5c:	d01b      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003b5e:	e011      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ff88 	bl	8004a7c <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b70:	e012      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	; 0x24
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f831 	bl	8004be0 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b82:	e009      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e004      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b9e:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003baa:	4957      	ldr	r1, [pc, #348]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	650b      	str	r3, [r1, #80]	; 0x50
 8003bb0:	e001      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d044      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bcc:	d01b      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd2:	d805      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d022      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003bde:	e01b      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d01d      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bea:	d01c      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bf0:	d01b      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003bf2:	e011      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 ff3e 	bl	8004a7c <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c04:	e012      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3324      	adds	r3, #36	; 0x24
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ffe7 	bl	8004be0 <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c16:	e009      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e004      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c40:	4931      	ldr	r1, [pc, #196]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	658b      	str	r3, [r1, #88]	; 0x58
 8003c46:	e001      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02d      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c60:	d005      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c66:	d009      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c6c:	e00f      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c7a:	e00c      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fefa 	bl	8004a7c <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c8c:	e003      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
      break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	4917      	ldr	r1, [pc, #92]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	650b      	str	r3, [r1, #80]	; 0x50
 8003cae:	e001      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d035      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d81b      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d0d 	.word	0x08003d0d
 8003cd4:	08003ce1 	.word	0x08003ce1
 8003cd8:	08003cef 	.word	0x08003cef
 8003cdc:	08003d0d 	.word	0x08003d0d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fec1 	bl	8004a7c <RCCEx_PLL2_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cfe:	e006      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
      break;
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003d06:	bf00      	nop
 8003d08:	58024400 	.word	0x58024400
      break;
 8003d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d14:	4bba      	ldr	r3, [pc, #744]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	f023 0203 	bic.w	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	49b7      	ldr	r1, [pc, #732]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d26:	e001      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8086 	beq.w	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3a:	4bb2      	ldr	r3, [pc, #712]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4ab1      	ldr	r2, [pc, #708]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d46:	f7fd f849 	bl	8000ddc <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4c:	e009      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fd f845 	bl	8000ddc <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	75fb      	strb	r3, [r7, #23]
        break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d62:	4ba8      	ldr	r3, [pc, #672]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ef      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d166      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d74:	4ba2      	ldr	r3, [pc, #648]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d7e:	4053      	eors	r3, r2
 8003d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d88:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d90:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d92:	4b9b      	ldr	r3, [pc, #620]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a9a      	ldr	r2, [pc, #616]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9e:	4b98      	ldr	r3, [pc, #608]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a97      	ldr	r2, [pc, #604]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003daa:	4a95      	ldr	r2, [pc, #596]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	d115      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd f80e 	bl	8000ddc <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd f80a 	bl	8000ddc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d902      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	75fb      	strb	r3, [r7, #23]
            break;
 8003dda:	e005      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ed      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d126      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003dfe:	4b80      	ldr	r3, [pc, #512]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e0c:	0919      	lsrs	r1, r3, #4
 8003e0e:	4b7e      	ldr	r3, [pc, #504]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e10:	400b      	ands	r3, r1
 8003e12:	497b      	ldr	r1, [pc, #492]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	610b      	str	r3, [r1, #16]
 8003e18:	e005      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003e1a:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	4a78      	ldr	r2, [pc, #480]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e24:	6113      	str	r3, [r2, #16]
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e34:	4972      	ldr	r1, [pc, #456]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	670b      	str	r3, [r1, #112]	; 0x70
 8003e3a:	e004      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	75bb      	strb	r3, [r7, #22]
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d07d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e56:	2b28      	cmp	r3, #40	; 0x28
 8003e58:	d866      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003f2f 	.word	0x08003f2f
 8003e64:	08003f29 	.word	0x08003f29
 8003e68:	08003f29 	.word	0x08003f29
 8003e6c:	08003f29 	.word	0x08003f29
 8003e70:	08003f29 	.word	0x08003f29
 8003e74:	08003f29 	.word	0x08003f29
 8003e78:	08003f29 	.word	0x08003f29
 8003e7c:	08003f29 	.word	0x08003f29
 8003e80:	08003f05 	.word	0x08003f05
 8003e84:	08003f29 	.word	0x08003f29
 8003e88:	08003f29 	.word	0x08003f29
 8003e8c:	08003f29 	.word	0x08003f29
 8003e90:	08003f29 	.word	0x08003f29
 8003e94:	08003f29 	.word	0x08003f29
 8003e98:	08003f29 	.word	0x08003f29
 8003e9c:	08003f29 	.word	0x08003f29
 8003ea0:	08003f17 	.word	0x08003f17
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	08003f29 	.word	0x08003f29
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f29 	.word	0x08003f29
 8003eb8:	08003f29 	.word	0x08003f29
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003f2f 	.word	0x08003f2f
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f29 	.word	0x08003f29
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f2f 	.word	0x08003f2f
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f29 	.word	0x08003f29
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f2f 	.word	0x08003f2f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fdb6 	bl	8004a7c <RCCEx_PLL2_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f14:	e00c      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3324      	adds	r3, #36	; 0x24
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fe5f 	bl	8004be0 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f36:	4b32      	ldr	r3, [pc, #200]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f42:	492f      	ldr	r1, [pc, #188]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	654b      	str	r3, [r1, #84]	; 0x54
 8003f48:	e001      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d037      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d820      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003fab 	.word	0x08003fab
 8003f6c:	08003f81 	.word	0x08003f81
 8003f70:	08003f93 	.word	0x08003f93
 8003f74:	08003fab 	.word	0x08003fab
 8003f78:	08003fab 	.word	0x08003fab
 8003f7c:	08003fab 	.word	0x08003fab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fd78 	bl	8004a7c <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3324      	adds	r3, #36	; 0x24
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fe21 	bl	8004be0 <RCCEx_PLL3_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fa2:	e003      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbe:	4910      	ldr	r1, [pc, #64]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	654b      	str	r3, [r1, #84]	; 0x54
 8003fc4:	e001      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d040      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d827      	bhi.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	08004037 	.word	0x08004037
 8003fec:	0800400d 	.word	0x0800400d
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004037 	.word	0x08004037
 8003ff8:	08004037 	.word	0x08004037
 8003ffc:	08004037 	.word	0x08004037
 8004000:	58024400 	.word	0x58024400
 8004004:	58024800 	.word	0x58024800
 8004008:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fd32 	bl	8004a7c <RCCEx_PLL2_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800401c:	e00c      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3324      	adds	r3, #36	; 0x24
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fddb 	bl	8004be0 <RCCEx_PLL3_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800402e:	e003      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
      break;
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800403e:	4bb2      	ldr	r3, [pc, #712]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f023 0207 	bic.w	r2, r3, #7
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	49ae      	ldr	r1, [pc, #696]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	658b      	str	r3, [r1, #88]	; 0x58
 8004052:	e001      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d044      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406e:	d01b      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004074:	d805      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d022      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800407a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004080:	e01b      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d01d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800408c:	d01c      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800408e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004092:	d01b      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004094:	e011      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fced 	bl	8004a7c <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040a6:	e012      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fd96 	bl	8004be0 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040b8:	e009      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	e006      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040c0:	bf00      	nop
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d4:	4b8c      	ldr	r3, [pc, #560]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e2:	4989      	ldr	r1, [pc, #548]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	654b      	str	r3, [r1, #84]	; 0x54
 80040e8:	e001      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004104:	d01b      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410a:	d805      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d022      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004116:	e01b      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411c:	d01d      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800411e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004122:	d01c      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004128:	d01b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800412a:	e011      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fca2 	bl	8004a7c <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800413c:	e012      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3324      	adds	r3, #36	; 0x24
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fd4b 	bl	8004be0 <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800414e:	e009      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
      break;
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004156:	bf00      	nop
 8004158:	e004      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800415a:	bf00      	nop
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800416a:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004178:	4963      	ldr	r1, [pc, #396]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	658b      	str	r3, [r1, #88]	; 0x58
 800417e:	e001      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d044      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419a:	d01b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800419c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a0:	d805      	bhi.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d022      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041ac:	e01b      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80041ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b2:	d01d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041b8:	d01c      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80041ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041be:	d01b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80041c0:	e011      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fc57 	bl	8004a7c <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041d2:	e012      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3324      	adds	r3, #36	; 0x24
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fd00 	bl	8004be0 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041e4:	e009      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	e006      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041ec:	bf00      	nop
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041f0:	bf00      	nop
 80041f2:	e002      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420e:	493e      	ldr	r1, [pc, #248]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	658b      	str	r3, [r1, #88]	; 0x58
 8004214:	e001      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d10a      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fcd1 	bl	8004be0 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004248:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004256:	492c      	ldr	r1, [pc, #176]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004272:	d10a      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	2102      	movs	r1, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fcb0 	bl	8004be0 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004298:	491b      	ldr	r1, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d032      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d00d      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80042b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ba:	d016      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fbd8 	bl	8004a7c <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042d0:	e00c      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3324      	adds	r3, #36	; 0x24
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fc81 	bl	8004be0 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042e2:	e003      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
      break;
 80042e8:	e000      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80042ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004300:	4901      	ldr	r1, [pc, #4]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	658b      	str	r3, [r1, #88]	; 0x58
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004308:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004326:	d00c      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432c:	d015      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d10f      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004334:	4b79      	ldr	r3, [pc, #484]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	4a78      	ldr	r2, [pc, #480]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004340:	e00c      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fc49 	bl	8004be0 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
      break;
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800435a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004362:	4b6e      	ldr	r3, [pc, #440]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	496a      	ldr	r1, [pc, #424]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	654b      	str	r3, [r1, #84]	; 0x54
 8004376:	e001      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d029      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d007      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004396:	e00f      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004398:	4b60      	ldr	r3, [pc, #384]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a5f      	ldr	r2, [pc, #380]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043a4:	e00b      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2102      	movs	r1, #2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fb65 	bl	8004a7c <RCCEx_PLL2_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043b6:	e002      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	75fb      	strb	r3, [r7, #23]
      break;
 80043bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	4952      	ldr	r1, [pc, #328]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043d6:	e001      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3324      	adds	r3, #36	; 0x24
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fbf6 	bl	8004be0 <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02f      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004412:	d00c      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004418:	d802      	bhi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d011      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800441e:	e00d      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d00f      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442a:	d00e      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800443a:	e007      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	75fb      	strb	r3, [r7, #23]
      break;
 8004440:	e004      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004442:	bf00      	nop
 8004444:	e002      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800444a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445e:	492f      	ldr	r1, [pc, #188]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	654b      	str	r3, [r1, #84]	; 0x54
 8004464:	e001      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004476:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4926      	ldr	r1, [pc, #152]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004484:	4313      	orrs	r3, r2
 8004486:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044a2:	491e      	ldr	r1, [pc, #120]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c0:	4916      	ldr	r1, [pc, #88]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	4a11      	ldr	r2, [pc, #68]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044dc:	6113      	str	r3, [r2, #16]
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044e8:	490c      	ldr	r1, [pc, #48]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da08      	bge.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	4906      	ldr	r1, [pc, #24]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004508:	7dbb      	ldrb	r3, [r7, #22]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	58024400 	.word	0x58024400

08004520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004524:	f7ff f8b2 	bl	800368c <HAL_RCC_GetHCLKFreq>
 8004528:	4601      	mov	r1, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024400 	.word	0x58024400
 8004548:	080094f8 	.word	0x080094f8

0800454c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004554:	4b9d      	ldr	r3, [pc, #628]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800455e:	4b9b      	ldr	r3, [pc, #620]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	0b1b      	lsrs	r3, r3, #12
 8004564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800456a:	4b98      	ldr	r3, [pc, #608]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004576:	4b95      	ldr	r3, [pc, #596]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	08db      	lsrs	r3, r3, #3
 800457c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 810a 	beq.w	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d05a      	beq.n	8004656 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d302      	bcc.n	80045aa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d078      	beq.n	800469a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80045a8:	e099      	b.n	80046de <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045aa:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d02d      	beq.n	8004612 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	4a83      	ldr	r2, [pc, #524]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80045c2:	fa22 f303 	lsr.w	r3, r2, r3
 80045c6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e0:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80045f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004610:	e087      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004624:	4b69      	ldr	r3, [pc, #420]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004634:	ed97 6a03 	vldr	s12, [r7, #12]
 8004638:	eddf 5a66 	vldr	s11, [pc, #408]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800463c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004654:	e065      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004660:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004668:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004678:	ed97 6a03 	vldr	s12, [r7, #12]
 800467c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004694:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004698:	e043      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80046a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046dc:	e021      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004700:	ed97 6a03 	vldr	s12, [r7, #12]
 8004704:	eddf 5a33 	vldr	s11, [pc, #204]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004720:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004722:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	0a5b      	lsrs	r3, r3, #9
 8004728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800473c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004748:	ee17 2a90 	vmov	r2, s15
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004750:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800476a:	edd7 6a07 	vldr	s13, [r7, #28]
 800476e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004776:	ee17 2a90 	vmov	r2, s15
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	0e1b      	lsrs	r3, r3, #24
 8004784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004798:	edd7 6a07 	vldr	s13, [r7, #28]
 800479c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a4:	ee17 2a90 	vmov	r2, s15
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	3724      	adds	r7, #36	; 0x24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	58024400 	.word	0x58024400
 80047d0:	03d09000 	.word	0x03d09000
 80047d4:	46000000 	.word	0x46000000
 80047d8:	4c742400 	.word	0x4c742400
 80047dc:	4a742400 	.word	0x4a742400
 80047e0:	4af42400 	.word	0x4af42400

080047e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ec:	4b9d      	ldr	r3, [pc, #628]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047f6:	4b9b      	ldr	r3, [pc, #620]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	0d1b      	lsrs	r3, r3, #20
 80047fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004800:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004802:	4b98      	ldr	r3, [pc, #608]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800480e:	4b95      	ldr	r3, [pc, #596]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 810a 	beq.w	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d05a      	beq.n	80048ee <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004838:	2b01      	cmp	r3, #1
 800483a:	d302      	bcc.n	8004842 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800483c:	2b02      	cmp	r3, #2
 800483e:	d078      	beq.n	8004932 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004840:	e099      	b.n	8004976 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004842:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02d      	beq.n	80048aa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800484e:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	4a83      	ldr	r2, [pc, #524]	; (8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800485a:	fa22 f303 	lsr.w	r3, r2, r3
 800485e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004878:	4b7a      	ldr	r3, [pc, #488]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004888:	ed97 6a03 	vldr	s12, [r7, #12]
 800488c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048a8:	e087      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80048b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80048d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ec:	e065      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80048fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004900:	4b58      	ldr	r3, [pc, #352]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004910:	ed97 6a03 	vldr	s12, [r7, #12]
 8004914:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004930:	e043      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004944:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004954:	ed97 6a03 	vldr	s12, [r7, #12]
 8004958:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800495c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004974:	e021      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004998:	ed97 6a03 	vldr	s12, [r7, #12]
 800499c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049ba:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	0a5b      	lsrs	r3, r3, #9
 80049c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e0:	ee17 2a90 	vmov	r2, s15
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0e:	ee17 2a90 	vmov	r2, s15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	0e1b      	lsrs	r3, r3, #24
 8004a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3c:	ee17 2a90 	vmov	r2, s15
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	3724      	adds	r7, #36	; 0x24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	58024400 	.word	0x58024400
 8004a68:	03d09000 	.word	0x03d09000
 8004a6c:	46000000 	.word	0x46000000
 8004a70:	4c742400 	.word	0x4c742400
 8004a74:	4a742400 	.word	0x4a742400
 8004a78:	4af42400 	.word	0x4af42400

08004a7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a8a:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d101      	bne.n	8004a9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e099      	b.n	8004bce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a9a:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a4e      	ldr	r2, [pc, #312]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa6:	f7fc f999 	bl	8000ddc <HAL_GetTick>
 8004aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aae:	f7fc f995 	bl	8000ddc <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e086      	b.n	8004bce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ac0:	4b45      	ldr	r3, [pc, #276]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004acc:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	031b      	lsls	r3, r3, #12
 8004ada:	493f      	ldr	r1, [pc, #252]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	628b      	str	r3, [r1, #40]	; 0x28
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	025b      	lsls	r3, r3, #9
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b10:	4931      	ldr	r1, [pc, #196]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b16:	4b30      	ldr	r3, [pc, #192]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	492d      	ldr	r1, [pc, #180]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	f023 0220 	bic.w	r2, r3, #32
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4928      	ldr	r1, [pc, #160]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b3a:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4a:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <RCCEx_PLL2_Config+0x160>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	69d2      	ldr	r2, [r2, #28]
 8004b52:	00d2      	lsls	r2, r2, #3
 8004b54:	4920      	ldr	r1, [pc, #128]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b5a:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	f043 0310 	orr.w	r3, r3, #16
 8004b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b78:	e00f      	b.n	8004b9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d106      	bne.n	8004b8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b8c:	e005      	b.n	8004b9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba6:	f7fc f919 	bl	8000ddc <HAL_GetTick>
 8004baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bac:	e008      	b.n	8004bc0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bae:	f7fc f915 	bl	8000ddc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e006      	b.n	8004bce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	ffff0007 	.word	0xffff0007

08004be0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bee:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d101      	bne.n	8004bfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e099      	b.n	8004d32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bfe:	4b4f      	ldr	r3, [pc, #316]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a4e      	ldr	r2, [pc, #312]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0a:	f7fc f8e7 	bl	8000ddc <HAL_GetTick>
 8004c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c12:	f7fc f8e3 	bl	8000ddc <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e086      	b.n	8004d32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c24:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f0      	bne.n	8004c12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c30:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	051b      	lsls	r3, r3, #20
 8004c3e:	493f      	ldr	r1, [pc, #252]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	628b      	str	r3, [r1, #40]	; 0x28
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	025b      	lsls	r3, r3, #9
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c74:	4931      	ldr	r1, [pc, #196]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c7a:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	492d      	ldr	r1, [pc, #180]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c8c:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4928      	ldr	r1, [pc, #160]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c9e:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <RCCEx_PLL3_Config+0x160>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	69d2      	ldr	r2, [r2, #28]
 8004cb6:	00d2      	lsls	r2, r2, #3
 8004cb8:	4920      	ldr	r1, [pc, #128]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cdc:	e00f      	b.n	8004cfe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d106      	bne.n	8004cf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf0:	e005      	b.n	8004cfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0a:	f7fc f867 	bl	8000ddc <HAL_GetTick>
 8004d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d10:	e008      	b.n	8004d24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d12:	f7fc f863 	bl	8000ddc <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <RCCEx_PLL3_Config+0x15c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	ffff0007 	.word	0xffff0007

08004d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fb fe2f 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2224      	movs	r2, #36	; 0x24
 8004d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f82c 	bl	8004de4 <UART_SetConfig>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e022      	b.n	8004ddc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fdd0 	bl	8005944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fe57 	bl	8005a88 <UART_CheckIdleState>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004de8:	b08e      	sub	sp, #56	; 0x38
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e12:	4313      	orrs	r3, r2
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4bc1      	ldr	r3, [pc, #772]	; (8005124 <UART_SetConfig+0x340>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4ab7      	ldr	r2, [pc, #732]	; (8005128 <UART_SetConfig+0x344>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e56:	4313      	orrs	r3, r2
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	4bb2      	ldr	r3, [pc, #712]	; (800512c <UART_SetConfig+0x348>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f023 010f 	bic.w	r1, r3, #15
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4aa9      	ldr	r2, [pc, #676]	; (8005130 <UART_SetConfig+0x34c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d177      	bne.n	8004f7e <UART_SetConfig+0x19a>
 8004e8e:	4ba9      	ldr	r3, [pc, #676]	; (8005134 <UART_SetConfig+0x350>)
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e96:	2b28      	cmp	r3, #40	; 0x28
 8004e98:	d86c      	bhi.n	8004f74 <UART_SetConfig+0x190>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0xbc>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004f45 	.word	0x08004f45
 8004ea4:	08004f75 	.word	0x08004f75
 8004ea8:	08004f75 	.word	0x08004f75
 8004eac:	08004f75 	.word	0x08004f75
 8004eb0:	08004f75 	.word	0x08004f75
 8004eb4:	08004f75 	.word	0x08004f75
 8004eb8:	08004f75 	.word	0x08004f75
 8004ebc:	08004f75 	.word	0x08004f75
 8004ec0:	08004f4d 	.word	0x08004f4d
 8004ec4:	08004f75 	.word	0x08004f75
 8004ec8:	08004f75 	.word	0x08004f75
 8004ecc:	08004f75 	.word	0x08004f75
 8004ed0:	08004f75 	.word	0x08004f75
 8004ed4:	08004f75 	.word	0x08004f75
 8004ed8:	08004f75 	.word	0x08004f75
 8004edc:	08004f75 	.word	0x08004f75
 8004ee0:	08004f55 	.word	0x08004f55
 8004ee4:	08004f75 	.word	0x08004f75
 8004ee8:	08004f75 	.word	0x08004f75
 8004eec:	08004f75 	.word	0x08004f75
 8004ef0:	08004f75 	.word	0x08004f75
 8004ef4:	08004f75 	.word	0x08004f75
 8004ef8:	08004f75 	.word	0x08004f75
 8004efc:	08004f75 	.word	0x08004f75
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004f75 	.word	0x08004f75
 8004f08:	08004f75 	.word	0x08004f75
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08004f75 	.word	0x08004f75
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f65 	.word	0x08004f65
 8004f24:	08004f75 	.word	0x08004f75
 8004f28:	08004f75 	.word	0x08004f75
 8004f2c:	08004f75 	.word	0x08004f75
 8004f30:	08004f75 	.word	0x08004f75
 8004f34:	08004f75 	.word	0x08004f75
 8004f38:	08004f75 	.word	0x08004f75
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4a:	e233      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f52:	e22f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5a:	e22b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f62:	e227      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f64:	2320      	movs	r3, #32
 8004f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6a:	e223      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f72:	e21f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f7a:	bf00      	nop
 8004f7c:	e21a      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a6d      	ldr	r2, [pc, #436]	; (8005138 <UART_SetConfig+0x354>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d132      	bne.n	8004fee <UART_SetConfig+0x20a>
 8004f88:	4b6a      	ldr	r3, [pc, #424]	; (8005134 <UART_SetConfig+0x350>)
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d827      	bhi.n	8004fe4 <UART_SetConfig+0x200>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x1b8>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fc5 	.word	0x08004fc5
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	e1fb      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc2:	e1f7      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fca:	e1f3      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e1ef      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e1eb      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e1e7      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fea:	bf00      	nop
 8004fec:	e1e2      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a52      	ldr	r2, [pc, #328]	; (800513c <UART_SetConfig+0x358>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d132      	bne.n	800505e <UART_SetConfig+0x27a>
 8004ff8:	4b4e      	ldr	r3, [pc, #312]	; (8005134 <UART_SetConfig+0x350>)
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	2b05      	cmp	r3, #5
 8005002:	d827      	bhi.n	8005054 <UART_SetConfig+0x270>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x228>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005025 	.word	0x08005025
 8005010:	0800502d 	.word	0x0800502d
 8005014:	08005035 	.word	0x08005035
 8005018:	0800503d 	.word	0x0800503d
 800501c:	08005045 	.word	0x08005045
 8005020:	0800504d 	.word	0x0800504d
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502a:	e1c3      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005032:	e1bf      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503a:	e1bb      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005042:	e1b7      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005044:	2320      	movs	r3, #32
 8005046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504a:	e1b3      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800504c:	2340      	movs	r3, #64	; 0x40
 800504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005052:	e1af      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505a:	bf00      	nop
 800505c:	e1aa      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a37      	ldr	r2, [pc, #220]	; (8005140 <UART_SetConfig+0x35c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d132      	bne.n	80050ce <UART_SetConfig+0x2ea>
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <UART_SetConfig+0x350>)
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	2b05      	cmp	r3, #5
 8005072:	d827      	bhi.n	80050c4 <UART_SetConfig+0x2e0>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x298>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	08005095 	.word	0x08005095
 8005080:	0800509d 	.word	0x0800509d
 8005084:	080050a5 	.word	0x080050a5
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	2300      	movs	r3, #0
 8005096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509a:	e18b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a2:	e187      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050aa:	e183      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b2:	e17f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80050b4:	2320      	movs	r3, #32
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e17b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e177      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	bf00      	nop
 80050cc:	e172      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <UART_SetConfig+0x360>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d144      	bne.n	8005162 <UART_SetConfig+0x37e>
 80050d8:	4b16      	ldr	r3, [pc, #88]	; (8005134 <UART_SetConfig+0x350>)
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	d839      	bhi.n	8005158 <UART_SetConfig+0x374>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0x308>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005105 	.word	0x08005105
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005115 	.word	0x08005115
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005149 	.word	0x08005149
 8005100:	08005151 	.word	0x08005151
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510a:	e153      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005112:	e14f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511a:	e14b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005122:	e147      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005124:	cfff69f3 	.word	0xcfff69f3
 8005128:	58000c00 	.word	0x58000c00
 800512c:	11fff4ff 	.word	0x11fff4ff
 8005130:	40011000 	.word	0x40011000
 8005134:	58024400 	.word	0x58024400
 8005138:	40004400 	.word	0x40004400
 800513c:	40004800 	.word	0x40004800
 8005140:	40004c00 	.word	0x40004c00
 8005144:	40005000 	.word	0x40005000
 8005148:	2320      	movs	r3, #32
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e131      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e12d      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515e:	bf00      	nop
 8005160:	e128      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4ab6      	ldr	r2, [pc, #728]	; (8005440 <UART_SetConfig+0x65c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d178      	bne.n	800525e <UART_SetConfig+0x47a>
 800516c:	4bb5      	ldr	r3, [pc, #724]	; (8005444 <UART_SetConfig+0x660>)
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005174:	2b28      	cmp	r3, #40	; 0x28
 8005176:	d86d      	bhi.n	8005254 <UART_SetConfig+0x470>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x39c>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005225 	.word	0x08005225
 8005184:	08005255 	.word	0x08005255
 8005188:	08005255 	.word	0x08005255
 800518c:	08005255 	.word	0x08005255
 8005190:	08005255 	.word	0x08005255
 8005194:	08005255 	.word	0x08005255
 8005198:	08005255 	.word	0x08005255
 800519c:	08005255 	.word	0x08005255
 80051a0:	0800522d 	.word	0x0800522d
 80051a4:	08005255 	.word	0x08005255
 80051a8:	08005255 	.word	0x08005255
 80051ac:	08005255 	.word	0x08005255
 80051b0:	08005255 	.word	0x08005255
 80051b4:	08005255 	.word	0x08005255
 80051b8:	08005255 	.word	0x08005255
 80051bc:	08005255 	.word	0x08005255
 80051c0:	08005235 	.word	0x08005235
 80051c4:	08005255 	.word	0x08005255
 80051c8:	08005255 	.word	0x08005255
 80051cc:	08005255 	.word	0x08005255
 80051d0:	08005255 	.word	0x08005255
 80051d4:	08005255 	.word	0x08005255
 80051d8:	08005255 	.word	0x08005255
 80051dc:	08005255 	.word	0x08005255
 80051e0:	0800523d 	.word	0x0800523d
 80051e4:	08005255 	.word	0x08005255
 80051e8:	08005255 	.word	0x08005255
 80051ec:	08005255 	.word	0x08005255
 80051f0:	08005255 	.word	0x08005255
 80051f4:	08005255 	.word	0x08005255
 80051f8:	08005255 	.word	0x08005255
 80051fc:	08005255 	.word	0x08005255
 8005200:	08005245 	.word	0x08005245
 8005204:	08005255 	.word	0x08005255
 8005208:	08005255 	.word	0x08005255
 800520c:	08005255 	.word	0x08005255
 8005210:	08005255 	.word	0x08005255
 8005214:	08005255 	.word	0x08005255
 8005218:	08005255 	.word	0x08005255
 800521c:	08005255 	.word	0x08005255
 8005220:	0800524d 	.word	0x0800524d
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522a:	e0c3      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005232:	e0bf      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523a:	e0bb      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005242:	e0b7      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005244:	2320      	movs	r3, #32
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	e0b3      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005252:	e0af      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525a:	bf00      	nop
 800525c:	e0aa      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a79      	ldr	r2, [pc, #484]	; (8005448 <UART_SetConfig+0x664>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d132      	bne.n	80052ce <UART_SetConfig+0x4ea>
 8005268:	4b76      	ldr	r3, [pc, #472]	; (8005444 <UART_SetConfig+0x660>)
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	2b05      	cmp	r3, #5
 8005272:	d827      	bhi.n	80052c4 <UART_SetConfig+0x4e0>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x498>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529a:	e08b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a2:	e087      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052aa:	e083      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e07f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e07b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e077      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	bf00      	nop
 80052cc:	e072      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a5e      	ldr	r2, [pc, #376]	; (800544c <UART_SetConfig+0x668>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d132      	bne.n	800533e <UART_SetConfig+0x55a>
 80052d8:	4b5a      	ldr	r3, [pc, #360]	; (8005444 <UART_SetConfig+0x660>)
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	d827      	bhi.n	8005334 <UART_SetConfig+0x550>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0x508>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005305 	.word	0x08005305
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	08005315 	.word	0x08005315
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800532d 	.word	0x0800532d
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530a:	e053      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005312:	e04f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531a:	e04b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005322:	e047      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005324:	2320      	movs	r3, #32
 8005326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532a:	e043      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800532c:	2340      	movs	r3, #64	; 0x40
 800532e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005332:	e03f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533a:	bf00      	nop
 800533c:	e03a      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a43      	ldr	r2, [pc, #268]	; (8005450 <UART_SetConfig+0x66c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d132      	bne.n	80053ae <UART_SetConfig+0x5ca>
 8005348:	4b3e      	ldr	r3, [pc, #248]	; (8005444 <UART_SetConfig+0x660>)
 800534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	2b05      	cmp	r3, #5
 8005352:	d827      	bhi.n	80053a4 <UART_SetConfig+0x5c0>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0x578>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005375 	.word	0x08005375
 8005360:	0800537d 	.word	0x0800537d
 8005364:	08005385 	.word	0x08005385
 8005368:	0800538d 	.word	0x0800538d
 800536c:	08005395 	.word	0x08005395
 8005370:	0800539d 	.word	0x0800539d
 8005374:	2302      	movs	r3, #2
 8005376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537a:	e01b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005382:	e017      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e013      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e00f      	b.n	80053b4 <UART_SetConfig+0x5d0>
 8005394:	2320      	movs	r3, #32
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e00b      	b.n	80053b4 <UART_SetConfig+0x5d0>
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e007      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <UART_SetConfig+0x5d0>
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a25      	ldr	r2, [pc, #148]	; (8005450 <UART_SetConfig+0x66c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	f040 80b8 	bne.w	8005530 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d019      	beq.n	80053fc <UART_SetConfig+0x618>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	dc04      	bgt.n	80053d6 <UART_SetConfig+0x5f2>
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d009      	beq.n	80053e4 <UART_SetConfig+0x600>
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d00b      	beq.n	80053ec <UART_SetConfig+0x608>
 80053d4:	e042      	b.n	800545c <UART_SetConfig+0x678>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d02b      	beq.n	8005432 <UART_SetConfig+0x64e>
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d02c      	beq.n	8005438 <UART_SetConfig+0x654>
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d014      	beq.n	800540c <UART_SetConfig+0x628>
 80053e2:	e03b      	b.n	800545c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053e4:	f7ff f89c 	bl	8004520 <HAL_RCCEx_GetD3PCLK1Freq>
 80053e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80053ea:	e03d      	b.n	8005468 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff f8ab 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053fa:	e035      	b.n	8005468 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053fc:	f107 0308 	add.w	r3, r7, #8
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff f9ef 	bl	80047e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800540a:	e02d      	b.n	8005468 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <UART_SetConfig+0x660>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <UART_SetConfig+0x660>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	4a0c      	ldr	r2, [pc, #48]	; (8005454 <UART_SetConfig+0x670>)
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800542a:	e01d      	b.n	8005468 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <UART_SetConfig+0x670>)
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005430:	e01a      	b.n	8005468 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <UART_SetConfig+0x674>)
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005436:	e017      	b.n	8005468 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800543e:	e013      	b.n	8005468 <UART_SetConfig+0x684>
 8005440:	40011400 	.word	0x40011400
 8005444:	58024400 	.word	0x58024400
 8005448:	40007800 	.word	0x40007800
 800544c:	40007c00 	.word	0x40007c00
 8005450:	58000c00 	.word	0x58000c00
 8005454:	03d09000 	.word	0x03d09000
 8005458:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005466:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 824d 	beq.w	800590a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	4aad      	ldr	r2, [pc, #692]	; (800572c <UART_SetConfig+0x948>)
 8005476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547a:	461a      	mov	r2, r3
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005482:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	429a      	cmp	r2, r3
 8005492:	d305      	bcc.n	80054a0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80054a6:	e230      	b.n	800590a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	4618      	mov	r0, r3
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	4a9d      	ldr	r2, [pc, #628]	; (800572c <UART_SetConfig+0x948>)
 80054b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f04f 0400 	mov.w	r4, #0
 80054c0:	461a      	mov	r2, r3
 80054c2:	4623      	mov	r3, r4
 80054c4:	f7fa ff08 	bl	80002d8 <__aeabi_uldivmod>
 80054c8:	4603      	mov	r3, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4619      	mov	r1, r3
 80054ce:	4622      	mov	r2, r4
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	f04f 0400 	mov.w	r4, #0
 80054d8:	0214      	lsls	r4, r2, #8
 80054da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80054de:	020b      	lsls	r3, r1, #8
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6852      	ldr	r2, [r2, #4]
 80054e4:	0852      	lsrs	r2, r2, #1
 80054e6:	4611      	mov	r1, r2
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	eb13 0b01 	adds.w	fp, r3, r1
 80054f0:	eb44 0c02 	adc.w	ip, r4, r2
 80054f4:	4658      	mov	r0, fp
 80054f6:	4661      	mov	r1, ip
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f04f 0400 	mov.w	r4, #0
 8005500:	461a      	mov	r2, r3
 8005502:	4623      	mov	r3, r4
 8005504:	f7fa fee8 	bl	80002d8 <__aeabi_uldivmod>
 8005508:	4603      	mov	r3, r0
 800550a:	460c      	mov	r4, r1
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005514:	d308      	bcc.n	8005528 <UART_SetConfig+0x744>
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551c:	d204      	bcs.n	8005528 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	e1f0      	b.n	800590a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800552e:	e1ec      	b.n	800590a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	f040 8100 	bne.w	800573c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800553c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	f200 80b7 	bhi.w	80056b4 <UART_SetConfig+0x8d0>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x768>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005651 	.word	0x08005651
 8005550:	08005659 	.word	0x08005659
 8005554:	080056b5 	.word	0x080056b5
 8005558:	080056b5 	.word	0x080056b5
 800555c:	08005661 	.word	0x08005661
 8005560:	080056b5 	.word	0x080056b5
 8005564:	080056b5 	.word	0x080056b5
 8005568:	080056b5 	.word	0x080056b5
 800556c:	08005671 	.word	0x08005671
 8005570:	080056b5 	.word	0x080056b5
 8005574:	080056b5 	.word	0x080056b5
 8005578:	080056b5 	.word	0x080056b5
 800557c:	080056b5 	.word	0x080056b5
 8005580:	080056b5 	.word	0x080056b5
 8005584:	080056b5 	.word	0x080056b5
 8005588:	080056b5 	.word	0x080056b5
 800558c:	08005681 	.word	0x08005681
 8005590:	080056b5 	.word	0x080056b5
 8005594:	080056b5 	.word	0x080056b5
 8005598:	080056b5 	.word	0x080056b5
 800559c:	080056b5 	.word	0x080056b5
 80055a0:	080056b5 	.word	0x080056b5
 80055a4:	080056b5 	.word	0x080056b5
 80055a8:	080056b5 	.word	0x080056b5
 80055ac:	080056b5 	.word	0x080056b5
 80055b0:	080056b5 	.word	0x080056b5
 80055b4:	080056b5 	.word	0x080056b5
 80055b8:	080056b5 	.word	0x080056b5
 80055bc:	080056b5 	.word	0x080056b5
 80055c0:	080056b5 	.word	0x080056b5
 80055c4:	080056b5 	.word	0x080056b5
 80055c8:	080056b5 	.word	0x080056b5
 80055cc:	080056a7 	.word	0x080056a7
 80055d0:	080056b5 	.word	0x080056b5
 80055d4:	080056b5 	.word	0x080056b5
 80055d8:	080056b5 	.word	0x080056b5
 80055dc:	080056b5 	.word	0x080056b5
 80055e0:	080056b5 	.word	0x080056b5
 80055e4:	080056b5 	.word	0x080056b5
 80055e8:	080056b5 	.word	0x080056b5
 80055ec:	080056b5 	.word	0x080056b5
 80055f0:	080056b5 	.word	0x080056b5
 80055f4:	080056b5 	.word	0x080056b5
 80055f8:	080056b5 	.word	0x080056b5
 80055fc:	080056b5 	.word	0x080056b5
 8005600:	080056b5 	.word	0x080056b5
 8005604:	080056b5 	.word	0x080056b5
 8005608:	080056b5 	.word	0x080056b5
 800560c:	080056b5 	.word	0x080056b5
 8005610:	080056b5 	.word	0x080056b5
 8005614:	080056b5 	.word	0x080056b5
 8005618:	080056b5 	.word	0x080056b5
 800561c:	080056b5 	.word	0x080056b5
 8005620:	080056b5 	.word	0x080056b5
 8005624:	080056b5 	.word	0x080056b5
 8005628:	080056b5 	.word	0x080056b5
 800562c:	080056b5 	.word	0x080056b5
 8005630:	080056b5 	.word	0x080056b5
 8005634:	080056b5 	.word	0x080056b5
 8005638:	080056b5 	.word	0x080056b5
 800563c:	080056b5 	.word	0x080056b5
 8005640:	080056b5 	.word	0x080056b5
 8005644:	080056b5 	.word	0x080056b5
 8005648:	080056b5 	.word	0x080056b5
 800564c:	080056ad 	.word	0x080056ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005650:	f7fe f84c 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005654:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005656:	e033      	b.n	80056c0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7fe f85e 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 800565c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800565e:	e02f      	b.n	80056c0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005660:	f107 0314 	add.w	r3, r7, #20
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe ff71 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800566e:	e027      	b.n	80056c0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005670:	f107 0308 	add.w	r3, r7, #8
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f8b5 	bl	80047e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800567e:	e01f      	b.n	80056c0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005680:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <UART_SetConfig+0x94c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800568c:	4b28      	ldr	r3, [pc, #160]	; (8005730 <UART_SetConfig+0x94c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	4a27      	ldr	r2, [pc, #156]	; (8005734 <UART_SetConfig+0x950>)
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800569e:	e00f      	b.n	80056c0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <UART_SetConfig+0x950>)
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056a4:	e00c      	b.n	80056c0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <UART_SetConfig+0x954>)
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056aa:	e009      	b.n	80056c0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056b2:	e005      	b.n	80056c0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80056be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8121 	beq.w	800590a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	4a17      	ldr	r2, [pc, #92]	; (800572c <UART_SetConfig+0x948>)
 80056ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056da:	005a      	lsls	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	441a      	add	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d916      	bls.n	8005724 <UART_SetConfig+0x940>
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d212      	bcs.n	8005724 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	b29b      	uxth	r3, r3
 8005702:	f023 030f 	bic.w	r3, r3, #15
 8005706:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	b29a      	uxth	r2, r3
 8005714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005716:	4313      	orrs	r3, r2
 8005718:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	e0f2      	b.n	800590a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800572a:	e0ee      	b.n	800590a <UART_SetConfig+0xb26>
 800572c:	08009508 	.word	0x08009508
 8005730:	58024400 	.word	0x58024400
 8005734:	03d09000 	.word	0x03d09000
 8005738:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800573c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	f200 80b7 	bhi.w	80058b4 <UART_SetConfig+0xad0>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0x968>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	08005851 	.word	0x08005851
 8005750:	08005859 	.word	0x08005859
 8005754:	080058b5 	.word	0x080058b5
 8005758:	080058b5 	.word	0x080058b5
 800575c:	08005861 	.word	0x08005861
 8005760:	080058b5 	.word	0x080058b5
 8005764:	080058b5 	.word	0x080058b5
 8005768:	080058b5 	.word	0x080058b5
 800576c:	08005871 	.word	0x08005871
 8005770:	080058b5 	.word	0x080058b5
 8005774:	080058b5 	.word	0x080058b5
 8005778:	080058b5 	.word	0x080058b5
 800577c:	080058b5 	.word	0x080058b5
 8005780:	080058b5 	.word	0x080058b5
 8005784:	080058b5 	.word	0x080058b5
 8005788:	080058b5 	.word	0x080058b5
 800578c:	08005881 	.word	0x08005881
 8005790:	080058b5 	.word	0x080058b5
 8005794:	080058b5 	.word	0x080058b5
 8005798:	080058b5 	.word	0x080058b5
 800579c:	080058b5 	.word	0x080058b5
 80057a0:	080058b5 	.word	0x080058b5
 80057a4:	080058b5 	.word	0x080058b5
 80057a8:	080058b5 	.word	0x080058b5
 80057ac:	080058b5 	.word	0x080058b5
 80057b0:	080058b5 	.word	0x080058b5
 80057b4:	080058b5 	.word	0x080058b5
 80057b8:	080058b5 	.word	0x080058b5
 80057bc:	080058b5 	.word	0x080058b5
 80057c0:	080058b5 	.word	0x080058b5
 80057c4:	080058b5 	.word	0x080058b5
 80057c8:	080058b5 	.word	0x080058b5
 80057cc:	080058a7 	.word	0x080058a7
 80057d0:	080058b5 	.word	0x080058b5
 80057d4:	080058b5 	.word	0x080058b5
 80057d8:	080058b5 	.word	0x080058b5
 80057dc:	080058b5 	.word	0x080058b5
 80057e0:	080058b5 	.word	0x080058b5
 80057e4:	080058b5 	.word	0x080058b5
 80057e8:	080058b5 	.word	0x080058b5
 80057ec:	080058b5 	.word	0x080058b5
 80057f0:	080058b5 	.word	0x080058b5
 80057f4:	080058b5 	.word	0x080058b5
 80057f8:	080058b5 	.word	0x080058b5
 80057fc:	080058b5 	.word	0x080058b5
 8005800:	080058b5 	.word	0x080058b5
 8005804:	080058b5 	.word	0x080058b5
 8005808:	080058b5 	.word	0x080058b5
 800580c:	080058b5 	.word	0x080058b5
 8005810:	080058b5 	.word	0x080058b5
 8005814:	080058b5 	.word	0x080058b5
 8005818:	080058b5 	.word	0x080058b5
 800581c:	080058b5 	.word	0x080058b5
 8005820:	080058b5 	.word	0x080058b5
 8005824:	080058b5 	.word	0x080058b5
 8005828:	080058b5 	.word	0x080058b5
 800582c:	080058b5 	.word	0x080058b5
 8005830:	080058b5 	.word	0x080058b5
 8005834:	080058b5 	.word	0x080058b5
 8005838:	080058b5 	.word	0x080058b5
 800583c:	080058b5 	.word	0x080058b5
 8005840:	080058b5 	.word	0x080058b5
 8005844:	080058b5 	.word	0x080058b5
 8005848:	080058b5 	.word	0x080058b5
 800584c:	080058ad 	.word	0x080058ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fd ff4c 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005854:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005856:	e033      	b.n	80058c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fd ff5e 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 800585c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800585e:	e02f      	b.n	80058c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fe71 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800586e:	e027      	b.n	80058c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ffb5 	bl	80047e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800587e:	e01f      	b.n	80058c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005880:	4b2c      	ldr	r3, [pc, #176]	; (8005934 <UART_SetConfig+0xb50>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <UART_SetConfig+0xb50>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	08db      	lsrs	r3, r3, #3
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	4a28      	ldr	r2, [pc, #160]	; (8005938 <UART_SetConfig+0xb54>)
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <UART_SetConfig+0xb54>)
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058a4:	e00c      	b.n	80058c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058a6:	4b25      	ldr	r3, [pc, #148]	; (800593c <UART_SetConfig+0xb58>)
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058aa:	e009      	b.n	80058c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058b2:	e005      	b.n	80058c0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80058be:	bf00      	nop
    }

    if (pclk != 0U)
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d021      	beq.n	800590a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <UART_SetConfig+0xb5c>)
 80058cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	441a      	add	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d908      	bls.n	8005904 <UART_SetConfig+0xb20>
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d204      	bcs.n	8005904 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e002      	b.n	800590a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005926:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800592a:	4618      	mov	r0, r3
 800592c:	3738      	adds	r7, #56	; 0x38
 800592e:	46bd      	mov	sp, r7
 8005930:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005934:	58024400 	.word	0x58024400
 8005938:	03d09000 	.word	0x03d09000
 800593c:	003d0900 	.word	0x003d0900
 8005940:	08009508 	.word	0x08009508

08005944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a42:	d10a      	bne.n	8005a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a98:	f7fb f9a0 	bl	8000ddc <HAL_GetTick>
 8005a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d10e      	bne.n	8005aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f82c 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e022      	b.n	8005b10 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d10e      	bne.n	8005af6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f816 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e00c      	b.n	8005b10 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	e062      	b.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d05e      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b32:	f7fb f953 	bl	8000ddc <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d302      	bcc.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d11d      	bne.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b56:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e045      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d02e      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba0:	d126      	bne.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005baa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e00f      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d08d      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_UARTEx_DisableFifoMode+0x16>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e027      	b.n	8005c7e <HAL_UARTEx_DisableFifoMode+0x66>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2224      	movs	r2, #36	; 0x24
 8005c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e02d      	b.n	8005cfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2224      	movs	r2, #36	; 0x24
 8005cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f850 	bl	8005d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e02d      	b.n	8005d7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2224      	movs	r2, #36	; 0x24
 8005d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f812 	bl	8005d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b089      	sub	sp, #36	; 0x24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005d8c:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <UARTEx_SetNbDataToProcess+0xc8>)
 8005d8e:	f107 0314 	add.w	r3, r7, #20
 8005d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d96:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <UARTEx_SetNbDataToProcess+0xcc>)
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005da4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dc0:	e03d      	b.n	8005e3e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	0e5b      	lsrs	r3, r3, #25
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	0f5b      	lsrs	r3, r3, #29
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005dea:	7fbb      	ldrb	r3, [r7, #30]
 8005dec:	7f3a      	ldrb	r2, [r7, #28]
 8005dee:	f107 0120 	add.w	r1, r7, #32
 8005df2:	440a      	add	r2, r1
 8005df4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	7f3a      	ldrb	r2, [r7, #28]
 8005dfe:	f107 0120 	add.w	r1, r7, #32
 8005e02:	440a      	add	r2, r1
 8005e04:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	7f7a      	ldrb	r2, [r7, #29]
 8005e18:	f107 0120 	add.w	r1, r7, #32
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	7f7a      	ldrb	r2, [r7, #29]
 8005e28:	f107 0120 	add.w	r1, r7, #32
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e3e:	bf00      	nop
 8005e40:	3724      	adds	r7, #36	; 0x24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	080094a0 	.word	0x080094a0
 8005e50:	080094a8 	.word	0x080094a8

08005e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e54:	b084      	sub	sp, #16
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	f107 001c 	add.w	r0, r7, #28
 8005e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d120      	bne.n	8005eae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <USB_CoreInit+0xc0>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d105      	bne.n	8005ea2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fabe 	bl	8007424 <USB_CoreReset>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
 8005eac:	e01a      	b.n	8005ee4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fab2 	bl	8007424 <USB_CoreReset>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed6:	e005      	b.n	8005ee4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10b      	bne.n	8005f02 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f043 0206 	orr.w	r2, r3, #6
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f0e:	b004      	add	sp, #16
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	ffbdffbf 	.word	0xffbdffbf

08005f18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d165      	bne.n	8005ff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a41      	ldr	r2, [pc, #260]	; (8006034 <USB_SetTurnaroundTime+0x11c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d906      	bls.n	8005f42 <USB_SetTurnaroundTime+0x2a>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4a40      	ldr	r2, [pc, #256]	; (8006038 <USB_SetTurnaroundTime+0x120>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d802      	bhi.n	8005f42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e062      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <USB_SetTurnaroundTime+0x120>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d906      	bls.n	8005f58 <USB_SetTurnaroundTime+0x40>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4a3b      	ldr	r2, [pc, #236]	; (800603c <USB_SetTurnaroundTime+0x124>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d802      	bhi.n	8005f58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f52:	230e      	movs	r3, #14
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e057      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4a38      	ldr	r2, [pc, #224]	; (800603c <USB_SetTurnaroundTime+0x124>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d906      	bls.n	8005f6e <USB_SetTurnaroundTime+0x56>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4a37      	ldr	r2, [pc, #220]	; (8006040 <USB_SetTurnaroundTime+0x128>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d802      	bhi.n	8005f6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f68:	230d      	movs	r3, #13
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e04c      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4a33      	ldr	r2, [pc, #204]	; (8006040 <USB_SetTurnaroundTime+0x128>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d906      	bls.n	8005f84 <USB_SetTurnaroundTime+0x6c>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4a32      	ldr	r2, [pc, #200]	; (8006044 <USB_SetTurnaroundTime+0x12c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d802      	bhi.n	8005f84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f7e:	230c      	movs	r3, #12
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e041      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <USB_SetTurnaroundTime+0x12c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d906      	bls.n	8005f9a <USB_SetTurnaroundTime+0x82>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <USB_SetTurnaroundTime+0x130>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d802      	bhi.n	8005f9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f94:	230b      	movs	r3, #11
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e036      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	; (8006048 <USB_SetTurnaroundTime+0x130>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d906      	bls.n	8005fb0 <USB_SetTurnaroundTime+0x98>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4a29      	ldr	r2, [pc, #164]	; (800604c <USB_SetTurnaroundTime+0x134>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d802      	bhi.n	8005fb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005faa:	230a      	movs	r3, #10
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e02b      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4a26      	ldr	r2, [pc, #152]	; (800604c <USB_SetTurnaroundTime+0x134>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d906      	bls.n	8005fc6 <USB_SetTurnaroundTime+0xae>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4a25      	ldr	r2, [pc, #148]	; (8006050 <USB_SetTurnaroundTime+0x138>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d802      	bhi.n	8005fc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005fc0:	2309      	movs	r3, #9
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e020      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4a21      	ldr	r2, [pc, #132]	; (8006050 <USB_SetTurnaroundTime+0x138>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d906      	bls.n	8005fdc <USB_SetTurnaroundTime+0xc4>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4a20      	ldr	r2, [pc, #128]	; (8006054 <USB_SetTurnaroundTime+0x13c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d802      	bhi.n	8005fdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e015      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <USB_SetTurnaroundTime+0x13c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d906      	bls.n	8005ff2 <USB_SetTurnaroundTime+0xda>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <USB_SetTurnaroundTime+0x140>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d802      	bhi.n	8005ff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005fec:	2307      	movs	r3, #7
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e00a      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ff2:	2306      	movs	r3, #6
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e007      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ffe:	2309      	movs	r3, #9
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e001      	b.n	8006008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006004:	2309      	movs	r3, #9
 8006006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	00d8acbf 	.word	0x00d8acbf
 8006038:	00e4e1bf 	.word	0x00e4e1bf
 800603c:	00f423ff 	.word	0x00f423ff
 8006040:	0106737f 	.word	0x0106737f
 8006044:	011a499f 	.word	0x011a499f
 8006048:	01312cff 	.word	0x01312cff
 800604c:	014ca43f 	.word	0x014ca43f
 8006050:	016e35ff 	.word	0x016e35ff
 8006054:	01a6ab1f 	.word	0x01a6ab1f
 8006058:	01e847ff 	.word	0x01e847ff

0800605c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f043 0201 	orr.w	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 0201 	bic.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d106      	bne.n	80060cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	e00b      	b.n	80060e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e001      	b.n	80060e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e003      	b.n	80060ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80060e4:	2032      	movs	r0, #50	; 0x32
 80060e6:	f7fa fe85 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060f4:	b084      	sub	sp, #16
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e009      	b.n	8006128 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3340      	adds	r3, #64	; 0x40
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b0e      	cmp	r3, #14
 800612c:	d9f2      	bls.n	8006114 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11c      	bne.n	800616e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e005      	b.n	800617a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	4619      	mov	r1, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	461a      	mov	r2, r3
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10c      	bne.n	80061ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061a6:	2100      	movs	r1, #0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f949 	bl	8006440 <USB_SetDevSpeed>
 80061ae:	e008      	b.n	80061c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f944 	bl	8006440 <USB_SetDevSpeed>
 80061b8:	e003      	b.n	80061c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ba:	2103      	movs	r1, #3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f93f 	bl	8006440 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c2:	2110      	movs	r1, #16
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8f3 	bl	80063b0 <USB_FlushTxFifo>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f911 	bl	80063fc <USB_FlushRxFifo>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	461a      	mov	r2, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	461a      	mov	r2, r3
 8006204:	2300      	movs	r3, #0
 8006206:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e043      	b.n	8006296 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006224:	d118      	bne.n	8006258 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e013      	b.n	800626a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	461a      	mov	r2, r3
 8006250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e008      	b.n	800626a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	461a      	mov	r2, r3
 800628a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800628e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	3301      	adds	r3, #1
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3b7      	bcc.n	800620e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	e043      	b.n	800632c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	d118      	bne.n	80062ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e013      	b.n	8006300 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e008      	b.n	8006300 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	d3b7      	bcc.n	80062a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006346:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006354:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f043 0210 	orr.w	r2, r3, #16
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <USB_DevInit+0x2b4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f043 0208 	orr.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d105      	bne.n	8006398 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <USB_DevInit+0x2b8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a4:	b004      	add	sp, #16
 80063a6:	4770      	bx	lr
 80063a8:	803c3800 	.word	0x803c3800
 80063ac:	40000004 	.word	0x40000004

080063b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	019b      	lsls	r3, r3, #6
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <USB_FlushTxFifo+0x48>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d901      	bls.n	80063dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e006      	b.n	80063ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d0f0      	beq.n	80063ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	00030d40 	.word	0x00030d40

080063fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2210      	movs	r2, #16
 800640c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <USB_FlushRxFifo+0x40>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e006      	b.n	800642e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b10      	cmp	r3, #16
 800642a:	d0f0      	beq.n	800640e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	00030d40 	.word	0x00030d40

08006440 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006460:	4313      	orrs	r3, r2
 8006462:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b087      	sub	sp, #28
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0306 	and.w	r3, r3, #6
 800648a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]
 8006496:	e00a      	b.n	80064ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d002      	beq.n	80064a4 <USB_GetDevSpeed+0x32>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b06      	cmp	r3, #6
 80064a2:	d102      	bne.n	80064aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064a4:	2302      	movs	r3, #2
 80064a6:	75fb      	strb	r3, [r7, #23]
 80064a8:	e001      	b.n	80064ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064aa:	230f      	movs	r3, #15
 80064ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d139      	bne.n	800654c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f303 	lsl.w	r3, r1, r3
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	68f9      	ldr	r1, [r7, #12]
 80064f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d153      	bne.n	80065b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	78db      	ldrb	r3, [r3, #3]
 800652a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800652c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	059b      	lsls	r3, r3, #22
 8006532:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006534:	431a      	orrs	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	0159      	lsls	r1, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	440b      	add	r3, r1
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	4619      	mov	r1, r3
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <USB_ActivateEndpoint+0x10c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]
 800654a:	e035      	b.n	80065b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	2101      	movs	r1, #1
 800655e:	fa01 f303 	lsl.w	r3, r1, r3
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	68f9      	ldr	r1, [r7, #12]
 8006566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800656a:	4313      	orrs	r3, r2
 800656c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d119      	bne.n	80065b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	78db      	ldrb	r3, [r3, #3]
 800659e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065a0:	430b      	orrs	r3, r1
 80065a2:	431a      	orrs	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	0159      	lsls	r1, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	440b      	add	r3, r1
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	4619      	mov	r1, r3
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <USB_ActivateEndpoint+0x10c>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	10008000 	.word	0x10008000

080065cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d161      	bne.n	80066ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fe:	d11f      	bne.n	8006640 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800661e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	2101      	movs	r1, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	b29b      	uxth	r3, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006660:	4013      	ands	r3, r2
 8006662:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	2101      	movs	r1, #1
 8006676:	fa01 f303 	lsl.w	r3, r1, r3
 800667a:	b29b      	uxth	r3, r3
 800667c:	43db      	mvns	r3, r3
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006684:	4013      	ands	r3, r2
 8006686:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	0159      	lsls	r1, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	440b      	add	r3, r1
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	4619      	mov	r1, r3
 80066a4:	4b35      	ldr	r3, [pc, #212]	; (800677c <USB_DeactivateEndpoint+0x1b0>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]
 80066aa:	e060      	b.n	800676e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c2:	d11f      	bne.n	8006704 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006702:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	2101      	movs	r1, #1
 8006716:	fa01 f303 	lsl.w	r3, r1, r3
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	43db      	mvns	r3, r3
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006724:	4013      	ands	r3, r2
 8006726:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	2101      	movs	r1, #1
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	041b      	lsls	r3, r3, #16
 8006740:	43db      	mvns	r3, r3
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006748:	4013      	ands	r3, r2
 800674a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	0159      	lsls	r1, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	440b      	add	r3, r1
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	4619      	mov	r1, r3
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <USB_DeactivateEndpoint+0x1b4>)
 800676a:	4013      	ands	r3, r2
 800676c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	ec337800 	.word	0xec337800
 8006780:	eff37800 	.word	0xeff37800

08006784 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	f040 8163 	bne.w	8006a6c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d132      	bne.n	8006814 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	0159      	lsls	r1, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	440b      	add	r3, r1
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	4619      	mov	r1, r3
 80067ca:	4ba5      	ldr	r3, [pc, #660]	; (8006a60 <USB_EPStartXfer+0x2dc>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	0159      	lsls	r1, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	440b      	add	r3, r1
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	4619      	mov	r1, r3
 800680c:	4b95      	ldr	r3, [pc, #596]	; (8006a64 <USB_EPStartXfer+0x2e0>)
 800680e:	4013      	ands	r3, r2
 8006810:	610b      	str	r3, [r1, #16]
 8006812:	e074      	b.n	80068fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	0159      	lsls	r1, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	440b      	add	r3, r1
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	4619      	mov	r1, r3
 8006830:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <USB_EPStartXfer+0x2e0>)
 8006832:	4013      	ands	r3, r2
 8006834:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	0159      	lsls	r1, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	440b      	add	r3, r1
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	4619      	mov	r1, r3
 8006852:	4b83      	ldr	r3, [pc, #524]	; (8006a60 <USB_EPStartXfer+0x2dc>)
 8006854:	4013      	ands	r3, r2
 8006856:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6959      	ldr	r1, [r3, #20]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	440b      	add	r3, r1
 8006870:	1e59      	subs	r1, r3, #1
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	fbb1 f3f3 	udiv	r3, r1, r3
 800687a:	04d9      	lsls	r1, r3, #19
 800687c:	4b7a      	ldr	r3, [pc, #488]	; (8006a68 <USB_EPStartXfer+0x2e4>)
 800687e:	400b      	ands	r3, r1
 8006880:	69b9      	ldr	r1, [r7, #24]
 8006882:	0148      	lsls	r0, r1, #5
 8006884:	69f9      	ldr	r1, [r7, #28]
 8006886:	4401      	add	r1, r0
 8006888:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800688c:	4313      	orrs	r3, r2
 800688e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a6:	69b9      	ldr	r1, [r7, #24]
 80068a8:	0148      	lsls	r0, r1, #5
 80068aa:	69f9      	ldr	r1, [r7, #28]
 80068ac:	4401      	add	r1, r0
 80068ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068b2:	4313      	orrs	r3, r2
 80068b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	78db      	ldrb	r3, [r3, #3]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d11f      	bne.n	80068fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d14b      	bne.n	800699c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006918:	461a      	mov	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	78db      	ldrb	r3, [r3, #3]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d128      	bne.n	800697a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d110      	bne.n	800695a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e00f      	b.n	800697a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006978:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e133      	b.n	8006c04 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	78db      	ldrb	r3, [r3, #3]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d015      	beq.n	80069f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 811b 	beq.w	8006c04 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	2101      	movs	r1, #1
 80069e0:	fa01 f303 	lsl.w	r3, r1, r3
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ea:	4313      	orrs	r3, r2
 80069ec:	634b      	str	r3, [r1, #52]	; 0x34
 80069ee:	e109      	b.n	8006c04 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d110      	bne.n	8006a22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e00f      	b.n	8006a42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68d9      	ldr	r1, [r3, #12]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	b298      	uxth	r0, r3
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4603      	mov	r3, r0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa38 	bl	8006ecc <USB_WritePacket>
 8006a5c:	e0d2      	b.n	8006c04 <USB_EPStartXfer+0x480>
 8006a5e:	bf00      	nop
 8006a60:	e007ffff 	.word	0xe007ffff
 8006a64:	fff80000 	.word	0xfff80000
 8006a68:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	0159      	lsls	r1, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	440b      	add	r3, r1
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	4619      	mov	r1, r3
 8006a88:	4b61      	ldr	r3, [pc, #388]	; (8006c10 <USB_EPStartXfer+0x48c>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	0159      	lsls	r1, r3, #5
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	440b      	add	r3, r1
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4b5a      	ldr	r3, [pc, #360]	; (8006c14 <USB_EPStartXfer+0x490>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d123      	bne.n	8006b00 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ace:	69b9      	ldr	r1, [r7, #24]
 8006ad0:	0148      	lsls	r0, r1, #5
 8006ad2:	69f9      	ldr	r1, [r7, #28]
 8006ad4:	4401      	add	r1, r0
 8006ad6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ada:	4313      	orrs	r3, r2
 8006adc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006afc:	6113      	str	r3, [r2, #16]
 8006afe:	e033      	b.n	8006b68 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4413      	add	r3, r2
 8006b0a:	1e5a      	subs	r2, r3, #1
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	8afb      	ldrh	r3, [r7, #22]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	4b3b      	ldr	r3, [pc, #236]	; (8006c18 <USB_EPStartXfer+0x494>)
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	69b9      	ldr	r1, [r7, #24]
 8006b2e:	0148      	lsls	r0, r1, #5
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	4401      	add	r1, r0
 8006b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	8af9      	ldrh	r1, [r7, #22]
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	0148      	lsls	r0, r1, #5
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	4401      	add	r1, r0
 8006b60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b64:	4313      	orrs	r3, r2
 8006b66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10d      	bne.n	8006b8a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68d9      	ldr	r1, [r3, #12]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	460a      	mov	r2, r1
 8006b88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	78db      	ldrb	r3, [r3, #3]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d128      	bne.n	8006be4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d110      	bne.n	8006bc4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e00f      	b.n	8006be4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	fff80000 	.word	0xfff80000
 8006c14:	e007ffff 	.word	0xe007ffff
 8006c18:	1ff80000 	.word	0x1ff80000

08006c1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	f040 80cd 	bne.w	8006dd8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d132      	bne.n	8006cac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	0159      	lsls	r1, r3, #5
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	440b      	add	r3, r1
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	4619      	mov	r1, r3
 8006c62:	4b98      	ldr	r3, [pc, #608]	; (8006ec4 <USB_EP0StartXfer+0x2a8>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	0159      	lsls	r1, r3, #5
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	440b      	add	r3, r1
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <USB_EP0StartXfer+0x2ac>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]
 8006caa:	e04e      	b.n	8006d4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	0159      	lsls	r1, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4b7f      	ldr	r3, [pc, #508]	; (8006ec8 <USB_EP0StartXfer+0x2ac>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	0159      	lsls	r1, r3, #5
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	440b      	add	r3, r1
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <USB_EP0StartXfer+0x2a8>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d903      	bls.n	8006d04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	0151      	lsls	r1, r2, #5
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	440a      	add	r2, r1
 8006d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d3a:	6939      	ldr	r1, [r7, #16]
 8006d3c:	0148      	lsls	r0, r1, #5
 8006d3e:	6979      	ldr	r1, [r7, #20]
 8006d40:	4401      	add	r1, r0
 8006d42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d46:	4313      	orrs	r3, r2
 8006d48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d11e      	bne.n	8006d8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d009      	beq.n	8006d6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	461a      	mov	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	e092      	b.n	8006eb4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d07e      	beq.n	8006eb4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	6979      	ldr	r1, [r7, #20]
 8006dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	634b      	str	r3, [r1, #52]	; 0x34
 8006dd6:	e06d      	b.n	8006eb4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	0159      	lsls	r1, r3, #5
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	4619      	mov	r1, r3
 8006df4:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <USB_EP0StartXfer+0x2ac>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	0159      	lsls	r1, r3, #5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	440b      	add	r3, r1
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	4619      	mov	r1, r3
 8006e16:	4b2b      	ldr	r3, [pc, #172]	; (8006ec4 <USB_EP0StartXfer+0x2a8>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e62:	6939      	ldr	r1, [r7, #16]
 8006e64:	0148      	lsls	r0, r1, #5
 8006e66:	6979      	ldr	r1, [r7, #20]
 8006e68:	4401      	add	r1, r0
 8006e6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d10d      	bne.n	8006e94 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	68d9      	ldr	r1, [r3, #12]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	460a      	mov	r2, r1
 8006e92:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	e007ffff 	.word	0xe007ffff
 8006ec8:	fff80000 	.word	0xfff80000

08006ecc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11a      	bne.n	8006f28 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ef2:	88bb      	ldrh	r3, [r7, #4]
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	089b      	lsrs	r3, r3, #2
 8006ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e00f      	b.n	8006f20 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	031a      	lsls	r2, r3, #12
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3304      	adds	r3, #4
 8006f18:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d3eb      	bcc.n	8006f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3724      	adds	r7, #36	; 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b089      	sub	sp, #36	; 0x24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	4613      	mov	r3, r2
 8006f42:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	3303      	adds	r3, #3
 8006f50:	089b      	lsrs	r3, r3, #2
 8006f52:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	e00b      	b.n	8006f72 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d3ef      	bcc.n	8006f5a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3724      	adds	r7, #36	; 0x24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d12c      	bne.n	8006ffe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	db12      	blt.n	8006fdc <USB_EPSetStall+0x54>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00f      	beq.n	8006fdc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	e02b      	b.n	8007056 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	db12      	blt.n	8007036 <USB_EPSetStall+0xae>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00f      	beq.n	8007036 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007030:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007034:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	0151      	lsls	r1, r2, #5
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	440a      	add	r2, r1
 800704c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007054:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d128      	bne.n	80070d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800709e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	78db      	ldrb	r3, [r3, #3]
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d003      	beq.n	80070b0 <USB_EPClearStall+0x4c>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d138      	bne.n	8007122 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	e027      	b.n	8007122 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	78db      	ldrb	r3, [r3, #3]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d003      	beq.n	8007102 <USB_EPClearStall+0x9e>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	78db      	ldrb	r3, [r3, #3]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d10f      	bne.n	8007122 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	440a      	add	r2, r1
 8007118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007120:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800714e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007152:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007164:	68f9      	ldr	r1, [r7, #12]
 8007166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007196:	f023 0302 	bic.w	r3, r3, #2
 800719a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800719c:	2003      	movs	r0, #3
 800719e:	f7f9 fe29 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c6:	f043 0302 	orr.w	r3, r3, #2
 80071ca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80071cc:	2003      	movs	r0, #3
 80071ce:	f7f9 fe11 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4013      	ands	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	0c1b      	lsrs	r3, r3, #16
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	4013      	ands	r3, r2
 8007258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	b29b      	uxth	r3, r3
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4013      	ands	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007298:	68bb      	ldr	r3, [r7, #8]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	fa22 f303 	lsr.w	r3, r2, r3
 80072d6:	01db      	lsls	r3, r3, #7
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4013      	ands	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072f4:	68bb      	ldr	r3, [r7, #8]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f003 0301 	and.w	r3, r3, #1
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	4619      	mov	r1, r3
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <USB_ActivateSetup+0x44>)
 800733e:	4013      	ands	r3, r2
 8007340:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	fffff800 	.word	0xfffff800

08007368 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	460b      	mov	r3, r1
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	333c      	adds	r3, #60	; 0x3c
 800737e:	3304      	adds	r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4a26      	ldr	r2, [pc, #152]	; (8007420 <USB_EP0_OutStart+0xb8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d90a      	bls.n	80073a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800739c:	d101      	bne.n	80073a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e037      	b.n	8007412 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a8:	461a      	mov	r2, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d0:	f043 0318 	orr.w	r3, r3, #24
 80073d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10f      	bne.n	8007410 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800740e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	4f54300a 	.word	0x4f54300a

08007424 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4a13      	ldr	r2, [pc, #76]	; (8007488 <USB_CoreReset+0x64>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d901      	bls.n	8007442 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e01b      	b.n	800747a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	daf2      	bge.n	8007430 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f043 0201 	orr.w	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a09      	ldr	r2, [pc, #36]	; (8007488 <USB_CoreReset+0x64>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d901      	bls.n	800746c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e006      	b.n	800747a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b01      	cmp	r3, #1
 8007476:	d0f0      	beq.n	800745a <USB_CoreReset+0x36>

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	00030d40 	.word	0x00030d40

0800748c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007498:	2010      	movs	r0, #16
 800749a:	f001 ff23 	bl	80092e4 <malloc>
 800749e:	4603      	mov	r3, r0
 80074a0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e01b      	b.n	80074ec <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7c1b      	ldrb	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2207      	movs	r2, #7
 80074c8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80074ca:	e002      	b.n	80074d2 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220a      	movs	r2, #10
 80074d0:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80074d2:	2304      	movs	r3, #4
 80074d4:	2203      	movs	r2, #3
 80074d6:	2181      	movs	r1, #129	; 0x81
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fd9c 	bl	8009016 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007500:	2181      	movs	r1, #129	; 0x81
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fdad 	bl	8009062 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007524:	4618      	mov	r0, r3
 8007526:	f001 fee5 	bl	80092f4 <free>
    pdev->pClassData = NULL;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755e:	2b00      	cmp	r3, #0
 8007560:	d045      	beq.n	80075ee <USBD_HID_Setup+0xb2>
 8007562:	2b20      	cmp	r3, #32
 8007564:	f040 80d4 	bne.w	8007710 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	3b02      	subs	r3, #2
 800756e:	2b09      	cmp	r3, #9
 8007570:	d835      	bhi.n	80075de <USBD_HID_Setup+0xa2>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBD_HID_Setup+0x3c>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	080075cf 	.word	0x080075cf
 800757c:	080075af 	.word	0x080075af
 8007580:	080075df 	.word	0x080075df
 8007584:	080075df 	.word	0x080075df
 8007588:	080075df 	.word	0x080075df
 800758c:	080075df 	.word	0x080075df
 8007590:	080075df 	.word	0x080075df
 8007594:	080075df 	.word	0x080075df
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075a1 	.word	0x080075a1
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	885b      	ldrh	r3, [r3, #2]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	601a      	str	r2, [r3, #0]
      break;
 80075ac:	e01e      	b.n	80075ec <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f9c8 	bl	800894a <USBD_CtlSendData>
      break;
 80075ba:	e017      	b.n	80075ec <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]
      break;
 80075cc:	e00e      	b.n	80075ec <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3304      	adds	r3, #4
 80075d2:	2201      	movs	r2, #1
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f9b7 	bl	800894a <USBD_CtlSendData>
      break;
 80075dc:	e006      	b.n	80075ec <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f941 	bl	8008868 <USBD_CtlError>
      ret = USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	75fb      	strb	r3, [r7, #23]
      break;
 80075ea:	bf00      	nop
    }
    break;
 80075ec:	e097      	b.n	800771e <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b0b      	cmp	r3, #11
 80075f4:	f200 8083 	bhi.w	80076fe <USBD_HID_Setup+0x1c2>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <USBD_HID_Setup+0xc4>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007631 	.word	0x08007631
 8007604:	0800770d 	.word	0x0800770d
 8007608:	080076ff 	.word	0x080076ff
 800760c:	080076ff 	.word	0x080076ff
 8007610:	080076ff 	.word	0x080076ff
 8007614:	080076ff 	.word	0x080076ff
 8007618:	08007659 	.word	0x08007659
 800761c:	080076ff 	.word	0x080076ff
 8007620:	080076ff 	.word	0x080076ff
 8007624:	080076ff 	.word	0x080076ff
 8007628:	080076b1 	.word	0x080076b1
 800762c:	080076d9 	.word	0x080076d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007636:	2b03      	cmp	r3, #3
 8007638:	d107      	bne.n	800764a <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800763a:	f107 030a 	add.w	r3, r7, #10
 800763e:	2202      	movs	r2, #2
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f981 	bl	800894a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007648:	e061      	b.n	800770e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f90b 	bl	8008868 <USBD_CtlError>
        ret = USBD_FAIL;
 8007652:	2303      	movs	r3, #3
 8007654:	75fb      	strb	r3, [r7, #23]
      break;
 8007656:	e05a      	b.n	800770e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b22      	cmp	r3, #34	; 0x22
 8007662:	d108      	bne.n	8007676 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	88db      	ldrh	r3, [r3, #6]
 8007668:	2b4a      	cmp	r3, #74	; 0x4a
 800766a:	bf28      	it	cs
 800766c:	234a      	movcs	r3, #74	; 0x4a
 800766e:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8007670:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <USBD_HID_Setup+0x1ec>)
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	e015      	b.n	80076a2 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	0a1b      	lsrs	r3, r3, #8
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b21      	cmp	r3, #33	; 0x21
 8007680:	d108      	bne.n	8007694 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8007682:	4b2a      	ldr	r3, [pc, #168]	; (800772c <USBD_HID_Setup+0x1f0>)
 8007684:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	88db      	ldrh	r3, [r3, #6]
 800768a:	2b09      	cmp	r3, #9
 800768c:	bf28      	it	cs
 800768e:	2309      	movcs	r3, #9
 8007690:	82bb      	strh	r3, [r7, #20]
 8007692:	e006      	b.n	80076a2 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 f8e6 	bl	8008868 <USBD_CtlError>
        ret = USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	75fb      	strb	r3, [r7, #23]
        break;
 80076a0:	e035      	b.n	800770e <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076a2:	8abb      	ldrh	r3, [r7, #20]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6939      	ldr	r1, [r7, #16]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f94e 	bl	800894a <USBD_CtlSendData>
      break;
 80076ae:	e02e      	b.n	800770e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d107      	bne.n	80076ca <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3308      	adds	r3, #8
 80076be:	2201      	movs	r2, #1
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f941 	bl	800894a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80076c8:	e021      	b.n	800770e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 f8cb 	bl	8008868 <USBD_CtlError>
        ret = USBD_FAIL;
 80076d2:	2303      	movs	r3, #3
 80076d4:	75fb      	strb	r3, [r7, #23]
      break;
 80076d6:	e01a      	b.n	800770e <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d106      	bne.n	80076f0 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	885b      	ldrh	r3, [r3, #2]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80076ee:	e00e      	b.n	800770e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f8b8 	bl	8008868 <USBD_CtlError>
        ret = USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	e007      	b.n	800770e <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f8b1 	bl	8008868 <USBD_CtlError>
      ret = USBD_FAIL;
 8007706:	2303      	movs	r3, #3
 8007708:	75fb      	strb	r3, [r7, #23]
      break;
 800770a:	e000      	b.n	800770e <USBD_HID_Setup+0x1d2>
      break;
 800770c:	bf00      	nop
    }
    break;
 800770e:	e006      	b.n	800771e <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 f8a8 	bl	8008868 <USBD_CtlError>
    ret = USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	75fb      	strb	r3, [r7, #23]
    break;
 800771c:	bf00      	nop
  }

  return (uint8_t)ret;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	240000cc 	.word	0x240000cc
 800772c:	240000b4 	.word	0x240000b4

08007730 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007744:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	2b03      	cmp	r3, #3
 800774e:	d10c      	bne.n	800776a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	7b1b      	ldrb	r3, [r3, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d108      	bne.n	800776a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2201      	movs	r2, #1
 800775c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	2181      	movs	r1, #129	; 0x81
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f001 fd24 	bl	80091b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7c1b      	ldrb	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8007784:	2308      	movs	r3, #8
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e001      	b.n	800778e <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800778a:	230a      	movs	r3, #10
 800778c:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2222      	movs	r2, #34	; 0x22
 80077a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80077aa:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	24000048 	.word	0x24000048

080077bc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2222      	movs	r2, #34	; 0x22
 80077c8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80077ca:	4b03      	ldr	r3, [pc, #12]	; (80077d8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	2400006c 	.word	0x2400006c

080077dc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2222      	movs	r2, #34	; 0x22
 80077e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80077ea:	4b03      	ldr	r3, [pc, #12]	; (80077f8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	24000090 	.word	0x24000090

080077fc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800780e:	2200      	movs	r2, #0
 8007810:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	220a      	movs	r2, #10
 800782c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800782e:	4b03      	ldr	r3, [pc, #12]	; (800783c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	240000c0 	.word	0x240000c0

08007840 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	e025      	b.n	80078a4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	79fa      	ldrb	r2, [r7, #7]
 8007896:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f001 fb51 	bl	8008f40 <USBD_LL_Init>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e010      	b.n	80078e6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	f107 020e 	add.w	r2, r7, #14
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	4602      	mov	r2, r0
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fb72 	bl	8008fe0 <USBD_LL_Start>
 80078fc:	4603      	mov	r3, r0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	4611      	mov	r1, r2
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
  }

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 ff2c 	bl	80087f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d00e      	beq.n	80079de <USBD_LL_SetupStage+0x5a>
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d302      	bcc.n	80079ca <USBD_LL_SetupStage+0x46>
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d014      	beq.n	80079f2 <USBD_LL_SetupStage+0x6e>
 80079c8:	e01d      	b.n	8007a06 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa18 	bl	8007e08 <USBD_StdDevReq>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e020      	b.n	8007a20 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa7c 	bl	8007ee4 <USBD_StdItfReq>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
      break;
 80079f0:	e016      	b.n	8007a20 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fab8 	bl	8007f70 <USBD_StdEPReq>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
      break;
 8007a04:	e00c      	b.n	8007a20 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fb43 	bl	80090a0 <USBD_LL_StallEP>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1e:	bf00      	nop
  }

  return ret;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	460b      	mov	r3, r1
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d137      	bne.n	8007aae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d14a      	bne.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d913      	bls.n	8007a84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	1ad2      	subs	r2, r2, r3
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	4293      	cmp	r3, r2
 8007a74:	bf28      	it	cs
 8007a76:	4613      	movcs	r3, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 ff90 	bl	80089a2 <USBD_CtlContinueRx>
 8007a82:	e030      	b.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d105      	bne.n	8007aa6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 ff8c 	bl	80089c4 <USBD_CtlSendStatus>
 8007aac:	e01b      	b.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d013      	beq.n	8007ae2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d10e      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	7afa      	ldrb	r2, [r7, #11]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	4798      	blx	r3
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	e002      	b.n	8007ae8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e000      	b.n	8007ae8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	460b      	mov	r3, r1
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d16a      	bne.n	8007bda <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3314      	adds	r3, #20
 8007b08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d155      	bne.n	8007bc0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d914      	bls.n	8007b4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	1ad2      	subs	r2, r2, r3
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 ff22 	bl	8008980 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fb56 	bl	80091f4 <USBD_LL_PrepareReceive>
 8007b48:	e03a      	b.n	8007bc0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d11c      	bne.n	8007b90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d316      	bcc.n	8007b90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d20f      	bcs.n	8007b90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b70:	2200      	movs	r2, #0
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 ff03 	bl	8008980 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b82:	2300      	movs	r3, #0
 8007b84:	2200      	movs	r2, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f001 fb33 	bl	80091f4 <USBD_LL_PrepareReceive>
 8007b8e:	e017      	b.n	8007bc0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d105      	bne.n	8007bb2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bb2:	2180      	movs	r1, #128	; 0x80
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f001 fa73 	bl	80090a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 ff15 	bl	80089ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d123      	bne.n	8007c12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fe9b 	bl	8007906 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bd8:	e01b      	b.n	8007c12 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d013      	beq.n	8007c0e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d10e      	bne.n	8007c0e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	7afa      	ldrb	r2, [r7, #11]
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	4798      	blx	r3
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	e002      	b.n	8007c14 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e000      	b.n	8007c14 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d009      	beq.n	8007c60 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6852      	ldr	r2, [r2, #4]
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 f9d5 	bl	8009016 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2240      	movs	r2, #64	; 0x40
 8007c78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c7c:	2340      	movs	r3, #64	; 0x40
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2180      	movs	r1, #128	; 0x80
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f9c7 	bl	8009016 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2240      	movs	r2, #64	; 0x40
 8007c92:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d105      	bne.n	8007d06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d10b      	bne.n	8007d3e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d009      	beq.n	8007dc0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6852      	ldr	r2, [r2, #4]
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	4611      	mov	r1, r2
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
  }

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b087      	sub	sp, #28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	3301      	adds	r3, #1
 8007de0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007de8:	8a3b      	ldrh	r3, [r7, #16]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	b21a      	sxth	r2, r3
 8007dee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b21b      	sxth	r3, r3
 8007df6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007df8:	89fb      	ldrh	r3, [r7, #14]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d004      	beq.n	8007e2c <USBD_StdDevReq+0x24>
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d002      	beq.n	8007e2c <USBD_StdDevReq+0x24>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <USBD_StdDevReq+0x38>
 8007e2a:	e050      	b.n	8007ece <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3e:	e04b      	b.n	8007ed8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d83c      	bhi.n	8007ec2 <USBD_StdDevReq+0xba>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <USBD_StdDevReq+0x48>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007ec3 	.word	0x08007ec3
 8007e5c:	08007eaf 	.word	0x08007eaf
 8007e60:	08007ec3 	.word	0x08007ec3
 8007e64:	08007e83 	.word	0x08007e83
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007ec3 	.word	0x08007ec3
 8007e70:	08007e9b 	.word	0x08007e9b
 8007e74:	08007e8d 	.word	0x08007e8d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9ce 	bl	800821c <USBD_GetDescriptor>
      break;
 8007e80:	e024      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb33 	bl	80084f0 <USBD_SetAddress>
      break;
 8007e8a:	e01f      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb70 	bl	8008574 <USBD_SetConfig>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
      break;
 8007e98:	e018      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc0d 	bl	80086bc <USBD_GetConfig>
      break;
 8007ea2:	e013      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fc3c 	bl	8008724 <USBD_GetStatus>
      break;
 8007eac:	e00e      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fc6a 	bl	800878a <USBD_SetFeature>
      break;
 8007eb6:	e009      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fc79 	bl	80087b2 <USBD_ClrFeature>
      break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fccf 	bl	8008868 <USBD_CtlError>
      break;
 8007eca:	bf00      	nop
    }
    break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fcc9 	bl	8008868 <USBD_CtlError>
    break;
 8007ed6:	bf00      	nop
  }

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop

08007ee4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d003      	beq.n	8007f06 <USBD_StdItfReq+0x22>
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d001      	beq.n	8007f06 <USBD_StdItfReq+0x22>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d12a      	bne.n	8007f5c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d81d      	bhi.n	8007f4e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	889b      	ldrh	r3, [r3, #4]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d813      	bhi.n	8007f44 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	88db      	ldrh	r3, [r3, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d110      	bne.n	8007f58 <USBD_StdItfReq+0x74>
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10d      	bne.n	8007f58 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fd41 	bl	80089c4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007f42:	e009      	b.n	8007f58 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fc8e 	bl	8008868 <USBD_CtlError>
      break;
 8007f4c:	e004      	b.n	8007f58 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fc89 	bl	8008868 <USBD_CtlError>
      break;
 8007f56:	e000      	b.n	8007f5a <USBD_StdItfReq+0x76>
      break;
 8007f58:	bf00      	nop
    }
    break;
 8007f5a:	e004      	b.n	8007f66 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fc82 	bl	8008868 <USBD_CtlError>
    break;
 8007f64:	bf00      	nop
  }

  return ret;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d004      	beq.n	8007f9a <USBD_StdEPReq+0x2a>
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	d002      	beq.n	8007f9a <USBD_StdEPReq+0x2a>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <USBD_StdEPReq+0x3e>
 8007f98:	e135      	b.n	8008206 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	e130      	b.n	8008210 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d03e      	beq.n	8008034 <USBD_StdEPReq+0xc4>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d002      	beq.n	8007fc0 <USBD_StdEPReq+0x50>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d077      	beq.n	80080ae <USBD_StdEPReq+0x13e>
 8007fbe:	e11c      	b.n	80081fa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d002      	beq.n	8007fd0 <USBD_StdEPReq+0x60>
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d015      	beq.n	8007ffa <USBD_StdEPReq+0x8a>
 8007fce:	e02b      	b.n	8008028 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00c      	beq.n	8007ff0 <USBD_StdEPReq+0x80>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b80      	cmp	r3, #128	; 0x80
 8007fda:	d009      	beq.n	8007ff0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f85d 	bl	80090a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fe6:	2180      	movs	r1, #128	; 0x80
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f859 	bl	80090a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007fee:	e020      	b.n	8008032 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fc38 	bl	8008868 <USBD_CtlError>
        break;
 8007ff8:	e01b      	b.n	8008032 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	885b      	ldrh	r3, [r3, #2]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10e      	bne.n	8008020 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <USBD_StdEPReq+0xb0>
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b80      	cmp	r3, #128	; 0x80
 800800c:	d008      	beq.n	8008020 <USBD_StdEPReq+0xb0>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	88db      	ldrh	r3, [r3, #6]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 f840 	bl	80090a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fccf 	bl	80089c4 <USBD_CtlSendStatus>

        break;
 8008026:	e004      	b.n	8008032 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fc1c 	bl	8008868 <USBD_CtlError>
        break;
 8008030:	bf00      	nop
      }
      break;
 8008032:	e0e7      	b.n	8008204 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803a:	2b02      	cmp	r3, #2
 800803c:	d002      	beq.n	8008044 <USBD_StdEPReq+0xd4>
 800803e:	2b03      	cmp	r3, #3
 8008040:	d015      	beq.n	800806e <USBD_StdEPReq+0xfe>
 8008042:	e02d      	b.n	80080a0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00c      	beq.n	8008064 <USBD_StdEPReq+0xf4>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d009      	beq.n	8008064 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f823 	bl	80090a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f81f 	bl	80090a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008062:	e023      	b.n	80080ac <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fbfe 	bl	8008868 <USBD_CtlError>
        break;
 800806c:	e01e      	b.n	80080ac <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	885b      	ldrh	r3, [r3, #2]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d119      	bne.n	80080aa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f82a 	bl	80090de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fc9a 	bl	80089c4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
        }
        break;
 800809e:	e004      	b.n	80080aa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fbe0 	bl	8008868 <USBD_CtlError>
        break;
 80080a8:	e000      	b.n	80080ac <USBD_StdEPReq+0x13c>
        break;
 80080aa:	bf00      	nop
      }
      break;
 80080ac:	e0aa      	b.n	8008204 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d002      	beq.n	80080be <USBD_StdEPReq+0x14e>
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d032      	beq.n	8008122 <USBD_StdEPReq+0x1b2>
 80080bc:	e097      	b.n	80081ee <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <USBD_StdEPReq+0x164>
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b80      	cmp	r3, #128	; 0x80
 80080c8:	d004      	beq.n	80080d4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fbcb 	bl	8008868 <USBD_CtlError>
          break;
 80080d2:	e091      	b.n	80081f8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da0b      	bge.n	80080f4 <USBD_StdEPReq+0x184>
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	3310      	adds	r3, #16
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	3304      	adds	r3, #4
 80080f2:	e00b      	b.n	800810c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	3304      	adds	r3, #4
 800810c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2202      	movs	r2, #2
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fc15 	bl	800894a <USBD_CtlSendData>
        break;
 8008120:	e06a      	b.n	80081f8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008126:	2b00      	cmp	r3, #0
 8008128:	da11      	bge.n	800814e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	f003 020f 	and.w	r2, r3, #15
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	3324      	adds	r3, #36	; 0x24
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d117      	bne.n	8008174 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fb8e 	bl	8008868 <USBD_CtlError>
            break;
 800814c:	e054      	b.n	80081f8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	f003 020f 	and.w	r2, r3, #15
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fb7b 	bl	8008868 <USBD_CtlError>
            break;
 8008172:	e041      	b.n	80081f8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	da0b      	bge.n	8008194 <USBD_StdEPReq+0x224>
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	3310      	adds	r3, #16
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	e00b      	b.n	80081ac <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	3304      	adds	r3, #4
 80081ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <USBD_StdEPReq+0x24a>
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d103      	bne.n	80081c2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	e00e      	b.n	80081e0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 ffa8 	bl	800911c <USBD_LL_IsStallEP>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2201      	movs	r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	e002      	b.n	80081e0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2202      	movs	r2, #2
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fbaf 	bl	800894a <USBD_CtlSendData>
          break;
 80081ec:	e004      	b.n	80081f8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fb39 	bl	8008868 <USBD_CtlError>
        break;
 80081f6:	bf00      	nop
      }
      break;
 80081f8:	e004      	b.n	8008204 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fb33 	bl	8008868 <USBD_CtlError>
      break;
 8008202:	bf00      	nop
    }
    break;
 8008204:	e004      	b.n	8008210 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb2d 	bl	8008868 <USBD_CtlError>
    break;
 800820e:	bf00      	nop
  }

  return ret;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	2b06      	cmp	r3, #6
 800823e:	f200 8128 	bhi.w	8008492 <USBD_GetDescriptor+0x276>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <USBD_GetDescriptor+0x2c>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008265 	.word	0x08008265
 800824c:	0800827d 	.word	0x0800827d
 8008250:	080082bd 	.word	0x080082bd
 8008254:	08008493 	.word	0x08008493
 8008258:	08008493 	.word	0x08008493
 800825c:	08008433 	.word	0x08008433
 8008260:	0800845f 	.word	0x0800845f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
    break;
 800827a:	e112      	b.n	80084a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7c1b      	ldrb	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10d      	bne.n	80082a0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828c:	f107 0208 	add.w	r2, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	2202      	movs	r2, #2
 800829c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800829e:	e100      	b.n	80084a2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	f107 0208 	add.w	r2, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	2202      	movs	r2, #2
 80082b8:	701a      	strb	r2, [r3, #0]
    break;
 80082ba:	e0f2      	b.n	80084a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	885b      	ldrh	r3, [r3, #2]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	f200 80ac 	bhi.w	8008420 <USBD_GetDescriptor+0x204>
 80082c8:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBD_GetDescriptor+0xb4>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	0800831d 	.word	0x0800831d
 80082d8:	08008351 	.word	0x08008351
 80082dc:	08008385 	.word	0x08008385
 80082e0:	080083b9 	.word	0x080083b9
 80082e4:	080083ed 	.word	0x080083ed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800830a:	e091      	b.n	8008430 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 faaa 	bl	8008868 <USBD_CtlError>
        err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
      break;
 800831a:	e089      	b.n	8008430 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	7c12      	ldrb	r2, [r2, #16]
 8008334:	f107 0108 	add.w	r1, r7, #8
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800833e:	e077      	b.n	8008430 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa90 	bl	8008868 <USBD_CtlError>
        err++;
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	3301      	adds	r3, #1
 800834c:	72fb      	strb	r3, [r7, #11]
      break;
 800834e:	e06f      	b.n	8008430 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	7c12      	ldrb	r2, [r2, #16]
 8008368:	f107 0108 	add.w	r1, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008372:	e05d      	b.n	8008430 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fa76 	bl	8008868 <USBD_CtlError>
        err++;
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	3301      	adds	r3, #1
 8008380:	72fb      	strb	r3, [r7, #11]
      break;
 8008382:	e055      	b.n	8008430 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 0108 	add.w	r1, r7, #8
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083a6:	e043      	b.n	8008430 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa5c 	bl	8008868 <USBD_CtlError>
        err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
      break;
 80083b6:	e03b      	b.n	8008430 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7c12      	ldrb	r2, [r2, #16]
 80083d0:	f107 0108 	add.w	r1, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083da:	e029      	b.n	8008430 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa42 	bl	8008868 <USBD_CtlError>
        err++;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	3301      	adds	r3, #1
 80083e8:	72fb      	strb	r3, [r7, #11]
      break;
 80083ea:	e021      	b.n	8008430 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	7c12      	ldrb	r2, [r2, #16]
 8008404:	f107 0108 	add.w	r1, r7, #8
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800840e:	e00f      	b.n	8008430 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa28 	bl	8008868 <USBD_CtlError>
        err++;
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	3301      	adds	r3, #1
 800841c:	72fb      	strb	r3, [r7, #11]
      break;
 800841e:	e007      	b.n	8008430 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa20 	bl	8008868 <USBD_CtlError>
      err++;
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	3301      	adds	r3, #1
 800842c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800842e:	bf00      	nop
    }
    break;
 8008430:	e037      	b.n	80084a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	7c1b      	ldrb	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d109      	bne.n	800844e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008442:	f107 0208 	add.w	r2, r7, #8
 8008446:	4610      	mov	r0, r2
 8008448:	4798      	blx	r3
 800844a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800844c:	e029      	b.n	80084a2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fa09 	bl	8008868 <USBD_CtlError>
      err++;
 8008456:	7afb      	ldrb	r3, [r7, #11]
 8008458:	3301      	adds	r3, #1
 800845a:	72fb      	strb	r3, [r7, #11]
    break;
 800845c:	e021      	b.n	80084a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	7c1b      	ldrb	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	f107 0208 	add.w	r2, r7, #8
 8008472:	4610      	mov	r0, r2
 8008474:	4798      	blx	r3
 8008476:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3301      	adds	r3, #1
 800847c:	2207      	movs	r2, #7
 800847e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008480:	e00f      	b.n	80084a2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f9ef 	bl	8008868 <USBD_CtlError>
      err++;
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	3301      	adds	r3, #1
 800848e:	72fb      	strb	r3, [r7, #11]
    break;
 8008490:	e007      	b.n	80084a2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f9e7 	bl	8008868 <USBD_CtlError>
    err++;
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	3301      	adds	r3, #1
 800849e:	72fb      	strb	r3, [r7, #11]
    break;
 80084a0:	bf00      	nop
  }

  if (err != 0U)
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11e      	bne.n	80084e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	88db      	ldrh	r3, [r3, #6]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d016      	beq.n	80084de <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	88da      	ldrh	r2, [r3, #6]
 80084ba:	893b      	ldrh	r3, [r7, #8]
 80084bc:	4293      	cmp	r3, r2
 80084be:	bf28      	it	cs
 80084c0:	4613      	movcs	r3, r2
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	461a      	mov	r2, r3
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fa3c 	bl	800894a <USBD_CtlSendData>
 80084d2:	e009      	b.n	80084e8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f9c6 	bl	8008868 <USBD_CtlError>
 80084dc:	e004      	b.n	80084e8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa70 	bl	80089c4 <USBD_CtlSendStatus>
 80084e4:	e000      	b.n	80084e8 <USBD_GetDescriptor+0x2cc>
    return;
 80084e6:	bf00      	nop
    }
  }
}
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop

080084f0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	889b      	ldrh	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d130      	bne.n	8008564 <USBD_SetAddress+0x74>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	88db      	ldrh	r3, [r3, #6]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d12c      	bne.n	8008564 <USBD_SetAddress+0x74>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	885b      	ldrh	r3, [r3, #2]
 800850e:	2b7f      	cmp	r3, #127	; 0x7f
 8008510:	d828      	bhi.n	8008564 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008524:	2b03      	cmp	r3, #3
 8008526:	d104      	bne.n	8008532 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f99c 	bl	8008868 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008530:	e01c      	b.n	800856c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7bfa      	ldrb	r2, [r7, #15]
 8008536:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fe18 	bl	8009174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa3d 	bl	80089c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008558:	e008      	b.n	800856c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008562:	e003      	b.n	800856c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f97e 	bl	8008868 <USBD_CtlError>
  }
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	b2da      	uxtb	r2, r3
 8008588:	4b4b      	ldr	r3, [pc, #300]	; (80086b8 <USBD_SetConfig+0x144>)
 800858a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800858c:	4b4a      	ldr	r3, [pc, #296]	; (80086b8 <USBD_SetConfig+0x144>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d905      	bls.n	80085a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f966 	bl	8008868 <USBD_CtlError>
    return USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	e087      	b.n	80086b0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d002      	beq.n	80085b0 <USBD_SetConfig+0x3c>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d025      	beq.n	80085fa <USBD_SetConfig+0x86>
 80085ae:	e071      	b.n	8008694 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80085b0:	4b41      	ldr	r3, [pc, #260]	; (80086b8 <USBD_SetConfig+0x144>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01c      	beq.n	80085f2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80085b8:	4b3f      	ldr	r3, [pc, #252]	; (80086b8 <USBD_SetConfig+0x144>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80085c2:	4b3d      	ldr	r3, [pc, #244]	; (80086b8 <USBD_SetConfig+0x144>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff f9a7 	bl	800791c <USBD_SetClassConfig>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f944 	bl	8008868 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80085e0:	e065      	b.n	80086ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9ee 	bl	80089c4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2203      	movs	r2, #3
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80085f0:	e05d      	b.n	80086ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f9e6 	bl	80089c4 <USBD_CtlSendStatus>
    break;
 80085f8:	e059      	b.n	80086ae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80085fa:	4b2f      	ldr	r3, [pc, #188]	; (80086b8 <USBD_SetConfig+0x144>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d112      	bne.n	8008628 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2202      	movs	r2, #2
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800860a:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <USBD_SetConfig+0x144>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008614:	4b28      	ldr	r3, [pc, #160]	; (80086b8 <USBD_SetConfig+0x144>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff f99a 	bl	8007954 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f9cf 	bl	80089c4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008626:	e042      	b.n	80086ae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008628:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <USBD_SetConfig+0x144>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d02a      	beq.n	800868c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff f988 	bl	8007954 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <USBD_SetConfig+0x144>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800864e:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <USBD_SetConfig+0x144>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff f961 	bl	800791c <USBD_SetClassConfig>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00f      	beq.n	8008684 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f8fe 	bl	8008868 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff f96d 	bl	8007954 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008682:	e014      	b.n	80086ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f99d 	bl	80089c4 <USBD_CtlSendStatus>
    break;
 800868a:	e010      	b.n	80086ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f999 	bl	80089c4 <USBD_CtlSendStatus>
    break;
 8008692:	e00c      	b.n	80086ae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f8e6 	bl	8008868 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800869c:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <USBD_SetConfig+0x144>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff f956 	bl	8007954 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80086a8:	2303      	movs	r3, #3
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	bf00      	nop
  }

  return ret;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	240001ec 	.word	0x240001ec

080086bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	88db      	ldrh	r3, [r3, #6]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d004      	beq.n	80086d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f8c9 	bl	8008868 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80086d6:	e021      	b.n	800871c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086de:	2b01      	cmp	r3, #1
 80086e0:	db17      	blt.n	8008712 <USBD_GetConfig+0x56>
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	dd02      	ble.n	80086ec <USBD_GetConfig+0x30>
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d00b      	beq.n	8008702 <USBD_GetConfig+0x46>
 80086ea:	e012      	b.n	8008712 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3308      	adds	r3, #8
 80086f6:	2201      	movs	r2, #1
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f925 	bl	800894a <USBD_CtlSendData>
      break;
 8008700:	e00c      	b.n	800871c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	2201      	movs	r2, #1
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f91d 	bl	800894a <USBD_CtlSendData>
      break;
 8008710:	e004      	b.n	800871c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f8a7 	bl	8008868 <USBD_CtlError>
      break;
 800871a:	bf00      	nop
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008734:	3b01      	subs	r3, #1
 8008736:	2b02      	cmp	r3, #2
 8008738:	d81e      	bhi.n	8008778 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	88db      	ldrh	r3, [r3, #6]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d004      	beq.n	800874c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f88f 	bl	8008868 <USBD_CtlError>
      break;
 800874a:	e01a      	b.n	8008782 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f043 0202 	orr.w	r2, r3, #2
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	330c      	adds	r3, #12
 800876c:	2202      	movs	r2, #2
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8ea 	bl	800894a <USBD_CtlSendData>
    break;
 8008776:	e004      	b.n	8008782 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f874 	bl	8008868 <USBD_CtlError>
    break;
 8008780:	bf00      	nop
  }
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d106      	bne.n	80087aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f90d 	bl	80089c4 <USBD_CtlSendStatus>
  }
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	3b01      	subs	r3, #1
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d80b      	bhi.n	80087e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	885b      	ldrh	r3, [r3, #2]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10c      	bne.n	80087ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8f3 	bl	80089c4 <USBD_CtlSendStatus>
      }
      break;
 80087de:	e004      	b.n	80087ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f840 	bl	8008868 <USBD_CtlError>
      break;
 80087e8:	e000      	b.n	80087ec <USBD_ClrFeature+0x3a>
      break;
 80087ea:	bf00      	nop
  }
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3301      	adds	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f7ff fad3 	bl	8007dca <SWAPBYTE>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff fac6 	bl	8007dca <SWAPBYTE>
 800883e:	4603      	mov	r3, r0
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fab9 	bl	8007dca <SWAPBYTE>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	80da      	strh	r2, [r3, #6]
}
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008872:	2180      	movs	r1, #128	; 0x80
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fc13 	bl	80090a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800887a:	2100      	movs	r1, #0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fc0f 	bl	80090a0 <USBD_LL_StallEP>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d036      	beq.n	800890e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088a4:	6938      	ldr	r0, [r7, #16]
 80088a6:	f000 f836 	bl	8008916 <USBD_GetLen>
 80088aa:	4603      	mov	r3, r0
 80088ac:	3301      	adds	r3, #1
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	7812      	ldrb	r2, [r2, #0]
 80088c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	3301      	adds	r3, #1
 80088c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	4413      	add	r3, r2
 80088d0:	2203      	movs	r2, #3
 80088d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	3301      	adds	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088da:	e013      	b.n	8008904 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	7812      	ldrb	r2, [r2, #0]
 80088e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	3301      	adds	r3, #1
 80088ec:	613b      	str	r3, [r7, #16]
    idx++;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	3301      	adds	r3, #1
 80088f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	4413      	add	r3, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	3301      	adds	r3, #1
 8008902:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e7      	bne.n	80088dc <USBD_GetString+0x52>
 800890c:	e000      	b.n	8008910 <USBD_GetString+0x86>
    return;
 800890e:	bf00      	nop
  }
}
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008926:	e005      	b.n	8008934 <USBD_GetLen+0x1e>
  {
    len++;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	3301      	adds	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3301      	adds	r3, #1
 8008932:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f5      	bne.n	8008928 <USBD_GetLen+0x12>
  }

  return len;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2202      	movs	r2, #2
 800895a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	2100      	movs	r1, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fc1e 	bl	80091b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	2100      	movs	r1, #0
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 fc0d 	bl	80091b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	2100      	movs	r1, #0
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 fc1d 	bl	80091f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2204      	movs	r2, #4
 80089d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089d4:	2300      	movs	r3, #0
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fbe9 	bl	80091b2 <USBD_LL_Transmit>

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2205      	movs	r2, #5
 80089f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089fa:	2300      	movs	r3, #0
 80089fc:	2200      	movs	r2, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbf7 	bl	80091f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a14:	2200      	movs	r2, #0
 8008a16:	490f      	ldr	r1, [pc, #60]	; (8008a54 <MX_USB_DEVICE_Init+0x44>)
 8008a18:	480f      	ldr	r0, [pc, #60]	; (8008a58 <MX_USB_DEVICE_Init+0x48>)
 8008a1a:	f7fe ff11 	bl	8007840 <USBD_Init>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a24:	f7f7 ffb0 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008a28:	490c      	ldr	r1, [pc, #48]	; (8008a5c <MX_USB_DEVICE_Init+0x4c>)
 8008a2a:	480b      	ldr	r0, [pc, #44]	; (8008a58 <MX_USB_DEVICE_Init+0x48>)
 8008a2c:	f7fe ff3e 	bl	80078ac <USBD_RegisterClass>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a36:	f7f7 ffa7 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a3a:	4807      	ldr	r0, [pc, #28]	; (8008a58 <MX_USB_DEVICE_Init+0x48>)
 8008a3c:	f7fe ff57 	bl	80078ee <USBD_Start>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a46:	f7f7 ff9f 	bl	8000988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008a4a:	f7f9 fed7 	bl	80027fc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a4e:	bf00      	nop
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	24000118 	.word	0x24000118
 8008a58:	2400028c 	.word	0x2400028c
 8008a5c:	24000010 	.word	0x24000010

08008a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2212      	movs	r2, #18
 8008a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a72:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	24000134 	.word	0x24000134

08008a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2204      	movs	r2, #4
 8008a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	24000148 	.word	0x24000148

08008aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4907      	ldr	r1, [pc, #28]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
 8008abe:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac0:	f7ff fee3 	bl	800888a <USBD_GetString>
 8008ac4:	e004      	b.n	8008ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	4904      	ldr	r1, [pc, #16]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aca:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008acc:	f7ff fedd 	bl	800888a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	2400055c 	.word	0x2400055c
 8008ae0:	080094b0 	.word	0x080094b0

08008ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	4904      	ldr	r1, [pc, #16]	; (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008af6:	f7ff fec8 	bl	800888a <USBD_GetString>
  return USBD_StrDesc;
 8008afa:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	2400055c 	.word	0x2400055c
 8008b08:	080094c8 	.word	0x080094c8

08008b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	221a      	movs	r2, #26
 8008b1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b1e:	f000 f843 	bl	8008ba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b22:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	2400014c 	.word	0x2400014c

08008b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b48:	f7ff fe9f 	bl	800888a <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b54:	f7ff fe99 	bl	800888a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	2400055c 	.word	0x2400055c
 8008b68:	080094dc 	.word	0x080094dc

08008b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b82:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b84:	f7ff fe81 	bl	800888a <USBD_GetString>
 8008b88:	e004      	b.n	8008b94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4904      	ldr	r1, [pc, #16]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b8e:	4805      	ldr	r0, [pc, #20]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b90:	f7ff fe7b 	bl	800888a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2400055c 	.word	0x2400055c
 8008ba4:	080094e8 	.word	0x080094e8

08008ba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bae:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <Get_SerialNum+0x44>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bb4:	4b0e      	ldr	r3, [pc, #56]	; (8008bf0 <Get_SerialNum+0x48>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <Get_SerialNum+0x4c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bce:	2208      	movs	r2, #8
 8008bd0:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <Get_SerialNum+0x50>)
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 f814 	bl	8008c00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bd8:	2204      	movs	r2, #4
 8008bda:	4908      	ldr	r1, [pc, #32]	; (8008bfc <Get_SerialNum+0x54>)
 8008bdc:	68b8      	ldr	r0, [r7, #8]
 8008bde:	f000 f80f 	bl	8008c00 <IntToUnicode>
  }
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	1ff1e800 	.word	0x1ff1e800
 8008bf0:	1ff1e804 	.word	0x1ff1e804
 8008bf4:	1ff1e808 	.word	0x1ff1e808
 8008bf8:	2400014e 	.word	0x2400014e
 8008bfc:	2400015e 	.word	0x2400015e

08008c00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	75fb      	strb	r3, [r7, #23]
 8008c16:	e027      	b.n	8008c68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	0f1b      	lsrs	r3, r3, #28
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d80b      	bhi.n	8008c38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0f1b      	lsrs	r3, r3, #28
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	440b      	add	r3, r1
 8008c30:	3230      	adds	r2, #48	; 0x30
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e00a      	b.n	8008c4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	0f1b      	lsrs	r3, r3, #28
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	4619      	mov	r1, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	440b      	add	r3, r1
 8008c48:	3237      	adds	r2, #55	; 0x37
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	3301      	adds	r3, #1
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	3301      	adds	r3, #1
 8008c66:	75fb      	strb	r3, [r7, #23]
 8008c68:	7dfa      	ldrb	r2, [r7, #23]
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d3d3      	bcc.n	8008c18 <IntToUnicode+0x18>
  }
}
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	; 0x28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c84:	f107 0314 	add.w	r3, r7, #20
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	605a      	str	r2, [r3, #4]
 8008c8e:	609a      	str	r2, [r3, #8]
 8008c90:	60da      	str	r2, [r3, #12]
 8008c92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a2d      	ldr	r2, [pc, #180]	; (8008d50 <HAL_PCD_MspInit+0xd4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d153      	bne.n	8008d46 <HAL_PCD_MspInit+0xca>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c9e:	4b2d      	ldr	r3, [pc, #180]	; (8008d54 <HAL_PCD_MspInit+0xd8>)
 8008ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ca4:	4a2b      	ldr	r2, [pc, #172]	; (8008d54 <HAL_PCD_MspInit+0xd8>)
 8008ca6:	f043 0301 	orr.w	r3, r3, #1
 8008caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <HAL_PCD_MspInit+0xd8>)
 8008cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008cca:	f107 0314 	add.w	r3, r7, #20
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4821      	ldr	r0, [pc, #132]	; (8008d58 <HAL_PCD_MspInit+0xdc>)
 8008cd2:	f7f8 f9cd 	bl	8001070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8008cd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008ce8:	230a      	movs	r3, #10
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4819      	ldr	r0, [pc, #100]	; (8008d58 <HAL_PCD_MspInit+0xdc>)
 8008cf4:	f7f8 f9bc 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cf8:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <HAL_PCD_MspInit+0xd8>)
 8008cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <HAL_PCD_MspInit+0xd8>)
 8008d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <HAL_PCD_MspInit+0xd8>)
 8008d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8008d16:	2200      	movs	r2, #0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	2062      	movs	r0, #98	; 0x62
 8008d1c:	f7f8 f973 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8008d20:	2062      	movs	r0, #98	; 0x62
 8008d22:	f7f8 f98a 	bl	800103a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	2063      	movs	r0, #99	; 0x63
 8008d2c:	f7f8 f96b 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8008d30:	2063      	movs	r0, #99	; 0x63
 8008d32:	f7f8 f982 	bl	800103a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d36:	2200      	movs	r2, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	2065      	movs	r0, #101	; 0x65
 8008d3c:	f7f8 f963 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d40:	2065      	movs	r0, #101	; 0x65
 8008d42:	f7f8 f97a 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d46:	bf00      	nop
 8008d48:	3728      	adds	r7, #40	; 0x28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40080000 	.word	0x40080000
 8008d54:	58024400 	.word	0x58024400
 8008d58:	58020000 	.word	0x58020000

08008d5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7fe fe06 	bl	8007984 <USBD_LL_SetupStage>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	4619      	mov	r1, r3
 8008daa:	f7fe fe3e 	bl	8007a2a <USBD_LL_DataOutStage>
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	3348      	adds	r3, #72	; 0x48
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f7fe fe87 	bl	8007af0 <USBD_LL_DataInStage>
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe ff8b 	bl	8007d14 <USBD_LL_SOF>
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]
 8008e1e:	e008      	b.n	8008e32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d102      	bne.n	8008e2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
 8008e2c:	e001      	b.n	8008e32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e2e:	f7f7 fdab 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e38:	7bfa      	ldrb	r2, [r7, #15]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe ff2e 	bl	8007c9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fee7 	bl	8007c1c <USBD_LL_Reset>
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe ff29 	bl	8007cbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <HAL_PCD_SuspendCallback+0x48>)
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	4a03      	ldr	r2, [pc, #12]	; (8008ea0 <HAL_PCD_SuspendCallback+0x48>)
 8008e92:	f043 0306 	orr.w	r3, r3, #6
 8008e96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	e000ed00 	.word	0xe000ed00

08008ea4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe ff18 	bl	8007ce8 <USBD_LL_Resume>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ed2:	78fa      	ldrb	r2, [r7, #3]
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe ff43 	bl	8007d62 <USBD_LL_IsoOUTIncomplete>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ef6:	78fa      	ldrb	r2, [r7, #3]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe ff24 	bl	8007d48 <USBD_LL_IsoINIncomplete>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe ff30 	bl	8007d7c <USBD_LL_DevConnected>
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe ff2d 	bl	8007d92 <USBD_LL_DevDisconnected>
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d13e      	bne.n	8008fce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f50:	4a21      	ldr	r2, [pc, #132]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a1f      	ldr	r2, [pc, #124]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f60:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f62:	4a1e      	ldr	r2, [pc, #120]	; (8008fdc <USBD_LL_Init+0x9c>)
 8008f64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008f66:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f68:	2209      	movs	r2, #9
 8008f6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f6c:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f6e:	2202      	movs	r2, #2
 8008f70:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f72:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f78:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f7e:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f84:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008f90:	4b11      	ldr	r3, [pc, #68]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008f96:	4b10      	ldr	r3, [pc, #64]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fa2:	480d      	ldr	r0, [pc, #52]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008fa4:	f7f8 fa2d 	bl	8001402 <HAL_PCD_Init>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008fae:	f7f7 fceb 	bl	8000988 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fb2:	2180      	movs	r1, #128	; 0x80
 8008fb4:	4808      	ldr	r0, [pc, #32]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008fb6:	f7f9 fba6 	bl	8002706 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4806      	ldr	r0, [pc, #24]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008fc0:	f7f9 fb5a 	bl	8002678 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fc4:	2280      	movs	r2, #128	; 0x80
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4803      	ldr	r0, [pc, #12]	; (8008fd8 <USBD_LL_Init+0x98>)
 8008fca:	f7f9 fb55 	bl	8002678 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	2400075c 	.word	0x2400075c
 8008fdc:	40080000 	.word	0x40080000

08008fe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f8 fb27 	bl	800164a <HAL_PCD_Start>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f918 	bl	8009238 <USBD_Get_USB_Status>
 8009008:	4603      	mov	r3, r0
 800900a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900c:	7bbb      	ldrb	r3, [r7, #14]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	4608      	mov	r0, r1
 8009020:	4611      	mov	r1, r2
 8009022:	461a      	mov	r2, r3
 8009024:	4603      	mov	r3, r0
 8009026:	70fb      	strb	r3, [r7, #3]
 8009028:	460b      	mov	r3, r1
 800902a:	70bb      	strb	r3, [r7, #2]
 800902c:	4613      	mov	r3, r2
 800902e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800903e:	78bb      	ldrb	r3, [r7, #2]
 8009040:	883a      	ldrh	r2, [r7, #0]
 8009042:	78f9      	ldrb	r1, [r7, #3]
 8009044:	f7f8 ff38 	bl	8001eb8 <HAL_PCD_EP_Open>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f8f2 	bl	8009238 <USBD_Get_USB_Status>
 8009054:	4603      	mov	r3, r0
 8009056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009058:	7bbb      	ldrb	r3, [r7, #14]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800907c:	78fa      	ldrb	r2, [r7, #3]
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f7f8 ff81 	bl	8001f88 <HAL_PCD_EP_Close>
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	4618      	mov	r0, r3
 800908e:	f000 f8d3 	bl	8009238 <USBD_Get_USB_Status>
 8009092:	4603      	mov	r3, r0
 8009094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009096:	7bbb      	ldrb	r3, [r7, #14]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f9 f841 	bl	8002146 <HAL_PCD_EP_SetStall>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f8b4 	bl	8009238 <USBD_Get_USB_Status>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f9 f886 	bl	800220e <HAL_PCD_EP_ClrStall>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f895 	bl	8009238 <USBD_Get_USB_Status>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009112:	7bbb      	ldrb	r3, [r7, #14]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800912e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009134:	2b00      	cmp	r3, #0
 8009136:	da0b      	bge.n	8009150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	4613      	mov	r3, r2
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	1a9b      	subs	r3, r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	333e      	adds	r3, #62	; 0x3e
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	e00b      	b.n	8009168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009156:	68f9      	ldr	r1, [r7, #12]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009166:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7f8 fe6b 	bl	8001e6e <HAL_PCD_SetAddress>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f84a 	bl	8009238 <USBD_Get_USB_Status>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	607a      	str	r2, [r7, #4]
 80091bc:	603b      	str	r3, [r7, #0]
 80091be:	460b      	mov	r3, r1
 80091c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091d0:	7af9      	ldrb	r1, [r7, #11]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	f7f8 ff6c 	bl	80020b2 <HAL_PCD_EP_Transmit>
 80091da:	4603      	mov	r3, r0
 80091dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 f829 	bl	8009238 <USBD_Get_USB_Status>
 80091e6:	4603      	mov	r3, r0
 80091e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	607a      	str	r2, [r7, #4]
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	460b      	mov	r3, r1
 8009202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009212:	7af9      	ldrb	r1, [r7, #11]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	f7f8 ff00 	bl	800201c <HAL_PCD_EP_Receive>
 800921c:	4603      	mov	r3, r0
 800921e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f808 	bl	8009238 <USBD_Get_USB_Status>
 8009228:	4603      	mov	r3, r0
 800922a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800922c:	7dbb      	ldrb	r3, [r7, #22]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d817      	bhi.n	800927c <USBD_Get_USB_Status+0x44>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <USBD_Get_USB_Status+0x1c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	0800926b 	.word	0x0800926b
 800925c:	08009271 	.word	0x08009271
 8009260:	08009277 	.word	0x08009277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	e00b      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	73fb      	strb	r3, [r7, #15]
    break;
 800926e:	e008      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e005      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e002      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	bf00      	nop
  }
  return usb_status;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <__errno>:
 8009290:	4b01      	ldr	r3, [pc, #4]	; (8009298 <__errno+0x8>)
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	24000168 	.word	0x24000168

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4e0d      	ldr	r6, [pc, #52]	; (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	; (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1ba4      	subs	r4, r4, r6
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2500      	movs	r5, #0
 80092a8:	42a5      	cmp	r5, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4e0b      	ldr	r6, [pc, #44]	; (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	; (80092e0 <__libc_init_array+0x44>)
 80092b0:	f000 f8ea 	bl	8009488 <_init>
 80092b4:	1ba4      	subs	r4, r4, r6
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2500      	movs	r5, #0
 80092ba:	42a5      	cmp	r5, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092c4:	4798      	blx	r3
 80092c6:	3501      	adds	r5, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092ce:	4798      	blx	r3
 80092d0:	3501      	adds	r5, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	08009528 	.word	0x08009528
 80092d8:	08009528 	.word	0x08009528
 80092dc:	08009528 	.word	0x08009528
 80092e0:	0800952c 	.word	0x0800952c

080092e4 <malloc>:
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <malloc+0xc>)
 80092e6:	4601      	mov	r1, r0
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	f000 b861 	b.w	80093b0 <_malloc_r>
 80092ee:	bf00      	nop
 80092f0:	24000168 	.word	0x24000168

080092f4 <free>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <free+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f000 b80b 	b.w	8009314 <_free_r>
 80092fe:	bf00      	nop
 8009300:	24000168 	.word	0x24000168

08009304 <memset>:
 8009304:	4402      	add	r2, r0
 8009306:	4603      	mov	r3, r0
 8009308:	4293      	cmp	r3, r2
 800930a:	d100      	bne.n	800930e <memset+0xa>
 800930c:	4770      	bx	lr
 800930e:	f803 1b01 	strb.w	r1, [r3], #1
 8009312:	e7f9      	b.n	8009308 <memset+0x4>

08009314 <_free_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4605      	mov	r5, r0
 8009318:	2900      	cmp	r1, #0
 800931a:	d045      	beq.n	80093a8 <_free_r+0x94>
 800931c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009320:	1f0c      	subs	r4, r1, #4
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfb8      	it	lt
 8009326:	18e4      	addlt	r4, r4, r3
 8009328:	f000 f8ac 	bl	8009484 <__malloc_lock>
 800932c:	4a1f      	ldr	r2, [pc, #124]	; (80093ac <_free_r+0x98>)
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	4610      	mov	r0, r2
 8009332:	b933      	cbnz	r3, 8009342 <_free_r+0x2e>
 8009334:	6063      	str	r3, [r4, #4]
 8009336:	6014      	str	r4, [r2, #0]
 8009338:	4628      	mov	r0, r5
 800933a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800933e:	f000 b8a2 	b.w	8009486 <__malloc_unlock>
 8009342:	42a3      	cmp	r3, r4
 8009344:	d90c      	bls.n	8009360 <_free_r+0x4c>
 8009346:	6821      	ldr	r1, [r4, #0]
 8009348:	1862      	adds	r2, r4, r1
 800934a:	4293      	cmp	r3, r2
 800934c:	bf04      	itt	eq
 800934e:	681a      	ldreq	r2, [r3, #0]
 8009350:	685b      	ldreq	r3, [r3, #4]
 8009352:	6063      	str	r3, [r4, #4]
 8009354:	bf04      	itt	eq
 8009356:	1852      	addeq	r2, r2, r1
 8009358:	6022      	streq	r2, [r4, #0]
 800935a:	6004      	str	r4, [r0, #0]
 800935c:	e7ec      	b.n	8009338 <_free_r+0x24>
 800935e:	4613      	mov	r3, r2
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	b10a      	cbz	r2, 8009368 <_free_r+0x54>
 8009364:	42a2      	cmp	r2, r4
 8009366:	d9fa      	bls.n	800935e <_free_r+0x4a>
 8009368:	6819      	ldr	r1, [r3, #0]
 800936a:	1858      	adds	r0, r3, r1
 800936c:	42a0      	cmp	r0, r4
 800936e:	d10b      	bne.n	8009388 <_free_r+0x74>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	4401      	add	r1, r0
 8009374:	1858      	adds	r0, r3, r1
 8009376:	4282      	cmp	r2, r0
 8009378:	6019      	str	r1, [r3, #0]
 800937a:	d1dd      	bne.n	8009338 <_free_r+0x24>
 800937c:	6810      	ldr	r0, [r2, #0]
 800937e:	6852      	ldr	r2, [r2, #4]
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	4401      	add	r1, r0
 8009384:	6019      	str	r1, [r3, #0]
 8009386:	e7d7      	b.n	8009338 <_free_r+0x24>
 8009388:	d902      	bls.n	8009390 <_free_r+0x7c>
 800938a:	230c      	movs	r3, #12
 800938c:	602b      	str	r3, [r5, #0]
 800938e:	e7d3      	b.n	8009338 <_free_r+0x24>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	1821      	adds	r1, r4, r0
 8009394:	428a      	cmp	r2, r1
 8009396:	bf04      	itt	eq
 8009398:	6811      	ldreq	r1, [r2, #0]
 800939a:	6852      	ldreq	r2, [r2, #4]
 800939c:	6062      	str	r2, [r4, #4]
 800939e:	bf04      	itt	eq
 80093a0:	1809      	addeq	r1, r1, r0
 80093a2:	6021      	streq	r1, [r4, #0]
 80093a4:	605c      	str	r4, [r3, #4]
 80093a6:	e7c7      	b.n	8009338 <_free_r+0x24>
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop
 80093ac:	240001f0 	.word	0x240001f0

080093b0 <_malloc_r>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	1ccd      	adds	r5, r1, #3
 80093b4:	f025 0503 	bic.w	r5, r5, #3
 80093b8:	3508      	adds	r5, #8
 80093ba:	2d0c      	cmp	r5, #12
 80093bc:	bf38      	it	cc
 80093be:	250c      	movcc	r5, #12
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	4606      	mov	r6, r0
 80093c4:	db01      	blt.n	80093ca <_malloc_r+0x1a>
 80093c6:	42a9      	cmp	r1, r5
 80093c8:	d903      	bls.n	80093d2 <_malloc_r+0x22>
 80093ca:	230c      	movs	r3, #12
 80093cc:	6033      	str	r3, [r6, #0]
 80093ce:	2000      	movs	r0, #0
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	f000 f857 	bl	8009484 <__malloc_lock>
 80093d6:	4a21      	ldr	r2, [pc, #132]	; (800945c <_malloc_r+0xac>)
 80093d8:	6814      	ldr	r4, [r2, #0]
 80093da:	4621      	mov	r1, r4
 80093dc:	b991      	cbnz	r1, 8009404 <_malloc_r+0x54>
 80093de:	4c20      	ldr	r4, [pc, #128]	; (8009460 <_malloc_r+0xb0>)
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	b91b      	cbnz	r3, 80093ec <_malloc_r+0x3c>
 80093e4:	4630      	mov	r0, r6
 80093e6:	f000 f83d 	bl	8009464 <_sbrk_r>
 80093ea:	6020      	str	r0, [r4, #0]
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 f838 	bl	8009464 <_sbrk_r>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d124      	bne.n	8009442 <_malloc_r+0x92>
 80093f8:	230c      	movs	r3, #12
 80093fa:	6033      	str	r3, [r6, #0]
 80093fc:	4630      	mov	r0, r6
 80093fe:	f000 f842 	bl	8009486 <__malloc_unlock>
 8009402:	e7e4      	b.n	80093ce <_malloc_r+0x1e>
 8009404:	680b      	ldr	r3, [r1, #0]
 8009406:	1b5b      	subs	r3, r3, r5
 8009408:	d418      	bmi.n	800943c <_malloc_r+0x8c>
 800940a:	2b0b      	cmp	r3, #11
 800940c:	d90f      	bls.n	800942e <_malloc_r+0x7e>
 800940e:	600b      	str	r3, [r1, #0]
 8009410:	50cd      	str	r5, [r1, r3]
 8009412:	18cc      	adds	r4, r1, r3
 8009414:	4630      	mov	r0, r6
 8009416:	f000 f836 	bl	8009486 <__malloc_unlock>
 800941a:	f104 000b 	add.w	r0, r4, #11
 800941e:	1d23      	adds	r3, r4, #4
 8009420:	f020 0007 	bic.w	r0, r0, #7
 8009424:	1ac3      	subs	r3, r0, r3
 8009426:	d0d3      	beq.n	80093d0 <_malloc_r+0x20>
 8009428:	425a      	negs	r2, r3
 800942a:	50e2      	str	r2, [r4, r3]
 800942c:	e7d0      	b.n	80093d0 <_malloc_r+0x20>
 800942e:	428c      	cmp	r4, r1
 8009430:	684b      	ldr	r3, [r1, #4]
 8009432:	bf16      	itet	ne
 8009434:	6063      	strne	r3, [r4, #4]
 8009436:	6013      	streq	r3, [r2, #0]
 8009438:	460c      	movne	r4, r1
 800943a:	e7eb      	b.n	8009414 <_malloc_r+0x64>
 800943c:	460c      	mov	r4, r1
 800943e:	6849      	ldr	r1, [r1, #4]
 8009440:	e7cc      	b.n	80093dc <_malloc_r+0x2c>
 8009442:	1cc4      	adds	r4, r0, #3
 8009444:	f024 0403 	bic.w	r4, r4, #3
 8009448:	42a0      	cmp	r0, r4
 800944a:	d005      	beq.n	8009458 <_malloc_r+0xa8>
 800944c:	1a21      	subs	r1, r4, r0
 800944e:	4630      	mov	r0, r6
 8009450:	f000 f808 	bl	8009464 <_sbrk_r>
 8009454:	3001      	adds	r0, #1
 8009456:	d0cf      	beq.n	80093f8 <_malloc_r+0x48>
 8009458:	6025      	str	r5, [r4, #0]
 800945a:	e7db      	b.n	8009414 <_malloc_r+0x64>
 800945c:	240001f0 	.word	0x240001f0
 8009460:	240001f4 	.word	0x240001f4

08009464 <_sbrk_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4c06      	ldr	r4, [pc, #24]	; (8009480 <_sbrk_r+0x1c>)
 8009468:	2300      	movs	r3, #0
 800946a:	4605      	mov	r5, r0
 800946c:	4608      	mov	r0, r1
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	f7f7 fb42 	bl	8000af8 <_sbrk>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_sbrk_r+0x1a>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	b103      	cbz	r3, 800947e <_sbrk_r+0x1a>
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	24000b64 	.word	0x24000b64

08009484 <__malloc_lock>:
 8009484:	4770      	bx	lr

08009486 <__malloc_unlock>:
 8009486:	4770      	bx	lr

08009488 <_init>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	bf00      	nop
 800948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948e:	bc08      	pop	{r3}
 8009490:	469e      	mov	lr, r3
 8009492:	4770      	bx	lr

08009494 <_fini>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr
