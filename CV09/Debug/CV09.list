
CV09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a38c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800a628  0800a628  0001a628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a880  0800a880  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a888  0800a888  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  0800a890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  240001f4  0800aa84  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000b90  0800aa84  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cfc  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c69  00000000  00000000  00041f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00045b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00046c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038634  00000000  00000000  00047bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d19  00000000  00000000  000801f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00157fda  00000000  00000000  00090f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e8ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  001e8f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f4 	.word	0x240001f4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a60c 	.word	0x0800a60c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001f8 	.word	0x240001f8
 80002d4:	0800a60c 	.word	0x0800a60c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <circle>:




void circle (float start_angle, float angle,  float r, uint8_t btn, uint32_t step_delay)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	ed2d 8b02 	vpush	{d8}
 80005de:	b08e      	sub	sp, #56	; 0x38
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80005e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80005ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80005ee:	4603      	mov	r3, r0
 80005f0:	6079      	str	r1, [r7, #4]
 80005f2:	72fb      	strb	r3, [r7, #11]
		uint8_t buff[5];
		buff[0] = 0x02;
 80005f4:	2302      	movs	r3, #2
 80005f6:	773b      	strb	r3, [r7, #28]
	float x = 0, y = 0;
 80005f8:	f04f 0300 	mov.w	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
	float x_old = r*cos(start_angle);
 8000604:	edd7 7a03 	vldr	s15, [r7, #12]
 8000608:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800060c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000610:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000614:	eeb0 0b47 	vmov.f64	d0, d7
 8000618:	f009 f88e 	bl	8009738 <cos>
 800061c:	eeb0 7b40 	vmov.f64	d7, d0
 8000620:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000624:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000628:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float y_old = r*sin(start_angle);
 800062c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000630:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000634:	edd7 7a05 	vldr	s15, [r7, #20]
 8000638:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800063c:	eeb0 0b47 	vmov.f64	d0, d7
 8000640:	f009 f8fe 	bl	8009840 <sin>
 8000644:	eeb0 7b40 	vmov.f64	d7, d0
 8000648:	ee28 7b07 	vmul.f64	d7, d8, d7
 800064c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000650:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	buff[1] = btn; // stiskni leve tlacitko
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	777b      	strb	r3, [r7, #29]
	for(float phi = start_angle; phi<=angle+start_angle; phi+=2.0*PI/100)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800065c:	e07d      	b.n	800075a <circle+0x182>
	  {
		  x = r*cos(phi);
 800065e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000662:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000666:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800066a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800066e:	eeb0 0b47 	vmov.f64	d0, d7
 8000672:	f009 f861 	bl	8009738 <cos>
 8000676:	eeb0 7b40 	vmov.f64	d7, d0
 800067a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800067e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000682:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  y = r*sin(phi);
 8000686:	edd7 7a03 	vldr	s15, [r7, #12]
 800068a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800068e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000696:	eeb0 0b47 	vmov.f64	d0, d7
 800069a:	f009 f8d1 	bl	8009840 <sin>
 800069e:	eeb0 7b40 	vmov.f64	d7, d0
 80006a2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80006a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24



		  buff[2] = (int8_t)(round( x_old - x)); // posun X +10
 80006ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80006b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80006b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006be:	eeb0 0b47 	vmov.f64	d0, d7
 80006c2:	f009 f875 	bl	80097b0 <round>
 80006c6:	eeb0 7b40 	vmov.f64	d7, d0
 80006ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006ce:	edc7 7a00 	vstr	s15, [r7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	77bb      	strb	r3, [r7, #30]
		  buff[3] = (int8_t)(round(y_old - y)); // posun Y -3
 80006da:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80006de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80006e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ea:	eeb0 0b47 	vmov.f64	d0, d7
 80006ee:	f009 f85f 	bl	80097b0 <round>
 80006f2:	eeb0 7b40 	vmov.f64	d7, d0
 80006f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006fa:	edc7 7a00 	vstr	s15, [r7]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	77fb      	strb	r3, [r7, #31]
		  buff[4] = 0; // bez scrollu
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3020 	strb.w	r3, [r7, #32]
		  if(buff[2]) x_old = x;
 800070c:	7fbb      	ldrb	r3, [r7, #30]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <circle+0x13e>
 8000712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
		   if(buff[3]) y_old = y;
 8000716:	7ffb      	ldrb	r3, [r7, #31]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <circle+0x148>
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
		  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2205      	movs	r2, #5
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <circle+0x1d8>)
 800072a:	f007 fa53 	bl	8007bd4 <USBD_HID_SendReport>
		  HAL_Delay(step_delay+4*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 800072e:	4820      	ldr	r0, [pc, #128]	; (80007b0 <circle+0x1d8>)
 8000730:	f007 fa72 	bl	8007c18 <USBD_HID_GetPollingInterval>
 8000734:	4603      	mov	r3, r0
 8000736:	009a      	lsls	r2, r3, #2
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd93 	bl	8001268 <HAL_Delay>
	for(float phi = start_angle; phi<=angle+start_angle; phi+=2.0*PI/100)
 8000742:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800074a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80007a8 <circle+0x1d0>
 800074e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000752:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000756:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800075a:	ed97 7a04 	vldr	s14, [r7, #16]
 800075e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000766:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800076a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000772:	f67f af74 	bls.w	800065e <circle+0x86>


	  }
	buff[1] = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	777b      	strb	r3, [r7, #29]
		USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2205      	movs	r2, #5
 8000780:	4619      	mov	r1, r3
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <circle+0x1d8>)
 8000784:	f007 fa26 	bl	8007bd4 <USBD_HID_SendReport>
	  HAL_Delay(step_delay+4*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <circle+0x1d8>)
 800078a:	f007 fa45 	bl	8007c18 <USBD_HID_GetPollingInterval>
 800078e:	4603      	mov	r3, r0
 8000790:	009a      	lsls	r2, r3, #2
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fd66 	bl	8001268 <HAL_Delay>
}
 800079c:	bf00      	nop
 800079e:	3738      	adds	r7, #56	; 0x38
 80007a0:	46bd      	mov	sp, r7
 80007a2:	ecbd 8b02 	vpop	{d8}
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	9999999a 	.word	0x9999999a
 80007ac:	3fb015bf 	.word	0x3fb015bf
 80007b0:	240002b4 	.word	0x240002b4

080007b4 <line>:




void line (int16_t x, int16_t y, uint8_t btn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
 80007be:	460b      	mov	r3, r1
 80007c0:	80bb      	strh	r3, [r7, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	70fb      	strb	r3, [r7, #3]
		uint8_t buff[5];

		for(uint8_t i = 0; i<20; i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
 80007ca:	e02f      	b.n	800082c <line+0x78>
		  {
			buff[0] = 0x02;
 80007cc:	2302      	movs	r3, #2
 80007ce:	723b      	strb	r3, [r7, #8]
		  buff[1] = btn;
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	727b      	strb	r3, [r7, #9]
		  buff[2] = (int8_t)(x/20);
 80007d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <line+0x88>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	10d2      	asrs	r2, r2, #3
 80007e0:	17db      	asrs	r3, r3, #31
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	72bb      	strb	r3, [r7, #10]
		  buff[3] = (int8_t)(-y/20);
 80007ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007ee:	425b      	negs	r3, r3
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <line+0x88>)
 80007f2:	fb82 1203 	smull	r1, r2, r2, r3
 80007f6:	10d2      	asrs	r2, r2, #3
 80007f8:	17db      	asrs	r3, r3, #31
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	72fb      	strb	r3, [r7, #11]
		  buff[4] = 0; // bez scrollu
 8000800:	2300      	movs	r3, #0
 8000802:	733b      	strb	r3, [r7, #12]

		  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2205      	movs	r2, #5
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <line+0x8c>)
 800080e:	f007 f9e1 	bl	8007bd4 <USBD_HID_SendReport>
		  HAL_Delay(5*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <line+0x8c>)
 8000814:	f007 fa00 	bl	8007c18 <USBD_HID_GetPollingInterval>
 8000818:	4602      	mov	r2, r0
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fd21 	bl	8001268 <HAL_Delay>
		for(uint8_t i = 0; i<20; i++)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3301      	adds	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b13      	cmp	r3, #19
 8000830:	d9cc      	bls.n	80007cc <line+0x18>
		  }
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	66666667 	.word	0x66666667
 8000840:	240002b4 	.word	0x240002b4

08000844 <key>:




void key(uint8_t key)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	static uint8_t buff[9] = {0x01,0,0,0,0,0,0,0,0};
	buff[3] = key;
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <key+0x58>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	70d3      	strb	r3, [r2, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000854:	2209      	movs	r2, #9
 8000856:	4911      	ldr	r1, [pc, #68]	; (800089c <key+0x58>)
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <key+0x5c>)
 800085a:	f007 f9bb 	bl	8007bd4 <USBD_HID_SendReport>
	 HAL_Delay(3*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 800085e:	4810      	ldr	r0, [pc, #64]	; (80008a0 <key+0x5c>)
 8000860:	f007 f9da 	bl	8007c18 <USBD_HID_GetPollingInterval>
 8000864:	4602      	mov	r2, r0
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fcfb 	bl	8001268 <HAL_Delay>
	 buff[3] = 0x00;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <key+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	70da      	strb	r2, [r3, #3]
	 USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000878:	2209      	movs	r2, #9
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <key+0x58>)
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <key+0x5c>)
 800087e:	f007 f9a9 	bl	8007bd4 <USBD_HID_SendReport>
	 HAL_Delay(50+2*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <key+0x5c>)
 8000884:	f007 f9c8 	bl	8007c18 <USBD_HID_GetPollingInterval>
 8000888:	4603      	mov	r3, r0
 800088a:	3319      	adds	r3, #25
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fcea 	bl	8001268 <HAL_Delay>
	/* USER CODE END PFP */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24000000 	.word	0x24000000
 80008a0:	240002b4 	.word	0x240002b4

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 fc4b 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f8f3 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f9fb 	bl	8000cac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 f9ad 	bl	8000c14 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80008ba:	f008 fafb 	bl	8008eb4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) HAL_Delay(10);
 80008be:	e002      	b.n	80008c6 <main+0x22>
 80008c0:	200a      	movs	r0, #10
 80008c2:	f000 fcd1 	bl	8001268 <HAL_Delay>
 80008c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ca:	4868      	ldr	r0, [pc, #416]	; (8000a6c <main+0x1c8>)
 80008cc:	f000 ffba 	bl	8001844 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f4      	beq.n	80008c0 <main+0x1c>
  uint8_t buff[9];
  buff[0] = 0x01;
 80008d6:	2301      	movs	r3, #1
 80008d8:	713b      	strb	r3, [r7, #4]
  buff[1] = 0x08;
 80008da:	2308      	movs	r3, #8
 80008dc:	717b      	strb	r3, [r7, #5]
  buff[2] = 0x00;
 80008de:	2300      	movs	r3, #0
 80008e0:	71bb      	strb	r3, [r7, #6]

  buff[3] = 0x15;
 80008e2:	2315      	movs	r3, #21
 80008e4:	71fb      	strb	r3, [r7, #7]
  buff[4] = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	723b      	strb	r3, [r7, #8]
  buff[5] = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	727b      	strb	r3, [r7, #9]
  buff[6] = 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	72bb      	strb	r3, [r7, #10]
  buff[7] = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	72fb      	strb	r3, [r7, #11]
  buff[8] = 0x00;
 80008f6:	2300      	movs	r3, #0
 80008f8:	733b      	strb	r3, [r7, #12]
  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2209      	movs	r2, #9
 80008fe:	4619      	mov	r1, r3
 8000900:	485b      	ldr	r0, [pc, #364]	; (8000a70 <main+0x1cc>)
 8000902:	f007 f967 	bl	8007bd4 <USBD_HID_SendReport>
   HAL_Delay(3*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000906:	485a      	ldr	r0, [pc, #360]	; (8000a70 <main+0x1cc>)
 8000908:	f007 f986 	bl	8007c18 <USBD_HID_GetPollingInterval>
 800090c:	4602      	mov	r2, r0
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fca7 	bl	8001268 <HAL_Delay>
   buff[1] = 0x00;
 800091a:	2300      	movs	r3, #0
 800091c:	717b      	strb	r3, [r7, #5]
   buff[3] = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	71fb      	strb	r3, [r7, #7]
   USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2209      	movs	r2, #9
 8000926:	4619      	mov	r1, r3
 8000928:	4851      	ldr	r0, [pc, #324]	; (8000a70 <main+0x1cc>)
 800092a:	f007 f953 	bl	8007bd4 <USBD_HID_SendReport>
   HAL_Delay(5*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 800092e:	4850      	ldr	r0, [pc, #320]	; (8000a70 <main+0x1cc>)
 8000930:	f007 f972 	bl	8007c18 <USBD_HID_GetPollingInterval>
 8000934:	4602      	mov	r2, r0
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc93 	bl	8001268 <HAL_Delay>

   key(0x10);//M
 8000942:	2010      	movs	r0, #16
 8000944:	f7ff ff7e 	bl	8000844 <key>
   key(0x16);//S
 8000948:	2016      	movs	r0, #22
 800094a:	f7ff ff7b 	bl	8000844 <key>
   key(0x13);//P
 800094e:	2013      	movs	r0, #19
 8000950:	f7ff ff78 	bl	8000844 <key>
   key(0x04);//A
 8000954:	2004      	movs	r0, #4
 8000956:	f7ff ff75 	bl	8000844 <key>
   key(0x0c);//I
 800095a:	200c      	movs	r0, #12
 800095c:	f7ff ff72 	bl	8000844 <key>
   key(0x011);//N
 8000960:	2011      	movs	r0, #17
 8000962:	f7ff ff6f 	bl	8000844 <key>
   key(0x017);//T
 8000966:	2017      	movs	r0, #23
 8000968:	f7ff ff6c 	bl	8000844 <key>
   key(0x28);//ENTER
 800096c:	2028      	movs	r0, #40	; 0x28
 800096e:	f7ff ff69 	bl	8000844 <key>

    HAL_Delay(2000);
 8000972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000976:	f000 fc77 	bl	8001268 <HAL_Delay>





	  line(-1000,1000,0);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000980:	483c      	ldr	r0, [pc, #240]	; (8000a74 <main+0x1d0>)
 8000982:	f7ff ff17 	bl	80007b4 <line>
	  line(-1000,1000,0);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800098c:	4839      	ldr	r0, [pc, #228]	; (8000a74 <main+0x1d0>)
 800098e:	f7ff ff11 	bl	80007b4 <line>
	  line(-1000,1000,0);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000998:	4836      	ldr	r0, [pc, #216]	; (8000a74 <main+0x1d0>)
 800099a:	f7ff ff0b 	bl	80007b4 <line>
	  line(-1000,1000,0);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a4:	4833      	ldr	r0, [pc, #204]	; (8000a74 <main+0x1d0>)
 80009a6:	f7ff ff05 	bl	80007b4 <line>
	  HAL_Delay(50);
 80009aa:	2032      	movs	r0, #50	; 0x32
 80009ac:	f000 fc5c 	bl	8001268 <HAL_Delay>
	  line(200,-310,0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	4931      	ldr	r1, [pc, #196]	; (8000a78 <main+0x1d4>)
 80009b4:	20c8      	movs	r0, #200	; 0xc8
 80009b6:	f7ff fefd 	bl	80007b4 <line>
	   circle (0,2*PI,200,1, 1);
 80009ba:	2101      	movs	r1, #1
 80009bc:	2001      	movs	r0, #1
 80009be:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8000a7c <main+0x1d8>
 80009c2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8000a80 <main+0x1dc>
 80009c6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8000a84 <main+0x1e0>
 80009ca:	f7ff fe05 	bl	80005d8 <circle>
	   line(100,75,0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	214b      	movs	r1, #75	; 0x4b
 80009d2:	2064      	movs	r0, #100	; 0x64
 80009d4:	f7ff feee 	bl	80007b4 <line>
	   circle (0,2*PI,50,1, 1);
 80009d8:	2101      	movs	r1, #1
 80009da:	2001      	movs	r0, #1
 80009dc:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8000a88 <main+0x1e4>
 80009e0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8000a80 <main+0x1dc>
 80009e4:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8000a84 <main+0x1e0>
 80009e8:	f7ff fdf6 	bl	80005d8 <circle>
	   line(200,0,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	20c8      	movs	r0, #200	; 0xc8
 80009f2:	f7ff fedf 	bl	80007b4 <line>
	   circle (0,2*PI,50,1, 1);
 80009f6:	2101      	movs	r1, #1
 80009f8:	2001      	movs	r0, #1
 80009fa:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8000a88 <main+0x1e4>
 80009fe:	eddf 0a20 	vldr	s1, [pc, #128]	; 8000a80 <main+0x1dc>
 8000a02:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000a84 <main+0x1e0>
 8000a06:	f7ff fde7 	bl	80005d8 <circle>
	   line(-80,-30,0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f06f 011d 	mvn.w	r1, #29
 8000a10:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8000a14:	f7ff fece 	bl	80007b4 <line>
	   line(0,-100,1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fec8 	bl	80007b4 <line>
	   line(120,-10,0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f06f 0109 	mvn.w	r1, #9
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f7ff fec2 	bl	80007b4 <line>
	   circle (1.2*PI,0.6*PI,150,1, 1);
 8000a30:	2101      	movs	r1, #1
 8000a32:	2001      	movs	r0, #1
 8000a34:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000a8c <main+0x1e8>
 8000a38:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000a90 <main+0x1ec>
 8000a3c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000a94 <main+0x1f0>
 8000a40:	f7ff fdca 	bl	80005d8 <circle>
	   line(-80,-30,0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f06f 011d 	mvn.w	r1, #29
 8000a4a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8000a4e:	f7ff feb1 	bl	80007b4 <line>
	   while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) HAL_Delay(10);
 8000a52:	e002      	b.n	8000a5a <main+0x1b6>
 8000a54:	200a      	movs	r0, #10
 8000a56:	f000 fc07 	bl	8001268 <HAL_Delay>
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <main+0x1c8>)
 8000a60:	f000 fef0 	bl	8001844 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f4      	beq.n	8000a54 <main+0x1b0>
	  line(-1000,1000,0);
 8000a6a:	e786      	b.n	800097a <main+0xd6>
 8000a6c:	58020800 	.word	0x58020800
 8000a70:	240002b4 	.word	0x240002b4
 8000a74:	fffffc18 	.word	0xfffffc18
 8000a78:	fffffeca 	.word	0xfffffeca
 8000a7c:	43480000 	.word	0x43480000
 8000a80:	40c90fdb 	.word	0x40c90fdb
 8000a84:	00000000 	.word	0x00000000
 8000a88:	42480000 	.word	0x42480000
 8000a8c:	43160000 	.word	0x43160000
 8000a90:	3ff1463a 	.word	0x3ff1463a
 8000a94:	4071463a 	.word	0x4071463a

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0cc      	sub	sp, #304	; 0x130
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000aa2:	224c      	movs	r2, #76	; 0x4c
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 fcee 	bl	800a488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f009 fce7 	bl	800a488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4618      	mov	r0, r3
 8000ac0:	23bc      	movs	r3, #188	; 0xbc
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f009 fcdf 	bl	800a488 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aca:	2002      	movs	r0, #2
 8000acc:	f002 f8ae 	bl	8002c2c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <SystemClock_Config+0x170>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <SystemClock_Config+0x170>)
 8000adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <SystemClock_Config+0x170>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <SystemClock_Config+0x174>)
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <SystemClock_Config+0x174>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000afa:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <SystemClock_Config+0x174>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	f003 0201 	and.w	r2, r3, #1
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0a:	bf00      	nop
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <SystemClock_Config+0x170>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b18:	d1f8      	bne.n	8000b0c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000b1a:	2322      	movs	r3, #34	; 0x22
 8000b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b44:	233c      	movs	r3, #60	; 0x3c
 8000b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 f8a4 	bl	8002cc0 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000b7e:	f000 f93d 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	233f      	movs	r3, #63	; 0x3f
 8000b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b94:	2308      	movs	r3, #8
 8000b96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fc90 	bl	80034e0 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000bc6:	f000 f919 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <SystemClock_Config+0x178>)
 8000bd0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fffc 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x162>
  {
    Error_Handler();
 8000bf6:	f000 f901 	bl	8000dfc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000bfa:	f002 f851 	bl	8002ca0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000bfe:	bf00      	nop
 8000c00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024800 	.word	0x58024800
 8000c0c:	58000400 	.word	0x58000400
 8000c10:	00040002 	.word	0x00040002

08000c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MX_USART3_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f004 fac3 	bl	80051e8 <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f8c8 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c70:	f005 fa5d 	bl	800612e <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f8bf 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c82:	f005 fa92 	bl	80061aa <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f8b6 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c92:	f005 fa13 	bl	80060bc <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f8ae 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000220 	.word	0x24000220
 8000ca8:	40004800 	.word	0x40004800

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <MX_GPIO_Init+0x140>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a48      	ldr	r2, [pc, #288]	; (8000dec <MX_GPIO_Init+0x140>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <MX_GPIO_Init+0x140>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <MX_GPIO_Init+0x140>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	4a41      	ldr	r2, [pc, #260]	; (8000dec <MX_GPIO_Init+0x140>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MX_GPIO_Init+0x140>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5e:	4824      	ldr	r0, [pc, #144]	; (8000df0 <MX_GPIO_Init+0x144>)
 8000d60:	f000 fd88 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4822      	ldr	r0, [pc, #136]	; (8000df4 <MX_GPIO_Init+0x148>)
 8000d6a:	f000 fd83 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	481f      	ldr	r0, [pc, #124]	; (8000df0 <MX_GPIO_Init+0x144>)
 8000d74:	f000 fd7e 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481a      	ldr	r0, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x14c>)
 8000d8e:	f000 fba9 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d92:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_GPIO_Init+0x144>)
 8000dac:	f000 fb9a 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <MX_GPIO_Init+0x148>)
 8000dc8:	f000 fb8c 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_GPIO_Init+0x148>)
 8000de0:	f000 fb80 	bl	80014e4 <HAL_GPIO_Init>

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58020400 	.word	0x58020400
 8000df4:	58021800 	.word	0x58021800
 8000df8:	58020800 	.word	0x58020800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_MspInit+0x30>)
 8000e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x30>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x30>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	58024400 	.word	0x58024400

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12e      	bne.n	8000ec0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000ebc:	f000 fb12 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40004800 	.word	0x40004800
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020c00 	.word	0x58020c00

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f97e 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8000f36:	f000 fe0d 	bl	8001b54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24000784 	.word	0x24000784

08000f44 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8000f4a:	f000 fe03 	bl	8001b54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	24000784 	.word	0x24000784

08000f58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <OTG_FS_IRQHandler+0x10>)
 8000f5e:	f000 fdf9 	bl	8001b54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	24000784 	.word	0x24000784

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f009 fa3a 	bl	800a414 <__errno>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	24080000 	.word	0x24080000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	24000210 	.word	0x24000210
 8000fd4:	24000b90 	.word	0x24000b90

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <SystemInit+0xec>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <SystemInit+0xec>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <SystemInit+0xf0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	2b06      	cmp	r3, #6
 8000ff6:	d807      	bhi.n	8001008 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <SystemInit+0xf0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f023 030f 	bic.w	r3, r3, #15
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <SystemInit+0xf0>)
 8001002:	f043 0307 	orr.w	r3, r3, #7
 8001006:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <SystemInit+0xf4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <SystemInit+0xf4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <SystemInit+0xf4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <SystemInit+0xf4>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	492b      	ldr	r1, [pc, #172]	; (80010cc <SystemInit+0xf4>)
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <SystemInit+0xf8>)
 8001022:	4013      	ands	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <SystemInit+0xf0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	2b07      	cmp	r3, #7
 8001030:	d907      	bls.n	8001042 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <SystemInit+0xf0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 030f 	bic.w	r3, r3, #15
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <SystemInit+0xf0>)
 800103c:	f043 0307 	orr.w	r3, r3, #7
 8001040:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <SystemInit+0xf4>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <SystemInit+0xf4>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <SystemInit+0xf4>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <SystemInit+0xf4>)
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <SystemInit+0xfc>)
 8001058:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <SystemInit+0xf4>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <SystemInit+0x100>)
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <SystemInit+0xf4>)
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <SystemInit+0x104>)
 8001064:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <SystemInit+0xf4>)
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <SystemInit+0xf4>)
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <SystemInit+0x104>)
 8001070:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <SystemInit+0xf4>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <SystemInit+0xf4>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <SystemInit+0x104>)
 800107c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <SystemInit+0xf4>)
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <SystemInit+0xf4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <SystemInit+0xf4>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <SystemInit+0xf4>)
 8001092:	2200      	movs	r2, #0
 8001094:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <SystemInit+0x108>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <SystemInit+0x10c>)
 800109c:	4013      	ands	r3, r2
 800109e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010a2:	d202      	bcs.n	80010aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0x110>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <SystemInit+0x114>)
 80010ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SystemInit+0xec>)
 80010b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	52002000 	.word	0x52002000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010d4:	02020200 	.word	0x02020200
 80010d8:	01ff0000 	.word	0x01ff0000
 80010dc:	01010280 	.word	0x01010280
 80010e0:	5c001000 	.word	0x5c001000
 80010e4:	ffff0000 	.word	0xffff0000
 80010e8:	51008108 	.word	0x51008108
 80010ec:	52004000 	.word	0x52004000

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010f4:	f7ff ff70 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
  ldr  r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001112:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800111a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f009 f97f 	bl	800a420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fbbf 	bl	80008a4 <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800112c:	0800a890 	.word	0x0800a890
  ldr  r0, =_sdata
 8001130:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001134:	240001f4 	.word	0x240001f4
  ldr  r2, =_sbss
 8001138:	240001f4 	.word	0x240001f4
  ldr  r3, = _ebss
 800113c:	24000b90 	.word	0x24000b90

08001140 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC3_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114a:	2003      	movs	r0, #3
 800114c:	f000 f98a 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001150:	f002 fb7c 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8001154:	4601      	mov	r1, r0
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_Init+0x6c>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	fa21 f303 	lsr.w	r3, r1, r3
 800116c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_Init+0x68>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_Init+0x6c>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_Init+0x70>)
 8001186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <HAL_Init+0x74>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f814 	bl	80011bc <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e002      	b.n	80011a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800119e:	f7ff fe35 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58024400 	.word	0x58024400
 80011b0:	0800a680 	.word	0x0800a680
 80011b4:	24000010 	.word	0x24000010
 80011b8:	2400000c 	.word	0x2400000c

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_InitTick+0x60>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e021      	b.n	8001214 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_InitTick+0x64>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f96f 	bl	80014ca <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f939 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x68>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24000018 	.word	0x24000018
 8001220:	2400000c 	.word	0x2400000c
 8001224:	24000014 	.word	0x24000014

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	24000018 	.word	0x24000018
 800124c:	240002b0 	.word	0x240002b0

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	240002b0 	.word	0x240002b0

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_Delay+0x40>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24000018 	.word	0x24000018

080012ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetREVID+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0c1b      	lsrs	r3, r3, #16
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	5c001000 	.word	0x5c001000

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <__NVIC_SetPriorityGrouping+0x40>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x40>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	05fa0000 	.word	0x05fa0000

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff40 	bl	800130c <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff33 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa4 	bl	8001420 <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014f2:	4b89      	ldr	r3, [pc, #548]	; (8001718 <HAL_GPIO_Init+0x234>)
 80014f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014f6:	e194      	b.n	8001822 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8186 	beq.w	800181c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d00b      	beq.n	8001530 <HAL_GPIO_Init+0x4c>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001524:	2b11      	cmp	r3, #17
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b12      	cmp	r3, #18
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 0201 	and.w	r2, r3, #1
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0xee>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d123      	bne.n	800161a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	69b9      	ldr	r1, [r7, #24]
 8001616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0203 	and.w	r2, r3, #3
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80e0 	beq.w	800181c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_GPIO_Init+0x238>)
 800165e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <HAL_GPIO_Init+0x238>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_GPIO_Init+0x238>)
 800166e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167a:	4a29      	ldr	r2, [pc, #164]	; (8001720 <HAL_GPIO_Init+0x23c>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_GPIO_Init+0x240>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d052      	beq.n	800174c <HAL_GPIO_Init+0x268>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_GPIO_Init+0x244>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_GPIO_Init+0x22e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_GPIO_Init+0x248>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d02b      	beq.n	800170e <HAL_GPIO_Init+0x22a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_GPIO_Init+0x24c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d025      	beq.n	800170a <HAL_GPIO_Init+0x226>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <HAL_GPIO_Init+0x250>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01f      	beq.n	8001706 <HAL_GPIO_Init+0x222>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_GPIO_Init+0x254>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x21e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_GPIO_Init+0x258>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x21a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_GPIO_Init+0x25c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x216>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x260>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x212>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_GPIO_Init+0x264>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x20e>
 80016ee:	2309      	movs	r3, #9
 80016f0:	e02d      	b.n	800174e <HAL_GPIO_Init+0x26a>
 80016f2:	230a      	movs	r3, #10
 80016f4:	e02b      	b.n	800174e <HAL_GPIO_Init+0x26a>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e029      	b.n	800174e <HAL_GPIO_Init+0x26a>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e027      	b.n	800174e <HAL_GPIO_Init+0x26a>
 80016fe:	2306      	movs	r3, #6
 8001700:	e025      	b.n	800174e <HAL_GPIO_Init+0x26a>
 8001702:	2305      	movs	r3, #5
 8001704:	e023      	b.n	800174e <HAL_GPIO_Init+0x26a>
 8001706:	2304      	movs	r3, #4
 8001708:	e021      	b.n	800174e <HAL_GPIO_Init+0x26a>
 800170a:	2303      	movs	r3, #3
 800170c:	e01f      	b.n	800174e <HAL_GPIO_Init+0x26a>
 800170e:	2302      	movs	r3, #2
 8001710:	e01d      	b.n	800174e <HAL_GPIO_Init+0x26a>
 8001712:	2301      	movs	r3, #1
 8001714:	e01b      	b.n	800174e <HAL_GPIO_Init+0x26a>
 8001716:	bf00      	nop
 8001718:	58000080 	.word	0x58000080
 800171c:	58024400 	.word	0x58024400
 8001720:	58000400 	.word	0x58000400
 8001724:	58020000 	.word	0x58020000
 8001728:	58020400 	.word	0x58020400
 800172c:	58020800 	.word	0x58020800
 8001730:	58020c00 	.word	0x58020c00
 8001734:	58021000 	.word	0x58021000
 8001738:	58021400 	.word	0x58021400
 800173c:	58021800 	.word	0x58021800
 8001740:	58021c00 	.word	0x58021c00
 8001744:	58022000 	.word	0x58022000
 8001748:	58022400 	.word	0x58022400
 800174c:	2300      	movs	r3, #0
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	f002 0203 	and.w	r2, r2, #3
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175e:	4938      	ldr	r1, [pc, #224]	; (8001840 <HAL_GPIO_Init+0x35c>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	3301      	adds	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f ae63 	bne.w	80014f8 <HAL_GPIO_Init+0x14>
  }
}
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	58000400 	.word	0x58000400

08001844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a8:	b08f      	sub	sp, #60	; 0x3c
 80018aa:	af0a      	add	r7, sp, #40	; 0x28
 80018ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e116      	b.n	8001ae6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f007 fc24 	bl	8009120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fe13 	bl	8006522 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	687e      	ldr	r6, [r7, #4]
 8001904:	466d      	mov	r5, sp
 8001906:	f106 0410 	add.w	r4, r6, #16
 800190a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001916:	e885 0003 	stmia.w	r5, {r0, r1}
 800191a:	1d33      	adds	r3, r6, #4
 800191c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	f004 fcea 	bl	80062f8 <USB_CoreInit>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0d7      	b.n	8001ae6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f004 fe01 	bl	8006544 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e04a      	b.n	80019de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	333d      	adds	r3, #61	; 0x3d
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	333c      	adds	r3, #60	; 0x3c
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	b298      	uxth	r0, r3
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	4602      	mov	r2, r0
 8001986:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333f      	adds	r3, #63	; 0x3f
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	3344      	adds	r3, #68	; 0x44
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3348      	adds	r3, #72	; 0x48
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3350      	adds	r3, #80	; 0x50
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	3301      	adds	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3af      	bcc.n	8001948 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e044      	b.n	8001a78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3b5      	bcc.n	80019ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	687e      	ldr	r6, [r7, #4]
 8001a8a:	466d      	mov	r5, sp
 8001a8c:	f106 0410 	add.w	r4, r6, #16
 8001a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aa0:	1d33      	adds	r3, r6, #4
 8001aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa4:	6838      	ldr	r0, [r7, #0]
 8001aa6:	f004 fd77 	bl	8006598 <USB_DevInit>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e014      	b.n	8001ae6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f001 f879 	bl	8002bcc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 fdb6 	bl	8007650 <USB_DevDisconnect>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_PCD_Start+0x1c>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e020      	b.n	8001b4c <HAL_PCD_Start+0x5e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d109      	bne.n	8001b2e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fd74 	bl	8007620 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fcdf 	bl	8006500 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b08d      	sub	sp, #52	; 0x34
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 fe1b 	bl	80077a6 <USB_GetMode>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 83ca 	bne.w	800230c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fd7f 	bl	8007680 <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 83c0 	beq.w	800230a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f005 fd76 	bl	8007680 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f002 0202 	and.w	r2, r2, #2
 8001bac:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f005 fd64 	bl	8007680 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d161      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0210 	bic.w	r2, r2, #16
 8001bd0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f003 020f 	and.w	r2, r3, #15
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	0c5b      	lsrs	r3, r3, #17
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d124      	bne.n	8001c48 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d035      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	6a38      	ldr	r0, [r7, #32]
 8001c1e:	f005 fbdc 	bl	80073da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c2e:	441a      	add	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c40:	441a      	add	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	619a      	str	r2, [r3, #24]
 8001c46:	e016      	b.n	8001c76 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	0c5b      	lsrs	r3, r3, #17
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d110      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6a38      	ldr	r0, [r7, #32]
 8001c60:	f005 fbbb 	bl	80073da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c70:	441a      	add	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0210 	orr.w	r2, r2, #16
 8001c84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 fcf8 	bl	8007680 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c9a:	d16e      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f005 fcfe 	bl	80076a6 <USB_ReadDevAllOutEpInterrupt>
 8001caa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001cac:	e062      	b.n	8001d74 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d057      	beq.n	8001d68 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f005 fd23 	bl	800770e <USB_ReadDevOutEPInterrupt>
 8001cc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fdc5 	bl	8002878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00c      	beq.n	8001d12 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d04:	461a      	mov	r2, r3
 8001d06:	2308      	movs	r3, #8
 8001d08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 febf 	bl	8002a90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d44:	461a      	mov	r2, r3
 8001d46:	2320      	movs	r3, #32
 8001d48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d199      	bne.n	8001cae <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f005 fc7e 	bl	8007680 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d8e:	f040 80c0 	bne.w	8001f12 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fc9f 	bl	80076da <USB_ReadDevAllInEpInterrupt>
 8001d9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001da2:	e0b2      	b.n	8001f0a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a7 	beq.w	8001efe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fcc5 	bl	800774a <USB_ReadDevInEPInterrupt>
 8001dc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d057      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69f9      	ldr	r1, [r7, #28]
 8001de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dec:	4013      	ands	r3, r2
 8001dee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2301      	movs	r3, #1
 8001e00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d132      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3348      	adds	r3, #72	; 0x48
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4403      	add	r3, r0
 8001e2a:	3344      	adds	r3, #68	; 0x44
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4419      	add	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3348      	adds	r3, #72	; 0x48
 8001e40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x31c>
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3350      	adds	r3, #80	; 0x50
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d108      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	f005 fcce 	bl	800780c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f007 f9ef 	bl	800925a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e92:	461a      	mov	r2, r3
 8001e94:	2308      	movs	r3, #8
 8001e96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2340      	movs	r3, #64	; 0x40
 8001ece:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2302      	movs	r3, #2
 8001eea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fc30 	bl	800275e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3301      	adds	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f af49 	bne.w	8001da4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fbb2 	bl	8007680 <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f26:	d122      	bne.n	8001f6e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fe5f 	bl	8002c14 <HAL_PCDEx_LPM_Callback>
 8001f56:	e002      	b.n	8001f5e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f007 f9f5 	bl	8009348 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f005 fb84 	bl	8007680 <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f82:	d112      	bne.n	8001faa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f007 f9b1 	bl	80092fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fa8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 fb66 	bl	8007680 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fbe:	d121      	bne.n	8002004 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001fce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d111      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fe0c 	bl	8002c14 <HAL_PCDEx_LPM_Callback>
 8001ffc:	e002      	b.n	8002004 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f007 f97c 	bl	80092fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f005 fb39 	bl	8007680 <USB_ReadInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002018:	f040 80c7 	bne.w	80021aa <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2110      	movs	r1, #16
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fc0c 	bl	8006854 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002040:	e056      	b.n	80020f0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204e:	461a      	mov	r2, r3
 8002050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002054:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002066:	0151      	lsls	r1, r2, #5
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	440a      	add	r2, r1
 800206c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002070:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002074:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002086:	0151      	lsls	r1, r2, #5
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	440a      	add	r2, r1
 800208c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002090:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002094:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	461a      	mov	r2, r3
 80020a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	3301      	adds	r3, #1
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3a3      	bcc.n	8002042 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002108:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800210c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002126:	f043 030b 	orr.w	r3, r3, #11
 800212a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213c:	f043 030b 	orr.w	r3, r3, #11
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	e015      	b.n	8002170 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	4619      	mov	r1, r3
 8002154:	f242 032b 	movw	r3, #8235	; 0x202b
 8002158:	4313      	orrs	r3, r2
 800215a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216a:	f043 030b 	orr.w	r3, r3, #11
 800216e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002182:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002194:	461a      	mov	r2, r3
 8002196:	f005 fb39 	bl	800780c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 fa66 	bl	8007680 <USB_ReadInterrupts>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d124      	bne.n	800220a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f005 fafd 	bl	80077c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fba1 	bl	8006916 <USB_GetDevSpeed>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681c      	ldr	r4, [r3, #0]
 80021e0:	f001 fca6 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 80021e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f004 f8e4 	bl	80063bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f007 f858 	bl	80092aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f005 fa36 	bl	8007680 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b08      	cmp	r3, #8
 800221c:	d10a      	bne.n	8002234 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f007 f835 	bl	800928e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 0208 	and.w	r2, r2, #8
 8002232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f005 fa21 	bl	8007680 <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002248:	d10f      	bne.n	800226a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f007 f897 	bl	8009388 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f005 fa06 	bl	8007680 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800227e:	d10f      	bne.n	80022a0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f007 f86a 	bl	8009364 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800229e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f005 f9eb 	bl	8007680 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d10a      	bne.n	80022cc <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f007 f878 	bl	80093ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f005 f9d5 	bl	8007680 <USB_ReadInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d115      	bne.n	800230c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f007 f868 	bl	80093c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	e000      	b.n	800230c <HAL_PCD_IRQHandler+0x7b8>
      return;
 800230a:	bf00      	nop
    }
  }
}
 800230c:	3734      	adds	r7, #52	; 0x34
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}

08002312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_PCD_SetAddress+0x1a>
 8002328:	2302      	movs	r3, #2
 800232a:	e013      	b.n	8002354 <HAL_PCD_SetAddress+0x42>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f005 f945 	bl	80075d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	70fb      	strb	r3, [r7, #3]
 800236e:	460b      	mov	r3, r1
 8002370:	803b      	strh	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800237a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	da0f      	bge.n	80023a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 020f 	and.w	r2, r3, #15
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	3338      	adds	r3, #56	; 0x38
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	705a      	strb	r2, [r3, #1]
 80023a0:	e00f      	b.n	80023c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023ce:	883a      	ldrh	r2, [r7, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	78ba      	ldrb	r2, [r7, #2]
 80023d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023ec:	78bb      	ldrb	r3, [r7, #2]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d102      	bne.n	80023f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_PCD_EP_Open+0xaa>
 8002402:	2302      	movs	r3, #2
 8002404:	e00e      	b.n	8002424 <HAL_PCD_EP_Open+0xc8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	f004 faa3 	bl	8006960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002422:	7afb      	ldrb	r3, [r7, #11]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da0f      	bge.n	8002460 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	3338      	adds	r3, #56	; 0x38
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
 800245e:	e00f      	b.n	8002480 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	3304      	adds	r3, #4
 8002478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_PCD_EP_Close+0x6e>
 8002496:	2302      	movs	r3, #2
 8002498:	e00e      	b.n	80024b8 <HAL_PCD_EP_Close+0x8c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 fae1 	bl	8006a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	460b      	mov	r3, r1
 80024ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	b2da      	uxtb	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6979      	ldr	r1, [r7, #20]
 8002534:	f004 fdc4 	bl	80070c0 <USB_EP0StartXfer>
 8002538:	e008      	b.n	800254c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	6979      	ldr	r1, [r7, #20]
 8002548:	f004 fb6e 	bl	8006c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	460b      	mov	r3, r1
 8002564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	f003 020f 	and.w	r2, r3, #15
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	3338      	adds	r3, #56	; 0x38
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2201      	movs	r2, #1
 8002594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002596:	7afb      	ldrb	r3, [r7, #11]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	b2da      	uxtb	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025b0:	7afb      	ldrb	r3, [r7, #11]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6979      	ldr	r1, [r7, #20]
 80025c8:	f004 fd7a 	bl	80070c0 <USB_EP0StartXfer>
 80025cc:	e008      	b.n	80025e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	f004 fb24 	bl	8006c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d901      	bls.n	8002608 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e050      	b.n	80026aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da0f      	bge.n	8002630 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	3338      	adds	r3, #56	; 0x38
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
 800262e:	e00d      	b.n	800264c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	3304      	adds	r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_PCD_EP_SetStall+0x82>
 8002668:	2302      	movs	r3, #2
 800266a:	e01e      	b.n	80026aa <HAL_PCD_EP_SetStall+0xc0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	4618      	mov	r0, r3
 800267c:	f004 fed6 	bl	800742c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800269a:	461a      	mov	r2, r3
 800269c:	f005 f8b6 	bl	800780c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d901      	bls.n	80026d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e042      	b.n	8002756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da0f      	bge.n	80026f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 020f 	and.w	r2, r3, #15
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	3338      	adds	r3, #56	; 0x38
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	705a      	strb	r2, [r3, #1]
 80026f6:	e00f      	b.n	8002718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 020f 	and.w	r2, r3, #15
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	3304      	adds	r3, #4
 8002710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_PCD_EP_ClrStall+0x86>
 8002734:	2302      	movs	r3, #2
 8002736:	e00e      	b.n	8002756 <HAL_PCD_EP_ClrStall+0xa4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fede 	bl	8007508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b08a      	sub	sp, #40	; 0x28
 8002762:	af02      	add	r7, sp, #8
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3338      	adds	r3, #56	; 0x38
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	429a      	cmp	r2, r3
 8002790:	d901      	bls.n	8002796 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06c      	b.n	8002870 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d902      	bls.n	80027b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3303      	adds	r3, #3
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ba:	e02b      	b.n	8002814 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d902      	bls.n	80027d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	3303      	adds	r3, #3
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68d9      	ldr	r1, [r3, #12]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4603      	mov	r3, r0
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f004 fdba 	bl	8007370 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	441a      	add	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	b29b      	uxth	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	429a      	cmp	r2, r3
 8002828:	d809      	bhi.n	800283e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002832:	429a      	cmp	r2, r3
 8002834:	d203      	bcs.n	800283e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1be      	bne.n	80027bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	429a      	cmp	r2, r3
 8002848:	d811      	bhi.n	800286e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2201      	movs	r2, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	43db      	mvns	r3, r3
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800286a:	4013      	ands	r3, r2
 800286c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	333c      	adds	r3, #60	; 0x3c
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 80a0 	bne.w	80029f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d015      	beq.n	80028e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a72      	ldr	r2, [pc, #456]	; (8002a88 <PCD_EP_OutXfrComplete_int+0x210>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	f240 80dd 	bls.w	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80d7 	beq.w	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028dc:	461a      	mov	r2, r3
 80028de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e2:	6093      	str	r3, [r2, #8]
 80028e4:	e0cb      	b.n	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fc:	461a      	mov	r2, r3
 80028fe:	2320      	movs	r3, #32
 8002900:	6093      	str	r3, [r2, #8]
 8002902:	e0bc      	b.n	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80b7 	bne.w	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <PCD_EP_OutXfrComplete_int+0x210>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d90f      	bls.n	8002938 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292e:	461a      	mov	r2, r3
 8002930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002934:	6093      	str	r3, [r2, #8]
 8002936:	e0a2      	b.n	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800294a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	0159      	lsls	r1, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	440b      	add	r3, r1
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800295e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4403      	add	r3, r0
 800296e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002972:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4403      	add	r3, r0
 8002996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4419      	add	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d114      	bne.n	80029e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d108      	bne.n	80029e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029da:	461a      	mov	r2, r3
 80029dc:	2101      	movs	r1, #1
 80029de:	f004 ff15 	bl	800780c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f006 fc1b 	bl	8009224 <HAL_PCD_DataOutStageCallback>
 80029ee:	e046      	b.n	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <PCD_EP_OutXfrComplete_int+0x214>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d124      	bne.n	8002a42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	e032      	b.n	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2320      	movs	r3, #32
 8002a32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f006 fbf2 	bl	8009224 <HAL_PCD_DataOutStageCallback>
 8002a40:	e01d      	b.n	8002a7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d114      	bne.n	8002a72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	f004 fecd 	bl	800780c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f006 fbd3 	bl	8009224 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	4f54300a 	.word	0x4f54300a
 8002a8c:	4f54310a 	.word	0x4f54310a

08002a90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	333c      	adds	r3, #60	; 0x3c
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d90e      	bls.n	8002ae4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	461a      	mov	r2, r3
 8002ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f006 fb8b 	bl	8009200 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d90c      	bls.n	8002b0c <PCD_EP_OutSetupPacket_int+0x7c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b04:	461a      	mov	r2, r3
 8002b06:	2101      	movs	r1, #1
 8002b08:	f004 fe80 	bl	800780c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	4f54300a 	.word	0x4f54300a

08002b1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b3a:	883b      	ldrh	r3, [r7, #0]
 8002b3c:	0419      	lsls	r1, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
 8002b48:	e028      	b.n	8002b9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e00d      	b.n	8002b7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	3340      	adds	r3, #64	; 0x40
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4413      	add	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	3301      	adds	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3ec      	bcc.n	8002b5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b84:	883b      	ldrh	r3, [r7, #0]
 8002b86:	0418      	lsls	r0, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	4302      	orrs	r2, r0
 8002b94:	3340      	adds	r3, #64	; 0x40
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_PCDEx_ActivateLPM+0x44>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	10000003 	.word	0x10000003

08002c14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_PWREx_ConfigSupply+0x70>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d00a      	beq.n	8002c56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_PWREx_ConfigSupply+0x70>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e01f      	b.n	8002c92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e01d      	b.n	8002c92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_PWREx_ConfigSupply+0x70>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	490f      	ldr	r1, [pc, #60]	; (8002c9c <HAL_PWREx_ConfigSupply+0x70>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c66:	f7fe faf3 	bl	8001250 <HAL_GetTick>
 8002c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c6c:	e009      	b.n	8002c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c6e:	f7fe faef 	bl	8001250 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7c:	d901      	bls.n	8002c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e007      	b.n	8002c92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_PWREx_ConfigSupply+0x70>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	58024800 	.word	0x58024800

08002ca0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	58024800 	.word	0x58024800

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	; 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e3ff      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8087 	beq.w	8002dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce0:	4b99      	ldr	r3, [pc, #612]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cea:	4b97      	ldr	r3, [pc, #604]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d007      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46>
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	2b18      	cmp	r3, #24
 8002cfa:	d110      	bne.n	8002d1e <HAL_RCC_OscConfig+0x5e>
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d10b      	bne.n	8002d1e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d06:	4b90      	ldr	r3, [pc, #576]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d06c      	beq.n	8002dec <HAL_RCC_OscConfig+0x12c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d168      	bne.n	8002dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e3d9      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x76>
 8002d28:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a86      	ldr	r2, [pc, #536]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e02e      	b.n	8002d94 <HAL_RCC_OscConfig+0xd4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x98>
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a81      	ldr	r2, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7e      	ldr	r2, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0xd4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0xbc>
 8002d62:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0xd4>
 8002d7c:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a71      	ldr	r2, [pc, #452]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fa58 	bl	8001250 <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fa54 	bl	8001250 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e38d      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db6:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe4>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fa44 	bl	8001250 <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fa40 	bl	8001250 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e379      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dde:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x10c>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80ae 	beq.w	8002f58 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfc:	4b52      	ldr	r3, [pc, #328]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_RCC_OscConfig+0x162>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2b18      	cmp	r3, #24
 8002e16:	d13a      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1ce>
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d135      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e34b      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	f7fe fa37 	bl	80012ac <HAL_GetREVID>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d817      	bhi.n	8002e78 <HAL_RCC_OscConfig+0x1b8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d108      	bne.n	8002e62 <HAL_RCC_OscConfig+0x1a2>
 8002e50:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e58:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e60:	e07a      	b.n	8002f58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	031b      	lsls	r3, r3, #12
 8002e70:	4935      	ldr	r1, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e76:	e06f      	b.n	8002f58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	4930      	ldr	r1, [pc, #192]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8c:	e064      	b.n	8002f58 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d045      	beq.n	8002f22 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0219 	bic.w	r2, r3, #25
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4929      	ldr	r1, [pc, #164]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f9d2 	bl	8001250 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe f9ce 	bl	8001250 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e307      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	f7fe f9ed 	bl	80012ac <HAL_GetREVID>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d817      	bhi.n	8002f0c <HAL_RCC_OscConfig+0x24c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d108      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x236>
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef2:	6053      	str	r3, [r2, #4]
 8002ef4:	e030      	b.n	8002f58 <HAL_RCC_OscConfig+0x298>
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	031b      	lsls	r3, r3, #12
 8002f04:	4910      	ldr	r1, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
 8002f0a:	e025      	b.n	8002f58 <HAL_RCC_OscConfig+0x298>
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	490b      	ldr	r1, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	e01a      	b.n	8002f58 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCC_OscConfig+0x288>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe f98f 	bl	8001250 <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe f98b 	bl	8001250 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d903      	bls.n	8002f4c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e2c4      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
 8002f48:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f4c:	4ba4      	ldr	r3, [pc, #656]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a9 	beq.w	80030b8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4b9e      	ldr	r3, [pc, #632]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f70:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d007      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2cc>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b18      	cmp	r3, #24
 8002f80:	d13a      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x338>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d135      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f8c:	4b94      	ldr	r3, [pc, #592]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2e4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e296      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fa4:	f7fe f982 	bl	80012ac <HAL_GetREVID>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d817      	bhi.n	8002fe2 <HAL_RCC_OscConfig+0x322>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x30c>
 8002fba:	4b89      	ldr	r3, [pc, #548]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fc2:	4a87      	ldr	r2, [pc, #540]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fca:	e075      	b.n	80030b8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fcc:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	069b      	lsls	r3, r3, #26
 8002fda:	4981      	ldr	r1, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fe0:	e06a      	b.n	80030b8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	061b      	lsls	r3, r3, #24
 8002ff0:	497b      	ldr	r1, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ff6:	e05f      	b.n	80030b8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d042      	beq.n	8003086 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003000:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a76      	ldr	r2, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe f920 	bl	8001250 <HAL_GetTick>
 8003010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003014:	f7fe f91c 	bl	8001250 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e255      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003032:	f7fe f93b 	bl	80012ac <HAL_GetREVID>
 8003036:	4602      	mov	r2, r0
 8003038:	f241 0303 	movw	r3, #4099	; 0x1003
 800303c:	429a      	cmp	r2, r3
 800303e:	d817      	bhi.n	8003070 <HAL_RCC_OscConfig+0x3b0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	2b20      	cmp	r3, #32
 8003046:	d108      	bne.n	800305a <HAL_RCC_OscConfig+0x39a>
 8003048:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003056:	6053      	str	r3, [r2, #4]
 8003058:	e02e      	b.n	80030b8 <HAL_RCC_OscConfig+0x3f8>
 800305a:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	069b      	lsls	r3, r3, #26
 8003068:	495d      	ldr	r1, [pc, #372]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e023      	b.n	80030b8 <HAL_RCC_OscConfig+0x3f8>
 8003070:	4b5b      	ldr	r3, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	4958      	ldr	r1, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
 8003084:	e018      	b.n	80030b8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003086:	4b56      	ldr	r3, [pc, #344]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a55      	ldr	r2, [pc, #340]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800308c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fe f8dd 	bl	8001250 <HAL_GetTick>
 8003096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800309a:	f7fe f8d9 	bl	8001250 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e212      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d036      	beq.n	8003132 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d019      	beq.n	8003100 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030cc:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	4a43      	ldr	r2, [pc, #268]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe f8ba 	bl	8001250 <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe f8b6 	bl	8001250 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1ef      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x420>
 80030fe:	e018      	b.n	8003132 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	4a36      	ldr	r2, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe f8a0 	bl	8001250 <HAL_GetTick>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe f89c 	bl	8001250 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e1d5      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d036      	beq.n	80031ac <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d019      	beq.n	800317a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800314c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003150:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003152:	f7fe f87d 	bl	8001250 <HAL_GetTick>
 8003156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800315a:	f7fe f879 	bl	8001250 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1b2      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x49a>
 8003178:	e018      	b.n	80031ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 8003180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003186:	f7fe f863 	bl	8001250 <HAL_GetTick>
 800318a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800318e:	f7fe f85f 	bl	8001250 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e198      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_RCC_OscConfig+0x520>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8085 	beq.w	80032c4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_OscConfig+0x524>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_OscConfig+0x524>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c6:	f7fe f843 	bl	8001250 <HAL_GetTick>
 80031ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031cc:	e00c      	b.n	80031e8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe f83f 	bl	8001250 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d905      	bls.n	80031e8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e178      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031e8:	4b96      	ldr	r3, [pc, #600]	; (8003444 <HAL_RCC_OscConfig+0x784>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ec      	beq.n	80031ce <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x54a>
 80031fc:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a91      	ldr	r2, [pc, #580]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	e02d      	b.n	8003266 <HAL_RCC_OscConfig+0x5a6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x56c>
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a8c      	ldr	r2, [pc, #560]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a89      	ldr	r2, [pc, #548]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	e01c      	b.n	8003266 <HAL_RCC_OscConfig+0x5a6>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b05      	cmp	r3, #5
 8003232:	d10c      	bne.n	800324e <HAL_RCC_OscConfig+0x58e>
 8003234:	4b84      	ldr	r3, [pc, #528]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	4b81      	ldr	r3, [pc, #516]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	e00b      	b.n	8003266 <HAL_RCC_OscConfig+0x5a6>
 800324e:	4b7e      	ldr	r3, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fd ffef 	bl	8001250 <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd ffeb 	bl	8001250 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e122      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800328c:	4b6e      	ldr	r3, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ee      	beq.n	8003276 <HAL_RCC_OscConfig+0x5b6>
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fd ffd9 	bl	8001250 <HAL_GetTick>
 800329e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fd ffd5 	bl	8001250 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e10c      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ee      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8101 	beq.w	80034d0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032ce:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d6:	2b18      	cmp	r3, #24
 80032d8:	f000 80bc 	beq.w	8003454 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	f040 8095 	bne.w	8003410 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b58      	ldr	r3, [pc, #352]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a57      	ldr	r2, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80032ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fd ffad 	bl	8001250 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fd ffa9 	bl	8001250 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0e2      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330c:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800331a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331c:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_RCC_OscConfig+0x78c>)
 800331e:	4013      	ands	r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	430a      	orrs	r2, r1
 800332c:	4946      	ldr	r1, [pc, #280]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800332e:	4313      	orrs	r3, r2
 8003330:	628b      	str	r3, [r1, #40]	; 0x28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	3b01      	subs	r3, #1
 8003338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	3b01      	subs	r3, #1
 8003342:	025b      	lsls	r3, r3, #9
 8003344:	b29b      	uxth	r3, r3
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	3b01      	subs	r3, #1
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	3b01      	subs	r3, #1
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003362:	4939      	ldr	r1, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003364:	4313      	orrs	r3, r2
 8003366:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_RCC_OscConfig+0x790>)
 800337a:	4013      	ands	r3, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003380:	00d2      	lsls	r2, r2, #3
 8003382:	4931      	ldr	r1, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003384:	4313      	orrs	r3, r2
 8003386:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	f023 020c 	bic.w	r2, r3, #12
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	492c      	ldr	r1, [pc, #176]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003396:	4313      	orrs	r3, r2
 8003398:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f023 0202 	bic.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4928      	ldr	r1, [pc, #160]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd ff32 	bl	8001250 <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd ff2e 	bl	8001250 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e067      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x730>
 800340e:	e05f      	b.n	80034d0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd ff18 	bl	8001250 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003424:	f7fd ff14 	bl	8001250 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04d      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_OscConfig+0x788>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x764>
 8003442:	e045      	b.n	80034d0 <HAL_RCC_OscConfig+0x810>
 8003444:	58024800 	.word	0x58024800
 8003448:	58024400 	.word	0x58024400
 800344c:	fffffc0c 	.word	0xfffffc0c
 8003450:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x81c>)
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_OscConfig+0x81c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b01      	cmp	r3, #1
 8003466:	d031      	beq.n	80034cc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d12a      	bne.n	80034cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d122      	bne.n	80034cc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d11a      	bne.n	80034cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d108      	bne.n	80034cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	0e1b      	lsrs	r3, r3, #24
 80034be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3730      	adds	r7, #48	; 0x30
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	58024400 	.word	0x58024400

080034e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e19c      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b8a      	ldr	r3, [pc, #552]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b87      	ldr	r3, [pc, #540]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	4985      	ldr	r1, [pc, #532]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b83      	ldr	r3, [pc, #524]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e184      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800353c:	429a      	cmp	r2, r3
 800353e:	d908      	bls.n	8003552 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003540:	4b78      	ldr	r3, [pc, #480]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	4975      	ldr	r1, [pc, #468]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 800354e:	4313      	orrs	r3, r2
 8003550:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	4b70      	ldr	r3, [pc, #448]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800356a:	429a      	cmp	r2, r3
 800356c:	d908      	bls.n	8003580 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800356e:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	496a      	ldr	r1, [pc, #424]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 800357c:	4313      	orrs	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d010      	beq.n	80035ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	4b64      	ldr	r3, [pc, #400]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003598:	429a      	cmp	r2, r3
 800359a:	d908      	bls.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800359c:	4b61      	ldr	r3, [pc, #388]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	495e      	ldr	r1, [pc, #376]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	4b59      	ldr	r3, [pc, #356]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d908      	bls.n	80035dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4953      	ldr	r1, [pc, #332]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d908      	bls.n	800360a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f023 020f 	bic.w	r2, r3, #15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4947      	ldr	r1, [pc, #284]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003606:	4313      	orrs	r3, r2
 8003608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d055      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003616:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	4940      	ldr	r1, [pc, #256]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003624:	4313      	orrs	r3, r2
 8003626:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d107      	bne.n	8003640 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003630:	4b3c      	ldr	r3, [pc, #240]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d121      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0f6      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0ea      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0de      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003670:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0d6      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f023 0207 	bic.w	r2, r3, #7
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4925      	ldr	r1, [pc, #148]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd fddd 	bl	8001250 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369a:	f7fd fdd9 	bl	8001250 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0be      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	429a      	cmp	r2, r3
 80036c0:	d1eb      	bne.n	800369a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	429a      	cmp	r2, r3
 80036dc:	d208      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	490e      	ldr	r1, [pc, #56]	; (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d214      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 020f 	bic.w	r2, r3, #15
 8003706:	4906      	ldr	r1, [pc, #24]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e086      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
 8003720:	52002000 	.word	0x52002000
 8003724:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003740:	429a      	cmp	r2, r3
 8003742:	d208      	bcs.n	8003756 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	4939      	ldr	r1, [pc, #228]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003752:	4313      	orrs	r3, r2
 8003754:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800376e:	429a      	cmp	r2, r3
 8003770:	d208      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	492e      	ldr	r1, [pc, #184]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003780:	4313      	orrs	r3, r2
 8003782:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800379c:	429a      	cmp	r2, r3
 800379e:	d208      	bcs.n	80037b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4922      	ldr	r1, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d208      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4917      	ldr	r1, [pc, #92]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037e0:	f000 f834 	bl	800384c <HAL_RCC_GetSysClockFreq>
 80037e4:	4601      	mov	r1, r0
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x35c>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa21 f303 	lsr.w	r3, r1, r3
 80037fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_RCC_ClockConfig+0x35c>)
 8003808:	5cd3      	ldrb	r3, [r2, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x360>)
 8003816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x364>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x368>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fcca 	bl	80011bc <HAL_InitTick>
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	58024400 	.word	0x58024400
 800383c:	0800a680 	.word	0x0800a680
 8003840:	24000010 	.word	0x24000010
 8003844:	2400000c 	.word	0x2400000c
 8003848:	24000014 	.word	0x24000014

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003852:	4baf      	ldr	r3, [pc, #700]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385a:	2b18      	cmp	r3, #24
 800385c:	f200 814e 	bhi.w	8003afc <HAL_RCC_GetSysClockFreq+0x2b0>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	080038cd 	.word	0x080038cd
 800386c:	08003afd 	.word	0x08003afd
 8003870:	08003afd 	.word	0x08003afd
 8003874:	08003afd 	.word	0x08003afd
 8003878:	08003afd 	.word	0x08003afd
 800387c:	08003afd 	.word	0x08003afd
 8003880:	08003afd 	.word	0x08003afd
 8003884:	08003afd 	.word	0x08003afd
 8003888:	080038f3 	.word	0x080038f3
 800388c:	08003afd 	.word	0x08003afd
 8003890:	08003afd 	.word	0x08003afd
 8003894:	08003afd 	.word	0x08003afd
 8003898:	08003afd 	.word	0x08003afd
 800389c:	08003afd 	.word	0x08003afd
 80038a0:	08003afd 	.word	0x08003afd
 80038a4:	08003afd 	.word	0x08003afd
 80038a8:	080038f9 	.word	0x080038f9
 80038ac:	08003afd 	.word	0x08003afd
 80038b0:	08003afd 	.word	0x08003afd
 80038b4:	08003afd 	.word	0x08003afd
 80038b8:	08003afd 	.word	0x08003afd
 80038bc:	08003afd 	.word	0x08003afd
 80038c0:	08003afd 	.word	0x08003afd
 80038c4:	08003afd 	.word	0x08003afd
 80038c8:	080038ff 	.word	0x080038ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038cc:	4b90      	ldr	r3, [pc, #576]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038d8:	4b8d      	ldr	r3, [pc, #564]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	4a8c      	ldr	r2, [pc, #560]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80038ea:	e10a      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038ec:	4b89      	ldr	r3, [pc, #548]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80038ee:	61bb      	str	r3, [r7, #24]
    break;
 80038f0:	e107      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038f2:	4b89      	ldr	r3, [pc, #548]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80038f4:	61bb      	str	r3, [r7, #24]
    break;
 80038f6:	e104      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80038f8:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80038fa:	61bb      	str	r3, [r7, #24]
    break;
 80038fc:	e101      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038fe:	4b84      	ldr	r3, [pc, #528]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003908:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003912:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003914:	4b7e      	ldr	r3, [pc, #504]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800391e:	4b7c      	ldr	r3, [pc, #496]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	08db      	lsrs	r3, r3, #3
 8003924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80da 	beq.w	8003af6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d05a      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x1b2>
 8003948:	2b01      	cmp	r3, #1
 800394a:	d302      	bcc.n	8003952 <HAL_RCC_GetSysClockFreq+0x106>
 800394c:	2b02      	cmp	r3, #2
 800394e:	d078      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003950:	e099      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003952:	4b6f      	ldr	r3, [pc, #444]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d02d      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800395e:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800396a:	fa22 f303 	lsr.w	r3, r2, r3
 800396e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003988:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003998:	ed97 6a02 	vldr	s12, [r7, #8]
 800399c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80039b8:	e087      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2d8>
 80039c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fc:	e065      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a08:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003b28 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a10:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a24:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a40:	e043      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003b2c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a54:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a68:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a84:	e021      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a90:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003b28 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ac8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aee:	ee17 3a90 	vmov	r3, s15
 8003af2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003af4:	e005      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
    break;
 8003afa:	e002      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003afe:	61bb      	str	r3, [r7, #24]
    break;
 8003b00:	bf00      	nop
  }

  return sysclockfreq;
 8003b02:	69bb      	ldr	r3, [r7, #24]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3724      	adds	r7, #36	; 0x24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	58024400 	.word	0x58024400
 8003b14:	03d09000 	.word	0x03d09000
 8003b18:	003d0900 	.word	0x003d0900
 8003b1c:	007a1200 	.word	0x007a1200
 8003b20:	46000000 	.word	0x46000000
 8003b24:	4c742400 	.word	0x4c742400
 8003b28:	4a742400 	.word	0x4a742400
 8003b2c:	4af42400 	.word	0x4af42400

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b36:	f7ff fe89 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b48:	5cd3      	ldrb	r3, [r2, r3]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b6e:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	58024400 	.word	0x58024400
 8003b84:	0800a680 	.word	0x0800a680
 8003b88:	24000010 	.word	0x24000010
 8003b8c:	2400000c 	.word	0x2400000c

08003b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b94:	f7ff ffcc 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b98:	4601      	mov	r1, r0
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	58024400 	.word	0x58024400
 8003bb8:	0800a680 	.word	0x0800a680

08003bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bc0:	f7ff ffb6 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	58024400 	.word	0x58024400
 8003be4:	0800a680 	.word	0x0800a680

08003be8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d03d      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0c:	d013      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c12:	d802      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c18:	e01f      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1e:	d013      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c24:	d01c      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c26:	e018      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4baf      	ldr	r3, [pc, #700]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	4aae      	ldr	r2, [pc, #696]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c34:	e015      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f96f 	bl	8004f20 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c46:	e00c      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3324      	adds	r3, #36	; 0x24
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fa18 	bl	8005084 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c68:	4b9f      	ldr	r3, [pc, #636]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	499c      	ldr	r1, [pc, #624]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	650b      	str	r3, [r1, #80]	; 0x50
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d826      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cb1 	.word	0x08003cb1
 8003ca0:	08003cbf 	.word	0x08003cbf
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003ce9 	.word	0x08003ce9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb0:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	4a8c      	ldr	r2, [pc, #560]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cbc:	e015      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f92b 	bl	8004f20 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cce:	e00c      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3324      	adds	r3, #36	; 0x24
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 f9d4 	bl	8005084 <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	f023 0207 	bic.w	r2, r3, #7
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	497a      	ldr	r1, [pc, #488]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	650b      	str	r3, [r1, #80]	; 0x50
 8003d02:	e001      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03e      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d01c      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d1c:	2b80      	cmp	r3, #128	; 0x80
 8003d1e:	d804      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d00d      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d28:	e01e      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d2c:	d01f      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	d01e      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d34:	e018      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d36:	4b6c      	ldr	r3, [pc, #432]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a6b      	ldr	r2, [pc, #428]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d42:	e017      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f8e8 	bl	8004f20 <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d54:	e00e      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3324      	adds	r3, #36	; 0x24
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 f991 	bl	8005084 <RCCEx_PLL3_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d66:	e005      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4958      	ldr	r1, [pc, #352]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	650b      	str	r3, [r1, #80]	; 0x50
 8003d8c:	e001      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d044      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da8:	d01f      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dae:	d805      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003db8:	d00e      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003dba:	e01f      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dc0:	d01f      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003dc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dc6:	d01e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003dc8:	e018      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	4a46      	ldr	r2, [pc, #280]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dd6:	e017      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f89e 	bl	8004f20 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003de8:	e00e      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3324      	adds	r3, #36	; 0x24
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 f947 	bl	8005084 <RCCEx_PLL3_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dfa:	e005      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e1c:	4932      	ldr	r1, [pc, #200]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	658b      	str	r3, [r1, #88]	; 0x58
 8003e22:	e001      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d044      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e3e:	d01f      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e44:	d805      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4e:	d00e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e50:	e01f      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e56:	d01f      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e5c:	d01e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e5e:	e018      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e6c:	e017      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 f853 	bl	8004f20 <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e7e:	e00e      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3324      	adds	r3, #36	; 0x24
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 f8fc 	bl	8005084 <RCCEx_PLL3_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e90:	e005      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
      break;
 8003e96:	e002      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eb2:	490d      	ldr	r1, [pc, #52]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	658b      	str	r3, [r1, #88]	; 0x58
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d035      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d00c      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d802      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01b      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003eda:	e017      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d00c      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003ee0:	2b30      	cmp	r3, #48	; 0x30
 8003ee2:	d018      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003ee4:	e012      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eec:	4baf      	ldr	r3, [pc, #700]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4aae      	ldr	r2, [pc, #696]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ef8:	e00e      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 f80d 	bl	8004f20 <RCCEx_PLL2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f0a:	e005      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e002      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f1e:	4ba3      	ldr	r3, [pc, #652]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	49a0      	ldr	r1, [pc, #640]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f30:	e001      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d042      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4a:	d01f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d805      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	d00e      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003f5c:	e01f      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003f5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f62:	d01f      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f68:	d01e      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003f6a:	e018      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6c:	4b8f      	ldr	r3, [pc, #572]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	4a8e      	ldr	r2, [pc, #568]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f78:	e017      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 ffcd 	bl	8004f20 <RCCEx_PLL2_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f8a:	e00e      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3324      	adds	r3, #36	; 0x24
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f876 	bl	8005084 <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fb0:	4b7e      	ldr	r3, [pc, #504]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	497b      	ldr	r1, [pc, #492]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d042      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fdc:	d01b      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe2:	d805      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d022      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003fee:	e01b      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ff4:	d01d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffa:	d01c      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004000:	d01b      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004002:	e011      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ff88 	bl	8004f20 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004014:	e012      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3324      	adds	r3, #36	; 0x24
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f831 	bl	8005084 <RCCEx_PLL3_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004026:	e009      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
      break;
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800402e:	bf00      	nop
 8004030:	e004      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800403a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004042:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	4957      	ldr	r1, [pc, #348]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	650b      	str	r3, [r1, #80]	; 0x50
 8004054:	e001      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004070:	d01b      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004076:	d805      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800407c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004082:	e01b      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d01d      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800408a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800408e:	d01c      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004094:	d01b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004096:	e011      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 ff3e 	bl	8004f20 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040a8:	e012      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 ffe7 	bl	8005084 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
      break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80040c2:	bf00      	nop
 80040c4:	e004      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80040ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040d6:	4b35      	ldr	r3, [pc, #212]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040e4:	4931      	ldr	r1, [pc, #196]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	658b      	str	r3, [r1, #88]	; 0x58
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02d      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004104:	d005      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410a:	d009      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800411e:	e00c      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fefa 	bl	8004f20 <RCCEx_PLL2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
      break;
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414c:	4917      	ldr	r1, [pc, #92]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	650b      	str	r3, [r1, #80]	; 0x50
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d035      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	2b03      	cmp	r3, #3
 800416a:	d81b      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	080041b1 	.word	0x080041b1
 8004178:	08004185 	.word	0x08004185
 800417c:	08004193 	.word	0x08004193
 8004180:	080041b1 	.word	0x080041b1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004190:	e00f      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	2102      	movs	r1, #2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fec1 	bl	8004f20 <RCCEx_PLL2_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041b8:	4bba      	ldr	r3, [pc, #744]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	f023 0203 	bic.w	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	49b7      	ldr	r1, [pc, #732]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8086 	beq.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041de:	4bb2      	ldr	r3, [pc, #712]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4ab1      	ldr	r2, [pc, #708]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ea:	f7fd f831 	bl	8001250 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f0:	e009      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f2:	f7fd f82d 	bl	8001250 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d902      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	75fb      	strb	r3, [r7, #23]
        break;
 8004204:	e005      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004206:	4ba8      	ldr	r3, [pc, #672]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ef      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d166      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004218:	4ba2      	ldr	r3, [pc, #648]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800421a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004222:	4053      	eors	r3, r2
 8004224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800422c:	4b9d      	ldr	r3, [pc, #628]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004234:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004236:	4b9b      	ldr	r3, [pc, #620]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a9a      	ldr	r2, [pc, #616]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004242:	4b98      	ldr	r3, [pc, #608]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a97      	ldr	r2, [pc, #604]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800424e:	4a95      	ldr	r2, [pc, #596]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800425a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425e:	d115      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fc fff6 	bl	8001250 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004266:	e00b      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fc fff2 	bl	8001250 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d902      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	75fb      	strb	r3, [r7, #23]
            break;
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004280:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ed      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d126      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a0:	d10d      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80042a2:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042b0:	0919      	lsrs	r1, r3, #4
 80042b2:	4b7e      	ldr	r3, [pc, #504]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80042b4:	400b      	ands	r3, r1
 80042b6:	497b      	ldr	r1, [pc, #492]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	610b      	str	r3, [r1, #16]
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80042be:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	4a78      	ldr	r2, [pc, #480]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042c8:	6113      	str	r3, [r2, #16]
 80042ca:	4b76      	ldr	r3, [pc, #472]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	4972      	ldr	r1, [pc, #456]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	670b      	str	r3, [r1, #112]	; 0x70
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	75bb      	strb	r3, [r7, #22]
 80042e4:	e001      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07d      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fa:	2b28      	cmp	r3, #40	; 0x28
 80042fc:	d866      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	080043d3 	.word	0x080043d3
 8004308:	080043cd 	.word	0x080043cd
 800430c:	080043cd 	.word	0x080043cd
 8004310:	080043cd 	.word	0x080043cd
 8004314:	080043cd 	.word	0x080043cd
 8004318:	080043cd 	.word	0x080043cd
 800431c:	080043cd 	.word	0x080043cd
 8004320:	080043cd 	.word	0x080043cd
 8004324:	080043a9 	.word	0x080043a9
 8004328:	080043cd 	.word	0x080043cd
 800432c:	080043cd 	.word	0x080043cd
 8004330:	080043cd 	.word	0x080043cd
 8004334:	080043cd 	.word	0x080043cd
 8004338:	080043cd 	.word	0x080043cd
 800433c:	080043cd 	.word	0x080043cd
 8004340:	080043cd 	.word	0x080043cd
 8004344:	080043bb 	.word	0x080043bb
 8004348:	080043cd 	.word	0x080043cd
 800434c:	080043cd 	.word	0x080043cd
 8004350:	080043cd 	.word	0x080043cd
 8004354:	080043cd 	.word	0x080043cd
 8004358:	080043cd 	.word	0x080043cd
 800435c:	080043cd 	.word	0x080043cd
 8004360:	080043cd 	.word	0x080043cd
 8004364:	080043d3 	.word	0x080043d3
 8004368:	080043cd 	.word	0x080043cd
 800436c:	080043cd 	.word	0x080043cd
 8004370:	080043cd 	.word	0x080043cd
 8004374:	080043cd 	.word	0x080043cd
 8004378:	080043cd 	.word	0x080043cd
 800437c:	080043cd 	.word	0x080043cd
 8004380:	080043cd 	.word	0x080043cd
 8004384:	080043d3 	.word	0x080043d3
 8004388:	080043cd 	.word	0x080043cd
 800438c:	080043cd 	.word	0x080043cd
 8004390:	080043cd 	.word	0x080043cd
 8004394:	080043cd 	.word	0x080043cd
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043cd 	.word	0x080043cd
 80043a0:	080043cd 	.word	0x080043cd
 80043a4:	080043d3 	.word	0x080043d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	2101      	movs	r1, #1
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fdb6 	bl	8004f20 <RCCEx_PLL2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3324      	adds	r3, #36	; 0x24
 80043be:	2101      	movs	r1, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fe5f 	bl	8005084 <RCCEx_PLL3_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80043d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043da:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e6:	492f      	ldr	r1, [pc, #188]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	654b      	str	r3, [r1, #84]	; 0x54
 80043ec:	e001      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d037      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	2b05      	cmp	r3, #5
 8004404:	d820      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	0800444f 	.word	0x0800444f
 8004410:	08004425 	.word	0x08004425
 8004414:	08004437 	.word	0x08004437
 8004418:	0800444f 	.word	0x0800444f
 800441c:	0800444f 	.word	0x0800444f
 8004420:	0800444f 	.word	0x0800444f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	2101      	movs	r1, #1
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fd78 	bl	8004f20 <RCCEx_PLL2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004434:	e00c      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3324      	adds	r3, #36	; 0x24
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fe21 	bl	8005084 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004446:	e003      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
      break;
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800444e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f023 0207 	bic.w	r2, r3, #7
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	4910      	ldr	r1, [pc, #64]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	654b      	str	r3, [r1, #84]	; 0x54
 8004468:	e001      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d040      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	2b05      	cmp	r3, #5
 8004482:	d827      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044db 	.word	0x080044db
 8004490:	080044b1 	.word	0x080044b1
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044db 	.word	0x080044db
 800449c:	080044db 	.word	0x080044db
 80044a0:	080044db 	.word	0x080044db
 80044a4:	58024400 	.word	0x58024400
 80044a8:	58024800 	.word	0x58024800
 80044ac:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fd32 	bl	8004f20 <RCCEx_PLL2_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044c0:	e00c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3324      	adds	r3, #36	; 0x24
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fddb 	bl	8005084 <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80044da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044e2:	4bb2      	ldr	r3, [pc, #712]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	f023 0207 	bic.w	r2, r3, #7
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	49ae      	ldr	r1, [pc, #696]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	658b      	str	r3, [r1, #88]	; 0x58
 80044f6:	e001      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d044      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004512:	d01b      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004518:	d805      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d022      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004524:	e01b      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d01d      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800452c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004530:	d01c      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004536:	d01b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004538:	e011      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fced 	bl	8004f20 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800454a:	e012      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fd96 	bl	8005084 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800455c:	e009      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
      break;
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004564:	bf00      	nop
 8004566:	e004      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004578:	4b8c      	ldr	r3, [pc, #560]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004586:	4989      	ldr	r1, [pc, #548]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	654b      	str	r3, [r1, #84]	; 0x54
 800458c:	e001      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d044      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a8:	d01b      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d805      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d022      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80045ba:	e01b      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d01d      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80045c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045c6:	d01c      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80045c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045cc:	d01b      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fca2 	bl	8004f20 <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045e0:	e012      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3324      	adds	r3, #36	; 0x24
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fd4b 	bl	8005084 <RCCEx_PLL3_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
      break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800460e:	4b67      	ldr	r3, [pc, #412]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461c:	4963      	ldr	r1, [pc, #396]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	658b      	str	r3, [r1, #88]	; 0x58
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d044      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800463e:	d01b      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004644:	d805      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d022      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004650:	e01b      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	d01d      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004658:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800465c:	d01c      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800465e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004662:	d01b      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004664:	e011      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fc57 	bl	8004f20 <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004676:	e012      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3324      	adds	r3, #36	; 0x24
 800467c:	2102      	movs	r1, #2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fd00 	bl	8005084 <RCCEx_PLL3_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004688:	e009      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
      break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004690:	bf00      	nop
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800469c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b2:	493e      	ldr	r1, [pc, #248]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	658b      	str	r3, [r1, #88]	; 0x58
 80046b8:	e001      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d10a      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3324      	adds	r3, #36	; 0x24
 80046da:	2102      	movs	r1, #2
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fcd1 	bl	8005084 <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046ec:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fa:	492c      	ldr	r1, [pc, #176]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004716:	d10a      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3324      	adds	r3, #36	; 0x24
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fcb0 	bl	8005084 <RCCEx_PLL3_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800472e:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473c:	491b      	ldr	r1, [pc, #108]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d032      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004758:	d00d      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800475a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475e:	d016      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d111      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fbd8 	bl	8004f20 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004774:	e00c      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	2102      	movs	r1, #2
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fc81 	bl	8005084 <RCCEx_PLL3_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004786:	e003      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
      break;
 800478c:	e000      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800478e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047a4:	4901      	ldr	r1, [pc, #4]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	658b      	str	r3, [r1, #88]	; 0x58
 80047aa:	e003      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80047ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02f      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ca:	d00c      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80047cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047d0:	d015      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d6:	d10f      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d8:	4b79      	ldr	r3, [pc, #484]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4a78      	ldr	r2, [pc, #480]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80047e4:	e00c      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3324      	adds	r3, #36	; 0x24
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fc49 	bl	8005084 <RCCEx_PLL3_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
      break;
 80047fc:	e000      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80047fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004806:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	496a      	ldr	r1, [pc, #424]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	654b      	str	r3, [r1, #84]	; 0x54
 800481a:	e001      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d029      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d007      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800483a:	e00f      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4b60      	ldr	r3, [pc, #384]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a5f      	ldr	r2, [pc, #380]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004848:	e00b      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	2102      	movs	r1, #2
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fb65 	bl	8004f20 <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800485a:	e002      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
      break;
 8004860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004868:	4b55      	ldr	r3, [pc, #340]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800486a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	4952      	ldr	r1, [pc, #328]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	64cb      	str	r3, [r1, #76]	; 0x4c
 800487a:	e001      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3324      	adds	r3, #36	; 0x24
 8004890:	2102      	movs	r1, #2
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fbf6 	bl	8005084 <RCCEx_PLL3_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02f      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d00c      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048bc:	d802      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80048c2:	e00d      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c8:	d00f      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ce:	d00e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80048d0:	e006      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80048de:	e007      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e004      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80048ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048f6:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004902:	492f      	ldr	r1, [pc, #188]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004904:	4313      	orrs	r3, r2
 8004906:	654b      	str	r3, [r1, #84]	; 0x54
 8004908:	e001      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800491a:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4926      	ldr	r1, [pc, #152]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004946:	491e      	ldr	r1, [pc, #120]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004964:	4916      	ldr	r1, [pc, #88]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800497c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004980:	6113      	str	r3, [r2, #16]
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800498c:	490c      	ldr	r1, [pc, #48]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da08      	bge.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	4906      	ldr	r1, [pc, #24]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80049ac:	7dbb      	ldrb	r3, [r7, #22]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	58024400 	.word	0x58024400

080049c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049c8:	f7ff f8b2 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 80049cc:	4601      	mov	r1, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	58024400 	.word	0x58024400
 80049ec:	0800a680 	.word	0x0800a680

080049f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049f8:	4b9d      	ldr	r3, [pc, #628]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004a02:	4b9b      	ldr	r3, [pc, #620]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	0b1b      	lsrs	r3, r3, #12
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a0e:	4b98      	ldr	r3, [pc, #608]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004a1a:	4b95      	ldr	r3, [pc, #596]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 810a 	beq.w	8004c52 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d05a      	beq.n	8004afa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d302      	bcc.n	8004a4e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d078      	beq.n	8004b3e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004a4c:	e099      	b.n	8004b82 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a4e:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d02d      	beq.n	8004ab6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a5a:	4b85      	ldr	r3, [pc, #532]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	4a83      	ldr	r2, [pc, #524]	; (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a84:	4b7a      	ldr	r3, [pc, #488]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a94:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ab4:	e087      	b.n	8004bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac8:	4b69      	ldr	r3, [pc, #420]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004adc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af8:	e065      	b.n	8004bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004b08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0c:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b20:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b3c:	e043      	b.n	8004bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b50:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b64:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b80:	e021      	b.n	8004bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bc4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	0a5b      	lsrs	r3, r3, #9
 8004bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bec:	ee17 2a90 	vmov	r2, s15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1a:	ee17 2a90 	vmov	r2, s15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004c22:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	0e1b      	lsrs	r3, r3, #24
 8004c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c48:	ee17 2a90 	vmov	r2, s15
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c50:	e008      	b.n	8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	3724      	adds	r7, #36	; 0x24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	58024400 	.word	0x58024400
 8004c74:	03d09000 	.word	0x03d09000
 8004c78:	46000000 	.word	0x46000000
 8004c7c:	4c742400 	.word	0x4c742400
 8004c80:	4a742400 	.word	0x4a742400
 8004c84:	4af42400 	.word	0x4af42400

08004c88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c90:	4b9d      	ldr	r3, [pc, #628]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004c9a:	4b9b      	ldr	r3, [pc, #620]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	0d1b      	lsrs	r3, r3, #20
 8004ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ca6:	4b98      	ldr	r3, [pc, #608]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004cb2:	4b95      	ldr	r3, [pc, #596]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	08db      	lsrs	r3, r3, #3
 8004cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 810a 	beq.w	8004eea <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d05a      	beq.n	8004d92 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d302      	bcc.n	8004ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d078      	beq.n	8004dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004ce4:	e099      	b.n	8004e1a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce6:	4b88      	ldr	r3, [pc, #544]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d02d      	beq.n	8004d4e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cf2:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	08db      	lsrs	r3, r3, #3
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	4a83      	ldr	r2, [pc, #524]	; (8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004d02:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1c:	4b7a      	ldr	r3, [pc, #488]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d30:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d48:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d4c:	e087      	b.n	8004e5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004f14 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d60:	4b69      	ldr	r3, [pc, #420]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d74:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d90:	e065      	b.n	8004e5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da4:	4b58      	ldr	r3, [pc, #352]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dd4:	e043      	b.n	8004e5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de8:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e18:	e021      	b.n	8004e5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e24:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e5c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004e5e:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e84:	ee17 2a90 	vmov	r2, s15
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb2:	ee17 2a90 	vmov	r2, s15
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004eba:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	0e1b      	lsrs	r3, r3, #24
 8004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee0:	ee17 2a90 	vmov	r2, s15
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ee8:	e008      	b.n	8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	3724      	adds	r7, #36	; 0x24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	03d09000 	.word	0x03d09000
 8004f10:	46000000 	.word	0x46000000
 8004f14:	4c742400 	.word	0x4c742400
 8004f18:	4a742400 	.word	0x4a742400
 8004f1c:	4af42400 	.word	0x4af42400

08004f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f2e:	4b53      	ldr	r3, [pc, #332]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d101      	bne.n	8004f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e099      	b.n	8005072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f3e:	4b4f      	ldr	r3, [pc, #316]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a4e      	ldr	r2, [pc, #312]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4a:	f7fc f981 	bl	8001250 <HAL_GetTick>
 8004f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f52:	f7fc f97d 	bl	8001250 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e086      	b.n	8005072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f64:	4b45      	ldr	r3, [pc, #276]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f70:	4b42      	ldr	r3, [pc, #264]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	493f      	ldr	r1, [pc, #252]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	628b      	str	r3, [r1, #40]	; 0x28
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	025b      	lsls	r3, r3, #9
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fb4:	4931      	ldr	r1, [pc, #196]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fba:	4b30      	ldr	r3, [pc, #192]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	492d      	ldr	r1, [pc, #180]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fcc:	4b2b      	ldr	r3, [pc, #172]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	f023 0220 	bic.w	r2, r3, #32
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	4928      	ldr	r1, [pc, #160]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fde:	4b27      	ldr	r3, [pc, #156]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <RCCEx_PLL2_Config+0x160>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	69d2      	ldr	r2, [r2, #28]
 8004ff6:	00d2      	lsls	r2, r2, #3
 8004ff8:	4920      	ldr	r1, [pc, #128]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	4a1e      	ldr	r2, [pc, #120]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005004:	f043 0310 	orr.w	r3, r3, #16
 8005008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005010:	4b1a      	ldr	r3, [pc, #104]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800501c:	e00f      	b.n	800503e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d106      	bne.n	8005032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005024:	4b15      	ldr	r3, [pc, #84]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 800502a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005030:	e005      	b.n	800503e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800503c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a0e      	ldr	r2, [pc, #56]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504a:	f7fc f901 	bl	8001250 <HAL_GetTick>
 800504e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005050:	e008      	b.n	8005064 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005052:	f7fc f8fd 	bl	8001250 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e006      	b.n	8005072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <RCCEx_PLL2_Config+0x15c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
 8005080:	ffff0007 	.word	0xffff0007

08005084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005092:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b03      	cmp	r3, #3
 800509c:	d101      	bne.n	80050a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e099      	b.n	80051d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050a2:	4b4f      	ldr	r3, [pc, #316]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4e      	ldr	r2, [pc, #312]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ae:	f7fc f8cf 	bl	8001250 <HAL_GetTick>
 80050b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050b4:	e008      	b.n	80050c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050b6:	f7fc f8cb 	bl	8001250 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e086      	b.n	80051d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050c8:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050d4:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	051b      	lsls	r3, r3, #20
 80050e2:	493f      	ldr	r1, [pc, #252]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	628b      	str	r3, [r1, #40]	; 0x28
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	025b      	lsls	r3, r3, #9
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	3b01      	subs	r3, #1
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005118:	4931      	ldr	r1, [pc, #196]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800511e:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	492d      	ldr	r1, [pc, #180]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005130:	4b2b      	ldr	r3, [pc, #172]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	4928      	ldr	r1, [pc, #160]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005142:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800514c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <RCCEx_PLL3_Config+0x160>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69d2      	ldr	r2, [r2, #28]
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	4920      	ldr	r1, [pc, #128]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800517a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800517e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005180:	e00f      	b.n	80051a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d106      	bne.n	8005196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4a14      	ldr	r2, [pc, #80]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800518e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005194:	e005      	b.n	80051a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800519c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ae:	f7fc f84f 	bl	8001250 <HAL_GetTick>
 80051b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051b6:	f7fc f84b 	bl	8001250 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e006      	b.n	80051d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	ffff0007 	.word	0xffff0007

080051e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e042      	b.n	8005280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fb fe17 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2224      	movs	r2, #36	; 0x24
 8005216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f82c 	bl	8005288 <UART_SetConfig>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e022      	b.n	8005280 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fdd0 	bl	8005de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fe57 	bl	8005f2c <UART_CheckIdleState>
 800527e:	4603      	mov	r3, r0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800528c:	b08e      	sub	sp, #56	; 0x38
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b6:	4313      	orrs	r3, r2
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4bc1      	ldr	r3, [pc, #772]	; (80055c8 <UART_SetConfig+0x340>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ca:	430b      	orrs	r3, r1
 80052cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4ab7      	ldr	r2, [pc, #732]	; (80055cc <UART_SetConfig+0x344>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052fa:	4313      	orrs	r3, r2
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4bb2      	ldr	r3, [pc, #712]	; (80055d0 <UART_SetConfig+0x348>)
 8005306:	4013      	ands	r3, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800530e:	430b      	orrs	r3, r1
 8005310:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f023 010f 	bic.w	r1, r3, #15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4aa9      	ldr	r2, [pc, #676]	; (80055d4 <UART_SetConfig+0x34c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d177      	bne.n	8005422 <UART_SetConfig+0x19a>
 8005332:	4ba9      	ldr	r3, [pc, #676]	; (80055d8 <UART_SetConfig+0x350>)
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533a:	2b28      	cmp	r3, #40	; 0x28
 800533c:	d86c      	bhi.n	8005418 <UART_SetConfig+0x190>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0xbc>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	080053e9 	.word	0x080053e9
 8005348:	08005419 	.word	0x08005419
 800534c:	08005419 	.word	0x08005419
 8005350:	08005419 	.word	0x08005419
 8005354:	08005419 	.word	0x08005419
 8005358:	08005419 	.word	0x08005419
 800535c:	08005419 	.word	0x08005419
 8005360:	08005419 	.word	0x08005419
 8005364:	080053f1 	.word	0x080053f1
 8005368:	08005419 	.word	0x08005419
 800536c:	08005419 	.word	0x08005419
 8005370:	08005419 	.word	0x08005419
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	080053f9 	.word	0x080053f9
 8005388:	08005419 	.word	0x08005419
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005401 	.word	0x08005401
 80053a8:	08005419 	.word	0x08005419
 80053ac:	08005419 	.word	0x08005419
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	08005419 	.word	0x08005419
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005409 	.word	0x08005409
 80053c8:	08005419 	.word	0x08005419
 80053cc:	08005419 	.word	0x08005419
 80053d0:	08005419 	.word	0x08005419
 80053d4:	08005419 	.word	0x08005419
 80053d8:	08005419 	.word	0x08005419
 80053dc:	08005419 	.word	0x08005419
 80053e0:	08005419 	.word	0x08005419
 80053e4:	08005411 	.word	0x08005411
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ee:	e233      	b.n	8005858 <UART_SetConfig+0x5d0>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e22f      	b.n	8005858 <UART_SetConfig+0x5d0>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e22b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005406:	e227      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005408:	2320      	movs	r3, #32
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540e:	e223      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005416:	e21f      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541e:	bf00      	nop
 8005420:	e21a      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6d      	ldr	r2, [pc, #436]	; (80055dc <UART_SetConfig+0x354>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d132      	bne.n	8005492 <UART_SetConfig+0x20a>
 800542c:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <UART_SetConfig+0x350>)
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	2b05      	cmp	r3, #5
 8005436:	d827      	bhi.n	8005488 <UART_SetConfig+0x200>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x1b8>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005459 	.word	0x08005459
 8005444:	08005461 	.word	0x08005461
 8005448:	08005469 	.word	0x08005469
 800544c:	08005471 	.word	0x08005471
 8005450:	08005479 	.word	0x08005479
 8005454:	08005481 	.word	0x08005481
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e1fb      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005460:	2304      	movs	r3, #4
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	e1f7      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005468:	2308      	movs	r3, #8
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	e1f3      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005470:	2310      	movs	r3, #16
 8005472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005476:	e1ef      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005478:	2320      	movs	r3, #32
 800547a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547e:	e1eb      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005486:	e1e7      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	bf00      	nop
 8005490:	e1e2      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <UART_SetConfig+0x358>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d132      	bne.n	8005502 <UART_SetConfig+0x27a>
 800549c:	4b4e      	ldr	r3, [pc, #312]	; (80055d8 <UART_SetConfig+0x350>)
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d827      	bhi.n	80054f8 <UART_SetConfig+0x270>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x228>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054d9 	.word	0x080054d9
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e1c3      	b.n	8005858 <UART_SetConfig+0x5d0>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d6:	e1bf      	b.n	8005858 <UART_SetConfig+0x5d0>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054de:	e1bb      	b.n	8005858 <UART_SetConfig+0x5d0>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e6:	e1b7      	b.n	8005858 <UART_SetConfig+0x5d0>
 80054e8:	2320      	movs	r3, #32
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ee:	e1b3      	b.n	8005858 <UART_SetConfig+0x5d0>
 80054f0:	2340      	movs	r3, #64	; 0x40
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e1af      	b.n	8005858 <UART_SetConfig+0x5d0>
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	bf00      	nop
 8005500:	e1aa      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a37      	ldr	r2, [pc, #220]	; (80055e4 <UART_SetConfig+0x35c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d132      	bne.n	8005572 <UART_SetConfig+0x2ea>
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <UART_SetConfig+0x350>)
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	2b05      	cmp	r3, #5
 8005516:	d827      	bhi.n	8005568 <UART_SetConfig+0x2e0>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x298>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005539 	.word	0x08005539
 8005524:	08005541 	.word	0x08005541
 8005528:	08005549 	.word	0x08005549
 800552c:	08005551 	.word	0x08005551
 8005530:	08005559 	.word	0x08005559
 8005534:	08005561 	.word	0x08005561
 8005538:	2300      	movs	r3, #0
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553e:	e18b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005546:	e187      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554e:	e183      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005556:	e17f      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005558:	2320      	movs	r3, #32
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	e17b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e177      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	bf00      	nop
 8005570:	e172      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <UART_SetConfig+0x360>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d144      	bne.n	8005606 <UART_SetConfig+0x37e>
 800557c:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <UART_SetConfig+0x350>)
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	2b05      	cmp	r3, #5
 8005586:	d839      	bhi.n	80055fc <UART_SetConfig+0x374>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0x308>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a9 	.word	0x080055a9
 8005594:	080055b1 	.word	0x080055b1
 8005598:	080055b9 	.word	0x080055b9
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080055ed 	.word	0x080055ed
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	2300      	movs	r3, #0
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e153      	b.n	8005858 <UART_SetConfig+0x5d0>
 80055b0:	2304      	movs	r3, #4
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	e14f      	b.n	8005858 <UART_SetConfig+0x5d0>
 80055b8:	2308      	movs	r3, #8
 80055ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055be:	e14b      	b.n	8005858 <UART_SetConfig+0x5d0>
 80055c0:	2310      	movs	r3, #16
 80055c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c6:	e147      	b.n	8005858 <UART_SetConfig+0x5d0>
 80055c8:	cfff69f3 	.word	0xcfff69f3
 80055cc:	58000c00 	.word	0x58000c00
 80055d0:	11fff4ff 	.word	0x11fff4ff
 80055d4:	40011000 	.word	0x40011000
 80055d8:	58024400 	.word	0x58024400
 80055dc:	40004400 	.word	0x40004400
 80055e0:	40004800 	.word	0x40004800
 80055e4:	40004c00 	.word	0x40004c00
 80055e8:	40005000 	.word	0x40005000
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e131      	b.n	8005858 <UART_SetConfig+0x5d0>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e12d      	b.n	8005858 <UART_SetConfig+0x5d0>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	bf00      	nop
 8005604:	e128      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4ab6      	ldr	r2, [pc, #728]	; (80058e4 <UART_SetConfig+0x65c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d178      	bne.n	8005702 <UART_SetConfig+0x47a>
 8005610:	4bb5      	ldr	r3, [pc, #724]	; (80058e8 <UART_SetConfig+0x660>)
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005618:	2b28      	cmp	r3, #40	; 0x28
 800561a:	d86d      	bhi.n	80056f8 <UART_SetConfig+0x470>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x39c>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	080056c9 	.word	0x080056c9
 8005628:	080056f9 	.word	0x080056f9
 800562c:	080056f9 	.word	0x080056f9
 8005630:	080056f9 	.word	0x080056f9
 8005634:	080056f9 	.word	0x080056f9
 8005638:	080056f9 	.word	0x080056f9
 800563c:	080056f9 	.word	0x080056f9
 8005640:	080056f9 	.word	0x080056f9
 8005644:	080056d1 	.word	0x080056d1
 8005648:	080056f9 	.word	0x080056f9
 800564c:	080056f9 	.word	0x080056f9
 8005650:	080056f9 	.word	0x080056f9
 8005654:	080056f9 	.word	0x080056f9
 8005658:	080056f9 	.word	0x080056f9
 800565c:	080056f9 	.word	0x080056f9
 8005660:	080056f9 	.word	0x080056f9
 8005664:	080056d9 	.word	0x080056d9
 8005668:	080056f9 	.word	0x080056f9
 800566c:	080056f9 	.word	0x080056f9
 8005670:	080056f9 	.word	0x080056f9
 8005674:	080056f9 	.word	0x080056f9
 8005678:	080056f9 	.word	0x080056f9
 800567c:	080056f9 	.word	0x080056f9
 8005680:	080056f9 	.word	0x080056f9
 8005684:	080056e1 	.word	0x080056e1
 8005688:	080056f9 	.word	0x080056f9
 800568c:	080056f9 	.word	0x080056f9
 8005690:	080056f9 	.word	0x080056f9
 8005694:	080056f9 	.word	0x080056f9
 8005698:	080056f9 	.word	0x080056f9
 800569c:	080056f9 	.word	0x080056f9
 80056a0:	080056f9 	.word	0x080056f9
 80056a4:	080056e9 	.word	0x080056e9
 80056a8:	080056f9 	.word	0x080056f9
 80056ac:	080056f9 	.word	0x080056f9
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	080056f9 	.word	0x080056f9
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	080056f9 	.word	0x080056f9
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ce:	e0c3      	b.n	8005858 <UART_SetConfig+0x5d0>
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d6:	e0bf      	b.n	8005858 <UART_SetConfig+0x5d0>
 80056d8:	2308      	movs	r3, #8
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	e0bb      	b.n	8005858 <UART_SetConfig+0x5d0>
 80056e0:	2310      	movs	r3, #16
 80056e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e6:	e0b7      	b.n	8005858 <UART_SetConfig+0x5d0>
 80056e8:	2320      	movs	r3, #32
 80056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ee:	e0b3      	b.n	8005858 <UART_SetConfig+0x5d0>
 80056f0:	2340      	movs	r3, #64	; 0x40
 80056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f6:	e0af      	b.n	8005858 <UART_SetConfig+0x5d0>
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fe:	bf00      	nop
 8005700:	e0aa      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a79      	ldr	r2, [pc, #484]	; (80058ec <UART_SetConfig+0x664>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d132      	bne.n	8005772 <UART_SetConfig+0x4ea>
 800570c:	4b76      	ldr	r3, [pc, #472]	; (80058e8 <UART_SetConfig+0x660>)
 800570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	2b05      	cmp	r3, #5
 8005716:	d827      	bhi.n	8005768 <UART_SetConfig+0x4e0>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x498>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005739 	.word	0x08005739
 8005724:	08005741 	.word	0x08005741
 8005728:	08005749 	.word	0x08005749
 800572c:	08005751 	.word	0x08005751
 8005730:	08005759 	.word	0x08005759
 8005734:	08005761 	.word	0x08005761
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e08b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005746:	e087      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574e:	e083      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005756:	e07f      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005758:	2320      	movs	r3, #32
 800575a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575e:	e07b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005766:	e077      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576e:	bf00      	nop
 8005770:	e072      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a5e      	ldr	r2, [pc, #376]	; (80058f0 <UART_SetConfig+0x668>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d132      	bne.n	80057e2 <UART_SetConfig+0x55a>
 800577c:	4b5a      	ldr	r3, [pc, #360]	; (80058e8 <UART_SetConfig+0x660>)
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	2b05      	cmp	r3, #5
 8005786:	d827      	bhi.n	80057d8 <UART_SetConfig+0x550>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <UART_SetConfig+0x508>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057a9 	.word	0x080057a9
 8005794:	080057b1 	.word	0x080057b1
 8005798:	080057b9 	.word	0x080057b9
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e053      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	e04f      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057be:	e04b      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e047      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057c8:	2320      	movs	r3, #32
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e043      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057d0:	2340      	movs	r3, #64	; 0x40
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e03f      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	bf00      	nop
 80057e0:	e03a      	b.n	8005858 <UART_SetConfig+0x5d0>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a43      	ldr	r2, [pc, #268]	; (80058f4 <UART_SetConfig+0x66c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d132      	bne.n	8005852 <UART_SetConfig+0x5ca>
 80057ec:	4b3e      	ldr	r3, [pc, #248]	; (80058e8 <UART_SetConfig+0x660>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d827      	bhi.n	8005848 <UART_SetConfig+0x5c0>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x578>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005819 	.word	0x08005819
 8005804:	08005821 	.word	0x08005821
 8005808:	08005829 	.word	0x08005829
 800580c:	08005831 	.word	0x08005831
 8005810:	08005839 	.word	0x08005839
 8005814:	08005841 	.word	0x08005841
 8005818:	2302      	movs	r3, #2
 800581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581e:	e01b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005826:	e017      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582e:	e013      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005838:	2320      	movs	r3, #32
 800583a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583e:	e00b      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e007      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <UART_SetConfig+0x5d0>
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <UART_SetConfig+0x66c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	f040 80b8 	bne.w	80059d4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005868:	2b08      	cmp	r3, #8
 800586a:	d019      	beq.n	80058a0 <UART_SetConfig+0x618>
 800586c:	2b08      	cmp	r3, #8
 800586e:	dc04      	bgt.n	800587a <UART_SetConfig+0x5f2>
 8005870:	2b02      	cmp	r3, #2
 8005872:	d009      	beq.n	8005888 <UART_SetConfig+0x600>
 8005874:	2b04      	cmp	r3, #4
 8005876:	d00b      	beq.n	8005890 <UART_SetConfig+0x608>
 8005878:	e042      	b.n	8005900 <UART_SetConfig+0x678>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d02b      	beq.n	80058d6 <UART_SetConfig+0x64e>
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d02c      	beq.n	80058dc <UART_SetConfig+0x654>
 8005882:	2b10      	cmp	r3, #16
 8005884:	d014      	beq.n	80058b0 <UART_SetConfig+0x628>
 8005886:	e03b      	b.n	8005900 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005888:	f7ff f89c 	bl	80049c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800588c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800588e:	e03d      	b.n	800590c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff f8ab 	bl	80049f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800589e:	e035      	b.n	800590c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058a0:	f107 0308 	add.w	r3, r7, #8
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff f9ef 	bl	8004c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ae:	e02d      	b.n	800590c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b0:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <UART_SetConfig+0x660>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <UART_SetConfig+0x660>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	08db      	lsrs	r3, r3, #3
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <UART_SetConfig+0x670>)
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058ce:	e01d      	b.n	800590c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <UART_SetConfig+0x670>)
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058d4:	e01a      	b.n	800590c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <UART_SetConfig+0x674>)
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058da:	e017      	b.n	800590c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058e2:	e013      	b.n	800590c <UART_SetConfig+0x684>
 80058e4:	40011400 	.word	0x40011400
 80058e8:	58024400 	.word	0x58024400
 80058ec:	40007800 	.word	0x40007800
 80058f0:	40007c00 	.word	0x40007c00
 80058f4:	58000c00 	.word	0x58000c00
 80058f8:	03d09000 	.word	0x03d09000
 80058fc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800590a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 824d 	beq.w	8005dae <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	4aad      	ldr	r2, [pc, #692]	; (8005bd0 <UART_SetConfig+0x948>)
 800591a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800591e:	461a      	mov	r2, r3
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	fbb3 f3f2 	udiv	r3, r3, r2
 8005926:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	6a3a      	ldr	r2, [r7, #32]
 8005934:	429a      	cmp	r2, r3
 8005936:	d305      	bcc.n	8005944 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	429a      	cmp	r2, r3
 8005942:	d903      	bls.n	800594c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800594a:	e230      	b.n	8005dae <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	4618      	mov	r0, r3
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	4a9d      	ldr	r2, [pc, #628]	; (8005bd0 <UART_SetConfig+0x948>)
 800595a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	461a      	mov	r2, r3
 8005966:	4623      	mov	r3, r4
 8005968:	f7fa fcb6 	bl	80002d8 <__aeabi_uldivmod>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	4619      	mov	r1, r3
 8005972:	4622      	mov	r2, r4
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	f04f 0400 	mov.w	r4, #0
 800597c:	0214      	lsls	r4, r2, #8
 800597e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005982:	020b      	lsls	r3, r1, #8
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6852      	ldr	r2, [r2, #4]
 8005988:	0852      	lsrs	r2, r2, #1
 800598a:	4611      	mov	r1, r2
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	eb13 0b01 	adds.w	fp, r3, r1
 8005994:	eb44 0c02 	adc.w	ip, r4, r2
 8005998:	4658      	mov	r0, fp
 800599a:	4661      	mov	r1, ip
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f04f 0400 	mov.w	r4, #0
 80059a4:	461a      	mov	r2, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	f7fa fc96 	bl	80002d8 <__aeabi_uldivmod>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b8:	d308      	bcc.n	80059cc <UART_SetConfig+0x744>
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c0:	d204      	bcs.n	80059cc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	e1f0      	b.n	8005dae <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059d2:	e1ec      	b.n	8005dae <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059dc:	f040 8100 	bne.w	8005be0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80059e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	f200 80b7 	bhi.w	8005b58 <UART_SetConfig+0x8d0>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x768>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005af5 	.word	0x08005af5
 80059f4:	08005afd 	.word	0x08005afd
 80059f8:	08005b59 	.word	0x08005b59
 80059fc:	08005b59 	.word	0x08005b59
 8005a00:	08005b05 	.word	0x08005b05
 8005a04:	08005b59 	.word	0x08005b59
 8005a08:	08005b59 	.word	0x08005b59
 8005a0c:	08005b59 	.word	0x08005b59
 8005a10:	08005b15 	.word	0x08005b15
 8005a14:	08005b59 	.word	0x08005b59
 8005a18:	08005b59 	.word	0x08005b59
 8005a1c:	08005b59 	.word	0x08005b59
 8005a20:	08005b59 	.word	0x08005b59
 8005a24:	08005b59 	.word	0x08005b59
 8005a28:	08005b59 	.word	0x08005b59
 8005a2c:	08005b59 	.word	0x08005b59
 8005a30:	08005b25 	.word	0x08005b25
 8005a34:	08005b59 	.word	0x08005b59
 8005a38:	08005b59 	.word	0x08005b59
 8005a3c:	08005b59 	.word	0x08005b59
 8005a40:	08005b59 	.word	0x08005b59
 8005a44:	08005b59 	.word	0x08005b59
 8005a48:	08005b59 	.word	0x08005b59
 8005a4c:	08005b59 	.word	0x08005b59
 8005a50:	08005b59 	.word	0x08005b59
 8005a54:	08005b59 	.word	0x08005b59
 8005a58:	08005b59 	.word	0x08005b59
 8005a5c:	08005b59 	.word	0x08005b59
 8005a60:	08005b59 	.word	0x08005b59
 8005a64:	08005b59 	.word	0x08005b59
 8005a68:	08005b59 	.word	0x08005b59
 8005a6c:	08005b59 	.word	0x08005b59
 8005a70:	08005b4b 	.word	0x08005b4b
 8005a74:	08005b59 	.word	0x08005b59
 8005a78:	08005b59 	.word	0x08005b59
 8005a7c:	08005b59 	.word	0x08005b59
 8005a80:	08005b59 	.word	0x08005b59
 8005a84:	08005b59 	.word	0x08005b59
 8005a88:	08005b59 	.word	0x08005b59
 8005a8c:	08005b59 	.word	0x08005b59
 8005a90:	08005b59 	.word	0x08005b59
 8005a94:	08005b59 	.word	0x08005b59
 8005a98:	08005b59 	.word	0x08005b59
 8005a9c:	08005b59 	.word	0x08005b59
 8005aa0:	08005b59 	.word	0x08005b59
 8005aa4:	08005b59 	.word	0x08005b59
 8005aa8:	08005b59 	.word	0x08005b59
 8005aac:	08005b59 	.word	0x08005b59
 8005ab0:	08005b59 	.word	0x08005b59
 8005ab4:	08005b59 	.word	0x08005b59
 8005ab8:	08005b59 	.word	0x08005b59
 8005abc:	08005b59 	.word	0x08005b59
 8005ac0:	08005b59 	.word	0x08005b59
 8005ac4:	08005b59 	.word	0x08005b59
 8005ac8:	08005b59 	.word	0x08005b59
 8005acc:	08005b59 	.word	0x08005b59
 8005ad0:	08005b59 	.word	0x08005b59
 8005ad4:	08005b59 	.word	0x08005b59
 8005ad8:	08005b59 	.word	0x08005b59
 8005adc:	08005b59 	.word	0x08005b59
 8005ae0:	08005b59 	.word	0x08005b59
 8005ae4:	08005b59 	.word	0x08005b59
 8005ae8:	08005b59 	.word	0x08005b59
 8005aec:	08005b59 	.word	0x08005b59
 8005af0:	08005b51 	.word	0x08005b51
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af4:	f7fe f84c 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 8005af8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005afa:	e033      	b.n	8005b64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005afc:	f7fe f85e 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 8005b00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b02:	e02f      	b.n	8005b64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe ff71 	bl	80049f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b12:	e027      	b.n	8005b64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b14:	f107 0308 	add.w	r3, r7, #8
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff f8b5 	bl	8004c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b22:	e01f      	b.n	8005b64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <UART_SetConfig+0x94c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b30:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <UART_SetConfig+0x94c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	4a27      	ldr	r2, [pc, #156]	; (8005bd8 <UART_SetConfig+0x950>)
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b42:	e00f      	b.n	8005b64 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005b44:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <UART_SetConfig+0x950>)
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b48:	e00c      	b.n	8005b64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <UART_SetConfig+0x954>)
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b4e:	e009      	b.n	8005b64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b56:	e005      	b.n	8005b64 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8121 	beq.w	8005dae <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <UART_SetConfig+0x948>)
 8005b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b7e:	005a      	lsls	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	441a      	add	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d916      	bls.n	8005bc8 <UART_SetConfig+0x940>
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d212      	bcs.n	8005bc8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f023 030f 	bic.w	r3, r3, #15
 8005baa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	e0f2      	b.n	8005dae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005bce:	e0ee      	b.n	8005dae <UART_SetConfig+0xb26>
 8005bd0:	0800a690 	.word	0x0800a690
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	f200 80b7 	bhi.w	8005d58 <UART_SetConfig+0xad0>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x968>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005cf5 	.word	0x08005cf5
 8005bf4:	08005cfd 	.word	0x08005cfd
 8005bf8:	08005d59 	.word	0x08005d59
 8005bfc:	08005d59 	.word	0x08005d59
 8005c00:	08005d05 	.word	0x08005d05
 8005c04:	08005d59 	.word	0x08005d59
 8005c08:	08005d59 	.word	0x08005d59
 8005c0c:	08005d59 	.word	0x08005d59
 8005c10:	08005d15 	.word	0x08005d15
 8005c14:	08005d59 	.word	0x08005d59
 8005c18:	08005d59 	.word	0x08005d59
 8005c1c:	08005d59 	.word	0x08005d59
 8005c20:	08005d59 	.word	0x08005d59
 8005c24:	08005d59 	.word	0x08005d59
 8005c28:	08005d59 	.word	0x08005d59
 8005c2c:	08005d59 	.word	0x08005d59
 8005c30:	08005d25 	.word	0x08005d25
 8005c34:	08005d59 	.word	0x08005d59
 8005c38:	08005d59 	.word	0x08005d59
 8005c3c:	08005d59 	.word	0x08005d59
 8005c40:	08005d59 	.word	0x08005d59
 8005c44:	08005d59 	.word	0x08005d59
 8005c48:	08005d59 	.word	0x08005d59
 8005c4c:	08005d59 	.word	0x08005d59
 8005c50:	08005d59 	.word	0x08005d59
 8005c54:	08005d59 	.word	0x08005d59
 8005c58:	08005d59 	.word	0x08005d59
 8005c5c:	08005d59 	.word	0x08005d59
 8005c60:	08005d59 	.word	0x08005d59
 8005c64:	08005d59 	.word	0x08005d59
 8005c68:	08005d59 	.word	0x08005d59
 8005c6c:	08005d59 	.word	0x08005d59
 8005c70:	08005d4b 	.word	0x08005d4b
 8005c74:	08005d59 	.word	0x08005d59
 8005c78:	08005d59 	.word	0x08005d59
 8005c7c:	08005d59 	.word	0x08005d59
 8005c80:	08005d59 	.word	0x08005d59
 8005c84:	08005d59 	.word	0x08005d59
 8005c88:	08005d59 	.word	0x08005d59
 8005c8c:	08005d59 	.word	0x08005d59
 8005c90:	08005d59 	.word	0x08005d59
 8005c94:	08005d59 	.word	0x08005d59
 8005c98:	08005d59 	.word	0x08005d59
 8005c9c:	08005d59 	.word	0x08005d59
 8005ca0:	08005d59 	.word	0x08005d59
 8005ca4:	08005d59 	.word	0x08005d59
 8005ca8:	08005d59 	.word	0x08005d59
 8005cac:	08005d59 	.word	0x08005d59
 8005cb0:	08005d59 	.word	0x08005d59
 8005cb4:	08005d59 	.word	0x08005d59
 8005cb8:	08005d59 	.word	0x08005d59
 8005cbc:	08005d59 	.word	0x08005d59
 8005cc0:	08005d59 	.word	0x08005d59
 8005cc4:	08005d59 	.word	0x08005d59
 8005cc8:	08005d59 	.word	0x08005d59
 8005ccc:	08005d59 	.word	0x08005d59
 8005cd0:	08005d59 	.word	0x08005d59
 8005cd4:	08005d59 	.word	0x08005d59
 8005cd8:	08005d59 	.word	0x08005d59
 8005cdc:	08005d59 	.word	0x08005d59
 8005ce0:	08005d59 	.word	0x08005d59
 8005ce4:	08005d59 	.word	0x08005d59
 8005ce8:	08005d59 	.word	0x08005d59
 8005cec:	08005d59 	.word	0x08005d59
 8005cf0:	08005d51 	.word	0x08005d51
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7fd ff4c 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cfa:	e033      	b.n	8005d64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fd ff5e 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 8005d00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d02:	e02f      	b.n	8005d64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fe71 	bl	80049f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d12:	e027      	b.n	8005d64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe ffb5 	bl	8004c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d22:	e01f      	b.n	8005d64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d24:	4b2c      	ldr	r3, [pc, #176]	; (8005dd8 <UART_SetConfig+0xb50>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d30:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <UART_SetConfig+0xb50>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <UART_SetConfig+0xb54>)
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d42:	e00f      	b.n	8005d64 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005d44:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <UART_SetConfig+0xb54>)
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d48:	e00c      	b.n	8005d64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d4a:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <UART_SetConfig+0xb58>)
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d4e:	e009      	b.n	8005d64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d56:	e005      	b.n	8005d64 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d62:	bf00      	nop
    }

    if (pclk != 0U)
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d021      	beq.n	8005dae <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <UART_SetConfig+0xb5c>)
 8005d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	441a      	add	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d908      	bls.n	8005da8 <UART_SetConfig+0xb20>
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d204      	bcs.n	8005da8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e002      	b.n	8005dae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005dca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3738      	adds	r7, #56	; 0x38
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	03d09000 	.word	0x03d09000
 8005de0:	003d0900 	.word	0x003d0900
 8005de4:	0800a690 	.word	0x0800a690

08005de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01a      	beq.n	8005efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee6:	d10a      	bne.n	8005efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f3c:	f7fb f988 	bl	8001250 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d10e      	bne.n	8005f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f82c 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e022      	b.n	8005fb4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d10e      	bne.n	8005f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f816 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e00c      	b.n	8005fb4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	e062      	b.n	8006094 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d05e      	beq.n	8006094 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fb f93b 	bl	8001250 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d11d      	bne.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ffa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e045      	b.n	80060b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02e      	beq.n	8006094 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006044:	d126      	bne.n	8006094 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800604e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800605e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e00f      	b.n	80060b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4013      	ands	r3, r2
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d08d      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e027      	b.n	8006122 <HAL_UARTEx_DisableFifoMode+0x66>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006142:	2302      	movs	r3, #2
 8006144:	e02d      	b.n	80061a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2224      	movs	r2, #36	; 0x24
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f850 	bl	8006228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061be:	2302      	movs	r3, #2
 80061c0:	e02d      	b.n	800621e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2224      	movs	r2, #36	; 0x24
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f812 	bl	8006228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b089      	sub	sp, #36	; 0x24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800623a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800623e:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006248:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006264:	e03d      	b.n	80062e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006266:	2310      	movs	r3, #16
 8006268:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800626a:	2310      	movs	r3, #16
 800626c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	0e5b      	lsrs	r3, r3, #25
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	0f5b      	lsrs	r3, r3, #29
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800628e:	7fbb      	ldrb	r3, [r7, #30]
 8006290:	7f3a      	ldrb	r2, [r7, #28]
 8006292:	f107 0120 	add.w	r1, r7, #32
 8006296:	440a      	add	r2, r1
 8006298:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800629c:	fb02 f303 	mul.w	r3, r2, r3
 80062a0:	7f3a      	ldrb	r2, [r7, #28]
 80062a2:	f107 0120 	add.w	r1, r7, #32
 80062a6:	440a      	add	r2, r1
 80062a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80062ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80062b8:	7ffb      	ldrb	r3, [r7, #31]
 80062ba:	7f7a      	ldrb	r2, [r7, #29]
 80062bc:	f107 0120 	add.w	r1, r7, #32
 80062c0:	440a      	add	r2, r1
 80062c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	7f7a      	ldrb	r2, [r7, #29]
 80062cc:	f107 0120 	add.w	r1, r7, #32
 80062d0:	440a      	add	r2, r1
 80062d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80062d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062e2:	bf00      	nop
 80062e4:	3724      	adds	r7, #36	; 0x24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	0800a628 	.word	0x0800a628
 80062f4:	0800a630 	.word	0x0800a630

080062f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f8:	b084      	sub	sp, #16
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	f107 001c 	add.w	r0, r7, #28
 8006306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2b01      	cmp	r3, #1
 800630e:	d120      	bne.n	8006352 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	4b25      	ldr	r3, [pc, #148]	; (80063b8 <USB_CoreInit+0xc0>)
 8006322:	4013      	ands	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 fabe 	bl	80078c8 <USB_CoreReset>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
 8006350:	e01a      	b.n	8006388 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fab2 	bl	80078c8 <USB_CoreReset>
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
 800637a:	e005      	b.n	8006388 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	2b01      	cmp	r3, #1
 800638c:	d10b      	bne.n	80063a6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f043 0206 	orr.w	r2, r3, #6
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f043 0220 	orr.w	r2, r3, #32
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b2:	b004      	add	sp, #16
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	ffbdffbf 	.word	0xffbdffbf

080063bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d165      	bne.n	800649c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a41      	ldr	r2, [pc, #260]	; (80064d8 <USB_SetTurnaroundTime+0x11c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d906      	bls.n	80063e6 <USB_SetTurnaroundTime+0x2a>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4a40      	ldr	r2, [pc, #256]	; (80064dc <USB_SetTurnaroundTime+0x120>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d802      	bhi.n	80063e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063e0:	230f      	movs	r3, #15
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e062      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4a3c      	ldr	r2, [pc, #240]	; (80064dc <USB_SetTurnaroundTime+0x120>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d906      	bls.n	80063fc <USB_SetTurnaroundTime+0x40>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4a3b      	ldr	r2, [pc, #236]	; (80064e0 <USB_SetTurnaroundTime+0x124>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d802      	bhi.n	80063fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063f6:	230e      	movs	r3, #14
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	e057      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4a38      	ldr	r2, [pc, #224]	; (80064e0 <USB_SetTurnaroundTime+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d906      	bls.n	8006412 <USB_SetTurnaroundTime+0x56>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4a37      	ldr	r2, [pc, #220]	; (80064e4 <USB_SetTurnaroundTime+0x128>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d802      	bhi.n	8006412 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800640c:	230d      	movs	r3, #13
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e04c      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a33      	ldr	r2, [pc, #204]	; (80064e4 <USB_SetTurnaroundTime+0x128>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d906      	bls.n	8006428 <USB_SetTurnaroundTime+0x6c>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4a32      	ldr	r2, [pc, #200]	; (80064e8 <USB_SetTurnaroundTime+0x12c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d802      	bhi.n	8006428 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006422:	230c      	movs	r3, #12
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e041      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <USB_SetTurnaroundTime+0x12c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d906      	bls.n	800643e <USB_SetTurnaroundTime+0x82>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4a2e      	ldr	r2, [pc, #184]	; (80064ec <USB_SetTurnaroundTime+0x130>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d802      	bhi.n	800643e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006438:	230b      	movs	r3, #11
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e036      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <USB_SetTurnaroundTime+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d906      	bls.n	8006454 <USB_SetTurnaroundTime+0x98>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <USB_SetTurnaroundTime+0x134>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d802      	bhi.n	8006454 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800644e:	230a      	movs	r3, #10
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e02b      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <USB_SetTurnaroundTime+0x134>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d906      	bls.n	800646a <USB_SetTurnaroundTime+0xae>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4a25      	ldr	r2, [pc, #148]	; (80064f4 <USB_SetTurnaroundTime+0x138>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d802      	bhi.n	800646a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006464:	2309      	movs	r3, #9
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	e020      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a21      	ldr	r2, [pc, #132]	; (80064f4 <USB_SetTurnaroundTime+0x138>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d906      	bls.n	8006480 <USB_SetTurnaroundTime+0xc4>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <USB_SetTurnaroundTime+0x13c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d802      	bhi.n	8006480 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800647a:	2308      	movs	r3, #8
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e015      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <USB_SetTurnaroundTime+0x13c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d906      	bls.n	8006496 <USB_SetTurnaroundTime+0xda>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <USB_SetTurnaroundTime+0x140>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d802      	bhi.n	8006496 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006490:	2307      	movs	r3, #7
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e00a      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006496:	2306      	movs	r3, #6
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e007      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064a2:	2309      	movs	r3, #9
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e001      	b.n	80064ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064a8:	2309      	movs	r3, #9
 80064aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	00d8acbf 	.word	0x00d8acbf
 80064dc:	00e4e1bf 	.word	0x00e4e1bf
 80064e0:	00f423ff 	.word	0x00f423ff
 80064e4:	0106737f 	.word	0x0106737f
 80064e8:	011a499f 	.word	0x011a499f
 80064ec:	01312cff 	.word	0x01312cff
 80064f0:	014ca43f 	.word	0x014ca43f
 80064f4:	016e35ff 	.word	0x016e35ff
 80064f8:	01a6ab1f 	.word	0x01a6ab1f
 80064fc:	01e847ff 	.word	0x01e847ff

08006500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f043 0201 	orr.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d106      	bne.n	8006570 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e00b      	b.n	8006588 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]
 8006582:	e001      	b.n	8006588 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e003      	b.n	8006590 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006588:	2032      	movs	r0, #50	; 0x32
 800658a:	f7fa fe6d 	bl	8001268 <HAL_Delay>

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006598:	b084      	sub	sp, #16
 800659a:	b580      	push	{r7, lr}
 800659c:	b086      	sub	sp, #24
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	e009      	b.n	80065cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3340      	adds	r3, #64	; 0x40
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	2200      	movs	r2, #0
 80065c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b0e      	cmp	r3, #14
 80065d0:	d9f2      	bls.n	80065b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11c      	bne.n	8006612 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e005      	b.n	800661e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006624:	461a      	mov	r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006630:	4619      	mov	r1, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006638:	461a      	mov	r2, r3
 800663a:	680b      	ldr	r3, [r1, #0]
 800663c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	2b01      	cmp	r3, #1
 8006642:	d10c      	bne.n	800665e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800664a:	2100      	movs	r1, #0
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f949 	bl	80068e4 <USB_SetDevSpeed>
 8006652:	e008      	b.n	8006666 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f944 	bl	80068e4 <USB_SetDevSpeed>
 800665c:	e003      	b.n	8006666 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800665e:	2103      	movs	r1, #3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f93f 	bl	80068e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006666:	2110      	movs	r1, #16
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8f3 	bl	8006854 <USB_FlushTxFifo>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f911 	bl	80068a0 <USB_FlushRxFifo>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	461a      	mov	r2, r3
 8006690:	2300      	movs	r3, #0
 8006692:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a6:	461a      	mov	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e043      	b.n	800673a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c8:	d118      	bne.n	80066fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066dc:	461a      	mov	r2, r3
 80066de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	e013      	b.n	800670e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	461a      	mov	r2, r3
 80066f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e008      	b.n	800670e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	461a      	mov	r2, r3
 800670a:	2300      	movs	r3, #0
 800670c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	461a      	mov	r2, r3
 800671c:	2300      	movs	r3, #0
 800671e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	461a      	mov	r2, r3
 800672e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006732:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3301      	adds	r3, #1
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	429a      	cmp	r2, r3
 8006740:	d3b7      	bcc.n	80066b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	e043      	b.n	80067d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800675e:	d118      	bne.n	8006792 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	461a      	mov	r2, r3
 8006774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e013      	b.n	80067a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	461a      	mov	r2, r3
 800678a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e008      	b.n	80067a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	461a      	mov	r2, r3
 80067a0:	2300      	movs	r3, #0
 80067a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	461a      	mov	r2, r3
 80067b2:	2300      	movs	r3, #0
 80067b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	461a      	mov	r2, r3
 80067c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3301      	adds	r3, #1
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3b7      	bcc.n	8006748 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d105      	bne.n	800680c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f043 0210 	orr.w	r2, r3, #16
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <USB_DevInit+0x2b4>)
 8006812:	4313      	orrs	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f043 0208 	orr.w	r2, r3, #8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d105      	bne.n	800683c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	4b06      	ldr	r3, [pc, #24]	; (8006850 <USB_DevInit+0x2b8>)
 8006836:	4313      	orrs	r3, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006848:	b004      	add	sp, #16
 800684a:	4770      	bx	lr
 800684c:	803c3800 	.word	0x803c3800
 8006850:	40000004 	.word	0x40000004

08006854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	019b      	lsls	r3, r3, #6
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <USB_FlushTxFifo+0x48>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d901      	bls.n	8006880 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e006      	b.n	800688e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b20      	cmp	r3, #32
 800688a:	d0f0      	beq.n	800686e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	00030d40 	.word	0x00030d40

080068a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2210      	movs	r2, #16
 80068b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4a09      	ldr	r2, [pc, #36]	; (80068e0 <USB_FlushRxFifo+0x40>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d901      	bls.n	80068c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e006      	b.n	80068d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d0f0      	beq.n	80068b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	00030d40 	.word	0x00030d40

080068e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0306 	and.w	r3, r3, #6
 800692e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]
 800693a:	e00a      	b.n	8006952 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d002      	beq.n	8006948 <USB_GetDevSpeed+0x32>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d102      	bne.n	800694e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006948:	2302      	movs	r3, #2
 800694a:	75fb      	strb	r3, [r7, #23]
 800694c:	e001      	b.n	8006952 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800694e:	230f      	movs	r3, #15
 8006950:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d139      	bne.n	80069f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	2101      	movs	r1, #1
 800698e:	fa01 f303 	lsl.w	r3, r1, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800699a:	4313      	orrs	r3, r2
 800699c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d153      	bne.n	8006a5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	78db      	ldrb	r3, [r3, #3]
 80069ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	059b      	lsls	r3, r3, #22
 80069d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069d8:	431a      	orrs	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	0159      	lsls	r1, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	440b      	add	r3, r1
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	4619      	mov	r1, r3
 80069e8:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <USB_ActivateEndpoint+0x10c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]
 80069ee:	e035      	b.n	8006a5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	2101      	movs	r1, #1
 8006a02:	fa01 f303 	lsl.w	r3, r1, r3
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	68f9      	ldr	r1, [r7, #12]
 8006a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d119      	bne.n	8006a5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a44:	430b      	orrs	r3, r1
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	0159      	lsls	r1, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	440b      	add	r3, r1
 8006a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a54:	4619      	mov	r1, r3
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <USB_ActivateEndpoint+0x10c>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	10008000 	.word	0x10008000

08006a70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d161      	bne.n	8006b50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aa2:	d11f      	bne.n	8006ae4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ac2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	43db      	mvns	r3, r3
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b04:	4013      	ands	r3, r2
 8006b06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	2101      	movs	r1, #1
 8006b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b28:	4013      	ands	r3, r2
 8006b2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	0159      	lsls	r1, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	440b      	add	r3, r1
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	4619      	mov	r1, r3
 8006b48:	4b35      	ldr	r3, [pc, #212]	; (8006c20 <USB_DeactivateEndpoint+0x1b0>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	600b      	str	r3, [r1, #0]
 8006b4e:	e060      	b.n	8006c12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b66:	d11f      	bne.n	8006ba8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	2101      	movs	r1, #1
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc8:	4013      	ands	r3, r2
 8006bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	2101      	movs	r1, #1
 8006bde:	fa01 f303 	lsl.w	r3, r1, r3
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	43db      	mvns	r3, r3
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bec:	4013      	ands	r3, r2
 8006bee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	0159      	lsls	r1, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	440b      	add	r3, r1
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <USB_DeactivateEndpoint+0x1b4>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	ec337800 	.word	0xec337800
 8006c24:	eff37800 	.word	0xeff37800

08006c28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 8163 	bne.w	8006f10 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d132      	bne.n	8006cb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	0159      	lsls	r1, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	440b      	add	r3, r1
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4ba5      	ldr	r3, [pc, #660]	; (8006f04 <USB_EPStartXfer+0x2dc>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	0159      	lsls	r1, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	440b      	add	r3, r1
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4b95      	ldr	r3, [pc, #596]	; (8006f08 <USB_EPStartXfer+0x2e0>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	610b      	str	r3, [r1, #16]
 8006cb6:	e074      	b.n	8006da2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	0159      	lsls	r1, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	440b      	add	r3, r1
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4b8c      	ldr	r3, [pc, #560]	; (8006f08 <USB_EPStartXfer+0x2e0>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	0159      	lsls	r1, r3, #5
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	440b      	add	r3, r1
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4b83      	ldr	r3, [pc, #524]	; (8006f04 <USB_EPStartXfer+0x2dc>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6959      	ldr	r1, [r3, #20]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	440b      	add	r3, r1
 8006d14:	1e59      	subs	r1, r3, #1
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d1e:	04d9      	lsls	r1, r3, #19
 8006d20:	4b7a      	ldr	r3, [pc, #488]	; (8006f0c <USB_EPStartXfer+0x2e4>)
 8006d22:	400b      	ands	r3, r1
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	0148      	lsls	r0, r1, #5
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	4401      	add	r1, r0
 8006d2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d30:	4313      	orrs	r3, r2
 8006d32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d4a:	69b9      	ldr	r1, [r7, #24]
 8006d4c:	0148      	lsls	r0, r1, #5
 8006d4e:	69f9      	ldr	r1, [r7, #28]
 8006d50:	4401      	add	r1, r0
 8006d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d56:	4313      	orrs	r3, r2
 8006d58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	78db      	ldrb	r3, [r3, #3]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d11f      	bne.n	8006da2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d14b      	bne.n	8006e40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	78db      	ldrb	r3, [r3, #3]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d128      	bne.n	8006e1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d110      	bne.n	8006dfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	0151      	lsls	r1, r2, #5
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	440a      	add	r2, r1
 8006df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	e00f      	b.n	8006e1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	0151      	lsls	r1, r2, #5
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	440a      	add	r2, r1
 8006e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	e133      	b.n	80070a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	78db      	ldrb	r3, [r3, #3]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d015      	beq.n	8006e94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 811b 	beq.w	80070a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	2101      	movs	r1, #1
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	69f9      	ldr	r1, [r7, #28]
 8006e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	634b      	str	r3, [r1, #52]	; 0x34
 8006e92:	e109      	b.n	80070a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	e00f      	b.n	8006ee6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	68d9      	ldr	r1, [r3, #12]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	b298      	uxth	r0, r3
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4603      	mov	r3, r0
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 fa38 	bl	8007370 <USB_WritePacket>
 8006f00:	e0d2      	b.n	80070a8 <USB_EPStartXfer+0x480>
 8006f02:	bf00      	nop
 8006f04:	e007ffff 	.word	0xe007ffff
 8006f08:	fff80000 	.word	0xfff80000
 8006f0c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	0159      	lsls	r1, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	440b      	add	r3, r1
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4b61      	ldr	r3, [pc, #388]	; (80070b4 <USB_EPStartXfer+0x48c>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	0159      	lsls	r1, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	440b      	add	r3, r1
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4b5a      	ldr	r3, [pc, #360]	; (80070b8 <USB_EPStartXfer+0x490>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d123      	bne.n	8006fa4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	0148      	lsls	r0, r1, #5
 8006f76:	69f9      	ldr	r1, [r7, #28]
 8006f78:	4401      	add	r1, r0
 8006f7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fa0:	6113      	str	r3, [r2, #16]
 8006fa2:	e033      	b.n	800700c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	695a      	ldr	r2, [r3, #20]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4413      	add	r3, r2
 8006fae:	1e5a      	subs	r2, r3, #1
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	8afb      	ldrh	r3, [r7, #22]
 8006fca:	04d9      	lsls	r1, r3, #19
 8006fcc:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <USB_EPStartXfer+0x494>)
 8006fce:	400b      	ands	r3, r1
 8006fd0:	69b9      	ldr	r1, [r7, #24]
 8006fd2:	0148      	lsls	r0, r1, #5
 8006fd4:	69f9      	ldr	r1, [r7, #28]
 8006fd6:	4401      	add	r1, r0
 8006fd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	8af9      	ldrh	r1, [r7, #22]
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	0148      	lsls	r0, r1, #5
 8007000:	69f9      	ldr	r1, [r7, #28]
 8007002:	4401      	add	r1, r0
 8007004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007008:	4313      	orrs	r3, r2
 800700a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d10d      	bne.n	800702e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	68d9      	ldr	r1, [r3, #12]
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	460a      	mov	r2, r1
 800702c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	78db      	ldrb	r3, [r3, #3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d128      	bne.n	8007088 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007042:	2b00      	cmp	r3, #0
 8007044:	d110      	bne.n	8007068 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	0151      	lsls	r1, r2, #5
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	440a      	add	r2, r1
 800705c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e00f      	b.n	8007088 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	440a      	add	r2, r1
 800707e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007086:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	fff80000 	.word	0xfff80000
 80070b8:	e007ffff 	.word	0xe007ffff
 80070bc:	1ff80000 	.word	0x1ff80000

080070c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	f040 80cd 	bne.w	800727c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d132      	bne.n	8007150 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	0159      	lsls	r1, r3, #5
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	440b      	add	r3, r1
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	4619      	mov	r1, r3
 8007106:	4b98      	ldr	r3, [pc, #608]	; (8007368 <USB_EP0StartXfer+0x2a8>)
 8007108:	4013      	ands	r3, r2
 800710a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800712a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	0159      	lsls	r1, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	440b      	add	r3, r1
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	4619      	mov	r1, r3
 8007148:	4b88      	ldr	r3, [pc, #544]	; (800736c <USB_EP0StartXfer+0x2ac>)
 800714a:	4013      	ands	r3, r2
 800714c:	610b      	str	r3, [r1, #16]
 800714e:	e04e      	b.n	80071ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	0159      	lsls	r1, r3, #5
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	440b      	add	r3, r1
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	4619      	mov	r1, r3
 800716c:	4b7f      	ldr	r3, [pc, #508]	; (800736c <USB_EP0StartXfer+0x2ac>)
 800716e:	4013      	ands	r3, r2
 8007170:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	0159      	lsls	r1, r3, #5
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	440b      	add	r3, r1
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	4619      	mov	r1, r3
 800718e:	4b76      	ldr	r3, [pc, #472]	; (8007368 <USB_EP0StartXfer+0x2a8>)
 8007190:	4013      	ands	r3, r2
 8007192:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	429a      	cmp	r2, r3
 800719e:	d903      	bls.n	80071a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071de:	6939      	ldr	r1, [r7, #16]
 80071e0:	0148      	lsls	r0, r1, #5
 80071e2:	6979      	ldr	r1, [r7, #20]
 80071e4:	4401      	add	r1, r0
 80071e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071ea:	4313      	orrs	r3, r2
 80071ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d11e      	bne.n	8007232 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	461a      	mov	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e092      	b.n	8007358 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	440a      	add	r2, r1
 8007248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007250:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d07e      	beq.n	8007358 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	2101      	movs	r1, #1
 800726c:	fa01 f303 	lsl.w	r3, r1, r3
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007276:	4313      	orrs	r3, r2
 8007278:	634b      	str	r3, [r1, #52]	; 0x34
 800727a:	e06d      	b.n	8007358 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	0159      	lsls	r1, r3, #5
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	440b      	add	r3, r1
 8007292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007296:	4619      	mov	r1, r3
 8007298:	4b34      	ldr	r3, [pc, #208]	; (800736c <USB_EP0StartXfer+0x2ac>)
 800729a:	4013      	ands	r3, r2
 800729c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	0159      	lsls	r1, r3, #5
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	440b      	add	r3, r1
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	4619      	mov	r1, r3
 80072ba:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <USB_EP0StartXfer+0x2a8>)
 80072bc:	4013      	ands	r3, r2
 80072be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691a      	ldr	r2, [r3, #16]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007306:	6939      	ldr	r1, [r7, #16]
 8007308:	0148      	lsls	r0, r1, #5
 800730a:	6979      	ldr	r1, [r7, #20]
 800730c:	4401      	add	r1, r0
 800730e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007312:	4313      	orrs	r3, r2
 8007314:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10d      	bne.n	8007338 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	68d9      	ldr	r1, [r3, #12]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	460a      	mov	r2, r1
 8007336:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	e007ffff 	.word	0xe007ffff
 800736c:	fff80000 	.word	0xfff80000

08007370 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	; 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4611      	mov	r1, r2
 800737c:	461a      	mov	r2, r3
 800737e:	460b      	mov	r3, r1
 8007380:	71fb      	strb	r3, [r7, #7]
 8007382:	4613      	mov	r3, r2
 8007384:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800738e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d11a      	bne.n	80073cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007396:	88bb      	ldrh	r3, [r7, #4]
 8007398:	3303      	adds	r3, #3
 800739a:	089b      	lsrs	r3, r3, #2
 800739c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800739e:	2300      	movs	r3, #0
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	e00f      	b.n	80073c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	031a      	lsls	r2, r3, #12
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b0:	461a      	mov	r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	3304      	adds	r3, #4
 80073bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	3301      	adds	r3, #1
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d3eb      	bcc.n	80073a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3724      	adds	r7, #36	; 0x24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073da:	b480      	push	{r7}
 80073dc:	b089      	sub	sp, #36	; 0x24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	3303      	adds	r3, #3
 80073f4:	089b      	lsrs	r3, r3, #2
 80073f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80073f8:	2300      	movs	r3, #0
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	e00b      	b.n	8007416 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	601a      	str	r2, [r3, #0]
    pDest++;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3304      	adds	r3, #4
 800740e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	3301      	adds	r3, #1
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d3ef      	bcc.n	80073fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800741e:	69fb      	ldr	r3, [r7, #28]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3724      	adds	r7, #36	; 0x24
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d12c      	bne.n	80074a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	db12      	blt.n	8007480 <USB_EPSetStall+0x54>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00f      	beq.n	8007480 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800747e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e02b      	b.n	80074fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	db12      	blt.n	80074da <USB_EPSetStall+0xae>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00f      	beq.n	80074da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	0151      	lsls	r1, r2, #5
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	440a      	add	r2, r1
 80074d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d128      	bne.n	8007576 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007542:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d003      	beq.n	8007554 <USB_EPClearStall+0x4c>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	78db      	ldrb	r3, [r3, #3]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d138      	bne.n	80075c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e027      	b.n	80075c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d003      	beq.n	80075a6 <USB_EPClearStall+0x9e>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d10f      	bne.n	80075c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007608:	68f9      	ldr	r1, [r7, #12]
 800760a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763a:	f023 0302 	bic.w	r3, r3, #2
 800763e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007640:	2003      	movs	r0, #3
 8007642:	f7f9 fe11 	bl	8001268 <HAL_Delay>

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800766a:	f043 0302 	orr.w	r3, r3, #2
 800766e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007670:	2003      	movs	r0, #3
 8007672:	f7f9 fdf9 	bl	8001268 <HAL_Delay>

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4013      	ands	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b085      	sub	sp, #20
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	0c1b      	lsrs	r3, r3, #16
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	4013      	ands	r3, r2
 80076fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	b29b      	uxth	r3, r3
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4013      	ands	r3, r2
 800773a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800773c:	68bb      	ldr	r3, [r7, #8]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800774a:	b480      	push	{r7}
 800774c:	b087      	sub	sp, #28
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	fa22 f303 	lsr.w	r3, r2, r3
 800777a:	01db      	lsls	r3, r3, #7
 800777c:	b2db      	uxtb	r3, r3
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4013      	ands	r3, r2
 8007796:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007798:	68bb      	ldr	r3, [r7, #8]
}
 800779a:	4618      	mov	r0, r3
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f003 0301 	and.w	r3, r3, #1
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	4619      	mov	r1, r3
 80077e0:	4b09      	ldr	r3, [pc, #36]	; (8007808 <USB_ActivateSetup+0x44>)
 80077e2:	4013      	ands	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	fffff800 	.word	0xfffff800

0800780c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	460b      	mov	r3, r1
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	333c      	adds	r3, #60	; 0x3c
 8007822:	3304      	adds	r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4a26      	ldr	r2, [pc, #152]	; (80078c4 <USB_EP0_OutStart+0xb8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d90a      	bls.n	8007846 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800783c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007840:	d101      	bne.n	8007846 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e037      	b.n	80078b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	461a      	mov	r2, r3
 800784e:	2300      	movs	r3, #0
 8007850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007874:	f043 0318 	orr.w	r3, r3, #24
 8007878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007888:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800788c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d10f      	bne.n	80078b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80078b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	4f54300a 	.word	0x4f54300a

080078c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a13      	ldr	r2, [pc, #76]	; (800792c <USB_CoreReset+0x64>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e01b      	b.n	800791e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	daf2      	bge.n	80078d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f043 0201 	orr.w	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a09      	ldr	r2, [pc, #36]	; (800792c <USB_CoreReset+0x64>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d901      	bls.n	8007910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e006      	b.n	800791e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d0f0      	beq.n	80078fe <USB_CoreReset+0x36>

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	00030d40 	.word	0x00030d40

08007930 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800793c:	2010      	movs	r0, #16
 800793e:	f002 fd93 	bl	800a468 <malloc>
 8007942:	4603      	mov	r3, r0
 8007944:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007954:	2302      	movs	r3, #2
 8007956:	e01b      	b.n	8007990 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7c1b      	ldrb	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2207      	movs	r2, #7
 800796c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800796e:	e002      	b.n	8007976 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	220a      	movs	r2, #10
 8007974:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007976:	2304      	movs	r3, #4
 8007978:	2203      	movs	r2, #3
 800797a:	2181      	movs	r1, #129	; 0x81
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 fd9c 	bl	80094ba <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80079a4:	2181      	movs	r1, #129	; 0x81
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fdad 	bl	8009506 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 fd55 	bl	800a478 <free>
    pdev->pClassData = NULL;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d045      	beq.n	8007a92 <USBD_HID_Setup+0xb2>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 80d4 	bne.w	8007bb4 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	3b02      	subs	r3, #2
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d835      	bhi.n	8007a82 <USBD_HID_Setup+0xa2>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <USBD_HID_Setup+0x3c>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a73 	.word	0x08007a73
 8007a20:	08007a53 	.word	0x08007a53
 8007a24:	08007a83 	.word	0x08007a83
 8007a28:	08007a83 	.word	0x08007a83
 8007a2c:	08007a83 	.word	0x08007a83
 8007a30:	08007a83 	.word	0x08007a83
 8007a34:	08007a83 	.word	0x08007a83
 8007a38:	08007a83 	.word	0x08007a83
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a45 	.word	0x08007a45
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	885b      	ldrh	r3, [r3, #2]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]
      break;
 8007a50:	e01e      	b.n	8007a90 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f9c8 	bl	8008dee <USBD_CtlSendData>
      break;
 8007a5e:	e017      	b.n	8007a90 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	0a1b      	lsrs	r3, r3, #8
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	605a      	str	r2, [r3, #4]
      break;
 8007a70:	e00e      	b.n	8007a90 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2201      	movs	r2, #1
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 f9b7 	bl	8008dee <USBD_CtlSendData>
      break;
 8007a80:	e006      	b.n	8007a90 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f941 	bl	8008d0c <USBD_CtlError>
      ret = USBD_FAIL;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a8e:	bf00      	nop
    }
    break;
 8007a90:	e097      	b.n	8007bc2 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b0b      	cmp	r3, #11
 8007a98:	f200 8083 	bhi.w	8007ba2 <USBD_HID_Setup+0x1c2>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <USBD_HID_Setup+0xc4>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ad5 	.word	0x08007ad5
 8007aa8:	08007bb1 	.word	0x08007bb1
 8007aac:	08007ba3 	.word	0x08007ba3
 8007ab0:	08007ba3 	.word	0x08007ba3
 8007ab4:	08007ba3 	.word	0x08007ba3
 8007ab8:	08007ba3 	.word	0x08007ba3
 8007abc:	08007afd 	.word	0x08007afd
 8007ac0:	08007ba3 	.word	0x08007ba3
 8007ac4:	08007ba3 	.word	0x08007ba3
 8007ac8:	08007ba3 	.word	0x08007ba3
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007b7d 	.word	0x08007b7d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d107      	bne.n	8007aee <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ade:	f107 030a 	add.w	r3, r7, #10
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 f981 	bl	8008dee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007aec:	e061      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f90b 	bl	8008d0c <USBD_CtlError>
        ret = USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	75fb      	strb	r3, [r7, #23]
      break;
 8007afa:	e05a      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	885b      	ldrh	r3, [r3, #2]
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b22      	cmp	r3, #34	; 0x22
 8007b06:	d108      	bne.n	8007b1a <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	88db      	ldrh	r3, [r3, #6]
 8007b0c:	2b65      	cmp	r3, #101	; 0x65
 8007b0e:	bf28      	it	cs
 8007b10:	2365      	movcs	r3, #101	; 0x65
 8007b12:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8007b14:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <USBD_HID_Setup+0x1ec>)
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e015      	b.n	8007b46 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b21      	cmp	r3, #33	; 0x21
 8007b24:	d108      	bne.n	8007b38 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <USBD_HID_Setup+0x1f0>)
 8007b28:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	88db      	ldrh	r3, [r3, #6]
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	bf28      	it	cs
 8007b32:	2309      	movcs	r3, #9
 8007b34:	82bb      	strh	r3, [r7, #20]
 8007b36:	e006      	b.n	8007b46 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 f8e6 	bl	8008d0c <USBD_CtlError>
        ret = USBD_FAIL;
 8007b40:	2303      	movs	r3, #3
 8007b42:	75fb      	strb	r3, [r7, #23]
        break;
 8007b44:	e035      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b46:	8abb      	ldrh	r3, [r7, #20]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6939      	ldr	r1, [r7, #16]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f94e 	bl	8008dee <USBD_CtlSendData>
      break;
 8007b52:	e02e      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d107      	bne.n	8007b6e <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3308      	adds	r3, #8
 8007b62:	2201      	movs	r2, #1
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f941 	bl	8008dee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b6c:	e021      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f8cb 	bl	8008d0c <USBD_CtlError>
        ret = USBD_FAIL;
 8007b76:	2303      	movs	r3, #3
 8007b78:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7a:	e01a      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d106      	bne.n	8007b94 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b92:	e00e      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 f8b8 	bl	8008d0c <USBD_CtlError>
        ret = USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba0:	e007      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f8b1 	bl	8008d0c <USBD_CtlError>
      ret = USBD_FAIL;
 8007baa:	2303      	movs	r3, #3
 8007bac:	75fb      	strb	r3, [r7, #23]
      break;
 8007bae:	e000      	b.n	8007bb2 <USBD_HID_Setup+0x1d2>
      break;
 8007bb0:	bf00      	nop
    }
    break;
 8007bb2:	e006      	b.n	8007bc2 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f8a8 	bl	8008d0c <USBD_CtlError>
    ret = USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	75fb      	strb	r3, [r7, #23]
    break;
 8007bc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	240000d8 	.word	0x240000d8
 8007bd0:	240000c0 	.word	0x240000c0

08007bd4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4613      	mov	r3, r2
 8007be0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d10c      	bne.n	8007c0e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	7b1b      	ldrb	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	2181      	movs	r1, #129	; 0x81
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f001 fd24 	bl	8009656 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7c1b      	ldrb	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8007c28:	2308      	movs	r3, #8
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e001      	b.n	8007c32 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8007c2e:	230a      	movs	r3, #10
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8007c32:	68fb      	ldr	r3, [r7, #12]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2222      	movs	r2, #34	; 0x22
 8007c4c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007c4e:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	24000054 	.word	0x24000054

08007c60 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2222      	movs	r2, #34	; 0x22
 8007c6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007c6e:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	24000078 	.word	0x24000078

08007c80 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2222      	movs	r2, #34	; 0x22
 8007c8c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007c8e:	4b03      	ldr	r3, [pc, #12]	; (8007c9c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	2400009c 	.word	0x2400009c

08007ca0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	240000cc 	.word	0x240000cc

08007ce4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e025      	b.n	8007d48 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	79fa      	ldrb	r2, [r7, #7]
 8007d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f001 fb51 	bl	80093e4 <USBD_LL_Init>
 8007d42:	4603      	mov	r3, r0
 8007d44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e010      	b.n	8007d8a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	f107 020e 	add.w	r2, r7, #14
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fb72 	bl	8009484 <USBD_LL_Start>
 8007da0:	4603      	mov	r3, r0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	4611      	mov	r1, r2
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	4798      	blx	r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
  }

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 ff2c 	bl	8008c98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d00e      	beq.n	8007e82 <USBD_LL_SetupStage+0x5a>
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d302      	bcc.n	8007e6e <USBD_LL_SetupStage+0x46>
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d014      	beq.n	8007e96 <USBD_LL_SetupStage+0x6e>
 8007e6c:	e01d      	b.n	8007eaa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa18 	bl	80082ac <USBD_StdDevReq>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e020      	b.n	8007ec4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa7c 	bl	8008388 <USBD_StdItfReq>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
      break;
 8007e94:	e016      	b.n	8007ec4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fab8 	bl	8008414 <USBD_StdEPReq>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	e00c      	b.n	8007ec4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 fb43 	bl	8009544 <USBD_LL_StallEP>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	bf00      	nop
  }

  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b086      	sub	sp, #24
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d137      	bne.n	8007f52 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ee8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d14a      	bne.n	8007f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d913      	bls.n	8007f28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	bf28      	it	cs
 8007f1a:	4613      	movcs	r3, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 ff90 	bl	8008e46 <USBD_CtlContinueRx>
 8007f26:	e030      	b.n	8007f8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d105      	bne.n	8007f4a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 ff8c 	bl	8008e68 <USBD_CtlSendStatus>
 8007f50:	e01b      	b.n	8007f8a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d013      	beq.n	8007f86 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d10e      	bne.n	8007f86 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	7afa      	ldrb	r2, [r7, #11]
 8007f72:	4611      	mov	r1, r2
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	4798      	blx	r3
 8007f78:	4603      	mov	r3, r0
 8007f7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	e002      	b.n	8007f8c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e000      	b.n	8007f8c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d16a      	bne.n	800807e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3314      	adds	r3, #20
 8007fac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d155      	bne.n	8008064 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d914      	bls.n	8007fee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	1ad2      	subs	r2, r2, r3
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 ff22 	bl	8008e24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f001 fb56 	bl	8009698 <USBD_LL_PrepareReceive>
 8007fec:	e03a      	b.n	8008064 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d11c      	bne.n	8008034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008002:	429a      	cmp	r2, r3
 8008004:	d316      	bcc.n	8008034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008010:	429a      	cmp	r2, r3
 8008012:	d20f      	bcs.n	8008034 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008014:	2200      	movs	r2, #0
 8008016:	2100      	movs	r1, #0
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 ff03 	bl	8008e24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008026:	2300      	movs	r3, #0
 8008028:	2200      	movs	r2, #0
 800802a:	2100      	movs	r1, #0
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f001 fb33 	bl	8009698 <USBD_LL_PrepareReceive>
 8008032:	e017      	b.n	8008064 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008046:	2b03      	cmp	r3, #3
 8008048:	d105      	bne.n	8008056 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 fa73 	bl	8009544 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 ff15 	bl	8008e8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d123      	bne.n	80080b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fe9b 	bl	8007daa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800807c:	e01b      	b.n	80080b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d013      	beq.n	80080b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008090:	2b03      	cmp	r3, #3
 8008092:	d10e      	bne.n	80080b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	7afa      	ldrb	r2, [r7, #11]
 800809e:	4611      	mov	r1, r2
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	4798      	blx	r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	e002      	b.n	80080b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e000      	b.n	80080b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6852      	ldr	r2, [r2, #4]
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	4611      	mov	r1, r2
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008104:	2340      	movs	r3, #64	; 0x40
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 f9d5 	bl	80094ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2240      	movs	r2, #64	; 0x40
 800811c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	2200      	movs	r2, #0
 8008124:	2180      	movs	r1, #128	; 0x80
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f9c7 	bl	80094ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2240      	movs	r2, #64	; 0x40
 8008136:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2204      	movs	r2, #4
 800817a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819a:	2b04      	cmp	r3, #4
 800819c:	d105      	bne.n	80081aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d10b      	bne.n	80081e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d009      	beq.n	8008264 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6852      	ldr	r2, [r2, #4]
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	4611      	mov	r1, r2
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
  }

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800826e:	b480      	push	{r7}
 8008270:	b087      	sub	sp, #28
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	3301      	adds	r3, #1
 8008284:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800828c:	8a3b      	ldrh	r3, [r7, #16]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	b21a      	sxth	r2, r3
 8008292:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008296:	4313      	orrs	r3, r2
 8008298:	b21b      	sxth	r3, r3
 800829a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800829c:	89fb      	ldrh	r3, [r7, #14]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d004      	beq.n	80082d0 <USBD_StdDevReq+0x24>
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d002      	beq.n	80082d0 <USBD_StdDevReq+0x24>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <USBD_StdDevReq+0x38>
 80082ce:	e050      	b.n	8008372 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
    break;
 80082e2:	e04b      	b.n	800837c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b09      	cmp	r3, #9
 80082ea:	d83c      	bhi.n	8008366 <USBD_StdDevReq+0xba>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBD_StdDevReq+0x48>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008349 	.word	0x08008349
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	08008367 	.word	0x08008367
 8008300:	08008353 	.word	0x08008353
 8008304:	08008367 	.word	0x08008367
 8008308:	08008327 	.word	0x08008327
 800830c:	0800831d 	.word	0x0800831d
 8008310:	08008367 	.word	0x08008367
 8008314:	0800833f 	.word	0x0800833f
 8008318:	08008331 	.word	0x08008331
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9ce 	bl	80086c0 <USBD_GetDescriptor>
      break;
 8008324:	e024      	b.n	8008370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb33 	bl	8008994 <USBD_SetAddress>
      break;
 800832e:	e01f      	b.n	8008370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb70 	bl	8008a18 <USBD_SetConfig>
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]
      break;
 800833c:	e018      	b.n	8008370 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fc0d 	bl	8008b60 <USBD_GetConfig>
      break;
 8008346:	e013      	b.n	8008370 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fc3c 	bl	8008bc8 <USBD_GetStatus>
      break;
 8008350:	e00e      	b.n	8008370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc6a 	bl	8008c2e <USBD_SetFeature>
      break;
 800835a:	e009      	b.n	8008370 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fc79 	bl	8008c56 <USBD_ClrFeature>
      break;
 8008364:	e004      	b.n	8008370 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fccf 	bl	8008d0c <USBD_CtlError>
      break;
 800836e:	bf00      	nop
    }
    break;
 8008370:	e004      	b.n	800837c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fcc9 	bl	8008d0c <USBD_CtlError>
    break;
 800837a:	bf00      	nop
  }

  return ret;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop

08008388 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d003      	beq.n	80083aa <USBD_StdItfReq+0x22>
 80083a2:	2b40      	cmp	r3, #64	; 0x40
 80083a4:	d001      	beq.n	80083aa <USBD_StdItfReq+0x22>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d12a      	bne.n	8008400 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b0:	3b01      	subs	r3, #1
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d81d      	bhi.n	80083f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	889b      	ldrh	r3, [r3, #4]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d813      	bhi.n	80083e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88db      	ldrh	r3, [r3, #6]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d110      	bne.n	80083fc <USBD_StdItfReq+0x74>
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10d      	bne.n	80083fc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fd41 	bl	8008e68 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80083e6:	e009      	b.n	80083fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fc8e 	bl	8008d0c <USBD_CtlError>
      break;
 80083f0:	e004      	b.n	80083fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc89 	bl	8008d0c <USBD_CtlError>
      break;
 80083fa:	e000      	b.n	80083fe <USBD_StdItfReq+0x76>
      break;
 80083fc:	bf00      	nop
    }
    break;
 80083fe:	e004      	b.n	800840a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc82 	bl	8008d0c <USBD_CtlError>
    break;
 8008408:	bf00      	nop
  }

  return ret;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	889b      	ldrh	r3, [r3, #4]
 8008426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008430:	2b20      	cmp	r3, #32
 8008432:	d004      	beq.n	800843e <USBD_StdEPReq+0x2a>
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d002      	beq.n	800843e <USBD_StdEPReq+0x2a>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <USBD_StdEPReq+0x3e>
 800843c:	e135      	b.n	80086aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
    break;
 8008450:	e130      	b.n	80086b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d03e      	beq.n	80084d8 <USBD_StdEPReq+0xc4>
 800845a:	2b03      	cmp	r3, #3
 800845c:	d002      	beq.n	8008464 <USBD_StdEPReq+0x50>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d077      	beq.n	8008552 <USBD_StdEPReq+0x13e>
 8008462:	e11c      	b.n	800869e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846a:	2b02      	cmp	r3, #2
 800846c:	d002      	beq.n	8008474 <USBD_StdEPReq+0x60>
 800846e:	2b03      	cmp	r3, #3
 8008470:	d015      	beq.n	800849e <USBD_StdEPReq+0x8a>
 8008472:	e02b      	b.n	80084cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <USBD_StdEPReq+0x80>
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b80      	cmp	r3, #128	; 0x80
 800847e:	d009      	beq.n	8008494 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 f85d 	bl	8009544 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800848a:	2180      	movs	r1, #128	; 0x80
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f859 	bl	8009544 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008492:	e020      	b.n	80084d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fc38 	bl	8008d0c <USBD_CtlError>
        break;
 800849c:	e01b      	b.n	80084d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10e      	bne.n	80084c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_StdEPReq+0xb0>
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b80      	cmp	r3, #128	; 0x80
 80084b0:	d008      	beq.n	80084c4 <USBD_StdEPReq+0xb0>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	88db      	ldrh	r3, [r3, #6]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 f840 	bl	8009544 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fccf 	bl	8008e68 <USBD_CtlSendStatus>

        break;
 80084ca:	e004      	b.n	80084d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fc1c 	bl	8008d0c <USBD_CtlError>
        break;
 80084d4:	bf00      	nop
      }
      break;
 80084d6:	e0e7      	b.n	80086a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d002      	beq.n	80084e8 <USBD_StdEPReq+0xd4>
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d015      	beq.n	8008512 <USBD_StdEPReq+0xfe>
 80084e6:	e02d      	b.n	8008544 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <USBD_StdEPReq+0xf4>
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d009      	beq.n	8008508 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 f823 	bl	8009544 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fe:	2180      	movs	r1, #128	; 0x80
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f81f 	bl	8009544 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008506:	e023      	b.n	8008550 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fbfe 	bl	8008d0c <USBD_CtlError>
        break;
 8008510:	e01e      	b.n	8008550 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d119      	bne.n	800854e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f82a 	bl	8009582 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fc9a 	bl	8008e68 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	4798      	blx	r3
        }
        break;
 8008542:	e004      	b.n	800854e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fbe0 	bl	8008d0c <USBD_CtlError>
        break;
 800854c:	e000      	b.n	8008550 <USBD_StdEPReq+0x13c>
        break;
 800854e:	bf00      	nop
      }
      break;
 8008550:	e0aa      	b.n	80086a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	2b02      	cmp	r3, #2
 800855a:	d002      	beq.n	8008562 <USBD_StdEPReq+0x14e>
 800855c:	2b03      	cmp	r3, #3
 800855e:	d032      	beq.n	80085c6 <USBD_StdEPReq+0x1b2>
 8008560:	e097      	b.n	8008692 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <USBD_StdEPReq+0x164>
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b80      	cmp	r3, #128	; 0x80
 800856c:	d004      	beq.n	8008578 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fbcb 	bl	8008d0c <USBD_CtlError>
          break;
 8008576:	e091      	b.n	800869c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da0b      	bge.n	8008598 <USBD_StdEPReq+0x184>
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	3310      	adds	r3, #16
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	3304      	adds	r3, #4
 8008596:	e00b      	b.n	80085b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2202      	movs	r2, #2
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc15 	bl	8008dee <USBD_CtlSendData>
        break;
 80085c4:	e06a      	b.n	800869c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80085c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da11      	bge.n	80085f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	3324      	adds	r3, #36	; 0x24
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d117      	bne.n	8008618 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb8e 	bl	8008d0c <USBD_CtlError>
            break;
 80085f0:	e054      	b.n	800869c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb7b 	bl	8008d0c <USBD_CtlError>
            break;
 8008616:	e041      	b.n	800869c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	da0b      	bge.n	8008638 <USBD_StdEPReq+0x224>
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	3310      	adds	r3, #16
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	3304      	adds	r3, #4
 8008636:	e00b      	b.n	8008650 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	3304      	adds	r3, #4
 8008650:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <USBD_StdEPReq+0x24a>
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b80      	cmp	r3, #128	; 0x80
 800865c:	d103      	bne.n	8008666 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e00e      	b.n	8008684 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 ffa8 	bl	80095c0 <USBD_LL_IsStallEP>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e002      	b.n	8008684 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2202      	movs	r2, #2
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fbaf 	bl	8008dee <USBD_CtlSendData>
          break;
 8008690:	e004      	b.n	800869c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fb39 	bl	8008d0c <USBD_CtlError>
        break;
 800869a:	bf00      	nop
      }
      break;
 800869c:	e004      	b.n	80086a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fb33 	bl	8008d0c <USBD_CtlError>
      break;
 80086a6:	bf00      	nop
    }
    break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fb2d 	bl	8008d0c <USBD_CtlError>
    break;
 80086b2:	bf00      	nop
  }

  return ret;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	0a1b      	lsrs	r3, r3, #8
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	2b06      	cmp	r3, #6
 80086e2:	f200 8128 	bhi.w	8008936 <USBD_GetDescriptor+0x276>
 80086e6:	a201      	add	r2, pc, #4	; (adr r2, 80086ec <USBD_GetDescriptor+0x2c>)
 80086e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008721 	.word	0x08008721
 80086f4:	08008761 	.word	0x08008761
 80086f8:	08008937 	.word	0x08008937
 80086fc:	08008937 	.word	0x08008937
 8008700:	080088d7 	.word	0x080088d7
 8008704:	08008903 	.word	0x08008903
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7c12      	ldrb	r2, [r2, #16]
 8008714:	f107 0108 	add.w	r1, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
    break;
 800871e:	e112      	b.n	8008946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7c1b      	ldrb	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10d      	bne.n	8008744 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f107 0208 	add.w	r2, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	2202      	movs	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008742:	e100      	b.n	8008946 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874c:	f107 0208 	add.w	r2, r7, #8
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
 8008754:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	2202      	movs	r2, #2
 800875c:	701a      	strb	r2, [r3, #0]
    break;
 800875e:	e0f2      	b.n	8008946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	885b      	ldrh	r3, [r3, #2]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b05      	cmp	r3, #5
 8008768:	f200 80ac 	bhi.w	80088c4 <USBD_GetDescriptor+0x204>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <USBD_GetDescriptor+0xb4>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	0800878d 	.word	0x0800878d
 8008778:	080087c1 	.word	0x080087c1
 800877c:	080087f5 	.word	0x080087f5
 8008780:	08008829 	.word	0x08008829
 8008784:	0800885d 	.word	0x0800885d
 8008788:	08008891 	.word	0x08008891
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	7c12      	ldrb	r2, [r2, #16]
 80087a4:	f107 0108 	add.w	r1, r7, #8
 80087a8:	4610      	mov	r0, r2
 80087aa:	4798      	blx	r3
 80087ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087ae:	e091      	b.n	80088d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 faaa 	bl	8008d0c <USBD_CtlError>
        err++;
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	3301      	adds	r3, #1
 80087bc:	72fb      	strb	r3, [r7, #11]
      break;
 80087be:	e089      	b.n	80088d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087e2:	e077      	b.n	80088d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa90 	bl	8008d0c <USBD_CtlError>
        err++;
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	3301      	adds	r3, #1
 80087f0:	72fb      	strb	r3, [r7, #11]
      break;
 80087f2:	e06f      	b.n	80088d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7c12      	ldrb	r2, [r2, #16]
 800880c:	f107 0108 	add.w	r1, r7, #8
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008816:	e05d      	b.n	80088d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa76 	bl	8008d0c <USBD_CtlError>
        err++;
 8008820:	7afb      	ldrb	r3, [r7, #11]
 8008822:	3301      	adds	r3, #1
 8008824:	72fb      	strb	r3, [r7, #11]
      break;
 8008826:	e055      	b.n	80088d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800884a:	e043      	b.n	80088d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa5c 	bl	8008d0c <USBD_CtlError>
        err++;
 8008854:	7afb      	ldrb	r3, [r7, #11]
 8008856:	3301      	adds	r3, #1
 8008858:	72fb      	strb	r3, [r7, #11]
      break;
 800885a:	e03b      	b.n	80088d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7c12      	ldrb	r2, [r2, #16]
 8008874:	f107 0108 	add.w	r1, r7, #8
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
 800887c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800887e:	e029      	b.n	80088d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa42 	bl	8008d0c <USBD_CtlError>
        err++;
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	3301      	adds	r3, #1
 800888c:	72fb      	strb	r3, [r7, #11]
      break;
 800888e:	e021      	b.n	80088d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b2:	e00f      	b.n	80088d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fa28 	bl	8008d0c <USBD_CtlError>
        err++;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	3301      	adds	r3, #1
 80088c0:	72fb      	strb	r3, [r7, #11]
      break;
 80088c2:	e007      	b.n	80088d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa20 	bl	8008d0c <USBD_CtlError>
      err++;
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	3301      	adds	r3, #1
 80088d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80088d2:	bf00      	nop
    }
    break;
 80088d4:	e037      	b.n	8008946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7c1b      	ldrb	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e6:	f107 0208 	add.w	r2, r7, #8
 80088ea:	4610      	mov	r0, r2
 80088ec:	4798      	blx	r3
 80088ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088f0:	e029      	b.n	8008946 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fa09 	bl	8008d0c <USBD_CtlError>
      err++;
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	3301      	adds	r3, #1
 80088fe:	72fb      	strb	r3, [r7, #11]
    break;
 8008900:	e021      	b.n	8008946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	7c1b      	ldrb	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10d      	bne.n	8008926 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	f107 0208 	add.w	r2, r7, #8
 8008916:	4610      	mov	r0, r2
 8008918:	4798      	blx	r3
 800891a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	2207      	movs	r2, #7
 8008922:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008924:	e00f      	b.n	8008946 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9ef 	bl	8008d0c <USBD_CtlError>
      err++;
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	3301      	adds	r3, #1
 8008932:	72fb      	strb	r3, [r7, #11]
    break;
 8008934:	e007      	b.n	8008946 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9e7 	bl	8008d0c <USBD_CtlError>
    err++;
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	3301      	adds	r3, #1
 8008942:	72fb      	strb	r3, [r7, #11]
    break;
 8008944:	bf00      	nop
  }

  if (err != 0U)
 8008946:	7afb      	ldrb	r3, [r7, #11]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d11e      	bne.n	800898a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	88db      	ldrh	r3, [r3, #6]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d016      	beq.n	8008982 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008954:	893b      	ldrh	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88da      	ldrh	r2, [r3, #6]
 800895e:	893b      	ldrh	r3, [r7, #8]
 8008960:	4293      	cmp	r3, r2
 8008962:	bf28      	it	cs
 8008964:	4613      	movcs	r3, r2
 8008966:	b29b      	uxth	r3, r3
 8008968:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800896a:	893b      	ldrh	r3, [r7, #8]
 800896c:	461a      	mov	r2, r3
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fa3c 	bl	8008dee <USBD_CtlSendData>
 8008976:	e009      	b.n	800898c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f9c6 	bl	8008d0c <USBD_CtlError>
 8008980:	e004      	b.n	800898c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa70 	bl	8008e68 <USBD_CtlSendStatus>
 8008988:	e000      	b.n	800898c <USBD_GetDescriptor+0x2cc>
    return;
 800898a:	bf00      	nop
    }
  }
}
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop

08008994 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d130      	bne.n	8008a08 <USBD_SetAddress+0x74>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d12c      	bne.n	8008a08 <USBD_SetAddress+0x74>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	885b      	ldrh	r3, [r3, #2]
 80089b2:	2b7f      	cmp	r3, #127	; 0x7f
 80089b4:	d828      	bhi.n	8008a08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d104      	bne.n	80089d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f99c 	bl	8008d0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d4:	e01c      	b.n	8008a10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7bfa      	ldrb	r2, [r7, #15]
 80089da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fe18 	bl	8009618 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa3d 	bl	8008e68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fc:	e008      	b.n	8008a10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a06:	e003      	b.n	8008a10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f97e 	bl	8008d0c <USBD_CtlError>
  }
}
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	4b4b      	ldr	r3, [pc, #300]	; (8008b5c <USBD_SetConfig+0x144>)
 8008a2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a30:	4b4a      	ldr	r3, [pc, #296]	; (8008b5c <USBD_SetConfig+0x144>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d905      	bls.n	8008a44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f966 	bl	8008d0c <USBD_CtlError>
    return USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e087      	b.n	8008b54 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d002      	beq.n	8008a54 <USBD_SetConfig+0x3c>
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d025      	beq.n	8008a9e <USBD_SetConfig+0x86>
 8008a52:	e071      	b.n	8008b38 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008a54:	4b41      	ldr	r3, [pc, #260]	; (8008b5c <USBD_SetConfig+0x144>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01c      	beq.n	8008a96 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008a5c:	4b3f      	ldr	r3, [pc, #252]	; (8008b5c <USBD_SetConfig+0x144>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a66:	4b3d      	ldr	r3, [pc, #244]	; (8008b5c <USBD_SetConfig+0x144>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff f9a7 	bl	8007dc0 <USBD_SetClassConfig>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f944 	bl	8008d0c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008a84:	e065      	b.n	8008b52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9ee 	bl	8008e68 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2203      	movs	r2, #3
 8008a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008a94:	e05d      	b.n	8008b52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9e6 	bl	8008e68 <USBD_CtlSendStatus>
    break;
 8008a9c:	e059      	b.n	8008b52 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008a9e:	4b2f      	ldr	r3, [pc, #188]	; (8008b5c <USBD_SetConfig+0x144>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d112      	bne.n	8008acc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008aae:	4b2b      	ldr	r3, [pc, #172]	; (8008b5c <USBD_SetConfig+0x144>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ab8:	4b28      	ldr	r3, [pc, #160]	; (8008b5c <USBD_SetConfig+0x144>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff f99a 	bl	8007df8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f9cf 	bl	8008e68 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008aca:	e042      	b.n	8008b52 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <USBD_SetConfig+0x144>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d02a      	beq.n	8008b30 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff f988 	bl	8007df8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008ae8:	4b1c      	ldr	r3, [pc, #112]	; (8008b5c <USBD_SetConfig+0x144>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008af2:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <USBD_SetConfig+0x144>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff f961 	bl	8007dc0 <USBD_SetClassConfig>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00f      	beq.n	8008b28 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8fe 	bl	8008d0c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff f96d 	bl	8007df8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008b26:	e014      	b.n	8008b52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f99d 	bl	8008e68 <USBD_CtlSendStatus>
    break;
 8008b2e:	e010      	b.n	8008b52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f999 	bl	8008e68 <USBD_CtlSendStatus>
    break;
 8008b36:	e00c      	b.n	8008b52 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f8e6 	bl	8008d0c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b40:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <USBD_SetConfig+0x144>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff f956 	bl	8007df8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b50:	bf00      	nop
  }

  return ret;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	24000214 	.word	0x24000214

08008b60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d004      	beq.n	8008b7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f8c9 	bl	8008d0c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008b7a:	e021      	b.n	8008bc0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	db17      	blt.n	8008bb6 <USBD_GetConfig+0x56>
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	dd02      	ble.n	8008b90 <USBD_GetConfig+0x30>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d00b      	beq.n	8008ba6 <USBD_GetConfig+0x46>
 8008b8e:	e012      	b.n	8008bb6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f925 	bl	8008dee <USBD_CtlSendData>
      break;
 8008ba4:	e00c      	b.n	8008bc0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	2201      	movs	r2, #1
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f91d 	bl	8008dee <USBD_CtlSendData>
      break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f8a7 	bl	8008d0c <USBD_CtlError>
      break;
 8008bbe:	bf00      	nop
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d81e      	bhi.n	8008c1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d004      	beq.n	8008bf0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f88f 	bl	8008d0c <USBD_CtlError>
      break;
 8008bee:	e01a      	b.n	8008c26 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f043 0202 	orr.w	r2, r3, #2
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	2202      	movs	r2, #2
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f8ea 	bl	8008dee <USBD_CtlSendData>
    break;
 8008c1a:	e004      	b.n	8008c26 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f874 	bl	8008d0c <USBD_CtlError>
    break;
 8008c24:	bf00      	nop
  }
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d106      	bne.n	8008c4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f90d 	bl	8008e68 <USBD_CtlSendStatus>
  }
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d80b      	bhi.n	8008c84 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	885b      	ldrh	r3, [r3, #2]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d10c      	bne.n	8008c8e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8f3 	bl	8008e68 <USBD_CtlSendStatus>
      }
      break;
 8008c82:	e004      	b.n	8008c8e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f840 	bl	8008d0c <USBD_CtlError>
      break;
 8008c8c:	e000      	b.n	8008c90 <USBD_ClrFeature+0x3a>
      break;
 8008c8e:	bf00      	nop
  }
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fad3 	bl	800826e <SWAPBYTE>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff fac6 	bl	800826e <SWAPBYTE>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff fab9 	bl	800826e <SWAPBYTE>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	80da      	strh	r2, [r3, #6]
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d16:	2180      	movs	r1, #128	; 0x80
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fc13 	bl	8009544 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d1e:	2100      	movs	r1, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fc0f 	bl	8009544 <USBD_LL_StallEP>
}
 8008d26:	bf00      	nop
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d036      	beq.n	8008db2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d48:	6938      	ldr	r0, [r7, #16]
 8008d4a:	f000 f836 	bl	8008dba <USBD_GetLen>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	3301      	adds	r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	4413      	add	r3, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	7812      	ldrb	r2, [r2, #0]
 8008d66:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	4413      	add	r3, r2
 8008d74:	2203      	movs	r2, #3
 8008d76:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d7e:	e013      	b.n	8008da8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	7812      	ldrb	r2, [r2, #0]
 8008d8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	613b      	str	r3, [r7, #16]
    idx++;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	3301      	adds	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
    idx++;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	3301      	adds	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e7      	bne.n	8008d80 <USBD_GetString+0x52>
 8008db0:	e000      	b.n	8008db4 <USBD_GetString+0x86>
    return;
 8008db2:	bf00      	nop
  }
}
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008dca:	e005      	b.n	8008dd8 <USBD_GetLen+0x1e>
  {
    len++;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1f5      	bne.n	8008dcc <USBD_GetLen+0x12>
  }

  return len;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	2100      	movs	r1, #0
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fc1e 	bl	8009656 <USBD_LL_Transmit>

  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	2100      	movs	r1, #0
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fc0d 	bl	8009656 <USBD_LL_Transmit>

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	2100      	movs	r1, #0
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 fc1d 	bl	8009698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2204      	movs	r2, #4
 8008e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fbe9 	bl	8009656 <USBD_LL_Transmit>

  return USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2205      	movs	r2, #5
 8008e9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbf7 	bl	8009698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	490f      	ldr	r1, [pc, #60]	; (8008ef8 <MX_USB_DEVICE_Init+0x44>)
 8008ebc:	480f      	ldr	r0, [pc, #60]	; (8008efc <MX_USB_DEVICE_Init+0x48>)
 8008ebe:	f7fe ff11 	bl	8007ce4 <USBD_Init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ec8:	f7f7 ff98 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008ecc:	490c      	ldr	r1, [pc, #48]	; (8008f00 <MX_USB_DEVICE_Init+0x4c>)
 8008ece:	480b      	ldr	r0, [pc, #44]	; (8008efc <MX_USB_DEVICE_Init+0x48>)
 8008ed0:	f7fe ff3e 	bl	8007d50 <USBD_RegisterClass>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eda:	f7f7 ff8f 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ede:	4807      	ldr	r0, [pc, #28]	; (8008efc <MX_USB_DEVICE_Init+0x48>)
 8008ee0:	f7fe ff57 	bl	8007d92 <USBD_Start>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008eea:	f7f7 ff87 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008eee:	f7f9 fed7 	bl	8002ca0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ef2:	bf00      	nop
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	24000140 	.word	0x24000140
 8008efc:	240002b4 	.word	0x240002b4
 8008f00:	2400001c 	.word	0x2400001c

08008f04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2212      	movs	r2, #18
 8008f14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f16:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	2400015c 	.word	0x2400015c

08008f28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2204      	movs	r2, #4
 8008f38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f3a:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	24000170 	.word	0x24000170

08008f4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	6039      	str	r1, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d105      	bne.n	8008f6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4907      	ldr	r1, [pc, #28]	; (8008f80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f62:	4808      	ldr	r0, [pc, #32]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f64:	f7ff fee3 	bl	8008d2e <USBD_GetString>
 8008f68:	e004      	b.n	8008f74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	4904      	ldr	r1, [pc, #16]	; (8008f80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f6e:	4805      	ldr	r0, [pc, #20]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f70:	f7ff fedd 	bl	8008d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	24000584 	.word	0x24000584
 8008f84:	0800a638 	.word	0x0800a638

08008f88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	4904      	ldr	r1, [pc, #16]	; (8008fa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f98:	4804      	ldr	r0, [pc, #16]	; (8008fac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f9a:	f7ff fec8 	bl	8008d2e <USBD_GetString>
  return USBD_StrDesc;
 8008f9e:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	24000584 	.word	0x24000584
 8008fac:	0800a650 	.word	0x0800a650

08008fb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	221a      	movs	r2, #26
 8008fc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fc2:	f000 f843 	bl	800904c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fc6:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	24000174 	.word	0x24000174

08008fd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4907      	ldr	r1, [pc, #28]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fea:	4808      	ldr	r0, [pc, #32]	; (800900c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fec:	f7ff fe9f 	bl	8008d2e <USBD_GetString>
 8008ff0:	e004      	b.n	8008ffc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4904      	ldr	r1, [pc, #16]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ff6:	4805      	ldr	r0, [pc, #20]	; (800900c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ff8:	f7ff fe99 	bl	8008d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	24000584 	.word	0x24000584
 800900c:	0800a664 	.word	0x0800a664

08009010 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d105      	bne.n	800902e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4907      	ldr	r1, [pc, #28]	; (8009044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009026:	4808      	ldr	r0, [pc, #32]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009028:	f7ff fe81 	bl	8008d2e <USBD_GetString>
 800902c:	e004      	b.n	8009038 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009032:	4805      	ldr	r0, [pc, #20]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009034:	f7ff fe7b 	bl	8008d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009038:	4b02      	ldr	r3, [pc, #8]	; (8009044 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	24000584 	.word	0x24000584
 8009048:	0800a670 	.word	0x0800a670

0800904c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009052:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <Get_SerialNum+0x44>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009058:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <Get_SerialNum+0x48>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <Get_SerialNum+0x4c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009072:	2208      	movs	r2, #8
 8009074:	4909      	ldr	r1, [pc, #36]	; (800909c <Get_SerialNum+0x50>)
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f814 	bl	80090a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800907c:	2204      	movs	r2, #4
 800907e:	4908      	ldr	r1, [pc, #32]	; (80090a0 <Get_SerialNum+0x54>)
 8009080:	68b8      	ldr	r0, [r7, #8]
 8009082:	f000 f80f 	bl	80090a4 <IntToUnicode>
  }
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	1ff1e800 	.word	0x1ff1e800
 8009094:	1ff1e804 	.word	0x1ff1e804
 8009098:	1ff1e808 	.word	0x1ff1e808
 800909c:	24000176 	.word	0x24000176
 80090a0:	24000186 	.word	0x24000186

080090a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]
 80090ba:	e027      	b.n	800910c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	0f1b      	lsrs	r3, r3, #28
 80090c0:	2b09      	cmp	r3, #9
 80090c2:	d80b      	bhi.n	80090dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	0f1b      	lsrs	r3, r3, #28
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4619      	mov	r1, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	440b      	add	r3, r1
 80090d4:	3230      	adds	r2, #48	; 0x30
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e00a      	b.n	80090f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	0f1b      	lsrs	r3, r3, #28
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4619      	mov	r1, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	440b      	add	r3, r1
 80090ec:	3237      	adds	r2, #55	; 0x37
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	3301      	adds	r3, #1
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	4413      	add	r3, r2
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	3301      	adds	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
 800910c:	7dfa      	ldrb	r2, [r7, #23]
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	429a      	cmp	r2, r3
 8009112:	d3d3      	bcc.n	80090bc <IntToUnicode+0x18>
  }
}
 8009114:	bf00      	nop
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08a      	sub	sp, #40	; 0x28
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	605a      	str	r2, [r3, #4]
 8009132:	609a      	str	r2, [r3, #8]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a2d      	ldr	r2, [pc, #180]	; (80091f4 <HAL_PCD_MspInit+0xd4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d153      	bne.n	80091ea <HAL_PCD_MspInit+0xca>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009142:	4b2d      	ldr	r3, [pc, #180]	; (80091f8 <HAL_PCD_MspInit+0xd8>)
 8009144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009148:	4a2b      	ldr	r2, [pc, #172]	; (80091f8 <HAL_PCD_MspInit+0xd8>)
 800914a:	f043 0301 	orr.w	r3, r3, #1
 800914e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009152:	4b29      	ldr	r3, [pc, #164]	; (80091f8 <HAL_PCD_MspInit+0xd8>)
 8009154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009166:	2300      	movs	r3, #0
 8009168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	4619      	mov	r1, r3
 8009174:	4821      	ldr	r0, [pc, #132]	; (80091fc <HAL_PCD_MspInit+0xdc>)
 8009176:	f7f8 f9b5 	bl	80014e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800917a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800917e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009180:	2302      	movs	r3, #2
 8009182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	2300      	movs	r3, #0
 8009186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009188:	2300      	movs	r3, #0
 800918a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800918c:	230a      	movs	r3, #10
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009190:	f107 0314 	add.w	r3, r7, #20
 8009194:	4619      	mov	r1, r3
 8009196:	4819      	ldr	r0, [pc, #100]	; (80091fc <HAL_PCD_MspInit+0xdc>)
 8009198:	f7f8 f9a4 	bl	80014e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800919c:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <HAL_PCD_MspInit+0xd8>)
 800919e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80091a2:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <HAL_PCD_MspInit+0xd8>)
 80091a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80091ac:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <HAL_PCD_MspInit+0xd8>)
 80091ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80091b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80091ba:	2200      	movs	r2, #0
 80091bc:	2100      	movs	r1, #0
 80091be:	2062      	movs	r0, #98	; 0x62
 80091c0:	f7f8 f95b 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80091c4:	2062      	movs	r0, #98	; 0x62
 80091c6:	f7f8 f972 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 80091ca:	2200      	movs	r2, #0
 80091cc:	2100      	movs	r1, #0
 80091ce:	2063      	movs	r0, #99	; 0x63
 80091d0:	f7f8 f953 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80091d4:	2063      	movs	r0, #99	; 0x63
 80091d6:	f7f8 f96a 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	2065      	movs	r0, #101	; 0x65
 80091e0:	f7f8 f94b 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091e4:	2065      	movs	r0, #101	; 0x65
 80091e6:	f7f8 f962 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091ea:	bf00      	nop
 80091ec:	3728      	adds	r7, #40	; 0x28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40080000 	.word	0x40080000
 80091f8:	58024400 	.word	0x58024400
 80091fc:	58020000 	.word	0x58020000

08009200 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe fe06 	bl	8007e28 <USBD_LL_SetupStage>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009236:	78fa      	ldrb	r2, [r7, #3]
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	440b      	add	r3, r1
 8009244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	4619      	mov	r1, r3
 800924e:	f7fe fe3e 	bl	8007ece <USBD_LL_DataOutStage>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	3348      	adds	r3, #72	; 0x48
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	78fb      	ldrb	r3, [r7, #3]
 8009280:	4619      	mov	r1, r3
 8009282:	f7fe fe87 	bl	8007f94 <USBD_LL_DataInStage>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe ff8b 	bl	80081b8 <USBD_LL_SOF>
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
 80092c2:	e008      	b.n	80092d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d102      	bne.n	80092d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
 80092d0:	e001      	b.n	80092d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092d2:	f7f7 fd93 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092dc:	7bfa      	ldrb	r2, [r7, #15]
 80092de:	4611      	mov	r1, r2
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe ff2e 	bl	8008142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe fee7 	bl	80080c0 <USBD_LL_Reset>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe ff29 	bl	8008162 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	6812      	ldr	r2, [r2, #0]
 800931e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <HAL_PCD_SuspendCallback+0x48>)
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	4a03      	ldr	r2, [pc, #12]	; (8009344 <HAL_PCD_SuspendCallback+0x48>)
 8009336:	f043 0306 	orr.w	r3, r3, #6
 800933a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	e000ed00 	.word	0xe000ed00

08009348 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe ff18 	bl	800818c <USBD_LL_Resume>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe ff43 	bl	8008206 <USBD_LL_IsoOUTIncomplete>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe ff24 	bl	80081ec <USBD_LL_IsoINIncomplete>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe ff30 	bl	8008220 <USBD_LL_DevConnected>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe ff2d 	bl	8008236 <USBD_LL_DevDisconnected>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d13e      	bne.n	8009472 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093f4:	4a21      	ldr	r2, [pc, #132]	; (800947c <USBD_LL_Init+0x98>)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a1f      	ldr	r2, [pc, #124]	; (800947c <USBD_LL_Init+0x98>)
 8009400:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009404:	4b1d      	ldr	r3, [pc, #116]	; (800947c <USBD_LL_Init+0x98>)
 8009406:	4a1e      	ldr	r2, [pc, #120]	; (8009480 <USBD_LL_Init+0x9c>)
 8009408:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800940a:	4b1c      	ldr	r3, [pc, #112]	; (800947c <USBD_LL_Init+0x98>)
 800940c:	2209      	movs	r2, #9
 800940e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009410:	4b1a      	ldr	r3, [pc, #104]	; (800947c <USBD_LL_Init+0x98>)
 8009412:	2202      	movs	r2, #2
 8009414:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009416:	4b19      	ldr	r3, [pc, #100]	; (800947c <USBD_LL_Init+0x98>)
 8009418:	2200      	movs	r2, #0
 800941a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800941c:	4b17      	ldr	r3, [pc, #92]	; (800947c <USBD_LL_Init+0x98>)
 800941e:	2202      	movs	r2, #2
 8009420:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <USBD_LL_Init+0x98>)
 8009424:	2200      	movs	r2, #0
 8009426:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009428:	4b14      	ldr	r3, [pc, #80]	; (800947c <USBD_LL_Init+0x98>)
 800942a:	2200      	movs	r2, #0
 800942c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <USBD_LL_Init+0x98>)
 8009430:	2200      	movs	r2, #0
 8009432:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009434:	4b11      	ldr	r3, [pc, #68]	; (800947c <USBD_LL_Init+0x98>)
 8009436:	2201      	movs	r2, #1
 8009438:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800943a:	4b10      	ldr	r3, [pc, #64]	; (800947c <USBD_LL_Init+0x98>)
 800943c:	2201      	movs	r2, #1
 800943e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <USBD_LL_Init+0x98>)
 8009442:	2200      	movs	r2, #0
 8009444:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009446:	480d      	ldr	r0, [pc, #52]	; (800947c <USBD_LL_Init+0x98>)
 8009448:	f7f8 fa2d 	bl	80018a6 <HAL_PCD_Init>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009452:	f7f7 fcd3 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009456:	2180      	movs	r1, #128	; 0x80
 8009458:	4808      	ldr	r0, [pc, #32]	; (800947c <USBD_LL_Init+0x98>)
 800945a:	f7f9 fba6 	bl	8002baa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800945e:	2240      	movs	r2, #64	; 0x40
 8009460:	2100      	movs	r1, #0
 8009462:	4806      	ldr	r0, [pc, #24]	; (800947c <USBD_LL_Init+0x98>)
 8009464:	f7f9 fb5a 	bl	8002b1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009468:	2280      	movs	r2, #128	; 0x80
 800946a:	2101      	movs	r1, #1
 800946c:	4803      	ldr	r0, [pc, #12]	; (800947c <USBD_LL_Init+0x98>)
 800946e:	f7f9 fb55 	bl	8002b1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	24000784 	.word	0x24000784
 8009480:	40080000 	.word	0x40080000

08009484 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800949a:	4618      	mov	r0, r3
 800949c:	f7f8 fb27 	bl	8001aee <HAL_PCD_Start>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f918 	bl	80096dc <USBD_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	461a      	mov	r2, r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	70fb      	strb	r3, [r7, #3]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70bb      	strb	r3, [r7, #2]
 80094d0:	4613      	mov	r3, r2
 80094d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094e2:	78bb      	ldrb	r3, [r7, #2]
 80094e4:	883a      	ldrh	r2, [r7, #0]
 80094e6:	78f9      	ldrb	r1, [r7, #3]
 80094e8:	f7f8 ff38 	bl	800235c <HAL_PCD_EP_Open>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f8f2 	bl	80096dc <USBD_Get_USB_Status>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7f8 ff81 	bl	800242c <HAL_PCD_EP_Close>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f8d3 	bl	80096dc <USBD_Get_USB_Status>
 8009536:	4603      	mov	r3, r0
 8009538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953a:	7bbb      	ldrb	r3, [r7, #14]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f7f9 f841 	bl	80025ea <HAL_PCD_EP_SetStall>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f8b4 	bl	80096dc <USBD_Get_USB_Status>
 8009574:	4603      	mov	r3, r0
 8009576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009578:	7bbb      	ldrb	r3, [r7, #14]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	4611      	mov	r1, r2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7f9 f886 	bl	80026b2 <HAL_PCD_EP_ClrStall>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f895 	bl	80096dc <USBD_Get_USB_Status>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0b      	bge.n	80095f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	4613      	mov	r3, r2
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	1a9b      	subs	r3, r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	440b      	add	r3, r1
 80095ee:	333e      	adds	r3, #62	; 0x3e
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	e00b      	b.n	800960c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	4613      	mov	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800960a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7f8 fe6b 	bl	8002312 <HAL_PCD_SetAddress>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f84a 	bl	80096dc <USBD_Get_USB_Status>
 8009648:	4603      	mov	r3, r0
 800964a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964c:	7bbb      	ldrb	r3, [r7, #14]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b086      	sub	sp, #24
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	460b      	mov	r3, r1
 8009664:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009674:	7af9      	ldrb	r1, [r7, #11]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	f7f8 ff6c 	bl	8002556 <HAL_PCD_EP_Transmit>
 800967e:	4603      	mov	r3, r0
 8009680:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f829 	bl	80096dc <USBD_Get_USB_Status>
 800968a:	4603      	mov	r3, r0
 800968c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800968e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	607a      	str	r2, [r7, #4]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	460b      	mov	r3, r1
 80096a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096b6:	7af9      	ldrb	r1, [r7, #11]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	f7f8 ff00 	bl	80024c0 <HAL_PCD_EP_Receive>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 f808 	bl	80096dc <USBD_Get_USB_Status>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d817      	bhi.n	8009720 <USBD_Get_USB_Status+0x44>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <USBD_Get_USB_Status+0x1c>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009709 	.word	0x08009709
 80096fc:	0800970f 	.word	0x0800970f
 8009700:	08009715 	.word	0x08009715
 8009704:	0800971b 	.word	0x0800971b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e00b      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800970e:	2303      	movs	r3, #3
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	e008      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e005      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800971a:	2303      	movs	r3, #3
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	e002      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009720:	2303      	movs	r3, #3
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	bf00      	nop
  }
  return usb_status;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	0000      	movs	r0, r0
	...

08009738 <cos>:
 8009738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800973a:	eeb0 7b40 	vmov.f64	d7, d0
 800973e:	ee17 3a90 	vmov	r3, s15
 8009742:	4a19      	ldr	r2, [pc, #100]	; (80097a8 <cos+0x70>)
 8009744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009748:	4293      	cmp	r3, r2
 800974a:	dc04      	bgt.n	8009756 <cos+0x1e>
 800974c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80097a0 <cos+0x68>
 8009750:	f000 f9ee 	bl	8009b30 <__kernel_cos>
 8009754:	e004      	b.n	8009760 <cos+0x28>
 8009756:	4a15      	ldr	r2, [pc, #84]	; (80097ac <cos+0x74>)
 8009758:	4293      	cmp	r3, r2
 800975a:	dd04      	ble.n	8009766 <cos+0x2e>
 800975c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8009760:	b005      	add	sp, #20
 8009762:	f85d fb04 	ldr.w	pc, [sp], #4
 8009766:	4668      	mov	r0, sp
 8009768:	f000 f8a6 	bl	80098b8 <__ieee754_rem_pio2>
 800976c:	f000 0003 	and.w	r0, r0, #3
 8009770:	2801      	cmp	r0, #1
 8009772:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009776:	ed9d 0b00 	vldr	d0, [sp]
 800977a:	d007      	beq.n	800978c <cos+0x54>
 800977c:	2802      	cmp	r0, #2
 800977e:	d00a      	beq.n	8009796 <cos+0x5e>
 8009780:	2800      	cmp	r0, #0
 8009782:	d0e5      	beq.n	8009750 <cos+0x18>
 8009784:	2001      	movs	r0, #1
 8009786:	f000 fcdb 	bl	800a140 <__kernel_sin>
 800978a:	e7e9      	b.n	8009760 <cos+0x28>
 800978c:	f000 fcd8 	bl	800a140 <__kernel_sin>
 8009790:	eeb1 0b40 	vneg.f64	d0, d0
 8009794:	e7e4      	b.n	8009760 <cos+0x28>
 8009796:	f000 f9cb 	bl	8009b30 <__kernel_cos>
 800979a:	e7f9      	b.n	8009790 <cos+0x58>
 800979c:	f3af 8000 	nop.w
	...
 80097a8:	3fe921fb 	.word	0x3fe921fb
 80097ac:	7fefffff 	.word	0x7fefffff

080097b0 <round>:
 80097b0:	ee10 3a90 	vmov	r3, s1
 80097b4:	b530      	push	{r4, r5, lr}
 80097b6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80097ba:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 80097be:	2913      	cmp	r1, #19
 80097c0:	ee10 5a90 	vmov	r5, s1
 80097c4:	ee10 2a10 	vmov	r2, s0
 80097c8:	dc17      	bgt.n	80097fa <round+0x4a>
 80097ca:	2900      	cmp	r1, #0
 80097cc:	da09      	bge.n	80097e2 <round+0x32>
 80097ce:	3101      	adds	r1, #1
 80097d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097d4:	d103      	bne.n	80097de <round+0x2e>
 80097d6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80097da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097de:	2200      	movs	r2, #0
 80097e0:	e024      	b.n	800982c <round+0x7c>
 80097e2:	4815      	ldr	r0, [pc, #84]	; (8009838 <round+0x88>)
 80097e4:	4108      	asrs	r0, r1
 80097e6:	4203      	tst	r3, r0
 80097e8:	d100      	bne.n	80097ec <round+0x3c>
 80097ea:	b16a      	cbz	r2, 8009808 <round+0x58>
 80097ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097f0:	410b      	asrs	r3, r1
 80097f2:	442b      	add	r3, r5
 80097f4:	ea23 0300 	bic.w	r3, r3, r0
 80097f8:	e7f1      	b.n	80097de <round+0x2e>
 80097fa:	2933      	cmp	r1, #51	; 0x33
 80097fc:	dd05      	ble.n	800980a <round+0x5a>
 80097fe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009802:	d101      	bne.n	8009808 <round+0x58>
 8009804:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009808:	bd30      	pop	{r4, r5, pc}
 800980a:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800980e:	f04f 34ff 	mov.w	r4, #4294967295
 8009812:	40c4      	lsrs	r4, r0
 8009814:	4222      	tst	r2, r4
 8009816:	d0f7      	beq.n	8009808 <round+0x58>
 8009818:	2001      	movs	r0, #1
 800981a:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800981e:	fa00 f101 	lsl.w	r1, r0, r1
 8009822:	1852      	adds	r2, r2, r1
 8009824:	bf28      	it	cs
 8009826:	181b      	addcs	r3, r3, r0
 8009828:	ea22 0204 	bic.w	r2, r2, r4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	ec41 0b10 	vmov	d0, r0, r1
 8009834:	e7e8      	b.n	8009808 <round+0x58>
 8009836:	bf00      	nop
 8009838:	000fffff 	.word	0x000fffff
 800983c:	00000000 	.word	0x00000000

08009840 <sin>:
 8009840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009842:	eeb0 7b40 	vmov.f64	d7, d0
 8009846:	ee17 3a90 	vmov	r3, s15
 800984a:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <sin+0x70>)
 800984c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009850:	4293      	cmp	r3, r2
 8009852:	dc05      	bgt.n	8009860 <sin+0x20>
 8009854:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80098a8 <sin+0x68>
 8009858:	2000      	movs	r0, #0
 800985a:	f000 fc71 	bl	800a140 <__kernel_sin>
 800985e:	e004      	b.n	800986a <sin+0x2a>
 8009860:	4a14      	ldr	r2, [pc, #80]	; (80098b4 <sin+0x74>)
 8009862:	4293      	cmp	r3, r2
 8009864:	dd04      	ble.n	8009870 <sin+0x30>
 8009866:	ee30 0b40 	vsub.f64	d0, d0, d0
 800986a:	b005      	add	sp, #20
 800986c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009870:	4668      	mov	r0, sp
 8009872:	f000 f821 	bl	80098b8 <__ieee754_rem_pio2>
 8009876:	f000 0003 	and.w	r0, r0, #3
 800987a:	2801      	cmp	r0, #1
 800987c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009880:	ed9d 0b00 	vldr	d0, [sp]
 8009884:	d004      	beq.n	8009890 <sin+0x50>
 8009886:	2802      	cmp	r0, #2
 8009888:	d005      	beq.n	8009896 <sin+0x56>
 800988a:	b950      	cbnz	r0, 80098a2 <sin+0x62>
 800988c:	2001      	movs	r0, #1
 800988e:	e7e4      	b.n	800985a <sin+0x1a>
 8009890:	f000 f94e 	bl	8009b30 <__kernel_cos>
 8009894:	e7e9      	b.n	800986a <sin+0x2a>
 8009896:	2001      	movs	r0, #1
 8009898:	f000 fc52 	bl	800a140 <__kernel_sin>
 800989c:	eeb1 0b40 	vneg.f64	d0, d0
 80098a0:	e7e3      	b.n	800986a <sin+0x2a>
 80098a2:	f000 f945 	bl	8009b30 <__kernel_cos>
 80098a6:	e7f9      	b.n	800989c <sin+0x5c>
	...
 80098b0:	3fe921fb 	.word	0x3fe921fb
 80098b4:	7fefffff 	.word	0x7fefffff

080098b8 <__ieee754_rem_pio2>:
 80098b8:	b570      	push	{r4, r5, r6, lr}
 80098ba:	eeb0 7b40 	vmov.f64	d7, d0
 80098be:	ee17 5a90 	vmov	r5, s15
 80098c2:	4b95      	ldr	r3, [pc, #596]	; (8009b18 <__ieee754_rem_pio2+0x260>)
 80098c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80098c8:	429e      	cmp	r6, r3
 80098ca:	b088      	sub	sp, #32
 80098cc:	4604      	mov	r4, r0
 80098ce:	dc07      	bgt.n	80098e0 <__ieee754_rem_pio2+0x28>
 80098d0:	2200      	movs	r2, #0
 80098d2:	2300      	movs	r3, #0
 80098d4:	ed84 0b00 	vstr	d0, [r4]
 80098d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80098dc:	2000      	movs	r0, #0
 80098de:	e01b      	b.n	8009918 <__ieee754_rem_pio2+0x60>
 80098e0:	4b8e      	ldr	r3, [pc, #568]	; (8009b1c <__ieee754_rem_pio2+0x264>)
 80098e2:	429e      	cmp	r6, r3
 80098e4:	dc3b      	bgt.n	800995e <__ieee754_rem_pio2+0xa6>
 80098e6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80098ea:	2d00      	cmp	r5, #0
 80098ec:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8009ad8 <__ieee754_rem_pio2+0x220>
 80098f0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80098f4:	dd19      	ble.n	800992a <__ieee754_rem_pio2+0x72>
 80098f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80098fa:	429e      	cmp	r6, r3
 80098fc:	d00e      	beq.n	800991c <__ieee754_rem_pio2+0x64>
 80098fe:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8009ae0 <__ieee754_rem_pio2+0x228>
 8009902:	ee37 5b46 	vsub.f64	d5, d7, d6
 8009906:	ee37 7b45 	vsub.f64	d7, d7, d5
 800990a:	ed84 5b00 	vstr	d5, [r4]
 800990e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009912:	ed84 7b02 	vstr	d7, [r4, #8]
 8009916:	2001      	movs	r0, #1
 8009918:	b008      	add	sp, #32
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8009ae8 <__ieee754_rem_pio2+0x230>
 8009920:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009924:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8009af0 <__ieee754_rem_pio2+0x238>
 8009928:	e7eb      	b.n	8009902 <__ieee754_rem_pio2+0x4a>
 800992a:	429e      	cmp	r6, r3
 800992c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009930:	d00e      	beq.n	8009950 <__ieee754_rem_pio2+0x98>
 8009932:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8009ae0 <__ieee754_rem_pio2+0x228>
 8009936:	ee37 5b06 	vadd.f64	d5, d7, d6
 800993a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800993e:	ed84 5b00 	vstr	d5, [r4]
 8009942:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	ed84 7b02 	vstr	d7, [r4, #8]
 800994e:	e7e3      	b.n	8009918 <__ieee754_rem_pio2+0x60>
 8009950:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8009ae8 <__ieee754_rem_pio2+0x230>
 8009954:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009958:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8009af0 <__ieee754_rem_pio2+0x238>
 800995c:	e7eb      	b.n	8009936 <__ieee754_rem_pio2+0x7e>
 800995e:	4b70      	ldr	r3, [pc, #448]	; (8009b20 <__ieee754_rem_pio2+0x268>)
 8009960:	429e      	cmp	r6, r3
 8009962:	dc6c      	bgt.n	8009a3e <__ieee754_rem_pio2+0x186>
 8009964:	f000 fc44 	bl	800a1f0 <fabs>
 8009968:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800996c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8009af8 <__ieee754_rem_pio2+0x240>
 8009970:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009974:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009978:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800997c:	ee17 0a90 	vmov	r0, s15
 8009980:	eeb1 5b44 	vneg.f64	d5, d4
 8009984:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8009ad8 <__ieee754_rem_pio2+0x220>
 8009988:	eea5 0b07 	vfma.f64	d0, d5, d7
 800998c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8009ae0 <__ieee754_rem_pio2+0x228>
 8009990:	281f      	cmp	r0, #31
 8009992:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009996:	ee30 6b47 	vsub.f64	d6, d0, d7
 800999a:	dc08      	bgt.n	80099ae <__ieee754_rem_pio2+0xf6>
 800999c:	1e42      	subs	r2, r0, #1
 800999e:	4b61      	ldr	r3, [pc, #388]	; (8009b24 <__ieee754_rem_pio2+0x26c>)
 80099a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a4:	42b3      	cmp	r3, r6
 80099a6:	d002      	beq.n	80099ae <__ieee754_rem_pio2+0xf6>
 80099a8:	ed84 6b00 	vstr	d6, [r4]
 80099ac:	e022      	b.n	80099f4 <__ieee754_rem_pio2+0x13c>
 80099ae:	ee16 3a90 	vmov	r3, s13
 80099b2:	1536      	asrs	r6, r6, #20
 80099b4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80099b8:	1af3      	subs	r3, r6, r3
 80099ba:	2b10      	cmp	r3, #16
 80099bc:	ddf4      	ble.n	80099a8 <__ieee754_rem_pio2+0xf0>
 80099be:	eeb0 6b40 	vmov.f64	d6, d0
 80099c2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8009ae8 <__ieee754_rem_pio2+0x230>
 80099c6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80099ca:	ee30 7b46 	vsub.f64	d7, d0, d6
 80099ce:	eea5 7b03 	vfma.f64	d7, d5, d3
 80099d2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8009af0 <__ieee754_rem_pio2+0x238>
 80099d6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80099da:	ee36 3b47 	vsub.f64	d3, d6, d7
 80099de:	ee13 3a90 	vmov	r3, s7
 80099e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80099e6:	1af6      	subs	r6, r6, r3
 80099e8:	2e31      	cmp	r6, #49	; 0x31
 80099ea:	dc17      	bgt.n	8009a1c <__ieee754_rem_pio2+0x164>
 80099ec:	eeb0 0b46 	vmov.f64	d0, d6
 80099f0:	ed84 3b00 	vstr	d3, [r4]
 80099f4:	ed94 6b00 	vldr	d6, [r4]
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80099fe:	ee30 7b47 	vsub.f64	d7, d0, d7
 8009a02:	ed84 7b02 	vstr	d7, [r4, #8]
 8009a06:	da87      	bge.n	8009918 <__ieee754_rem_pio2+0x60>
 8009a08:	eeb1 6b46 	vneg.f64	d6, d6
 8009a0c:	ed84 6b00 	vstr	d6, [r4]
 8009a10:	eeb1 7b47 	vneg.f64	d7, d7
 8009a14:	4240      	negs	r0, r0
 8009a16:	ed84 7b02 	vstr	d7, [r4, #8]
 8009a1a:	e77d      	b.n	8009918 <__ieee754_rem_pio2+0x60>
 8009a1c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8009b00 <__ieee754_rem_pio2+0x248>
 8009a20:	eeb0 0b46 	vmov.f64	d0, d6
 8009a24:	eea5 0b03 	vfma.f64	d0, d5, d3
 8009a28:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009a2c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8009b08 <__ieee754_rem_pio2+0x250>
 8009a30:	eea5 7b03 	vfma.f64	d7, d5, d3
 8009a34:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8009a38:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009a3c:	e7b4      	b.n	80099a8 <__ieee754_rem_pio2+0xf0>
 8009a3e:	4b3a      	ldr	r3, [pc, #232]	; (8009b28 <__ieee754_rem_pio2+0x270>)
 8009a40:	429e      	cmp	r6, r3
 8009a42:	dd06      	ble.n	8009a52 <__ieee754_rem_pio2+0x19a>
 8009a44:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009a48:	ed80 7b02 	vstr	d7, [r0, #8]
 8009a4c:	ed80 7b00 	vstr	d7, [r0]
 8009a50:	e744      	b.n	80098dc <__ieee754_rem_pio2+0x24>
 8009a52:	1532      	asrs	r2, r6, #20
 8009a54:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8009a58:	ee10 0a10 	vmov	r0, s0
 8009a5c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8009a60:	ec41 0b17 	vmov	d7, r0, r1
 8009a64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009a68:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8009b10 <__ieee754_rem_pio2+0x258>
 8009a6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009a70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009a80:	a908      	add	r1, sp, #32
 8009a82:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009a86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a8a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009a8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a96:	2303      	movs	r3, #3
 8009a98:	ed31 7b02 	vldmdb	r1!, {d7}
 8009a9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa4:	f103 30ff 	add.w	r0, r3, #4294967295
 8009aa8:	d013      	beq.n	8009ad2 <__ieee754_rem_pio2+0x21a>
 8009aaa:	4920      	ldr	r1, [pc, #128]	; (8009b2c <__ieee754_rem_pio2+0x274>)
 8009aac:	9101      	str	r1, [sp, #4]
 8009aae:	2102      	movs	r1, #2
 8009ab0:	9100      	str	r1, [sp, #0]
 8009ab2:	a802      	add	r0, sp, #8
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	f000 f8a7 	bl	8009c08 <__kernel_rem_pio2>
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	f6bf af2c 	bge.w	8009918 <__ieee754_rem_pio2+0x60>
 8009ac0:	ed94 7b00 	vldr	d7, [r4]
 8009ac4:	eeb1 7b47 	vneg.f64	d7, d7
 8009ac8:	ed84 7b00 	vstr	d7, [r4]
 8009acc:	ed94 7b02 	vldr	d7, [r4, #8]
 8009ad0:	e79e      	b.n	8009a10 <__ieee754_rem_pio2+0x158>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	e7e0      	b.n	8009a98 <__ieee754_rem_pio2+0x1e0>
 8009ad6:	bf00      	nop
 8009ad8:	54400000 	.word	0x54400000
 8009adc:	3ff921fb 	.word	0x3ff921fb
 8009ae0:	1a626331 	.word	0x1a626331
 8009ae4:	3dd0b461 	.word	0x3dd0b461
 8009ae8:	1a600000 	.word	0x1a600000
 8009aec:	3dd0b461 	.word	0x3dd0b461
 8009af0:	2e037073 	.word	0x2e037073
 8009af4:	3ba3198a 	.word	0x3ba3198a
 8009af8:	6dc9c883 	.word	0x6dc9c883
 8009afc:	3fe45f30 	.word	0x3fe45f30
 8009b00:	2e000000 	.word	0x2e000000
 8009b04:	3ba3198a 	.word	0x3ba3198a
 8009b08:	252049c1 	.word	0x252049c1
 8009b0c:	397b839a 	.word	0x397b839a
 8009b10:	00000000 	.word	0x00000000
 8009b14:	41700000 	.word	0x41700000
 8009b18:	3fe921fb 	.word	0x3fe921fb
 8009b1c:	4002d97b 	.word	0x4002d97b
 8009b20:	413921fb 	.word	0x413921fb
 8009b24:	0800a6a8 	.word	0x0800a6a8
 8009b28:	7fefffff 	.word	0x7fefffff
 8009b2c:	0800a728 	.word	0x0800a728

08009b30 <__kernel_cos>:
 8009b30:	ee10 1a90 	vmov	r1, s1
 8009b34:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009b3c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009b40:	da05      	bge.n	8009b4e <__kernel_cos+0x1e>
 8009b42:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8009b46:	ee16 3a90 	vmov	r3, s13
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d03d      	beq.n	8009bca <__kernel_cos+0x9a>
 8009b4e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8009b52:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009b56:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8009bd0 <__kernel_cos+0xa0>
 8009b5a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8009b5e:	ee24 6b06 	vmul.f64	d6, d4, d6
 8009b62:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8009bd8 <__kernel_cos+0xa8>
 8009b66:	eea4 5b03 	vfma.f64	d5, d4, d3
 8009b6a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8009be0 <__kernel_cos+0xb0>
 8009b6e:	eea5 3b04 	vfma.f64	d3, d5, d4
 8009b72:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8009be8 <__kernel_cos+0xb8>
 8009b76:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009b7a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8009bf0 <__kernel_cos+0xc0>
 8009b7e:	4b20      	ldr	r3, [pc, #128]	; (8009c00 <__kernel_cos+0xd0>)
 8009b80:	eea5 3b04 	vfma.f64	d3, d5, d4
 8009b84:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8009bf8 <__kernel_cos+0xc8>
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009b8e:	ee25 5b04 	vmul.f64	d5, d5, d4
 8009b92:	eea4 1b05 	vfma.f64	d1, d4, d5
 8009b96:	dc04      	bgt.n	8009ba2 <__kernel_cos+0x72>
 8009b98:	ee36 6b41 	vsub.f64	d6, d6, d1
 8009b9c:	ee37 0b46 	vsub.f64	d0, d7, d6
 8009ba0:	4770      	bx	lr
 8009ba2:	4b18      	ldr	r3, [pc, #96]	; (8009c04 <__kernel_cos+0xd4>)
 8009ba4:	4299      	cmp	r1, r3
 8009ba6:	dc0d      	bgt.n	8009bc4 <__kernel_cos+0x94>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8009bae:	ec43 2b15 	vmov	d5, r2, r3
 8009bb2:	ee37 0b45 	vsub.f64	d0, d7, d5
 8009bb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bba:	ee36 6b41 	vsub.f64	d6, d6, d1
 8009bbe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009bc2:	4770      	bx	lr
 8009bc4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8009bc8:	e7f3      	b.n	8009bb2 <__kernel_cos+0x82>
 8009bca:	eeb0 0b47 	vmov.f64	d0, d7
 8009bce:	4770      	bx	lr
 8009bd0:	be8838d4 	.word	0xbe8838d4
 8009bd4:	bda8fae9 	.word	0xbda8fae9
 8009bd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009bdc:	3e21ee9e 	.word	0x3e21ee9e
 8009be0:	809c52ad 	.word	0x809c52ad
 8009be4:	be927e4f 	.word	0xbe927e4f
 8009be8:	19cb1590 	.word	0x19cb1590
 8009bec:	3efa01a0 	.word	0x3efa01a0
 8009bf0:	16c15177 	.word	0x16c15177
 8009bf4:	bf56c16c 	.word	0xbf56c16c
 8009bf8:	5555554c 	.word	0x5555554c
 8009bfc:	3fa55555 	.word	0x3fa55555
 8009c00:	3fd33332 	.word	0x3fd33332
 8009c04:	3fe90000 	.word	0x3fe90000

08009c08 <__kernel_rem_pio2>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	ed2d 8b06 	vpush	{d8-d10}
 8009c10:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8009c14:	469b      	mov	fp, r3
 8009c16:	460e      	mov	r6, r1
 8009c18:	4bc7      	ldr	r3, [pc, #796]	; (8009f38 <__kernel_rem_pio2+0x330>)
 8009c1a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009c1c:	9002      	str	r0, [sp, #8]
 8009c1e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009c22:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8009c24:	1ed1      	subs	r1, r2, #3
 8009c26:	2318      	movs	r3, #24
 8009c28:	f06f 0417 	mvn.w	r4, #23
 8009c2c:	fb91 f1f3 	sdiv	r1, r1, r3
 8009c30:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8009c34:	f10b 3aff 	add.w	sl, fp, #4294967295
 8009c38:	fb01 4404 	mla	r4, r1, r4, r4
 8009c3c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8009f20 <__kernel_rem_pio2+0x318>
 8009c40:	4414      	add	r4, r2
 8009c42:	eba1 050a 	sub.w	r5, r1, sl
 8009c46:	aa1a      	add	r2, sp, #104	; 0x68
 8009c48:	eb09 070a 	add.w	r7, r9, sl
 8009c4c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8009c50:	4696      	mov	lr, r2
 8009c52:	2300      	movs	r3, #0
 8009c54:	42bb      	cmp	r3, r7
 8009c56:	dd0f      	ble.n	8009c78 <__kernel_rem_pio2+0x70>
 8009c58:	af6a      	add	r7, sp, #424	; 0x1a8
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	454a      	cmp	r2, r9
 8009c5e:	dc28      	bgt.n	8009cb2 <__kernel_rem_pio2+0xaa>
 8009c60:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009c64:	eb0b 0302 	add.w	r3, fp, r2
 8009c68:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8009c6c:	9d02      	ldr	r5, [sp, #8]
 8009c6e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8009f20 <__kernel_rem_pio2+0x318>
 8009c72:	f04f 0c00 	mov.w	ip, #0
 8009c76:	e016      	b.n	8009ca6 <__kernel_rem_pio2+0x9e>
 8009c78:	42dd      	cmn	r5, r3
 8009c7a:	d409      	bmi.n	8009c90 <__kernel_rem_pio2+0x88>
 8009c7c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8009c80:	ee07 2a90 	vmov	s15, r2
 8009c84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009c88:	ecae 7b02 	vstmia	lr!, {d7}
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	e7e1      	b.n	8009c54 <__kernel_rem_pio2+0x4c>
 8009c90:	eeb0 7b46 	vmov.f64	d7, d6
 8009c94:	e7f8      	b.n	8009c88 <__kernel_rem_pio2+0x80>
 8009c96:	ecb5 5b02 	vldmia	r5!, {d5}
 8009c9a:	ed33 6b02 	vldmdb	r3!, {d6}
 8009c9e:	f10c 0c01 	add.w	ip, ip, #1
 8009ca2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009ca6:	45d4      	cmp	ip, sl
 8009ca8:	ddf5      	ble.n	8009c96 <__kernel_rem_pio2+0x8e>
 8009caa:	eca7 7b02 	vstmia	r7!, {d7}
 8009cae:	3201      	adds	r2, #1
 8009cb0:	e7d4      	b.n	8009c5c <__kernel_rem_pio2+0x54>
 8009cb2:	ab06      	add	r3, sp, #24
 8009cb4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009cb8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8009f28 <__kernel_rem_pio2+0x320>
 8009cbc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8009f30 <__kernel_rem_pio2+0x328>
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009cc6:	9303      	str	r3, [sp, #12]
 8009cc8:	464d      	mov	r5, r9
 8009cca:	ab92      	add	r3, sp, #584	; 0x248
 8009ccc:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8009cd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009cd4:	3f01      	subs	r7, #1
 8009cd6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8009cda:	00ff      	lsls	r7, r7, #3
 8009cdc:	ab92      	add	r3, sp, #584	; 0x248
 8009cde:	19da      	adds	r2, r3, r7
 8009ce0:	3a98      	subs	r2, #152	; 0x98
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	1ae9      	subs	r1, r5, r3
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	dc4e      	bgt.n	8009d88 <__kernel_rem_pio2+0x180>
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fb04 	bl	800a2f8 <scalbn>
 8009cf0:	eeb0 8b40 	vmov.f64	d8, d0
 8009cf4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8009cf8:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009cfc:	f000 fa84 	bl	800a208 <floor>
 8009d00:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8009d04:	eea0 8b47 	vfms.f64	d8, d0, d7
 8009d08:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009d0c:	2c00      	cmp	r4, #0
 8009d0e:	edcd 7a01 	vstr	s15, [sp, #4]
 8009d12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d16:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009d1a:	dd4a      	ble.n	8009db2 <__kernel_rem_pio2+0x1aa>
 8009d1c:	1e69      	subs	r1, r5, #1
 8009d1e:	ab06      	add	r3, sp, #24
 8009d20:	f1c4 0018 	rsb	r0, r4, #24
 8009d24:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	fa4c f300 	asr.w	r3, ip, r0
 8009d2e:	441a      	add	r2, r3
 8009d30:	4083      	lsls	r3, r0
 8009d32:	9201      	str	r2, [sp, #4]
 8009d34:	ebac 0203 	sub.w	r2, ip, r3
 8009d38:	ab06      	add	r3, sp, #24
 8009d3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8009d3e:	f1c4 0317 	rsb	r3, r4, #23
 8009d42:	fa42 f803 	asr.w	r8, r2, r3
 8009d46:	f1b8 0f00 	cmp.w	r8, #0
 8009d4a:	dd43      	ble.n	8009dd4 <__kernel_rem_pio2+0x1cc>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	2000      	movs	r0, #0
 8009d50:	3301      	adds	r3, #1
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	4601      	mov	r1, r0
 8009d56:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8009d5a:	4285      	cmp	r5, r0
 8009d5c:	dc6e      	bgt.n	8009e3c <__kernel_rem_pio2+0x234>
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	dd04      	ble.n	8009d6c <__kernel_rem_pio2+0x164>
 8009d62:	2c01      	cmp	r4, #1
 8009d64:	d07f      	beq.n	8009e66 <__kernel_rem_pio2+0x25e>
 8009d66:	2c02      	cmp	r4, #2
 8009d68:	f000 8087 	beq.w	8009e7a <__kernel_rem_pio2+0x272>
 8009d6c:	f1b8 0f02 	cmp.w	r8, #2
 8009d70:	d130      	bne.n	8009dd4 <__kernel_rem_pio2+0x1cc>
 8009d72:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009d76:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009d7a:	b359      	cbz	r1, 8009dd4 <__kernel_rem_pio2+0x1cc>
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 fabb 	bl	800a2f8 <scalbn>
 8009d82:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009d86:	e025      	b.n	8009dd4 <__kernel_rem_pio2+0x1cc>
 8009d88:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009d8c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009d90:	a806      	add	r0, sp, #24
 8009d92:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009d96:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009d9a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009d9e:	ee10 1a10 	vmov	r1, s0
 8009da2:	ed32 0b02 	vldmdb	r2!, {d0}
 8009da6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8009daa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009dae:	3301      	adds	r3, #1
 8009db0:	e798      	b.n	8009ce4 <__kernel_rem_pio2+0xdc>
 8009db2:	d106      	bne.n	8009dc2 <__kernel_rem_pio2+0x1ba>
 8009db4:	1e6b      	subs	r3, r5, #1
 8009db6:	aa06      	add	r2, sp, #24
 8009db8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009dbc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8009dc0:	e7c1      	b.n	8009d46 <__kernel_rem_pio2+0x13e>
 8009dc2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009dc6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dce:	da32      	bge.n	8009e36 <__kernel_rem_pio2+0x22e>
 8009dd0:	f04f 0800 	mov.w	r8, #0
 8009dd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ddc:	f040 80b0 	bne.w	8009f40 <__kernel_rem_pio2+0x338>
 8009de0:	1e6b      	subs	r3, r5, #1
 8009de2:	4618      	mov	r0, r3
 8009de4:	2200      	movs	r2, #0
 8009de6:	4548      	cmp	r0, r9
 8009de8:	da4e      	bge.n	8009e88 <__kernel_rem_pio2+0x280>
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	f000 8088 	beq.w	8009f00 <__kernel_rem_pio2+0x2f8>
 8009df0:	aa06      	add	r2, sp, #24
 8009df2:	3c18      	subs	r4, #24
 8009df4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009df8:	2900      	cmp	r1, #0
 8009dfa:	f000 808e 	beq.w	8009f1a <__kernel_rem_pio2+0x312>
 8009dfe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009e02:	4620      	mov	r0, r4
 8009e04:	9302      	str	r3, [sp, #8]
 8009e06:	f000 fa77 	bl	800a2f8 <scalbn>
 8009e0a:	9b02      	ldr	r3, [sp, #8]
 8009e0c:	aa6a      	add	r2, sp, #424	; 0x1a8
 8009e0e:	00d9      	lsls	r1, r3, #3
 8009e10:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8009f28 <__kernel_rem_pio2+0x320>
 8009e14:	1850      	adds	r0, r2, r1
 8009e16:	f100 0508 	add.w	r5, r0, #8
 8009e1a:	461c      	mov	r4, r3
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	f280 80bd 	bge.w	8009f9c <__kernel_rem_pio2+0x394>
 8009e22:	2500      	movs	r5, #0
 8009e24:	1b5c      	subs	r4, r3, r5
 8009e26:	2c00      	cmp	r4, #0
 8009e28:	f2c0 80dd 	blt.w	8009fe6 <__kernel_rem_pio2+0x3de>
 8009e2c:	4f43      	ldr	r7, [pc, #268]	; (8009f3c <__kernel_rem_pio2+0x334>)
 8009e2e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8009f20 <__kernel_rem_pio2+0x318>
 8009e32:	2400      	movs	r4, #0
 8009e34:	e0cb      	b.n	8009fce <__kernel_rem_pio2+0x3c6>
 8009e36:	f04f 0802 	mov.w	r8, #2
 8009e3a:	e787      	b.n	8009d4c <__kernel_rem_pio2+0x144>
 8009e3c:	ab06      	add	r3, sp, #24
 8009e3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009e42:	b949      	cbnz	r1, 8009e58 <__kernel_rem_pio2+0x250>
 8009e44:	b12b      	cbz	r3, 8009e52 <__kernel_rem_pio2+0x24a>
 8009e46:	aa06      	add	r2, sp, #24
 8009e48:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009e4c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009e50:	2301      	movs	r3, #1
 8009e52:	3001      	adds	r0, #1
 8009e54:	4619      	mov	r1, r3
 8009e56:	e780      	b.n	8009d5a <__kernel_rem_pio2+0x152>
 8009e58:	aa06      	add	r2, sp, #24
 8009e5a:	ebac 0303 	sub.w	r3, ip, r3
 8009e5e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009e62:	460b      	mov	r3, r1
 8009e64:	e7f5      	b.n	8009e52 <__kernel_rem_pio2+0x24a>
 8009e66:	1e68      	subs	r0, r5, #1
 8009e68:	ab06      	add	r3, sp, #24
 8009e6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009e6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e72:	aa06      	add	r2, sp, #24
 8009e74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009e78:	e778      	b.n	8009d6c <__kernel_rem_pio2+0x164>
 8009e7a:	1e68      	subs	r0, r5, #1
 8009e7c:	ab06      	add	r3, sp, #24
 8009e7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009e82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e86:	e7f4      	b.n	8009e72 <__kernel_rem_pio2+0x26a>
 8009e88:	a906      	add	r1, sp, #24
 8009e8a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009e8e:	3801      	subs	r0, #1
 8009e90:	430a      	orrs	r2, r1
 8009e92:	e7a8      	b.n	8009de6 <__kernel_rem_pio2+0x1de>
 8009e94:	f10c 0c01 	add.w	ip, ip, #1
 8009e98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	d0f9      	beq.n	8009e94 <__kernel_rem_pio2+0x28c>
 8009ea0:	eb0b 0305 	add.w	r3, fp, r5
 8009ea4:	aa1a      	add	r2, sp, #104	; 0x68
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	1898      	adds	r0, r3, r2
 8009eaa:	3008      	adds	r0, #8
 8009eac:	1c69      	adds	r1, r5, #1
 8009eae:	3708      	adds	r7, #8
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4465      	add	r5, ip
 8009eb4:	9005      	str	r0, [sp, #20]
 8009eb6:	428d      	cmp	r5, r1
 8009eb8:	f6ff af07 	blt.w	8009cca <__kernel_rem_pio2+0xc2>
 8009ebc:	a81a      	add	r0, sp, #104	; 0x68
 8009ebe:	eb02 0c03 	add.w	ip, r2, r3
 8009ec2:	4484      	add	ip, r0
 8009ec4:	9803      	ldr	r0, [sp, #12]
 8009ec6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009eca:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8009ece:	9001      	str	r0, [sp, #4]
 8009ed0:	ee07 0a90 	vmov	s15, r0
 8009ed4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ed8:	9805      	ldr	r0, [sp, #20]
 8009eda:	ed8c 7b00 	vstr	d7, [ip]
 8009ede:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009f20 <__kernel_rem_pio2+0x318>
 8009ee2:	eb00 0802 	add.w	r8, r0, r2
 8009ee6:	f04f 0c00 	mov.w	ip, #0
 8009eea:	45d4      	cmp	ip, sl
 8009eec:	dd0c      	ble.n	8009f08 <__kernel_rem_pio2+0x300>
 8009eee:	eb02 0c07 	add.w	ip, r2, r7
 8009ef2:	a86a      	add	r0, sp, #424	; 0x1a8
 8009ef4:	4484      	add	ip, r0
 8009ef6:	ed8c 7b02 	vstr	d7, [ip, #8]
 8009efa:	3101      	adds	r1, #1
 8009efc:	3208      	adds	r2, #8
 8009efe:	e7da      	b.n	8009eb6 <__kernel_rem_pio2+0x2ae>
 8009f00:	9b04      	ldr	r3, [sp, #16]
 8009f02:	f04f 0c01 	mov.w	ip, #1
 8009f06:	e7c7      	b.n	8009e98 <__kernel_rem_pio2+0x290>
 8009f08:	ecbe 5b02 	vldmia	lr!, {d5}
 8009f0c:	ed38 6b02 	vldmdb	r8!, {d6}
 8009f10:	f10c 0c01 	add.w	ip, ip, #1
 8009f14:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009f18:	e7e7      	b.n	8009eea <__kernel_rem_pio2+0x2e2>
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	e768      	b.n	8009df0 <__kernel_rem_pio2+0x1e8>
 8009f1e:	bf00      	nop
	...
 8009f2c:	3e700000 	.word	0x3e700000
 8009f30:	00000000 	.word	0x00000000
 8009f34:	41700000 	.word	0x41700000
 8009f38:	0800a870 	.word	0x0800a870
 8009f3c:	0800a830 	.word	0x0800a830
 8009f40:	4260      	negs	r0, r4
 8009f42:	eeb0 0b48 	vmov.f64	d0, d8
 8009f46:	f000 f9d7 	bl	800a2f8 <scalbn>
 8009f4a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800a128 <__kernel_rem_pio2+0x520>
 8009f4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8009f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f56:	db18      	blt.n	8009f8a <__kernel_rem_pio2+0x382>
 8009f58:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800a130 <__kernel_rem_pio2+0x528>
 8009f5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009f60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009f64:	aa06      	add	r2, sp, #24
 8009f66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009f6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009f6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009f72:	a906      	add	r1, sp, #24
 8009f74:	ee10 3a10 	vmov	r3, s0
 8009f78:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009f7c:	1c6b      	adds	r3, r5, #1
 8009f7e:	ee17 2a10 	vmov	r2, s14
 8009f82:	3418      	adds	r4, #24
 8009f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009f88:	e739      	b.n	8009dfe <__kernel_rem_pio2+0x1f6>
 8009f8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009f8e:	aa06      	add	r2, sp, #24
 8009f90:	ee10 3a10 	vmov	r3, s0
 8009f94:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009f98:	462b      	mov	r3, r5
 8009f9a:	e730      	b.n	8009dfe <__kernel_rem_pio2+0x1f6>
 8009f9c:	aa06      	add	r2, sp, #24
 8009f9e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009fa2:	9202      	str	r2, [sp, #8]
 8009fa4:	ee07 2a90 	vmov	s15, r2
 8009fa8:	3c01      	subs	r4, #1
 8009faa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009fae:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009fb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009fb6:	ed25 7b02 	vstmdb	r5!, {d7}
 8009fba:	e72f      	b.n	8009e1c <__kernel_rem_pio2+0x214>
 8009fbc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8009fc0:	ecb7 5b02 	vldmia	r7!, {d5}
 8009fc4:	ed9c 6b00 	vldr	d6, [ip]
 8009fc8:	3401      	adds	r4, #1
 8009fca:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009fce:	454c      	cmp	r4, r9
 8009fd0:	dc01      	bgt.n	8009fd6 <__kernel_rem_pio2+0x3ce>
 8009fd2:	42a5      	cmp	r5, r4
 8009fd4:	daf2      	bge.n	8009fbc <__kernel_rem_pio2+0x3b4>
 8009fd6:	aa42      	add	r2, sp, #264	; 0x108
 8009fd8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8009fdc:	ed84 7b00 	vstr	d7, [r4]
 8009fe0:	3501      	adds	r5, #1
 8009fe2:	3808      	subs	r0, #8
 8009fe4:	e71e      	b.n	8009e24 <__kernel_rem_pio2+0x21c>
 8009fe6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8009fe8:	2a03      	cmp	r2, #3
 8009fea:	d84e      	bhi.n	800a08a <__kernel_rem_pio2+0x482>
 8009fec:	e8df f002 	tbb	[pc, r2]
 8009ff0:	021f1f3e 	.word	0x021f1f3e
 8009ff4:	3108      	adds	r1, #8
 8009ff6:	aa42      	add	r2, sp, #264	; 0x108
 8009ff8:	4411      	add	r1, r2
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	461c      	mov	r4, r3
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	dc61      	bgt.n	800a0c6 <__kernel_rem_pio2+0x4be>
 800a002:	4608      	mov	r0, r1
 800a004:	461c      	mov	r4, r3
 800a006:	2c01      	cmp	r4, #1
 800a008:	dc6d      	bgt.n	800a0e6 <__kernel_rem_pio2+0x4de>
 800a00a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a138 <__kernel_rem_pio2+0x530>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	dc79      	bgt.n	800a106 <__kernel_rem_pio2+0x4fe>
 800a012:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800a016:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800a01a:	f1b8 0f00 	cmp.w	r8, #0
 800a01e:	d178      	bne.n	800a112 <__kernel_rem_pio2+0x50a>
 800a020:	ed86 5b00 	vstr	d5, [r6]
 800a024:	ed86 6b02 	vstr	d6, [r6, #8]
 800a028:	ed86 7b04 	vstr	d7, [r6, #16]
 800a02c:	e02d      	b.n	800a08a <__kernel_rem_pio2+0x482>
 800a02e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800a138 <__kernel_rem_pio2+0x530>
 800a032:	3108      	adds	r1, #8
 800a034:	aa42      	add	r2, sp, #264	; 0x108
 800a036:	4411      	add	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	2800      	cmp	r0, #0
 800a03c:	da34      	bge.n	800a0a8 <__kernel_rem_pio2+0x4a0>
 800a03e:	f1b8 0f00 	cmp.w	r8, #0
 800a042:	d037      	beq.n	800a0b4 <__kernel_rem_pio2+0x4ac>
 800a044:	eeb1 7b46 	vneg.f64	d7, d6
 800a048:	ed86 7b00 	vstr	d7, [r6]
 800a04c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800a050:	a844      	add	r0, sp, #272	; 0x110
 800a052:	2101      	movs	r1, #1
 800a054:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a058:	428b      	cmp	r3, r1
 800a05a:	da2e      	bge.n	800a0ba <__kernel_rem_pio2+0x4b2>
 800a05c:	f1b8 0f00 	cmp.w	r8, #0
 800a060:	d001      	beq.n	800a066 <__kernel_rem_pio2+0x45e>
 800a062:	eeb1 7b47 	vneg.f64	d7, d7
 800a066:	ed86 7b02 	vstr	d7, [r6, #8]
 800a06a:	e00e      	b.n	800a08a <__kernel_rem_pio2+0x482>
 800a06c:	aa92      	add	r2, sp, #584	; 0x248
 800a06e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800a138 <__kernel_rem_pio2+0x530>
 800a072:	4411      	add	r1, r2
 800a074:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da0f      	bge.n	800a09c <__kernel_rem_pio2+0x494>
 800a07c:	f1b8 0f00 	cmp.w	r8, #0
 800a080:	d001      	beq.n	800a086 <__kernel_rem_pio2+0x47e>
 800a082:	eeb1 7b47 	vneg.f64	d7, d7
 800a086:	ed86 7b00 	vstr	d7, [r6]
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	f003 0007 	and.w	r0, r3, #7
 800a090:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800a094:	ecbd 8b06 	vpop	{d8-d10}
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	ed31 6b02 	vldmdb	r1!, {d6}
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a0a6:	e7e7      	b.n	800a078 <__kernel_rem_pio2+0x470>
 800a0a8:	ed31 7b02 	vldmdb	r1!, {d7}
 800a0ac:	3801      	subs	r0, #1
 800a0ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a0b2:	e7c2      	b.n	800a03a <__kernel_rem_pio2+0x432>
 800a0b4:	eeb0 7b46 	vmov.f64	d7, d6
 800a0b8:	e7c6      	b.n	800a048 <__kernel_rem_pio2+0x440>
 800a0ba:	ecb0 6b02 	vldmia	r0!, {d6}
 800a0be:	3101      	adds	r1, #1
 800a0c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a0c4:	e7c8      	b.n	800a058 <__kernel_rem_pio2+0x450>
 800a0c6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800a0ca:	ed30 5b02 	vldmdb	r0!, {d5}
 800a0ce:	3c01      	subs	r4, #1
 800a0d0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a0d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a0d8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800a0dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a0e0:	ed80 7b00 	vstr	d7, [r0]
 800a0e4:	e78b      	b.n	8009ffe <__kernel_rem_pio2+0x3f6>
 800a0e6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800a0ea:	ed30 5b02 	vldmdb	r0!, {d5}
 800a0ee:	3c01      	subs	r4, #1
 800a0f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a0f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a0f8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800a0fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a100:	ed80 7b00 	vstr	d7, [r0]
 800a104:	e77f      	b.n	800a006 <__kernel_rem_pio2+0x3fe>
 800a106:	ed31 6b02 	vldmdb	r1!, {d6}
 800a10a:	3b01      	subs	r3, #1
 800a10c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a110:	e77d      	b.n	800a00e <__kernel_rem_pio2+0x406>
 800a112:	eeb1 5b45 	vneg.f64	d5, d5
 800a116:	eeb1 6b46 	vneg.f64	d6, d6
 800a11a:	ed86 5b00 	vstr	d5, [r6]
 800a11e:	eeb1 7b47 	vneg.f64	d7, d7
 800a122:	ed86 6b02 	vstr	d6, [r6, #8]
 800a126:	e77f      	b.n	800a028 <__kernel_rem_pio2+0x420>
 800a128:	00000000 	.word	0x00000000
 800a12c:	41700000 	.word	0x41700000
 800a130:	00000000 	.word	0x00000000
 800a134:	3e700000 	.word	0x3e700000
	...

0800a140 <__kernel_sin>:
 800a140:	ee10 3a90 	vmov	r3, s1
 800a144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a148:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a14c:	da04      	bge.n	800a158 <__kernel_sin+0x18>
 800a14e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a152:	ee17 3a90 	vmov	r3, s15
 800a156:	b35b      	cbz	r3, 800a1b0 <__kernel_sin+0x70>
 800a158:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a15c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a160:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a1b8 <__kernel_sin+0x78>
 800a164:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a1c0 <__kernel_sin+0x80>
 800a168:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a16c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a1c8 <__kernel_sin+0x88>
 800a170:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a174:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a1d0 <__kernel_sin+0x90>
 800a178:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a17c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a1d8 <__kernel_sin+0x98>
 800a180:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a184:	b930      	cbnz	r0, 800a194 <__kernel_sin+0x54>
 800a186:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a1e0 <__kernel_sin+0xa0>
 800a18a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a18e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a192:	4770      	bx	lr
 800a194:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a198:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a19c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a1a0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a1a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a1e8 <__kernel_sin+0xa8>
 800a1a8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a1ac:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	f3af 8000 	nop.w
 800a1b8:	5acfd57c 	.word	0x5acfd57c
 800a1bc:	3de5d93a 	.word	0x3de5d93a
 800a1c0:	8a2b9ceb 	.word	0x8a2b9ceb
 800a1c4:	be5ae5e6 	.word	0xbe5ae5e6
 800a1c8:	57b1fe7d 	.word	0x57b1fe7d
 800a1cc:	3ec71de3 	.word	0x3ec71de3
 800a1d0:	19c161d5 	.word	0x19c161d5
 800a1d4:	bf2a01a0 	.word	0xbf2a01a0
 800a1d8:	1110f8a6 	.word	0x1110f8a6
 800a1dc:	3f811111 	.word	0x3f811111
 800a1e0:	55555549 	.word	0x55555549
 800a1e4:	bfc55555 	.word	0xbfc55555
 800a1e8:	55555549 	.word	0x55555549
 800a1ec:	3fc55555 	.word	0x3fc55555

0800a1f0 <fabs>:
 800a1f0:	ec51 0b10 	vmov	r0, r1, d0
 800a1f4:	ee10 2a10 	vmov	r2, s0
 800a1f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1fc:	ec43 2b10 	vmov	d0, r2, r3
 800a200:	4770      	bx	lr
 800a202:	0000      	movs	r0, r0
 800a204:	0000      	movs	r0, r0
	...

0800a208 <floor>:
 800a208:	ee10 1a90 	vmov	r1, s1
 800a20c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a210:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a214:	2b13      	cmp	r3, #19
 800a216:	b530      	push	{r4, r5, lr}
 800a218:	ee10 0a10 	vmov	r0, s0
 800a21c:	ee10 5a10 	vmov	r5, s0
 800a220:	dc33      	bgt.n	800a28a <floor+0x82>
 800a222:	2b00      	cmp	r3, #0
 800a224:	da17      	bge.n	800a256 <floor+0x4e>
 800a226:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800a2e8 <floor+0xe0>
 800a22a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a22e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a236:	dd09      	ble.n	800a24c <floor+0x44>
 800a238:	2900      	cmp	r1, #0
 800a23a:	da50      	bge.n	800a2de <floor+0xd6>
 800a23c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a240:	4a2b      	ldr	r2, [pc, #172]	; (800a2f0 <floor+0xe8>)
 800a242:	4303      	orrs	r3, r0
 800a244:	2000      	movs	r0, #0
 800a246:	4283      	cmp	r3, r0
 800a248:	bf18      	it	ne
 800a24a:	4611      	movne	r1, r2
 800a24c:	460b      	mov	r3, r1
 800a24e:	4602      	mov	r2, r0
 800a250:	ec43 2b10 	vmov	d0, r2, r3
 800a254:	e020      	b.n	800a298 <floor+0x90>
 800a256:	4a27      	ldr	r2, [pc, #156]	; (800a2f4 <floor+0xec>)
 800a258:	411a      	asrs	r2, r3
 800a25a:	ea01 0402 	and.w	r4, r1, r2
 800a25e:	4304      	orrs	r4, r0
 800a260:	d01a      	beq.n	800a298 <floor+0x90>
 800a262:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a2e8 <floor+0xe0>
 800a266:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a26a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a272:	ddeb      	ble.n	800a24c <floor+0x44>
 800a274:	2900      	cmp	r1, #0
 800a276:	bfbe      	ittt	lt
 800a278:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a27c:	fa40 f303 	asrlt.w	r3, r0, r3
 800a280:	18c9      	addlt	r1, r1, r3
 800a282:	ea21 0102 	bic.w	r1, r1, r2
 800a286:	2000      	movs	r0, #0
 800a288:	e7e0      	b.n	800a24c <floor+0x44>
 800a28a:	2b33      	cmp	r3, #51	; 0x33
 800a28c:	dd05      	ble.n	800a29a <floor+0x92>
 800a28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a292:	d101      	bne.n	800a298 <floor+0x90>
 800a294:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a298:	bd30      	pop	{r4, r5, pc}
 800a29a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a29e:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a2:	40e2      	lsrs	r2, r4
 800a2a4:	4202      	tst	r2, r0
 800a2a6:	d0f7      	beq.n	800a298 <floor+0x90>
 800a2a8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800a2e8 <floor+0xe0>
 800a2ac:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a2b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b8:	ddc8      	ble.n	800a24c <floor+0x44>
 800a2ba:	2900      	cmp	r1, #0
 800a2bc:	da02      	bge.n	800a2c4 <floor+0xbc>
 800a2be:	2b14      	cmp	r3, #20
 800a2c0:	d103      	bne.n	800a2ca <floor+0xc2>
 800a2c2:	3101      	adds	r1, #1
 800a2c4:	ea20 0002 	bic.w	r0, r0, r2
 800a2c8:	e7c0      	b.n	800a24c <floor+0x44>
 800a2ca:	2401      	movs	r4, #1
 800a2cc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a2d0:	fa04 f303 	lsl.w	r3, r4, r3
 800a2d4:	4418      	add	r0, r3
 800a2d6:	42a8      	cmp	r0, r5
 800a2d8:	bf38      	it	cc
 800a2da:	1909      	addcc	r1, r1, r4
 800a2dc:	e7f2      	b.n	800a2c4 <floor+0xbc>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	4601      	mov	r1, r0
 800a2e2:	e7b3      	b.n	800a24c <floor+0x44>
 800a2e4:	f3af 8000 	nop.w
 800a2e8:	8800759c 	.word	0x8800759c
 800a2ec:	7e37e43c 	.word	0x7e37e43c
 800a2f0:	bff00000 	.word	0xbff00000
 800a2f4:	000fffff 	.word	0x000fffff

0800a2f8 <scalbn>:
 800a2f8:	b500      	push	{lr}
 800a2fa:	ed2d 8b02 	vpush	{d8}
 800a2fe:	b083      	sub	sp, #12
 800a300:	ed8d 0b00 	vstr	d0, [sp]
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a30a:	b9a2      	cbnz	r2, 800a336 <scalbn+0x3e>
 800a30c:	9a00      	ldr	r2, [sp, #0]
 800a30e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a312:	4313      	orrs	r3, r2
 800a314:	d03a      	beq.n	800a38c <scalbn+0x94>
 800a316:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a3d0 <scalbn+0xd8>
 800a31a:	4b35      	ldr	r3, [pc, #212]	; (800a3f0 <scalbn+0xf8>)
 800a31c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a320:	4298      	cmp	r0, r3
 800a322:	ed8d 7b00 	vstr	d7, [sp]
 800a326:	da11      	bge.n	800a34c <scalbn+0x54>
 800a328:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a3d8 <scalbn+0xe0>
 800a32c:	ed9d 6b00 	vldr	d6, [sp]
 800a330:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a334:	e007      	b.n	800a346 <scalbn+0x4e>
 800a336:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a33a:	428a      	cmp	r2, r1
 800a33c:	d10a      	bne.n	800a354 <scalbn+0x5c>
 800a33e:	ed9d 7b00 	vldr	d7, [sp]
 800a342:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a346:	ed8d 7b00 	vstr	d7, [sp]
 800a34a:	e01f      	b.n	800a38c <scalbn+0x94>
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a352:	3a36      	subs	r2, #54	; 0x36
 800a354:	4402      	add	r2, r0
 800a356:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a35a:	428a      	cmp	r2, r1
 800a35c:	dd0a      	ble.n	800a374 <scalbn+0x7c>
 800a35e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800a3e0 <scalbn+0xe8>
 800a362:	eeb0 0b48 	vmov.f64	d0, d8
 800a366:	ed9d 1b00 	vldr	d1, [sp]
 800a36a:	f000 f843 	bl	800a3f4 <copysign>
 800a36e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800a372:	e7e8      	b.n	800a346 <scalbn+0x4e>
 800a374:	2a00      	cmp	r2, #0
 800a376:	dd10      	ble.n	800a39a <scalbn+0xa2>
 800a378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a37c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a380:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a384:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a388:	e9cd 0100 	strd	r0, r1, [sp]
 800a38c:	ed9d 0b00 	vldr	d0, [sp]
 800a390:	b003      	add	sp, #12
 800a392:	ecbd 8b02 	vpop	{d8}
 800a396:	f85d fb04 	ldr.w	pc, [sp], #4
 800a39a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a39e:	da06      	bge.n	800a3ae <scalbn+0xb6>
 800a3a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	dcda      	bgt.n	800a35e <scalbn+0x66>
 800a3a8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800a3d8 <scalbn+0xe0>
 800a3ac:	e7d9      	b.n	800a362 <scalbn+0x6a>
 800a3ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3b6:	3236      	adds	r2, #54	; 0x36
 800a3b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3bc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3c0:	ec41 0b17 	vmov	d7, r0, r1
 800a3c4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800a3e8 <scalbn+0xf0>
 800a3c8:	e7b2      	b.n	800a330 <scalbn+0x38>
 800a3ca:	bf00      	nop
 800a3cc:	f3af 8000 	nop.w
 800a3d0:	00000000 	.word	0x00000000
 800a3d4:	43500000 	.word	0x43500000
 800a3d8:	c2f8f359 	.word	0xc2f8f359
 800a3dc:	01a56e1f 	.word	0x01a56e1f
 800a3e0:	8800759c 	.word	0x8800759c
 800a3e4:	7e37e43c 	.word	0x7e37e43c
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	3c900000 	.word	0x3c900000
 800a3f0:	ffff3cb0 	.word	0xffff3cb0

0800a3f4 <copysign>:
 800a3f4:	ec51 0b10 	vmov	r0, r1, d0
 800a3f8:	ee11 0a90 	vmov	r0, s3
 800a3fc:	ee10 2a10 	vmov	r2, s0
 800a400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a408:	ea41 0300 	orr.w	r3, r1, r0
 800a40c:	ec43 2b10 	vmov	d0, r2, r3
 800a410:	4770      	bx	lr
	...

0800a414 <__errno>:
 800a414:	4b01      	ldr	r3, [pc, #4]	; (800a41c <__errno+0x8>)
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	24000190 	.word	0x24000190

0800a420 <__libc_init_array>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4e0d      	ldr	r6, [pc, #52]	; (800a458 <__libc_init_array+0x38>)
 800a424:	4c0d      	ldr	r4, [pc, #52]	; (800a45c <__libc_init_array+0x3c>)
 800a426:	1ba4      	subs	r4, r4, r6
 800a428:	10a4      	asrs	r4, r4, #2
 800a42a:	2500      	movs	r5, #0
 800a42c:	42a5      	cmp	r5, r4
 800a42e:	d109      	bne.n	800a444 <__libc_init_array+0x24>
 800a430:	4e0b      	ldr	r6, [pc, #44]	; (800a460 <__libc_init_array+0x40>)
 800a432:	4c0c      	ldr	r4, [pc, #48]	; (800a464 <__libc_init_array+0x44>)
 800a434:	f000 f8ea 	bl	800a60c <_init>
 800a438:	1ba4      	subs	r4, r4, r6
 800a43a:	10a4      	asrs	r4, r4, #2
 800a43c:	2500      	movs	r5, #0
 800a43e:	42a5      	cmp	r5, r4
 800a440:	d105      	bne.n	800a44e <__libc_init_array+0x2e>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a448:	4798      	blx	r3
 800a44a:	3501      	adds	r5, #1
 800a44c:	e7ee      	b.n	800a42c <__libc_init_array+0xc>
 800a44e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a452:	4798      	blx	r3
 800a454:	3501      	adds	r5, #1
 800a456:	e7f2      	b.n	800a43e <__libc_init_array+0x1e>
 800a458:	0800a888 	.word	0x0800a888
 800a45c:	0800a888 	.word	0x0800a888
 800a460:	0800a888 	.word	0x0800a888
 800a464:	0800a88c 	.word	0x0800a88c

0800a468 <malloc>:
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <malloc+0xc>)
 800a46a:	4601      	mov	r1, r0
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f000 b861 	b.w	800a534 <_malloc_r>
 800a472:	bf00      	nop
 800a474:	24000190 	.word	0x24000190

0800a478 <free>:
 800a478:	4b02      	ldr	r3, [pc, #8]	; (800a484 <free+0xc>)
 800a47a:	4601      	mov	r1, r0
 800a47c:	6818      	ldr	r0, [r3, #0]
 800a47e:	f000 b80b 	b.w	800a498 <_free_r>
 800a482:	bf00      	nop
 800a484:	24000190 	.word	0x24000190

0800a488 <memset>:
 800a488:	4402      	add	r2, r0
 800a48a:	4603      	mov	r3, r0
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d100      	bne.n	800a492 <memset+0xa>
 800a490:	4770      	bx	lr
 800a492:	f803 1b01 	strb.w	r1, [r3], #1
 800a496:	e7f9      	b.n	800a48c <memset+0x4>

0800a498 <_free_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4605      	mov	r5, r0
 800a49c:	2900      	cmp	r1, #0
 800a49e:	d045      	beq.n	800a52c <_free_r+0x94>
 800a4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a4:	1f0c      	subs	r4, r1, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bfb8      	it	lt
 800a4aa:	18e4      	addlt	r4, r4, r3
 800a4ac:	f000 f8ac 	bl	800a608 <__malloc_lock>
 800a4b0:	4a1f      	ldr	r2, [pc, #124]	; (800a530 <_free_r+0x98>)
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	b933      	cbnz	r3, 800a4c6 <_free_r+0x2e>
 800a4b8:	6063      	str	r3, [r4, #4]
 800a4ba:	6014      	str	r4, [r2, #0]
 800a4bc:	4628      	mov	r0, r5
 800a4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c2:	f000 b8a2 	b.w	800a60a <__malloc_unlock>
 800a4c6:	42a3      	cmp	r3, r4
 800a4c8:	d90c      	bls.n	800a4e4 <_free_r+0x4c>
 800a4ca:	6821      	ldr	r1, [r4, #0]
 800a4cc:	1862      	adds	r2, r4, r1
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	bf04      	itt	eq
 800a4d2:	681a      	ldreq	r2, [r3, #0]
 800a4d4:	685b      	ldreq	r3, [r3, #4]
 800a4d6:	6063      	str	r3, [r4, #4]
 800a4d8:	bf04      	itt	eq
 800a4da:	1852      	addeq	r2, r2, r1
 800a4dc:	6022      	streq	r2, [r4, #0]
 800a4de:	6004      	str	r4, [r0, #0]
 800a4e0:	e7ec      	b.n	800a4bc <_free_r+0x24>
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	b10a      	cbz	r2, 800a4ec <_free_r+0x54>
 800a4e8:	42a2      	cmp	r2, r4
 800a4ea:	d9fa      	bls.n	800a4e2 <_free_r+0x4a>
 800a4ec:	6819      	ldr	r1, [r3, #0]
 800a4ee:	1858      	adds	r0, r3, r1
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d10b      	bne.n	800a50c <_free_r+0x74>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	4401      	add	r1, r0
 800a4f8:	1858      	adds	r0, r3, r1
 800a4fa:	4282      	cmp	r2, r0
 800a4fc:	6019      	str	r1, [r3, #0]
 800a4fe:	d1dd      	bne.n	800a4bc <_free_r+0x24>
 800a500:	6810      	ldr	r0, [r2, #0]
 800a502:	6852      	ldr	r2, [r2, #4]
 800a504:	605a      	str	r2, [r3, #4]
 800a506:	4401      	add	r1, r0
 800a508:	6019      	str	r1, [r3, #0]
 800a50a:	e7d7      	b.n	800a4bc <_free_r+0x24>
 800a50c:	d902      	bls.n	800a514 <_free_r+0x7c>
 800a50e:	230c      	movs	r3, #12
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	e7d3      	b.n	800a4bc <_free_r+0x24>
 800a514:	6820      	ldr	r0, [r4, #0]
 800a516:	1821      	adds	r1, r4, r0
 800a518:	428a      	cmp	r2, r1
 800a51a:	bf04      	itt	eq
 800a51c:	6811      	ldreq	r1, [r2, #0]
 800a51e:	6852      	ldreq	r2, [r2, #4]
 800a520:	6062      	str	r2, [r4, #4]
 800a522:	bf04      	itt	eq
 800a524:	1809      	addeq	r1, r1, r0
 800a526:	6021      	streq	r1, [r4, #0]
 800a528:	605c      	str	r4, [r3, #4]
 800a52a:	e7c7      	b.n	800a4bc <_free_r+0x24>
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	bf00      	nop
 800a530:	24000218 	.word	0x24000218

0800a534 <_malloc_r>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	1ccd      	adds	r5, r1, #3
 800a538:	f025 0503 	bic.w	r5, r5, #3
 800a53c:	3508      	adds	r5, #8
 800a53e:	2d0c      	cmp	r5, #12
 800a540:	bf38      	it	cc
 800a542:	250c      	movcc	r5, #12
 800a544:	2d00      	cmp	r5, #0
 800a546:	4606      	mov	r6, r0
 800a548:	db01      	blt.n	800a54e <_malloc_r+0x1a>
 800a54a:	42a9      	cmp	r1, r5
 800a54c:	d903      	bls.n	800a556 <_malloc_r+0x22>
 800a54e:	230c      	movs	r3, #12
 800a550:	6033      	str	r3, [r6, #0]
 800a552:	2000      	movs	r0, #0
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	f000 f857 	bl	800a608 <__malloc_lock>
 800a55a:	4a21      	ldr	r2, [pc, #132]	; (800a5e0 <_malloc_r+0xac>)
 800a55c:	6814      	ldr	r4, [r2, #0]
 800a55e:	4621      	mov	r1, r4
 800a560:	b991      	cbnz	r1, 800a588 <_malloc_r+0x54>
 800a562:	4c20      	ldr	r4, [pc, #128]	; (800a5e4 <_malloc_r+0xb0>)
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	b91b      	cbnz	r3, 800a570 <_malloc_r+0x3c>
 800a568:	4630      	mov	r0, r6
 800a56a:	f000 f83d 	bl	800a5e8 <_sbrk_r>
 800a56e:	6020      	str	r0, [r4, #0]
 800a570:	4629      	mov	r1, r5
 800a572:	4630      	mov	r0, r6
 800a574:	f000 f838 	bl	800a5e8 <_sbrk_r>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d124      	bne.n	800a5c6 <_malloc_r+0x92>
 800a57c:	230c      	movs	r3, #12
 800a57e:	6033      	str	r3, [r6, #0]
 800a580:	4630      	mov	r0, r6
 800a582:	f000 f842 	bl	800a60a <__malloc_unlock>
 800a586:	e7e4      	b.n	800a552 <_malloc_r+0x1e>
 800a588:	680b      	ldr	r3, [r1, #0]
 800a58a:	1b5b      	subs	r3, r3, r5
 800a58c:	d418      	bmi.n	800a5c0 <_malloc_r+0x8c>
 800a58e:	2b0b      	cmp	r3, #11
 800a590:	d90f      	bls.n	800a5b2 <_malloc_r+0x7e>
 800a592:	600b      	str	r3, [r1, #0]
 800a594:	50cd      	str	r5, [r1, r3]
 800a596:	18cc      	adds	r4, r1, r3
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f836 	bl	800a60a <__malloc_unlock>
 800a59e:	f104 000b 	add.w	r0, r4, #11
 800a5a2:	1d23      	adds	r3, r4, #4
 800a5a4:	f020 0007 	bic.w	r0, r0, #7
 800a5a8:	1ac3      	subs	r3, r0, r3
 800a5aa:	d0d3      	beq.n	800a554 <_malloc_r+0x20>
 800a5ac:	425a      	negs	r2, r3
 800a5ae:	50e2      	str	r2, [r4, r3]
 800a5b0:	e7d0      	b.n	800a554 <_malloc_r+0x20>
 800a5b2:	428c      	cmp	r4, r1
 800a5b4:	684b      	ldr	r3, [r1, #4]
 800a5b6:	bf16      	itet	ne
 800a5b8:	6063      	strne	r3, [r4, #4]
 800a5ba:	6013      	streq	r3, [r2, #0]
 800a5bc:	460c      	movne	r4, r1
 800a5be:	e7eb      	b.n	800a598 <_malloc_r+0x64>
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	6849      	ldr	r1, [r1, #4]
 800a5c4:	e7cc      	b.n	800a560 <_malloc_r+0x2c>
 800a5c6:	1cc4      	adds	r4, r0, #3
 800a5c8:	f024 0403 	bic.w	r4, r4, #3
 800a5cc:	42a0      	cmp	r0, r4
 800a5ce:	d005      	beq.n	800a5dc <_malloc_r+0xa8>
 800a5d0:	1a21      	subs	r1, r4, r0
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 f808 	bl	800a5e8 <_sbrk_r>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d0cf      	beq.n	800a57c <_malloc_r+0x48>
 800a5dc:	6025      	str	r5, [r4, #0]
 800a5de:	e7db      	b.n	800a598 <_malloc_r+0x64>
 800a5e0:	24000218 	.word	0x24000218
 800a5e4:	2400021c 	.word	0x2400021c

0800a5e8 <_sbrk_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4c06      	ldr	r4, [pc, #24]	; (800a604 <_sbrk_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	f7f6 fcba 	bl	8000f6c <_sbrk>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_sbrk_r+0x1a>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_sbrk_r+0x1a>
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	24000b8c 	.word	0x24000b8c

0800a608 <__malloc_lock>:
 800a608:	4770      	bx	lr

0800a60a <__malloc_unlock>:
 800a60a:	4770      	bx	lr

0800a60c <_init>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	bf00      	nop
 800a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a612:	bc08      	pop	{r3}
 800a614:	469e      	mov	lr, r3
 800a616:	4770      	bx	lr

0800a618 <_fini>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	bf00      	nop
 800a61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61e:	bc08      	pop	{r3}
 800a620:	469e      	mov	lr, r3
 800a622:	4770      	bx	lr
