
CV09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800a498  0800a498  0001a498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f0  0800a6f0  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f0  0800a6f0  0001a6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6f8  0800a6f8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  0800a700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  240001cc  0800a8cc  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000b68  0800a8cc  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c9e  00000000  00000000  000201fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c33  00000000  00000000  00041e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d0  00000000  00000000  00045ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  00046ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038634  00000000  00000000  00047af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010cce  00000000  00000000  0008012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00157fd9  00000000  00000000  00090dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e8dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004830  00000000  00000000  001e8e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001cc 	.word	0x240001cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a47c 	.word	0x0800a47c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d0 	.word	0x240001d0
 80002d4:	0800a47c 	.word	0x0800a47c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <circle>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void circle (float start_angle, float angle,  float r, uint8_t btn, uint32_t step_delay)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	ed2d 8b02 	vpush	{d8}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80005e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80005ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80005ee:	4603      	mov	r3, r0
 80005f0:	6079      	str	r1, [r7, #4]
 80005f2:	72fb      	strb	r3, [r7, #11]
		uint8_t buff[4];
	float x = 0, y = 0;
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
	float x_old = r*cos(start_angle);
 8000600:	edd7 7a03 	vldr	s15, [r7, #12]
 8000604:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000608:	edd7 7a05 	vldr	s15, [r7, #20]
 800060c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000610:	eeb0 0b47 	vmov.f64	d0, d7
 8000614:	f008 ffc8 	bl	80095a8 <cos>
 8000618:	eeb0 7b40 	vmov.f64	d7, d0
 800061c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000620:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000624:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float y_old = r*sin(start_angle);
 8000628:	edd7 7a03 	vldr	s15, [r7, #12]
 800062c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000630:	edd7 7a05 	vldr	s15, [r7, #20]
 8000634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000638:	eeb0 0b47 	vmov.f64	d0, d7
 800063c:	f009 f838 	bl	80096b0 <sin>
 8000640:	eeb0 7b40 	vmov.f64	d7, d0
 8000644:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000648:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800064c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	buff[0] = btn; // stiskni leve tlacitko
 8000650:	7afb      	ldrb	r3, [r7, #11]
 8000652:	763b      	strb	r3, [r7, #24]
	for(float phi = start_angle; phi<=angle+start_angle; phi+=2.0*PI/100)
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
 8000658:	e07b      	b.n	8000752 <circle+0x17a>
	  {
		  x = r*cos(phi);
 800065a:	edd7 7a03 	vldr	s15, [r7, #12]
 800065e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000662:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000666:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800066a:	eeb0 0b47 	vmov.f64	d0, d7
 800066e:	f008 ff9b 	bl	80095a8 <cos>
 8000672:	eeb0 7b40 	vmov.f64	d7, d0
 8000676:	ee28 7b07 	vmul.f64	d7, d8, d7
 800067a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800067e:	edc7 7a08 	vstr	s15, [r7, #32]
		  y = r*sin(phi);
 8000682:	edd7 7a03 	vldr	s15, [r7, #12]
 8000686:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800068a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800068e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000692:	eeb0 0b47 	vmov.f64	d0, d7
 8000696:	f009 f80b 	bl	80096b0 <sin>
 800069a:	eeb0 7b40 	vmov.f64	d7, d0
 800069e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80006a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006a6:	edc7 7a07 	vstr	s15, [r7, #28]



		  buff[1] = (int8_t)(round( x_old - x)); // posun X +10
 80006aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80006ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80006b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ba:	eeb0 0b47 	vmov.f64	d0, d7
 80006be:	f008 ffaf 	bl	8009620 <round>
 80006c2:	eeb0 7b40 	vmov.f64	d7, d0
 80006c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006ca:	edc7 7a00 	vstr	s15, [r7]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	767b      	strb	r3, [r7, #25]
		  buff[2] = (int8_t)(round(y_old - y)); // posun Y -3
 80006d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80006da:	edd7 7a07 	vldr	s15, [r7, #28]
 80006de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e6:	eeb0 0b47 	vmov.f64	d0, d7
 80006ea:	f008 ff99 	bl	8009620 <round>
 80006ee:	eeb0 7b40 	vmov.f64	d7, d0
 80006f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006f6:	edc7 7a00 	vstr	s15, [r7]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	76bb      	strb	r3, [r7, #26]
		  buff[3] = 0; // bez scrollu
 8000702:	2300      	movs	r3, #0
 8000704:	76fb      	strb	r3, [r7, #27]
		  if(buff[1]) x_old = x;
 8000706:	7e7b      	ldrb	r3, [r7, #25]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <circle+0x138>
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
		   if(buff[2]) y_old = y;
 8000710:	7ebb      	ldrb	r3, [r7, #26]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <circle+0x142>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
		  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	2204      	movs	r2, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4821      	ldr	r0, [pc, #132]	; (80007a8 <circle+0x1d0>)
 8000724:	f007 f990 	bl	8007a48 <USBD_HID_SendReport>
		  HAL_Delay(step_delay+USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000728:	481f      	ldr	r0, [pc, #124]	; (80007a8 <circle+0x1d0>)
 800072a:	f007 f9af 	bl	8007a8c <USBD_HID_GetPollingInterval>
 800072e:	4602      	mov	r2, r0
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fcd1 	bl	80010dc <HAL_Delay>
	for(float phi = start_angle; phi<=angle+start_angle; phi+=2.0*PI/100)
 800073a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800073e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000742:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80007a0 <circle+0x1c8>
 8000746:	ee37 7b06 	vadd.f64	d7, d7, d6
 800074a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800074e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8000752:	ed97 7a04 	vldr	s14, [r7, #16]
 8000756:	edd7 7a05 	vldr	s15, [r7, #20]
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	f67f af76 	bls.w	800065a <circle+0x82>


	  }
	buff[0] = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	763b      	strb	r3, [r7, #24]
		USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	2204      	movs	r2, #4
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <circle+0x1d0>)
 800077c:	f007 f964 	bl	8007a48 <USBD_HID_SendReport>
	  HAL_Delay(step_delay+USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <circle+0x1d0>)
 8000782:	f007 f983 	bl	8007a8c <USBD_HID_GetPollingInterval>
 8000786:	4602      	mov	r2, r0
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fca5 	bl	80010dc <HAL_Delay>
}
 8000792:	bf00      	nop
 8000794:	3730      	adds	r7, #48	; 0x30
 8000796:	46bd      	mov	sp, r7
 8000798:	ecbd 8b02 	vpop	{d8}
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	9999999a 	.word	0x9999999a
 80007a4:	3fb015bf 	.word	0x3fb015bf
 80007a8:	2400028c 	.word	0x2400028c

080007ac <line>:

void line (int16_t x, int16_t y, uint8_t btn)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	460b      	mov	r3, r1
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	70fb      	strb	r3, [r7, #3]
		uint8_t buff[4];
		for(uint8_t i = 0; i<20; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e02a      	b.n	800081a <line+0x6e>
				  {
		buff[0] = btn;
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	723b      	strb	r3, [r7, #8]
		  buff[1] = (int8_t)(x/20);
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <line+0x7c>)
 80007ce:	fb82 1203 	smull	r1, r2, r2, r3
 80007d2:	10d2      	asrs	r2, r2, #3
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b21b      	sxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	727b      	strb	r3, [r7, #9]
		  buff[2] = (int8_t)(-y/20);
 80007de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007e2:	425b      	negs	r3, r3
 80007e4:	4a10      	ldr	r2, [pc, #64]	; (8000828 <line+0x7c>)
 80007e6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ea:	10d2      	asrs	r2, r2, #3
 80007ec:	17db      	asrs	r3, r3, #31
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	72bb      	strb	r3, [r7, #10]
		  buff[3] = 0; // bez scrollu
 80007f4:	2300      	movs	r3, #0
 80007f6:	72fb      	strb	r3, [r7, #11]

		  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2204      	movs	r2, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <line+0x80>)
 8000802:	f007 f921 	bl	8007a48 <USBD_HID_SendReport>
		  HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <line+0x80>)
 8000808:	f007 f940 	bl	8007a8c <USBD_HID_GetPollingInterval>
 800080c:	4603      	mov	r3, r0
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fc64 	bl	80010dc <HAL_Delay>
		for(uint8_t i = 0; i<20; i++)
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	3301      	adds	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	2b13      	cmp	r3, #19
 800081e:	d9d1      	bls.n	80007c4 <line+0x18>
		  }

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	66666667 	.word	0x66666667
 800082c:	2400028c 	.word	0x2400028c

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 fbc0 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f868 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 f970 	bl	8000b20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000840:	f000 f922 	bl	8000a88 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000844:	f008 fa70 	bl	8008d28 <MX_USB_DEVICE_Init>





	  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) HAL_Delay(10);
 8000848:	e002      	b.n	8000850 <main+0x20>
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fc46 	bl	80010dc <HAL_Delay>
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <main+0xbc>)
 8000856:	f000 ff2f 	bl	80016b8 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0f4      	beq.n	800084a <main+0x1a>
	  //line(350,350,0);
	 // HAL_Delay(5000);
	   circle (0,2*PI,200,1, 1);
 8000860:	2101      	movs	r1, #1
 8000862:	2001      	movs	r0, #1
 8000864:	ed9f 1a22 	vldr	s2, [pc, #136]	; 80008f0 <main+0xc0>
 8000868:	eddf 0a22 	vldr	s1, [pc, #136]	; 80008f4 <main+0xc4>
 800086c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80008f8 <main+0xc8>
 8000870:	f7ff feb2 	bl	80005d8 <circle>
	   line(100,75,0);
 8000874:	2200      	movs	r2, #0
 8000876:	214b      	movs	r1, #75	; 0x4b
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f7ff ff97 	bl	80007ac <line>
	   circle (0,2*PI,50,1, 1);
 800087e:	2101      	movs	r1, #1
 8000880:	2001      	movs	r0, #1
 8000882:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80008fc <main+0xcc>
 8000886:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80008f4 <main+0xc4>
 800088a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80008f8 <main+0xc8>
 800088e:	f7ff fea3 	bl	80005d8 <circle>
	   line(200,0,0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	20c8      	movs	r0, #200	; 0xc8
 8000898:	f7ff ff88 	bl	80007ac <line>
	   circle (0,2*PI,50,1, 1);
 800089c:	2101      	movs	r1, #1
 800089e:	2001      	movs	r0, #1
 80008a0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80008fc <main+0xcc>
 80008a4:	eddf 0a13 	vldr	s1, [pc, #76]	; 80008f4 <main+0xc4>
 80008a8:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80008f8 <main+0xc8>
 80008ac:	f7ff fe94 	bl	80005d8 <circle>
	   line(-80,-30,0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f06f 011d 	mvn.w	r1, #29
 80008b6:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 80008ba:	f7ff ff77 	bl	80007ac <line>
	   line(0,-100,1);
 80008be:	2201      	movs	r2, #1
 80008c0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff71 	bl	80007ac <line>
	   line(120,-10,0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f06f 0109 	mvn.w	r1, #9
 80008d0:	2078      	movs	r0, #120	; 0x78
 80008d2:	f7ff ff6b 	bl	80007ac <line>
	   circle (1.2*PI,0.6*PI,150,1, 1);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2001      	movs	r0, #1
 80008da:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000900 <main+0xd0>
 80008de:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000904 <main+0xd4>
 80008e2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000908 <main+0xd8>
 80008e6:	f7ff fe77 	bl	80005d8 <circle>
	  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) HAL_Delay(10);
 80008ea:	e7b1      	b.n	8000850 <main+0x20>
 80008ec:	58020800 	.word	0x58020800
 80008f0:	43480000 	.word	0x43480000
 80008f4:	40c90fdb 	.word	0x40c90fdb
 80008f8:	00000000 	.word	0x00000000
 80008fc:	42480000 	.word	0x42480000
 8000900:	43160000 	.word	0x43160000
 8000904:	3ff1463a 	.word	0x3ff1463a
 8000908:	4071463a 	.word	0x4071463a

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0cc      	sub	sp, #304	; 0x130
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000916:	224c      	movs	r2, #76	; 0x4c
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f009 fcec 	bl	800a2f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000924:	2220      	movs	r2, #32
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f009 fce5 	bl	800a2f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4618      	mov	r0, r3
 8000934:	23bc      	movs	r3, #188	; 0xbc
 8000936:	461a      	mov	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 fcdd 	bl	800a2f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093e:	2002      	movs	r0, #2
 8000940:	f002 f8ae 	bl	8002aa0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <SystemClock_Config+0x170>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <SystemClock_Config+0x170>)
 8000950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <SystemClock_Config+0x170>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <SystemClock_Config+0x174>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <SystemClock_Config+0x174>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <SystemClock_Config+0x174>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f003 0201 	and.w	r2, r3, #1
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800097e:	bf00      	nop
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <SystemClock_Config+0x170>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098c:	d1f8      	bne.n	8000980 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800098e:	2322      	movs	r3, #34	; 0x22
 8000990:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000994:	2301      	movs	r3, #1
 8000996:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009b8:	233c      	movs	r3, #60	; 0x3c
 80009ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009d0:	230c      	movs	r3, #12
 80009d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 f8a4 	bl	8002b34 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009f2:	f000 f93d 	bl	8000c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	233f      	movs	r3, #63	; 0x3f
 80009f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fc:	2303      	movs	r3, #3
 80009fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a0e:	2340      	movs	r3, #64	; 0x40
 8000a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fc90 	bl	8003354 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000a3a:	f000 f919 	bl	8000c70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <SystemClock_Config+0x178>)
 8000a44:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fffc 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x162>
  {
    Error_Handler();
 8000a6a:	f000 f901 	bl	8000c70 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000a6e:	f002 f851 	bl	8002b14 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000a72:	bf00      	nop
 8000a74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58024800 	.word	0x58024800
 8000a80:	58000400 	.word	0x58000400
 8000a84:	00040002 	.word	0x00040002

08000a88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_USART3_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f004 fac3 	bl	800505c <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 f8c8 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ae4:	f005 fa5d 	bl	8005fa2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 f8bf 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000af6:	f005 fa92 	bl	800601e <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 f8b6 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000b06:	f005 fa13 	bl	8005f30 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f8ae 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240001f8 	.word	0x240001f8
 8000b1c:	40004800 	.word	0x40004800

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b4a      	ldr	r3, [pc, #296]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a48      	ldr	r2, [pc, #288]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	4a32      	ldr	r2, [pc, #200]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_GPIO_Init+0x140>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd2:	4824      	ldr	r0, [pc, #144]	; (8000c64 <MX_GPIO_Init+0x144>)
 8000bd4:	f000 fd88 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_GPIO_Init+0x148>)
 8000bde:	f000 fd83 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	481f      	ldr	r0, [pc, #124]	; (8000c64 <MX_GPIO_Init+0x144>)
 8000be8:	f000 fd7e 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <MX_GPIO_Init+0x14c>)
 8000c02:	f000 fba9 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c06:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MX_GPIO_Init+0x144>)
 8000c20:	f000 fb9a 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <MX_GPIO_Init+0x148>)
 8000c3c:	f000 fb8c 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0x148>)
 8000c54:	f000 fb80 	bl	8001358 <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020400 	.word	0x58020400
 8000c68:	58021800 	.word	0x58021800
 8000c6c:	58020800 	.word	0x58020800

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_MspInit+0x30>)
 8000c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x30>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x30>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	58024400 	.word	0x58024400

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12e      	bne.n	8000d34 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cdc:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d24:	2307      	movs	r3, #7
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000d30:	f000 fb12 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58020c00 	.word	0x58020c00

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f97e 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8000daa:	f000 fe0d 	bl	80019c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2400075c 	.word	0x2400075c

08000db8 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8000dbe:	f000 fe03 	bl	80019c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2400075c 	.word	0x2400075c

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 fdf9 	bl	80019c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2400075c 	.word	0x2400075c

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f009 fa38 	bl	800a284 <__errno>
 8000e14:	4602      	mov	r2, r0
 8000e16:	230c      	movs	r3, #12
 8000e18:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	24080000 	.word	0x24080000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	240001e8 	.word	0x240001e8
 8000e48:	24000b68 	.word	0x24000b68

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <SystemInit+0xec>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a38      	ldr	r2, [pc, #224]	; (8000f38 <SystemInit+0xec>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <SystemInit+0xf0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d807      	bhi.n	8000e7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <SystemInit+0xf0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 030f 	bic.w	r3, r3, #15
 8000e74:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <SystemInit+0xf0>)
 8000e76:	f043 0307 	orr.w	r3, r3, #7
 8000e7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <SystemInit+0xf4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <SystemInit+0xf4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <SystemInit+0xf4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <SystemInit+0xf4>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	492b      	ldr	r1, [pc, #172]	; (8000f40 <SystemInit+0xf4>)
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <SystemInit+0xf8>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <SystemInit+0xf0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d907      	bls.n	8000eb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <SystemInit+0xf0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 030f 	bic.w	r3, r3, #15
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <SystemInit+0xf0>)
 8000eb0:	f043 0307 	orr.w	r3, r3, #7
 8000eb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <SystemInit+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <SystemInit+0xf4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <SystemInit+0xf4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <SystemInit+0xf4>)
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <SystemInit+0xfc>)
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <SystemInit+0xf4>)
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <SystemInit+0x100>)
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <SystemInit+0xf4>)
 8000ed6:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <SystemInit+0x104>)
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <SystemInit+0xf4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <SystemInit+0xf4>)
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <SystemInit+0x104>)
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <SystemInit+0xf4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <SystemInit+0xf4>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <SystemInit+0x104>)
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <SystemInit+0xf4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <SystemInit+0xf4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <SystemInit+0xf4>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SystemInit+0xf4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SystemInit+0x108>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SystemInit+0x10c>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f16:	d202      	bcs.n	8000f1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <SystemInit+0x110>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <SystemInit+0x114>)
 8000f20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f24:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SystemInit+0xec>)
 8000f28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	52002000 	.word	0x52002000
 8000f40:	58024400 	.word	0x58024400
 8000f44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f48:	02020200 	.word	0x02020200
 8000f4c:	01ff0000 	.word	0x01ff0000
 8000f50:	01010280 	.word	0x01010280
 8000f54:	5c001000 	.word	0x5c001000
 8000f58:	ffff0000 	.word	0xffff0000
 8000f5c:	51008108 	.word	0x51008108
 8000f60:	52004000 	.word	0x52004000

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f68:	f7ff ff70 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f6e:	e003      	b.n	8000f78 <LoopCopyDataInit>

08000f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f76:	3104      	adds	r1, #4

08000f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f80:	d3f6      	bcc.n	8000f70 <CopyDataInit>
  ldr  r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f84:	e002      	b.n	8000f8c <LoopFillZerobss>

08000f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f88:	f842 3b04 	str.w	r3, [r2], #4

08000f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f90:	d3f9      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f92:	f009 f97d 	bl	800a290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fc4b 	bl	8000830 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000fa0:	0800a700 	.word	0x0800a700
  ldr  r0, =_sdata
 8000fa4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000fa8:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8000fac:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8000fb0:	24000b68 	.word	0x24000b68

08000fb4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC3_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 f98a 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fc4:	f002 fb7c 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8000fc8:	4601      	mov	r1, r0
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_Init+0x68>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_Init+0x6c>)
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	fa21 f303 	lsr.w	r3, r1, r3
 8000fe0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_Init+0x68>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <HAL_Init+0x6c>)
 8000fec:	5cd3      	ldrb	r3, [r2, r3]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x70>)
 8000ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_Init+0x74>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f814 	bl	8001030 <HAL_InitTick>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e002      	b.n	8001018 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001012:	f7ff fe35 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	58024400 	.word	0x58024400
 8001024:	0800a4f0 	.word	0x0800a4f0
 8001028:	24000004 	.word	0x24000004
 800102c:	24000000 	.word	0x24000000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_InitTick+0x60>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e021      	b.n	8001088 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_InitTick+0x64>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_InitTick+0x60>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f96f 	bl	800133e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f939 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x68>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400000c 	.word	0x2400000c
 8001094:	24000000 	.word	0x24000000
 8001098:	24000008 	.word	0x24000008

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2400000c 	.word	0x2400000c
 80010c0:	24000288 	.word	0x24000288

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	24000288 	.word	0x24000288

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2400000c 	.word	0x2400000c

08001120 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetREVID+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0c1b      	lsrs	r3, r3, #16
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	5c001000 	.word	0x5c001000

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	4313      	orrs	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	05fa0000 	.word	0x05fa0000

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff40 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff33 	bl	800119c <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa4 	bl	8001294 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_GPIO_Init+0x234>)
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800136a:	e194      	b.n	8001696 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8186 	beq.w	8001690 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d00b      	beq.n	80013a4 <HAL_GPIO_Init+0x4c>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001398:	2b11      	cmp	r3, #17
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 0201 	and.w	r2, r3, #1
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0xee>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b12      	cmp	r3, #18
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	69b9      	ldr	r1, [r7, #24]
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0203 	and.w	r2, r3, #3
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80e0 	beq.w	8001690 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x238>)
 80014d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d6:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <HAL_GPIO_Init+0x238>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_GPIO_Init+0x238>)
 80014e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a29      	ldr	r2, [pc, #164]	; (8001594 <HAL_GPIO_Init+0x23c>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_GPIO_Init+0x240>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d052      	beq.n	80015c0 <HAL_GPIO_Init+0x268>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_GPIO_Init+0x244>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d031      	beq.n	8001586 <HAL_GPIO_Init+0x22e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_GPIO_Init+0x248>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d02b      	beq.n	8001582 <HAL_GPIO_Init+0x22a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_GPIO_Init+0x24c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d025      	beq.n	800157e <HAL_GPIO_Init+0x226>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_GPIO_Init+0x250>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01f      	beq.n	800157a <HAL_GPIO_Init+0x222>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_GPIO_Init+0x254>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d019      	beq.n	8001576 <HAL_GPIO_Init+0x21e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x258>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x21a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_GPIO_Init+0x25c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x216>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <HAL_GPIO_Init+0x260>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x212>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_GPIO_Init+0x264>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x20e>
 8001562:	2309      	movs	r3, #9
 8001564:	e02d      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 8001566:	230a      	movs	r3, #10
 8001568:	e02b      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 800156a:	2308      	movs	r3, #8
 800156c:	e029      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 800156e:	2307      	movs	r3, #7
 8001570:	e027      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 8001572:	2306      	movs	r3, #6
 8001574:	e025      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 8001576:	2305      	movs	r3, #5
 8001578:	e023      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 800157a:	2304      	movs	r3, #4
 800157c:	e021      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 800157e:	2303      	movs	r3, #3
 8001580:	e01f      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 8001582:	2302      	movs	r3, #2
 8001584:	e01d      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 8001586:	2301      	movs	r3, #1
 8001588:	e01b      	b.n	80015c2 <HAL_GPIO_Init+0x26a>
 800158a:	bf00      	nop
 800158c:	58000080 	.word	0x58000080
 8001590:	58024400 	.word	0x58024400
 8001594:	58000400 	.word	0x58000400
 8001598:	58020000 	.word	0x58020000
 800159c:	58020400 	.word	0x58020400
 80015a0:	58020800 	.word	0x58020800
 80015a4:	58020c00 	.word	0x58020c00
 80015a8:	58021000 	.word	0x58021000
 80015ac:	58021400 	.word	0x58021400
 80015b0:	58021800 	.word	0x58021800
 80015b4:	58021c00 	.word	0x58021c00
 80015b8:	58022000 	.word	0x58022000
 80015bc:	58022400 	.word	0x58022400
 80015c0:	2300      	movs	r3, #0
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d2:	4938      	ldr	r1, [pc, #224]	; (80016b4 <HAL_GPIO_Init+0x35c>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800165a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f ae63 	bne.w	800136c <HAL_GPIO_Init+0x14>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	58000400 	.word	0x58000400

080016b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800171a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171c:	b08f      	sub	sp, #60	; 0x3c
 800171e:	af0a      	add	r7, sp, #40	; 0x28
 8001720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e116      	b.n	800195a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f007 fc24 	bl	8008f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f004 fe13 	bl	8006396 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	687e      	ldr	r6, [r7, #4]
 8001778:	466d      	mov	r5, sp
 800177a:	f106 0410 	add.w	r4, r6, #16
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178a:	e885 0003 	stmia.w	r5, {r0, r1}
 800178e:	1d33      	adds	r3, r6, #4
 8001790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f004 fcea 	bl	800616c <USB_CoreInit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0d7      	b.n	800195a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fe01 	bl	80063b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e04a      	b.n	8001852 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	333d      	adds	r3, #61	; 0x3d
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	333c      	adds	r3, #60	; 0x3c
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	3342      	adds	r3, #66	; 0x42
 80017f8:	4602      	mov	r2, r0
 80017fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	333f      	adds	r3, #63	; 0x3f
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3344      	adds	r3, #68	; 0x44
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	3348      	adds	r3, #72	; 0x48
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	3350      	adds	r3, #80	; 0x50
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	3301      	adds	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3af      	bcc.n	80017bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e044      	b.n	80018ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3b5      	bcc.n	8001862 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	687e      	ldr	r6, [r7, #4]
 80018fe:	466d      	mov	r5, sp
 8001900:	f106 0410 	add.w	r4, r6, #16
 8001904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001910:	e885 0003 	stmia.w	r5, {r0, r1}
 8001914:	1d33      	adds	r3, r6, #4
 8001916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f004 fd77 	bl	800640c <USB_DevInit>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e014      	b.n	800195a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 f879 	bl	8002a40 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fdb6 	bl	80074c4 <USB_DevDisconnect>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001962 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_PCD_Start+0x1c>
 800197a:	2302      	movs	r3, #2
 800197c:	e020      	b.n	80019c0 <HAL_PCD_Start+0x5e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	2b01      	cmp	r3, #1
 800198c:	d109      	bne.n	80019a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fd74 	bl	8007494 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 fcdf 	bl	8006374 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b08d      	sub	sp, #52	; 0x34
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f005 fe1b 	bl	800761a <USB_GetMode>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 83ca 	bne.w	8002180 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 fd7f 	bl	80074f4 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 83c0 	beq.w	800217e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 fd76 	bl	80074f4 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f002 0202 	and.w	r2, r2, #2
 8001a20:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 fd64 	bl	80074f4 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d161      	bne.n	8001afa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0210 	bic.w	r2, r2, #16
 8001a44:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 020f 	and.w	r2, r3, #15
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	0c5b      	lsrs	r3, r3, #17
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d124      	bne.n	8001abc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d035      	beq.n	8001aea <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6a38      	ldr	r0, [r7, #32]
 8001a92:	f005 fbdc 	bl	800724e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa2:	441a      	add	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab4:	441a      	add	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	619a      	str	r2, [r3, #24]
 8001aba:	e016      	b.n	8001aea <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	0c5b      	lsrs	r3, r3, #17
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d110      	bne.n	8001aea <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ace:	2208      	movs	r2, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6a38      	ldr	r0, [r7, #32]
 8001ad4:	f005 fbbb 	bl	800724e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae4:	441a      	add	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0210 	orr.w	r2, r2, #16
 8001af8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 fcf8 	bl	80074f4 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b0e:	d16e      	bne.n	8001bee <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fcfe 	bl	800751a <USB_ReadDevAllOutEpInterrupt>
 8001b1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b20:	e062      	b.n	8001be8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d057      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fd23 	bl	8007582 <USB_ReadDevOutEPInterrupt>
 8001b3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00c      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b54:	461a      	mov	r2, r3
 8001b56:	2301      	movs	r3, #1
 8001b58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fdc5 	bl	80026ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00c      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 febf 	bl	8002904 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2320      	movs	r3, #32
 8001bbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3301      	adds	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d199      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 fc7e 	bl	80074f4 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c02:	f040 80c0 	bne.w	8001d86 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fc9f 	bl	800754e <USB_ReadDevAllInEpInterrupt>
 8001c10:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c16:	e0b2      	b.n	8001d7e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a7 	beq.w	8001d72 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fcc5 	bl	80075be <USB_ReadDevInEPInterrupt>
 8001c34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d057      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	2201      	movs	r2, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69f9      	ldr	r1, [r7, #28]
 8001c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c60:	4013      	ands	r3, r2
 8001c62:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c70:	461a      	mov	r2, r3
 8001c72:	2301      	movs	r3, #1
 8001c74:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d132      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3348      	adds	r3, #72	; 0x48
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4403      	add	r3, r0
 8001c9e:	3344      	adds	r3, #68	; 0x44
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4419      	add	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4403      	add	r3, r0
 8001cb2:	3348      	adds	r3, #72	; 0x48
 8001cb4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d113      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x31c>
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3350      	adds	r3, #80	; 0x50
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2101      	movs	r1, #1
 8001ce0:	f005 fcce 	bl	8007680 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f007 f9ef 	bl	80090ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d06:	461a      	mov	r2, r3
 8001d08:	2308      	movs	r3, #8
 8001d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d22:	461a      	mov	r2, r3
 8001d24:	2310      	movs	r3, #16
 8001d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d008      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fc30 	bl	80025d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3301      	adds	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f47f af49 	bne.w	8001c18 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f005 fbb2 	bl	80074f4 <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d9a:	d122      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fe5f 	bl	8002a88 <HAL_PCDEx_LPM_Callback>
 8001dca:	e002      	b.n	8001dd2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f007 f9f5 	bl	80091bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 fb84 	bl	80074f4 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001df6:	d112      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f007 f9b1 	bl	8009170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e1c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 fb66 	bl	80074f4 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e32:	d121      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001e42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d111      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e68:	2101      	movs	r1, #1
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fe0c 	bl	8002a88 <HAL_PCDEx_LPM_Callback>
 8001e70:	e002      	b.n	8001e78 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f007 f97c 	bl	8009170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f005 fb39 	bl	80074f4 <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	f040 80c7 	bne.w	800201e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 fc0c 	bl	80066c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	e056      	b.n	8001f64 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ec8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eda:	0151      	lsls	r1, r2, #5
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	440a      	add	r2, r1
 8001ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ee8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efa:	0151      	lsls	r1, r2, #5
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	440a      	add	r2, r1
 8001f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f16:	461a      	mov	r2, r3
 8001f18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2e:	0151      	lsls	r1, r2, #5
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	440a      	add	r2, r1
 8001f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4e:	0151      	lsls	r1, r2, #5
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	440a      	add	r2, r1
 8001f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	3301      	adds	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3a3      	bcc.n	8001eb6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f9a:	f043 030b 	orr.w	r3, r3, #11
 8001f9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb0:	f043 030b 	orr.w	r3, r3, #11
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	e015      	b.n	8001fe4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f242 032b 	movw	r3, #8235	; 0x202b
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f043 030b 	orr.w	r3, r3, #11
 8001fe2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ff6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002008:	461a      	mov	r2, r3
 800200a:	f005 fb39 	bl	8007680 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800201c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f005 fa66 	bl	80074f4 <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	d124      	bne.n	800207e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f005 fafd 	bl	8007638 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fba1 	bl	800678a <USB_GetDevSpeed>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	f001 fca6 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8002058:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	4620      	mov	r0, r4
 8002064:	f004 f8e4 	bl	8006230 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f007 f858 	bl	800911e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800207c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f005 fa36 	bl	80074f4 <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b08      	cmp	r3, #8
 8002090:	d10a      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f007 f835 	bl	8009102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f002 0208 	and.w	r2, r2, #8
 80020a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fa21 	bl	80074f4 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020bc:	d10f      	bne.n	80020de <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f007 f897 	bl	80091fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fa06 	bl	80074f4 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f2:	d10f      	bne.n	8002114 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f007 f86a 	bl	80091d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f005 f9eb 	bl	80074f4 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d10a      	bne.n	8002140 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f007 f878 	bl	8009220 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f005 f9d5 	bl	80074f4 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d115      	bne.n	8002180 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f007 f868 	bl	800923c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	e000      	b.n	8002180 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800217e:	bf00      	nop
    }
  }
}
 8002180:	3734      	adds	r7, #52	; 0x34
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}

08002186 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_PCD_SetAddress+0x1a>
 800219c:	2302      	movs	r3, #2
 800219e:	e013      	b.n	80021c8 <HAL_PCD_SetAddress+0x42>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 f945 	bl	8007448 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	70fb      	strb	r3, [r7, #3]
 80021e2:	460b      	mov	r3, r1
 80021e4:	803b      	strh	r3, [r7, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0f      	bge.n	8002216 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 020f 	and.w	r2, r3, #15
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3338      	adds	r3, #56	; 0x38
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	705a      	strb	r2, [r3, #1]
 8002214:	e00f      	b.n	8002236 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	b2da      	uxtb	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002242:	883a      	ldrh	r2, [r7, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002260:	78bb      	ldrb	r3, [r7, #2]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d102      	bne.n	800226c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_EP_Open+0xaa>
 8002276:	2302      	movs	r3, #2
 8002278:	e00e      	b.n	8002298 <HAL_PCD_EP_Open+0xc8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	4618      	mov	r0, r3
 800228a:	f004 faa3 	bl	80067d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002296:	7afb      	ldrb	r3, [r7, #11]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da0f      	bge.n	80022d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	3338      	adds	r3, #56	; 0x38
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	705a      	strb	r2, [r3, #1]
 80022d2:	e00f      	b.n	80022f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 020f 	and.w	r2, r3, #15
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	3304      	adds	r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_PCD_EP_Close+0x6e>
 800230a:	2302      	movs	r3, #2
 800230c:	e00e      	b.n	800232c <HAL_PCD_EP_Close+0x8c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 fae1 	bl	80068e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	460b      	mov	r3, r1
 8002342:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	f003 020f 	and.w	r2, r3, #15
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	3304      	adds	r3, #4
 800235c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	b2da      	uxtb	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	f004 fdc4 	bl	8006f34 <USB_EP0StartXfer>
 80023ac:	e008      	b.n	80023c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	6979      	ldr	r1, [r7, #20]
 80023bc:	f004 fb6e 	bl	8006a9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	460b      	mov	r3, r1
 80023d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 020f 	and.w	r2, r3, #15
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	3338      	adds	r3, #56	; 0x38
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2201      	movs	r2, #1
 8002408:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240a:	7afb      	ldrb	r3, [r7, #11]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	b2da      	uxtb	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002424:	7afb      	ldrb	r3, [r7, #11]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	6979      	ldr	r1, [r7, #20]
 800243c:	f004 fd7a 	bl	8006f34 <USB_EP0StartXfer>
 8002440:	e008      	b.n	8002454 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6979      	ldr	r1, [r7, #20]
 8002450:	f004 fb24 	bl	8006a9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d901      	bls.n	800247c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e050      	b.n	800251e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800247c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002480:	2b00      	cmp	r3, #0
 8002482:	da0f      	bge.n	80024a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	f003 020f 	and.w	r2, r3, #15
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	3338      	adds	r3, #56	; 0x38
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	705a      	strb	r2, [r3, #1]
 80024a2:	e00d      	b.n	80024c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	3304      	adds	r3, #4
 80024b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_PCD_EP_SetStall+0x82>
 80024dc:	2302      	movs	r3, #2
 80024de:	e01e      	b.n	800251e <HAL_PCD_EP_SetStall+0xc0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68f9      	ldr	r1, [r7, #12]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fed6 	bl	80072a0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	b2d9      	uxtb	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800250e:	461a      	mov	r2, r3
 8002510:	f005 f8b6 	bl	8007680 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	f003 020f 	and.w	r2, r3, #15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d901      	bls.n	8002544 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e042      	b.n	80025ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da0f      	bge.n	800256c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 020f 	and.w	r2, r3, #15
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	3338      	adds	r3, #56	; 0x38
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	705a      	strb	r2, [r3, #1]
 800256a:	e00f      	b.n	800258c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_PCD_EP_ClrStall+0x86>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e00e      	b.n	80025ca <HAL_PCD_EP_ClrStall+0xa4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fede 	bl	800737c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08a      	sub	sp, #40	; 0x28
 80025d6:	af02      	add	r7, sp, #8
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3338      	adds	r3, #56	; 0x38
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	429a      	cmp	r2, r3
 8002604:	d901      	bls.n	800260a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06c      	b.n	80026e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	429a      	cmp	r2, r3
 800261e:	d902      	bls.n	8002626 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3303      	adds	r3, #3
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800262e:	e02b      	b.n	8002688 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	429a      	cmp	r2, r3
 8002644:	d902      	bls.n	800264c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3303      	adds	r3, #3
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002664:	b2db      	uxtb	r3, r3
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4603      	mov	r3, r0
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f004 fdba 	bl	80071e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	441a      	add	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	441a      	add	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	b29b      	uxth	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	429a      	cmp	r2, r3
 800269c:	d809      	bhi.n	80026b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d203      	bcs.n	80026b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1be      	bne.n	8002630 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d811      	bhi.n	80026e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	2201      	movs	r2, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	6939      	ldr	r1, [r7, #16]
 80026da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026de:	4013      	ands	r3, r2
 80026e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	333c      	adds	r3, #60	; 0x3c
 8002704:	3304      	adds	r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b01      	cmp	r3, #1
 8002720:	f040 80a0 	bne.w	8002864 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a72      	ldr	r2, [pc, #456]	; (80028fc <PCD_EP_OutXfrComplete_int+0x210>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f240 80dd 	bls.w	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80d7 	beq.w	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	e0cb      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002770:	461a      	mov	r2, r3
 8002772:	2320      	movs	r3, #32
 8002774:	6093      	str	r3, [r2, #8]
 8002776:	e0bc      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80b7 	bne.w	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <PCD_EP_OutXfrComplete_int+0x210>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d90f      	bls.n	80027ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	461a      	mov	r2, r3
 80027a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a8:	6093      	str	r3, [r2, #8]
 80027aa:	e0a2      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80027d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4403      	add	r3, r0
 80027e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027fa:	6819      	ldr	r1, [r3, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4403      	add	r3, r0
 800280a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4419      	add	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002824:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d114      	bne.n	8002856 <PCD_EP_OutXfrComplete_int+0x16a>
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800284e:	461a      	mov	r2, r3
 8002850:	2101      	movs	r1, #1
 8002852:	f004 ff15 	bl	8007680 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f006 fc1b 	bl	8009098 <HAL_PCD_DataOutStageCallback>
 8002862:	e046      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a26      	ldr	r2, [pc, #152]	; (8002900 <PCD_EP_OutXfrComplete_int+0x214>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d124      	bne.n	80028b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	e032      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	2320      	movs	r3, #32
 80028a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f006 fbf2 	bl	8009098 <HAL_PCD_DataOutStageCallback>
 80028b4:	e01d      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d108      	bne.n	80028e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028de:	461a      	mov	r2, r3
 80028e0:	2100      	movs	r1, #0
 80028e2:	f004 fecd 	bl	8007680 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f006 fbd3 	bl	8009098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	4f54300a 	.word	0x4f54300a
 8002900:	4f54310a 	.word	0x4f54310a

08002904 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	333c      	adds	r3, #60	; 0x3c
 800291c:	3304      	adds	r3, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <PCD_EP_OutSetupPacket_int+0x88>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d90e      	bls.n	8002958 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002956:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f006 fb8b 	bl	8009074 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <PCD_EP_OutSetupPacket_int+0x88>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d90c      	bls.n	8002980 <PCD_EP_OutSetupPacket_int+0x7c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d108      	bne.n	8002980 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002978:	461a      	mov	r2, r3
 800297a:	2101      	movs	r1, #1
 800297c:	f004 fe80 	bl	8007680 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	4f54300a 	.word	0x4f54300a

08002990 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
 800299c:	4613      	mov	r3, r2
 800299e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029ae:	883b      	ldrh	r3, [r7, #0]
 80029b0:	0419      	lsls	r1, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
 80029bc:	e028      	b.n	8002a10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e00d      	b.n	80029ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	3301      	adds	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3ec      	bcc.n	80029d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029f8:	883b      	ldrh	r3, [r7, #0]
 80029fa:	0418      	lsls	r0, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4302      	orrs	r2, r0
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	10000003 	.word	0x10000003

08002a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_PWREx_ConfigSupply+0x70>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00a      	beq.n	8002aca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_PWREx_ConfigSupply+0x70>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d001      	beq.n	8002ac6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e01f      	b.n	8002b06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e01d      	b.n	8002b06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_PWREx_ConfigSupply+0x70>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	490f      	ldr	r1, [pc, #60]	; (8002b10 <HAL_PWREx_ConfigSupply+0x70>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ada:	f7fe faf3 	bl	80010c4 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ae0:	e009      	b.n	8002af6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ae2:	f7fe faef 	bl	80010c4 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af0:	d901      	bls.n	8002af6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_PWREx_ConfigSupply+0x70>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b02:	d1ee      	bne.n	8002ae2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	58024800 	.word	0x58024800

08002b14 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	58024800 	.word	0x58024800

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e3ff      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8087 	beq.w	8002c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b54:	4b99      	ldr	r3, [pc, #612]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b5e:	4b97      	ldr	r3, [pc, #604]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d007      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46>
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b18      	cmp	r3, #24
 8002b6e:	d110      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d10b      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7a:	4b90      	ldr	r3, [pc, #576]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x12c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d168      	bne.n	8002c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e3d9      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x76>
 8002b9c:	4b87      	ldr	r3, [pc, #540]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a86      	ldr	r2, [pc, #536]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b82      	ldr	r3, [pc, #520]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a81      	ldr	r2, [pc, #516]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b7f      	ldr	r3, [pc, #508]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7e      	ldr	r2, [pc, #504]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xbc>
 8002bd6:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a78      	ldr	r2, [pc, #480]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a75      	ldr	r2, [pc, #468]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002bf0:	4b72      	ldr	r3, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a71      	ldr	r2, [pc, #452]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe fa58 	bl	80010c4 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe fa54 	bl	80010c4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e38d      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2a:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe4>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fa44 	bl	80010c4 <HAL_GetTick>
 8002c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe fa40 	bl	80010c4 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e379      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c52:	4b5a      	ldr	r3, [pc, #360]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x10c>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80ae 	beq.w	8002dcc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c70:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c7a:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <HAL_RCC_OscConfig+0x162>
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	2b18      	cmp	r3, #24
 8002c8a:	d13a      	bne.n	8002d02 <HAL_RCC_OscConfig+0x1ce>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d135      	bne.n	8002d02 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c96:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x17a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e34b      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	f7fe fa37 	bl	8001120 <HAL_GetREVID>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d817      	bhi.n	8002cec <HAL_RCC_OscConfig+0x1b8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d108      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x1a2>
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ccc:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd4:	e07a      	b.n	8002dcc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	031b      	lsls	r3, r3, #12
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cea:	e06f      	b.n	8002dcc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	4930      	ldr	r1, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	e064      	b.n	8002dcc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d045      	beq.n	8002d96 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0219 	bic.w	r2, r3, #25
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4929      	ldr	r1, [pc, #164]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f9d2 	bl	80010c4 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe f9ce 	bl	80010c4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e307      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	f7fe f9ed 	bl	8001120 <HAL_GetREVID>
 8002d46:	4602      	mov	r2, r0
 8002d48:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d817      	bhi.n	8002d80 <HAL_RCC_OscConfig+0x24c>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	d108      	bne.n	8002d6a <HAL_RCC_OscConfig+0x236>
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d66:	6053      	str	r3, [r2, #4]
 8002d68:	e030      	b.n	8002dcc <HAL_RCC_OscConfig+0x298>
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	031b      	lsls	r3, r3, #12
 8002d78:	4910      	ldr	r1, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	e025      	b.n	8002dcc <HAL_RCC_OscConfig+0x298>
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	490b      	ldr	r1, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	e01a      	b.n	8002dcc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <HAL_RCC_OscConfig+0x288>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe f98f 	bl	80010c4 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe f98b 	bl	80010c4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d903      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e2c4      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
 8002dbc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dc0:	4ba4      	ldr	r3, [pc, #656]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ee      	bne.n	8002daa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a9 	beq.w	8002f2c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dda:	4b9e      	ldr	r3, [pc, #632]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002de2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002de4:	4b9b      	ldr	r3, [pc, #620]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d007      	beq.n	8002e00 <HAL_RCC_OscConfig+0x2cc>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b18      	cmp	r3, #24
 8002df4:	d13a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x338>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d135      	bne.n	8002e6c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e00:	4b94      	ldr	r3, [pc, #592]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2e4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e296      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e18:	f7fe f982 	bl	8001120 <HAL_GetREVID>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d817      	bhi.n	8002e56 <HAL_RCC_OscConfig+0x322>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d108      	bne.n	8002e40 <HAL_RCC_OscConfig+0x30c>
 8002e2e:	4b89      	ldr	r3, [pc, #548]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e36:	4a87      	ldr	r2, [pc, #540]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e3c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e3e:	e075      	b.n	8002f2c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e40:	4b84      	ldr	r3, [pc, #528]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	069b      	lsls	r3, r3, #26
 8002e4e:	4981      	ldr	r1, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e54:	e06a      	b.n	8002f2c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e56:	4b7f      	ldr	r3, [pc, #508]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	497b      	ldr	r1, [pc, #492]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e6a:	e05f      	b.n	8002f2c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d042      	beq.n	8002efa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e74:	4b77      	ldr	r3, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a76      	ldr	r2, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe f920 	bl	80010c4 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e88:	f7fe f91c 	bl	80010c4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e255      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e9a:	4b6e      	ldr	r3, [pc, #440]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ea6:	f7fe f93b 	bl	8001120 <HAL_GetREVID>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f241 0303 	movw	r3, #4099	; 0x1003
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d817      	bhi.n	8002ee4 <HAL_RCC_OscConfig+0x3b0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d108      	bne.n	8002ece <HAL_RCC_OscConfig+0x39a>
 8002ebc:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ec4:	4a63      	ldr	r2, [pc, #396]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eca:	6053      	str	r3, [r2, #4]
 8002ecc:	e02e      	b.n	8002f2c <HAL_RCC_OscConfig+0x3f8>
 8002ece:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	069b      	lsls	r3, r3, #26
 8002edc:	495d      	ldr	r1, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
 8002ee2:	e023      	b.n	8002f2c <HAL_RCC_OscConfig+0x3f8>
 8002ee4:	4b5b      	ldr	r3, [pc, #364]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	4958      	ldr	r1, [pc, #352]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60cb      	str	r3, [r1, #12]
 8002ef8:	e018      	b.n	8002f2c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002efa:	4b56      	ldr	r3, [pc, #344]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a55      	ldr	r2, [pc, #340]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe f8dd 	bl	80010c4 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f0e:	f7fe f8d9 	bl	80010c4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e212      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d036      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f40:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	4a43      	ldr	r2, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe f8ba 	bl	80010c4 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fe f8b6 	bl	80010c4 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1ef      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x420>
 8002f72:	e018      	b.n	8002fa6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f78:	4a36      	ldr	r2, [pc, #216]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe f8a0 	bl	80010c4 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe f89c 	bl	80010c4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1d5      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d036      	beq.n	8003020 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d019      	beq.n	8002fee <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fba:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a25      	ldr	r2, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f87d 	bl	80010c4 <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fce:	f7fe f879 	bl	80010c4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1b2      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x49a>
 8002fec:	e018      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a18      	ldr	r2, [pc, #96]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8002ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe f863 	bl	80010c4 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003002:	f7fe f85f 	bl	80010c4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e198      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_RCC_OscConfig+0x520>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8085 	beq.w	8003138 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_RCC_OscConfig+0x524>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_RCC_OscConfig+0x524>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800303a:	f7fe f843 	bl	80010c4 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003040:	e00c      	b.n	800305c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe f83f 	bl	80010c4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	; 0x64
 800304e:	d905      	bls.n	800305c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e178      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
 8003054:	58024400 	.word	0x58024400
 8003058:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800305c:	4b96      	ldr	r3, [pc, #600]	; (80032b8 <HAL_RCC_OscConfig+0x784>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ec      	beq.n	8003042 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x54a>
 8003070:	4b92      	ldr	r3, [pc, #584]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a91      	ldr	r2, [pc, #580]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	e02d      	b.n	80030da <HAL_RCC_OscConfig+0x5a6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x56c>
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a8c      	ldr	r2, [pc, #560]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a89      	ldr	r2, [pc, #548]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003098:	f023 0304 	bic.w	r3, r3, #4
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	e01c      	b.n	80030da <HAL_RCC_OscConfig+0x5a6>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d10c      	bne.n	80030c2 <HAL_RCC_OscConfig+0x58e>
 80030a8:	4b84      	ldr	r3, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a83      	ldr	r2, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030ae:	f043 0304 	orr.w	r3, r3, #4
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	; 0x70
 80030c0:	e00b      	b.n	80030da <HAL_RCC_OscConfig+0x5a6>
 80030c2:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a7d      	ldr	r2, [pc, #500]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
 80030ce:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a7a      	ldr	r2, [pc, #488]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d015      	beq.n	800310e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7fd ffef 	bl	80010c4 <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fd ffeb 	bl	80010c4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e122      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003100:	4b6e      	ldr	r3, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ee      	beq.n	80030ea <HAL_RCC_OscConfig+0x5b6>
 800310c:	e014      	b.n	8003138 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fd ffd9 	bl	80010c4 <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fd ffd5 	bl	80010c4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e10c      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800312c:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ee      	bne.n	8003116 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8101 	beq.w	8003344 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003142:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314a:	2b18      	cmp	r3, #24
 800314c:	f000 80bc 	beq.w	80032c8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b02      	cmp	r3, #2
 8003156:	f040 8095 	bne.w	8003284 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a57      	ldr	r2, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fd ffad 	bl	80010c4 <HAL_GetTick>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7fd ffa9 	bl	80010c4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0e2      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003180:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318c:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800318e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_RCC_OscConfig+0x78c>)
 8003192:	4013      	ands	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	430a      	orrs	r2, r1
 80031a0:	4946      	ldr	r1, [pc, #280]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	628b      	str	r3, [r1, #40]	; 0x28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	3b01      	subs	r3, #1
 80031ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	3b01      	subs	r3, #1
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	3b01      	subs	r3, #1
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031d6:	4939      	ldr	r1, [pc, #228]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80031dc:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_RCC_OscConfig+0x790>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031f4:	00d2      	lsls	r2, r2, #3
 80031f6:	4931      	ldr	r1, [pc, #196]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031fc:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	f023 020c 	bic.w	r2, r3, #12
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	492c      	ldr	r1, [pc, #176]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800320a:	4313      	orrs	r3, r2
 800320c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800320e:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	f023 0202 	bic.w	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4928      	ldr	r1, [pc, #160]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800321c:	4313      	orrs	r3, r2
 800321e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800323e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd ff32 	bl	80010c4 <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fd ff2e 	bl	80010c4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e067      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x730>
 8003282:	e05f      	b.n	8003344 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 800328a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800328e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd ff18 	bl	80010c4 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fd ff14 	bl	80010c4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04d      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_RCC_OscConfig+0x788>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x764>
 80032b6:	e045      	b.n	8003344 <HAL_RCC_OscConfig+0x810>
 80032b8:	58024800 	.word	0x58024800
 80032bc:	58024400 	.word	0x58024400
 80032c0:	fffffc0c 	.word	0xfffffc0c
 80032c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032c8:	4b21      	ldr	r3, [pc, #132]	; (8003350 <HAL_RCC_OscConfig+0x81c>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_OscConfig+0x81c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d031      	beq.n	8003340 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d12a      	bne.n	8003340 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d122      	bne.n	8003340 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d11a      	bne.n	8003340 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d111      	bne.n	8003340 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0e1b      	lsrs	r3, r3, #24
 8003332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3730      	adds	r7, #48	; 0x30
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400

08003354 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e19c      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b87      	ldr	r3, [pc, #540]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4985      	ldr	r1, [pc, #532]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b83      	ldr	r3, [pc, #524]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e184      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	4b7b      	ldr	r3, [pc, #492]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d908      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033b4:	4b78      	ldr	r3, [pc, #480]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4975      	ldr	r1, [pc, #468]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	4b70      	ldr	r3, [pc, #448]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033de:	429a      	cmp	r2, r3
 80033e0:	d908      	bls.n	80033f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033e2:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	496a      	ldr	r1, [pc, #424]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	4b64      	ldr	r3, [pc, #400]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340c:	429a      	cmp	r2, r3
 800340e:	d908      	bls.n	8003422 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003410:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	495e      	ldr	r1, [pc, #376]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 800341e:	4313      	orrs	r3, r2
 8003420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800343a:	429a      	cmp	r2, r3
 800343c:	d908      	bls.n	8003450 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4953      	ldr	r1, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 800344c:	4313      	orrs	r3, r2
 800344e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	429a      	cmp	r2, r3
 800346a:	d908      	bls.n	800347e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f023 020f 	bic.w	r2, r3, #15
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4947      	ldr	r1, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 800347a:	4313      	orrs	r3, r2
 800347c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d055      	beq.n	8003536 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4940      	ldr	r1, [pc, #256]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003498:	4313      	orrs	r3, r2
 800349a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a4:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d121      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0f6      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034bc:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d115      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0ea      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0de      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e4:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d6      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f023 0207 	bic.w	r2, r3, #7
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4925      	ldr	r1, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003502:	4313      	orrs	r3, r2
 8003504:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd fddd 	bl	80010c4 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	e00a      	b.n	8003524 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350e:	f7fd fdd9 	bl	80010c4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0be      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	429a      	cmp	r2, r3
 8003534:	d1eb      	bne.n	800350e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	429a      	cmp	r2, r3
 8003550:	d208      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x244>)
 8003560:	4313      	orrs	r3, r2
 8003562:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d214      	bcs.n	800359c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 020f 	bic.w	r2, r3, #15
 800357a:	4906      	ldr	r1, [pc, #24]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCC_ClockConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e086      	b.n	80036a2 <HAL_RCC_ClockConfig+0x34e>
 8003594:	52002000 	.word	0x52002000
 8003598:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d208      	bcs.n	80035ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035b8:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4939      	ldr	r1, [pc, #228]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d208      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	492e      	ldr	r1, [pc, #184]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003610:	429a      	cmp	r2, r3
 8003612:	d208      	bcs.n	8003626 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 8003622:	4313      	orrs	r3, r2
 8003624:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d010      	beq.n	8003654 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800363e:	429a      	cmp	r2, r3
 8003640:	d208      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	4917      	ldr	r1, [pc, #92]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 8003650:	4313      	orrs	r3, r2
 8003652:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003654:	f000 f834 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8003658:	4601      	mov	r1, r0
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <HAL_RCC_ClockConfig+0x35c>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
 8003670:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x358>)
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <HAL_RCC_ClockConfig+0x35c>)
 800367c:	5cd3      	ldrb	r3, [r2, r3]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_RCC_ClockConfig+0x360>)
 800368a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x364>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x368>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fcca 	bl	8001030 <HAL_InitTick>
 800369c:	4603      	mov	r3, r0
 800369e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	58024400 	.word	0x58024400
 80036b0:	0800a4f0 	.word	0x0800a4f0
 80036b4:	24000004 	.word	0x24000004
 80036b8:	24000000 	.word	0x24000000
 80036bc:	24000008 	.word	0x24000008

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c6:	4baf      	ldr	r3, [pc, #700]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ce:	2b18      	cmp	r3, #24
 80036d0:	f200 814e 	bhi.w	8003970 <HAL_RCC_GetSysClockFreq+0x2b0>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003741 	.word	0x08003741
 80036e0:	08003971 	.word	0x08003971
 80036e4:	08003971 	.word	0x08003971
 80036e8:	08003971 	.word	0x08003971
 80036ec:	08003971 	.word	0x08003971
 80036f0:	08003971 	.word	0x08003971
 80036f4:	08003971 	.word	0x08003971
 80036f8:	08003971 	.word	0x08003971
 80036fc:	08003767 	.word	0x08003767
 8003700:	08003971 	.word	0x08003971
 8003704:	08003971 	.word	0x08003971
 8003708:	08003971 	.word	0x08003971
 800370c:	08003971 	.word	0x08003971
 8003710:	08003971 	.word	0x08003971
 8003714:	08003971 	.word	0x08003971
 8003718:	08003971 	.word	0x08003971
 800371c:	0800376d 	.word	0x0800376d
 8003720:	08003971 	.word	0x08003971
 8003724:	08003971 	.word	0x08003971
 8003728:	08003971 	.word	0x08003971
 800372c:	08003971 	.word	0x08003971
 8003730:	08003971 	.word	0x08003971
 8003734:	08003971 	.word	0x08003971
 8003738:	08003971 	.word	0x08003971
 800373c:	08003773 	.word	0x08003773
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003740:	4b90      	ldr	r3, [pc, #576]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800374c:	4b8d      	ldr	r3, [pc, #564]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	4a8c      	ldr	r2, [pc, #560]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800375e:	e10a      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003760:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003762:	61bb      	str	r3, [r7, #24]
    break;
 8003764:	e107      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003766:	4b89      	ldr	r3, [pc, #548]	; (800398c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003768:	61bb      	str	r3, [r7, #24]
    break;
 800376a:	e104      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800376c:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800376e:	61bb      	str	r3, [r7, #24]
    break;
 8003770:	e101      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003772:	4b84      	ldr	r3, [pc, #528]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800377c:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003786:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003788:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003792:	4b7c      	ldr	r3, [pc, #496]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80da 	beq.w	800396a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d05a      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x1b2>
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d302      	bcc.n	80037c6 <HAL_RCC_GetSysClockFreq+0x106>
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d078      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80037c4:	e099      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c6:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02d      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037d2:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	4a6a      	ldr	r2, [pc, #424]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fc:	4b61      	ldr	r3, [pc, #388]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003810:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003828:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800382c:	e087      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003838:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2d8>
 800383c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003850:	ed97 6a02 	vldr	s12, [r7, #8]
 8003854:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003870:	e065      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800399c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003884:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003894:	ed97 6a02 	vldr	s12, [r7, #8]
 8003898:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2d4>
 800389c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038b4:	e043      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80039a0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80038c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c8:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80038dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2d4>
 80038e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038f8:	e021      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003904:	eddf 6a25 	vldr	s13, [pc, #148]	; 800399c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003920:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800393c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	0a5b      	lsrs	r3, r3, #9
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	3301      	adds	r3, #1
 800394a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003956:	edd7 6a07 	vldr	s13, [r7, #28]
 800395a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003962:	ee17 3a90 	vmov	r3, s15
 8003966:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003968:	e005      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
    break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003972:	61bb      	str	r3, [r7, #24]
    break;
 8003974:	bf00      	nop
  }

  return sysclockfreq;
 8003976:	69bb      	ldr	r3, [r7, #24]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3724      	adds	r7, #36	; 0x24
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	58024400 	.word	0x58024400
 8003988:	03d09000 	.word	0x03d09000
 800398c:	003d0900 	.word	0x003d0900
 8003990:	007a1200 	.word	0x007a1200
 8003994:	46000000 	.word	0x46000000
 8003998:	4c742400 	.word	0x4c742400
 800399c:	4a742400 	.word	0x4a742400
 80039a0:	4af42400 	.word	0x4af42400

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039aa:	f7ff fe89 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4601      	mov	r1, r0
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039bc:	5cd3      	ldrb	r3, [r2, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa21 f303 	lsr.w	r3, r1, r3
 80039c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a07      	ldr	r2, [pc, #28]	; (80039fc <HAL_RCC_GetHCLKFreq+0x58>)
 80039e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <HAL_RCC_GetHCLKFreq+0x58>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58024400 	.word	0x58024400
 80039f8:	0800a4f0 	.word	0x0800a4f0
 80039fc:	24000004 	.word	0x24000004
 8003a00:	24000000 	.word	0x24000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a08:	f7ff ffcc 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	0800a4f0 	.word	0x0800a4f0

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a34:	f7ff ffb6 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a38:	4601      	mov	r1, r0
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	58024400 	.word	0x58024400
 8003a58:	0800a4f0 	.word	0x0800a4f0

08003a5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a64:	2300      	movs	r3, #0
 8003a66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d03d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a80:	d013      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a86:	d802      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a8c:	e01f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a92:	d013      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a98:	d01c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003a9a:	e018      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9c:	4baf      	ldr	r3, [pc, #700]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	4aae      	ldr	r2, [pc, #696]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 f96f 	bl	8004d94 <RCCEx_PLL2_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003aba:	e00c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3324      	adds	r3, #36	; 0x24
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fa18 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003acc:	e003      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003adc:	4b9f      	ldr	r3, [pc, #636]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae8:	499c      	ldr	r1, [pc, #624]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	650b      	str	r3, [r1, #80]	; 0x50
 8003aee:	e001      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d03d      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d826      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b25 	.word	0x08003b25
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b5d 	.word	0x08003b5d
 8003b20:	08003b5d 	.word	0x08003b5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b8d      	ldr	r3, [pc, #564]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a8c      	ldr	r2, [pc, #560]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b30:	e015      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 f92b 	bl	8004d94 <RCCEx_PLL2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b42:	e00c      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f9d4 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5a:	e000      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b64:	4b7d      	ldr	r3, [pc, #500]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	f023 0207 	bic.w	r2, r3, #7
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	497a      	ldr	r1, [pc, #488]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	650b      	str	r3, [r1, #80]	; 0x50
 8003b76:	e001      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d01c      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b90:	2b80      	cmp	r3, #128	; 0x80
 8003b92:	d804      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003b9c:	e01e      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba0:	d01f      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba6:	d01e      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ba8:	e018      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	4a6b      	ldr	r2, [pc, #428]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bb6:	e017      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f8e8 	bl	8004d94 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3324      	adds	r3, #36	; 0x24
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 f991 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bda:	e005      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
      break;
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bee:	4b5b      	ldr	r3, [pc, #364]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4958      	ldr	r1, [pc, #352]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	650b      	str	r3, [r1, #80]	; 0x50
 8003c00:	e001      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d044      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1c:	d01f      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c22:	d805      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2c:	d00e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003c2e:	e01f      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003c30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003c36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c3a:	d01e      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c3c:	e018      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a46      	ldr	r2, [pc, #280]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e017      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f89e 	bl	8004d94 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3324      	adds	r3, #36	; 0x24
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f947 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c6e:	e005      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c90:	4932      	ldr	r1, [pc, #200]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	658b      	str	r3, [r1, #88]	; 0x58
 8003c96:	e001      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d044      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb2:	d01f      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb8:	d805      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cc4:	e01f      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003cc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cca:	d01f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd0:	d01e      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd4:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e017      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f853 	bl	8004d94 <RCCEx_PLL2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003cf2:	e00e      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f8fc 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d04:	e005      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0a:	e002      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d26:	490d      	ldr	r1, [pc, #52]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d2c:	e001      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d035      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d00c      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d802      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01b      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003d4e:	e017      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d00c      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d018      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003d58:	e012      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4baf      	ldr	r3, [pc, #700]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4aae      	ldr	r2, [pc, #696]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d6c:	e00e      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2102      	movs	r1, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 f80d 	bl	8004d94 <RCCEx_PLL2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75fb      	strb	r3, [r7, #23]
      break;
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d92:	4ba3      	ldr	r3, [pc, #652]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	49a0      	ldr	r1, [pc, #640]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003da4:	e001      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d042      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbe:	d01f      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d805      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dce:	d00e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003dd0:	e01f      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd6:	d01f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ddc:	d01e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003dde:	e018      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b8f      	ldr	r3, [pc, #572]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a8e      	ldr	r2, [pc, #568]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dec:	e017      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 ffcd 	bl	8004d94 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dfe:	e00e      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f876 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e10:	e005      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003e18:	bf00      	nop
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	497b      	ldr	r1, [pc, #492]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	650b      	str	r3, [r1, #80]	; 0x50
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d042      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e50:	d01b      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e56:	d805      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e62:	e01b      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e68:	d01d      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003e6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6e:	d01c      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e74:	d01b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003e76:	e011      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 ff88 	bl	8004d94 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e88:	e012      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f831 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e009      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003eb6:	4b5a      	ldr	r3, [pc, #360]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	4957      	ldr	r1, [pc, #348]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ec8:	e001      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d01b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eea:	d805      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d022      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003ef6:	e01b      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d01d      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f02:	d01c      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f08:	d01b      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 ff3e 	bl	8004d94 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f1c:	e012      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 ffe7 	bl	8004ef8 <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f2e:	e009      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f36:	bf00      	nop
 8003f38:	e004      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f4a:	4b35      	ldr	r3, [pc, #212]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f58:	4931      	ldr	r1, [pc, #196]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f5e:	e001      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f78:	d005      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7e:	d009      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003f84:	e00f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f92:	e00c      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fefa 	bl	8004d94 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc0:	4917      	ldr	r1, [pc, #92]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8003fc6:	e001      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d81b      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	08004025 	.word	0x08004025
 8003fec:	08003ff9 	.word	0x08003ff9
 8003ff0:	08004007 	.word	0x08004007
 8003ff4:	08004025 	.word	0x08004025
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004004:	e00f      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	2102      	movs	r1, #2
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fec1 	bl	8004d94 <RCCEx_PLL2_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004016:	e006      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
      break;
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800401e:	bf00      	nop
 8004020:	58024400 	.word	0x58024400
      break;
 8004024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800402c:	4bba      	ldr	r3, [pc, #744]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	f023 0203 	bic.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	49b7      	ldr	r1, [pc, #732]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8086 	beq.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004052:	4bb2      	ldr	r3, [pc, #712]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4ab1      	ldr	r2, [pc, #708]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800405e:	f7fd f831 	bl	80010c4 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004064:	e009      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fd f82d 	bl	80010c4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d902      	bls.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	75fb      	strb	r3, [r7, #23]
        break;
 8004078:	e005      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800407a:	4ba8      	ldr	r3, [pc, #672]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ef      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d166      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800408c:	4ba2      	ldr	r3, [pc, #648]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800408e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004096:	4053      	eors	r3, r2
 8004098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a0:	4b9d      	ldr	r3, [pc, #628]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b9b      	ldr	r3, [pc, #620]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a9a      	ldr	r2, [pc, #616]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b98      	ldr	r3, [pc, #608]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a97      	ldr	r2, [pc, #604]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040c2:	4a95      	ldr	r2, [pc, #596]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d115      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fc fff6 	bl	80010c4 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040da:	e00b      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fc fff2 	bl	80010c4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d902      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	75fb      	strb	r3, [r7, #23]
            break;
 80040f2:	e005      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f4:	4b88      	ldr	r3, [pc, #544]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ed      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d126      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800410c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004114:	d10d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004116:	4b80      	ldr	r3, [pc, #512]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004124:	0919      	lsrs	r1, r3, #4
 8004126:	4b7e      	ldr	r3, [pc, #504]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004128:	400b      	ands	r3, r1
 800412a:	497b      	ldr	r1, [pc, #492]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	610b      	str	r3, [r1, #16]
 8004130:	e005      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004132:	4b79      	ldr	r3, [pc, #484]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	4a78      	ldr	r2, [pc, #480]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004138:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800413c:	6113      	str	r3, [r2, #16]
 800413e:	4b76      	ldr	r3, [pc, #472]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414c:	4972      	ldr	r1, [pc, #456]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	670b      	str	r3, [r1, #112]	; 0x70
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
 8004158:	e001      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d07d      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416e:	2b28      	cmp	r3, #40	; 0x28
 8004170:	d866      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	08004247 	.word	0x08004247
 800417c:	08004241 	.word	0x08004241
 8004180:	08004241 	.word	0x08004241
 8004184:	08004241 	.word	0x08004241
 8004188:	08004241 	.word	0x08004241
 800418c:	08004241 	.word	0x08004241
 8004190:	08004241 	.word	0x08004241
 8004194:	08004241 	.word	0x08004241
 8004198:	0800421d 	.word	0x0800421d
 800419c:	08004241 	.word	0x08004241
 80041a0:	08004241 	.word	0x08004241
 80041a4:	08004241 	.word	0x08004241
 80041a8:	08004241 	.word	0x08004241
 80041ac:	08004241 	.word	0x08004241
 80041b0:	08004241 	.word	0x08004241
 80041b4:	08004241 	.word	0x08004241
 80041b8:	0800422f 	.word	0x0800422f
 80041bc:	08004241 	.word	0x08004241
 80041c0:	08004241 	.word	0x08004241
 80041c4:	08004241 	.word	0x08004241
 80041c8:	08004241 	.word	0x08004241
 80041cc:	08004241 	.word	0x08004241
 80041d0:	08004241 	.word	0x08004241
 80041d4:	08004241 	.word	0x08004241
 80041d8:	08004247 	.word	0x08004247
 80041dc:	08004241 	.word	0x08004241
 80041e0:	08004241 	.word	0x08004241
 80041e4:	08004241 	.word	0x08004241
 80041e8:	08004241 	.word	0x08004241
 80041ec:	08004241 	.word	0x08004241
 80041f0:	08004241 	.word	0x08004241
 80041f4:	08004241 	.word	0x08004241
 80041f8:	08004247 	.word	0x08004247
 80041fc:	08004241 	.word	0x08004241
 8004200:	08004241 	.word	0x08004241
 8004204:	08004241 	.word	0x08004241
 8004208:	08004241 	.word	0x08004241
 800420c:	08004241 	.word	0x08004241
 8004210:	08004241 	.word	0x08004241
 8004214:	08004241 	.word	0x08004241
 8004218:	08004247 	.word	0x08004247
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fdb6 	bl	8004d94 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800422c:	e00c      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fe5f 	bl	8004ef8 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800423e:	e003      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e000      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800424e:	4b32      	ldr	r3, [pc, #200]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425a:	492f      	ldr	r1, [pc, #188]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800425c:	4313      	orrs	r3, r2
 800425e:	654b      	str	r3, [r1, #84]	; 0x54
 8004260:	e001      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d037      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004276:	2b05      	cmp	r3, #5
 8004278:	d820      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	080042c3 	.word	0x080042c3
 8004284:	08004299 	.word	0x08004299
 8004288:	080042ab 	.word	0x080042ab
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042c3 	.word	0x080042c3
 8004294:	080042c3 	.word	0x080042c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	2101      	movs	r1, #1
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fd78 	bl	8004d94 <RCCEx_PLL2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042a8:	e00c      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3324      	adds	r3, #36	; 0x24
 80042ae:	2101      	movs	r1, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe21 	bl	8004ef8 <RCCEx_PLL3_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
      break;
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80042c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f023 0207 	bic.w	r2, r3, #7
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d6:	4910      	ldr	r1, [pc, #64]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	654b      	str	r3, [r1, #84]	; 0x54
 80042dc:	e001      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d040      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d827      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	0800434f 	.word	0x0800434f
 8004304:	08004325 	.word	0x08004325
 8004308:	08004337 	.word	0x08004337
 800430c:	0800434f 	.word	0x0800434f
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800434f 	.word	0x0800434f
 8004318:	58024400 	.word	0x58024400
 800431c:	58024800 	.word	0x58024800
 8004320:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fd32 	bl	8004d94 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004334:	e00c      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2101      	movs	r1, #1
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fddb 	bl	8004ef8 <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004356:	4bb2      	ldr	r3, [pc, #712]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	49ae      	ldr	r1, [pc, #696]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	658b      	str	r3, [r1, #88]	; 0x58
 800436a:	e001      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d044      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004386:	d01b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438c:	d805      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d022      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004398:	e01b      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d01d      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80043a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a4:	d01c      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80043a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043aa:	d01b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80043ac:	e011      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fced 	bl	8004d94 <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043be:	e012      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd96 	bl	8004ef8 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043d0:	e009      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
      break;
 80043d6:	e006      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043d8:	bf00      	nop
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ec:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fa:	4989      	ldr	r1, [pc, #548]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004400:	e001      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d044      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441c:	d01b      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800441e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004422:	d805      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d022      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800442e:	e01b      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	d01d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004436:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800443a:	d01c      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800443c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004440:	d01b      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004442:	e011      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fca2 	bl	8004d94 <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004454:	e012      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3324      	adds	r3, #36	; 0x24
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd4b 	bl	8004ef8 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004466:	e009      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	75fb      	strb	r3, [r7, #23]
      break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800447a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004482:	4b67      	ldr	r3, [pc, #412]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004490:	4963      	ldr	r1, [pc, #396]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	658b      	str	r3, [r1, #88]	; 0x58
 8004496:	e001      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d044      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b2:	d01b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b8:	d805      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d022      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80044be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80044c4:	e01b      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ca:	d01d      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80044cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044d0:	d01c      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80044d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044d6:	d01b      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80044d8:	e011      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc57 	bl	8004d94 <RCCEx_PLL2_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80044ea:	e012      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3324      	adds	r3, #36	; 0x24
 80044f0:	2102      	movs	r1, #2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd00 	bl	8004ef8 <RCCEx_PLL3_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80044fc:	e009      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
      break;
 8004502:	e006      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004504:	bf00      	nop
 8004506:	e004      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004518:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004526:	493e      	ldr	r1, [pc, #248]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	658b      	str	r3, [r1, #88]	; 0x58
 800452c:	e001      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	2102      	movs	r1, #2
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fcd1 	bl	8004ef8 <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456e:	492c      	ldr	r1, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458a:	d10a      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3324      	adds	r3, #36	; 0x24
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fcb0 	bl	8004ef8 <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b0:	491b      	ldr	r1, [pc, #108]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d032      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d00d      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80045ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d2:	d016      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d111      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fbd8 	bl	8004d94 <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80045e8:	e00c      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fc81 	bl	8004ef8 <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80045fa:	e003      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004618:	4901      	ldr	r1, [pc, #4]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	658b      	str	r3, [r1, #88]	; 0x58
 800461e:	e003      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004620:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02f      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463e:	d00c      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004644:	d015      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464a:	d10f      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4b79      	ldr	r3, [pc, #484]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4a78      	ldr	r2, [pc, #480]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004658:	e00c      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	2101      	movs	r1, #1
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fc49 	bl	8004ef8 <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
      break;
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800467a:	4b6e      	ldr	r3, [pc, #440]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004688:	496a      	ldr	r1, [pc, #424]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	654b      	str	r3, [r1, #84]	; 0x54
 800468e:	e001      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d029      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d007      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80046ae:	e00f      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b60      	ldr	r3, [pc, #384]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a5f      	ldr	r2, [pc, #380]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046bc:	e00b      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fb65 	bl	8004d94 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046ce:	e002      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
      break;
 80046d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046dc:	4b55      	ldr	r3, [pc, #340]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	4952      	ldr	r1, [pc, #328]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046ee:	e001      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3324      	adds	r3, #36	; 0x24
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fbf6 	bl	8004ef8 <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02f      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d00c      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800472c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004730:	d802      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004736:	e00d      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d00f      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800473e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004742:	d00e      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004744:	e006      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004746:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	4a3a      	ldr	r2, [pc, #232]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800474c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004752:	e007      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	75fb      	strb	r3, [r7, #23]
      break;
 8004758:	e004      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800476a:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004776:	492f      	ldr	r1, [pc, #188]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	654b      	str	r3, [r1, #84]	; 0x54
 800477c:	e001      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4926      	ldr	r1, [pc, #152]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047ba:	491e      	ldr	r1, [pc, #120]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d8:	4916      	ldr	r1, [pc, #88]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047f4:	6113      	str	r3, [r2, #16]
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004800:	490c      	ldr	r1, [pc, #48]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	da08      	bge.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	4906      	ldr	r1, [pc, #24]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004820:	7dbb      	ldrb	r3, [r7, #22]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	58024400 	.word	0x58024400

08004838 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800483c:	f7ff f8b2 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8004840:	4601      	mov	r1, r0
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800484e:	5cd3      	ldrb	r3, [r2, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	58024400 	.word	0x58024400
 8004860:	0800a4f0 	.word	0x0800a4f0

08004864 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800486c:	4b9d      	ldr	r3, [pc, #628]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004876:	4b9b      	ldr	r3, [pc, #620]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	0b1b      	lsrs	r3, r3, #12
 800487c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004880:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004882:	4b98      	ldr	r3, [pc, #608]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800488e:	4b95      	ldr	r3, [pc, #596]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 810a 	beq.w	8004ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d05a      	beq.n	800496e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d302      	bcc.n	80048c2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d078      	beq.n	80049b2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80048c0:	e099      	b.n	80049f6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048c2:	4b88      	ldr	r3, [pc, #544]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d02d      	beq.n	800492a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048ce:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	08db      	lsrs	r3, r3, #3
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	4a83      	ldr	r2, [pc, #524]	; (8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f8:	4b7a      	ldr	r3, [pc, #488]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004908:	ed97 6a03 	vldr	s12, [r7, #12]
 800490c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004924:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004928:	e087      	b.n	8004a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004934:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004af0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493c:	4b69      	ldr	r3, [pc, #420]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004950:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800496c:	e065      	b.n	8004a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004978:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800497c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004980:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004990:	ed97 6a03 	vldr	s12, [r7, #12]
 8004994:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b0:	e043      	b.n	8004a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80049c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c4:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f4:	e021      	b.n	8004a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a00:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a08:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a38:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	0a5b      	lsrs	r3, r3, #9
 8004a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a60:	ee17 2a90 	vmov	r2, s15
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8e:	ee17 2a90 	vmov	r2, s15
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	0e1b      	lsrs	r3, r3, #24
 8004a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004abc:	ee17 2a90 	vmov	r2, s15
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	3724      	adds	r7, #36	; 0x24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	58024400 	.word	0x58024400
 8004ae8:	03d09000 	.word	0x03d09000
 8004aec:	46000000 	.word	0x46000000
 8004af0:	4c742400 	.word	0x4c742400
 8004af4:	4a742400 	.word	0x4a742400
 8004af8:	4af42400 	.word	0x4af42400

08004afc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b04:	4b9d      	ldr	r3, [pc, #628]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004b0e:	4b9b      	ldr	r3, [pc, #620]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	0d1b      	lsrs	r3, r3, #20
 8004b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b1a:	4b98      	ldr	r3, [pc, #608]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004b26:	4b95      	ldr	r3, [pc, #596]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	08db      	lsrs	r3, r3, #3
 8004b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 810a 	beq.w	8004d5e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d05a      	beq.n	8004c06 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d302      	bcc.n	8004b5a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d078      	beq.n	8004c4a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004b58:	e099      	b.n	8004c8e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b5a:	4b88      	ldr	r3, [pc, #544]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02d      	beq.n	8004bc2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b66:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	4a83      	ldr	r2, [pc, #524]	; (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b90:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bc0:	e087      	b.n	8004cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bcc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd4:	4b69      	ldr	r3, [pc, #420]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c04:	e065      	b.n	8004cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c18:	4b58      	ldr	r3, [pc, #352]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c48:	e043      	b.n	8004cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5c:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c8c:	e021      	b.n	8004cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca0:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cd0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	0a5b      	lsrs	r3, r3, #9
 8004cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf8:	ee17 2a90 	vmov	r2, s15
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d26:	ee17 2a90 	vmov	r2, s15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	0e1b      	lsrs	r3, r3, #24
 8004d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d54:	ee17 2a90 	vmov	r2, s15
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d5c:	e008      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
}
 8004d70:	bf00      	nop
 8004d72:	3724      	adds	r7, #36	; 0x24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	03d09000 	.word	0x03d09000
 8004d84:	46000000 	.word	0x46000000
 8004d88:	4c742400 	.word	0x4c742400
 8004d8c:	4a742400 	.word	0x4a742400
 8004d90:	4af42400 	.word	0x4af42400

08004d94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d101      	bne.n	8004db2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e099      	b.n	8004ee6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004db2:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a4e      	ldr	r2, [pc, #312]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbe:	f7fc f981 	bl	80010c4 <HAL_GetTick>
 8004dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dc6:	f7fc f97d 	bl	80010c4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e086      	b.n	8004ee6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dd8:	4b45      	ldr	r3, [pc, #276]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004de4:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	031b      	lsls	r3, r3, #12
 8004df2:	493f      	ldr	r1, [pc, #252]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	628b      	str	r3, [r1, #40]	; 0x28
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	025b      	lsls	r3, r3, #9
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e28:	4931      	ldr	r1, [pc, #196]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	492d      	ldr	r1, [pc, #180]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f023 0220 	bic.w	r2, r3, #32
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4928      	ldr	r1, [pc, #160]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e52:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f023 0310 	bic.w	r3, r3, #16
 8004e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <RCCEx_PLL2_Config+0x160>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	69d2      	ldr	r2, [r2, #28]
 8004e6a:	00d2      	lsls	r2, r2, #3
 8004e6c:	4920      	ldr	r1, [pc, #128]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e72:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f043 0310 	orr.w	r3, r3, #16
 8004e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e90:	e00f      	b.n	8004eb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ea4:	e005      	b.n	8004eb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fc f901 	bl	80010c4 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ec4:	e008      	b.n	8004ed8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ec6:	f7fc f8fd 	bl	80010c4 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e006      	b.n	8004ee6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <RCCEx_PLL2_Config+0x15c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	ffff0007 	.word	0xffff0007

08004ef8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f06:	4b53      	ldr	r3, [pc, #332]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d101      	bne.n	8004f16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e099      	b.n	800504a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f16:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a4e      	ldr	r2, [pc, #312]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f22:	f7fc f8cf 	bl	80010c4 <HAL_GetTick>
 8004f26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f28:	e008      	b.n	8004f3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f2a:	f7fc f8cb 	bl	80010c4 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e086      	b.n	800504a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f3c:	4b45      	ldr	r3, [pc, #276]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f48:	4b42      	ldr	r3, [pc, #264]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	051b      	lsls	r3, r3, #20
 8004f56:	493f      	ldr	r1, [pc, #252]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	025b      	lsls	r3, r3, #9
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f8c:	4931      	ldr	r1, [pc, #196]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	492d      	ldr	r1, [pc, #180]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4928      	ldr	r1, [pc, #160]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <RCCEx_PLL3_Config+0x160>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	69d2      	ldr	r2, [r2, #28]
 8004fce:	00d2      	lsls	r2, r2, #3
 8004fd0:	4920      	ldr	r1, [pc, #128]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004fee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ff4:	e00f      	b.n	8005016 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a14      	ldr	r2, [pc, #80]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8005002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005008:	e005      	b.n	8005016 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a11      	ldr	r2, [pc, #68]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8005010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005014:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fc f84f 	bl	80010c4 <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005028:	e008      	b.n	800503c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800502a:	f7fc f84b 	bl	80010c4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e006      	b.n	800504a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <RCCEx_PLL3_Config+0x15c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	ffff0007 	.word	0xffff0007

0800505c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e042      	b.n	80050f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fb fe17 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2224      	movs	r2, #36	; 0x24
 800508a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f82c 	bl	80050fc <UART_SetConfig>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e022      	b.n	80050f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fdd0 	bl	8005c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fe57 	bl	8005da0 <UART_CheckIdleState>
 80050f2:	4603      	mov	r3, r0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005100:	b08e      	sub	sp, #56	; 0x38
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4313      	orrs	r3, r2
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800512a:	4313      	orrs	r3, r2
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4bc1      	ldr	r3, [pc, #772]	; (800543c <UART_SetConfig+0x340>)
 8005136:	4013      	ands	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800513e:	430b      	orrs	r3, r1
 8005140:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4ab7      	ldr	r2, [pc, #732]	; (8005440 <UART_SetConfig+0x344>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516e:	4313      	orrs	r3, r2
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	4bb2      	ldr	r3, [pc, #712]	; (8005444 <UART_SetConfig+0x348>)
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005182:	430b      	orrs	r3, r1
 8005184:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	f023 010f 	bic.w	r1, r3, #15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4aa9      	ldr	r2, [pc, #676]	; (8005448 <UART_SetConfig+0x34c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d177      	bne.n	8005296 <UART_SetConfig+0x19a>
 80051a6:	4ba9      	ldr	r3, [pc, #676]	; (800544c <UART_SetConfig+0x350>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ae:	2b28      	cmp	r3, #40	; 0x28
 80051b0:	d86c      	bhi.n	800528c <UART_SetConfig+0x190>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0xbc>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	0800525d 	.word	0x0800525d
 80051bc:	0800528d 	.word	0x0800528d
 80051c0:	0800528d 	.word	0x0800528d
 80051c4:	0800528d 	.word	0x0800528d
 80051c8:	0800528d 	.word	0x0800528d
 80051cc:	0800528d 	.word	0x0800528d
 80051d0:	0800528d 	.word	0x0800528d
 80051d4:	0800528d 	.word	0x0800528d
 80051d8:	08005265 	.word	0x08005265
 80051dc:	0800528d 	.word	0x0800528d
 80051e0:	0800528d 	.word	0x0800528d
 80051e4:	0800528d 	.word	0x0800528d
 80051e8:	0800528d 	.word	0x0800528d
 80051ec:	0800528d 	.word	0x0800528d
 80051f0:	0800528d 	.word	0x0800528d
 80051f4:	0800528d 	.word	0x0800528d
 80051f8:	0800526d 	.word	0x0800526d
 80051fc:	0800528d 	.word	0x0800528d
 8005200:	0800528d 	.word	0x0800528d
 8005204:	0800528d 	.word	0x0800528d
 8005208:	0800528d 	.word	0x0800528d
 800520c:	0800528d 	.word	0x0800528d
 8005210:	0800528d 	.word	0x0800528d
 8005214:	0800528d 	.word	0x0800528d
 8005218:	08005275 	.word	0x08005275
 800521c:	0800528d 	.word	0x0800528d
 8005220:	0800528d 	.word	0x0800528d
 8005224:	0800528d 	.word	0x0800528d
 8005228:	0800528d 	.word	0x0800528d
 800522c:	0800528d 	.word	0x0800528d
 8005230:	0800528d 	.word	0x0800528d
 8005234:	0800528d 	.word	0x0800528d
 8005238:	0800527d 	.word	0x0800527d
 800523c:	0800528d 	.word	0x0800528d
 8005240:	0800528d 	.word	0x0800528d
 8005244:	0800528d 	.word	0x0800528d
 8005248:	0800528d 	.word	0x0800528d
 800524c:	0800528d 	.word	0x0800528d
 8005250:	0800528d 	.word	0x0800528d
 8005254:	0800528d 	.word	0x0800528d
 8005258:	08005285 	.word	0x08005285
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005262:	e233      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005264:	2304      	movs	r3, #4
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e22f      	b.n	80056cc <UART_SetConfig+0x5d0>
 800526c:	2308      	movs	r3, #8
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	e22b      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005274:	2310      	movs	r3, #16
 8005276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527a:	e227      	b.n	80056cc <UART_SetConfig+0x5d0>
 800527c:	2320      	movs	r3, #32
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	e223      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528a:	e21f      	b.n	80056cc <UART_SetConfig+0x5d0>
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005292:	bf00      	nop
 8005294:	e21a      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6d      	ldr	r2, [pc, #436]	; (8005450 <UART_SetConfig+0x354>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d132      	bne.n	8005306 <UART_SetConfig+0x20a>
 80052a0:	4b6a      	ldr	r3, [pc, #424]	; (800544c <UART_SetConfig+0x350>)
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	d827      	bhi.n	80052fc <UART_SetConfig+0x200>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x1b8>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052d5 	.word	0x080052d5
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e1fb      	b.n	80056cc <UART_SetConfig+0x5d0>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e1f7      	b.n	80056cc <UART_SetConfig+0x5d0>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	e1f3      	b.n	80056cc <UART_SetConfig+0x5d0>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ea:	e1ef      	b.n	80056cc <UART_SetConfig+0x5d0>
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f2:	e1eb      	b.n	80056cc <UART_SetConfig+0x5d0>
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fa:	e1e7      	b.n	80056cc <UART_SetConfig+0x5d0>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005302:	bf00      	nop
 8005304:	e1e2      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a52      	ldr	r2, [pc, #328]	; (8005454 <UART_SetConfig+0x358>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d132      	bne.n	8005376 <UART_SetConfig+0x27a>
 8005310:	4b4e      	ldr	r3, [pc, #312]	; (800544c <UART_SetConfig+0x350>)
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	2b05      	cmp	r3, #5
 800531a:	d827      	bhi.n	800536c <UART_SetConfig+0x270>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x228>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005345 	.word	0x08005345
 800532c:	0800534d 	.word	0x0800534d
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e1c3      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e1bf      	b.n	80056cc <UART_SetConfig+0x5d0>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005352:	e1bb      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535a:	e1b7      	b.n	80056cc <UART_SetConfig+0x5d0>
 800535c:	2320      	movs	r3, #32
 800535e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005362:	e1b3      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536a:	e1af      	b.n	80056cc <UART_SetConfig+0x5d0>
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	bf00      	nop
 8005374:	e1aa      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a37      	ldr	r2, [pc, #220]	; (8005458 <UART_SetConfig+0x35c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d132      	bne.n	80053e6 <UART_SetConfig+0x2ea>
 8005380:	4b32      	ldr	r3, [pc, #200]	; (800544c <UART_SetConfig+0x350>)
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	2b05      	cmp	r3, #5
 800538a:	d827      	bhi.n	80053dc <UART_SetConfig+0x2e0>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x298>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b5 	.word	0x080053b5
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e18b      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e187      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	e183      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ca:	e17f      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d2:	e17b      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053da:	e177      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e2:	bf00      	nop
 80053e4:	e172      	b.n	80056cc <UART_SetConfig+0x5d0>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1c      	ldr	r2, [pc, #112]	; (800545c <UART_SetConfig+0x360>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d144      	bne.n	800547a <UART_SetConfig+0x37e>
 80053f0:	4b16      	ldr	r3, [pc, #88]	; (800544c <UART_SetConfig+0x350>)
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	d839      	bhi.n	8005470 <UART_SetConfig+0x374>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x308>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	0800541d 	.word	0x0800541d
 8005408:	08005425 	.word	0x08005425
 800540c:	0800542d 	.word	0x0800542d
 8005410:	08005435 	.word	0x08005435
 8005414:	08005461 	.word	0x08005461
 8005418:	08005469 	.word	0x08005469
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e153      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e14f      	b.n	80056cc <UART_SetConfig+0x5d0>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e14b      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543a:	e147      	b.n	80056cc <UART_SetConfig+0x5d0>
 800543c:	cfff69f3 	.word	0xcfff69f3
 8005440:	58000c00 	.word	0x58000c00
 8005444:	11fff4ff 	.word	0x11fff4ff
 8005448:	40011000 	.word	0x40011000
 800544c:	58024400 	.word	0x58024400
 8005450:	40004400 	.word	0x40004400
 8005454:	40004800 	.word	0x40004800
 8005458:	40004c00 	.word	0x40004c00
 800545c:	40005000 	.word	0x40005000
 8005460:	2320      	movs	r3, #32
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	e131      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	e12d      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005476:	bf00      	nop
 8005478:	e128      	b.n	80056cc <UART_SetConfig+0x5d0>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4ab6      	ldr	r2, [pc, #728]	; (8005758 <UART_SetConfig+0x65c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d178      	bne.n	8005576 <UART_SetConfig+0x47a>
 8005484:	4bb5      	ldr	r3, [pc, #724]	; (800575c <UART_SetConfig+0x660>)
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800548c:	2b28      	cmp	r3, #40	; 0x28
 800548e:	d86d      	bhi.n	800556c <UART_SetConfig+0x470>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <UART_SetConfig+0x39c>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	0800553d 	.word	0x0800553d
 800549c:	0800556d 	.word	0x0800556d
 80054a0:	0800556d 	.word	0x0800556d
 80054a4:	0800556d 	.word	0x0800556d
 80054a8:	0800556d 	.word	0x0800556d
 80054ac:	0800556d 	.word	0x0800556d
 80054b0:	0800556d 	.word	0x0800556d
 80054b4:	0800556d 	.word	0x0800556d
 80054b8:	08005545 	.word	0x08005545
 80054bc:	0800556d 	.word	0x0800556d
 80054c0:	0800556d 	.word	0x0800556d
 80054c4:	0800556d 	.word	0x0800556d
 80054c8:	0800556d 	.word	0x0800556d
 80054cc:	0800556d 	.word	0x0800556d
 80054d0:	0800556d 	.word	0x0800556d
 80054d4:	0800556d 	.word	0x0800556d
 80054d8:	0800554d 	.word	0x0800554d
 80054dc:	0800556d 	.word	0x0800556d
 80054e0:	0800556d 	.word	0x0800556d
 80054e4:	0800556d 	.word	0x0800556d
 80054e8:	0800556d 	.word	0x0800556d
 80054ec:	0800556d 	.word	0x0800556d
 80054f0:	0800556d 	.word	0x0800556d
 80054f4:	0800556d 	.word	0x0800556d
 80054f8:	08005555 	.word	0x08005555
 80054fc:	0800556d 	.word	0x0800556d
 8005500:	0800556d 	.word	0x0800556d
 8005504:	0800556d 	.word	0x0800556d
 8005508:	0800556d 	.word	0x0800556d
 800550c:	0800556d 	.word	0x0800556d
 8005510:	0800556d 	.word	0x0800556d
 8005514:	0800556d 	.word	0x0800556d
 8005518:	0800555d 	.word	0x0800555d
 800551c:	0800556d 	.word	0x0800556d
 8005520:	0800556d 	.word	0x0800556d
 8005524:	0800556d 	.word	0x0800556d
 8005528:	0800556d 	.word	0x0800556d
 800552c:	0800556d 	.word	0x0800556d
 8005530:	0800556d 	.word	0x0800556d
 8005534:	0800556d 	.word	0x0800556d
 8005538:	08005565 	.word	0x08005565
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e0c3      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e0bf      	b.n	80056cc <UART_SetConfig+0x5d0>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005552:	e0bb      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555a:	e0b7      	b.n	80056cc <UART_SetConfig+0x5d0>
 800555c:	2320      	movs	r3, #32
 800555e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005562:	e0b3      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005564:	2340      	movs	r3, #64	; 0x40
 8005566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556a:	e0af      	b.n	80056cc <UART_SetConfig+0x5d0>
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005572:	bf00      	nop
 8005574:	e0aa      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a79      	ldr	r2, [pc, #484]	; (8005760 <UART_SetConfig+0x664>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d132      	bne.n	80055e6 <UART_SetConfig+0x4ea>
 8005580:	4b76      	ldr	r3, [pc, #472]	; (800575c <UART_SetConfig+0x660>)
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	2b05      	cmp	r3, #5
 800558a:	d827      	bhi.n	80055dc <UART_SetConfig+0x4e0>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x498>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055ad 	.word	0x080055ad
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055bd 	.word	0x080055bd
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b2:	e08b      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ba:	e087      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c2:	e083      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ca:	e07f      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055cc:	2320      	movs	r3, #32
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e07b      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055d4:	2340      	movs	r3, #64	; 0x40
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e077      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	bf00      	nop
 80055e4:	e072      	b.n	80056cc <UART_SetConfig+0x5d0>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a5e      	ldr	r2, [pc, #376]	; (8005764 <UART_SetConfig+0x668>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d132      	bne.n	8005656 <UART_SetConfig+0x55a>
 80055f0:	4b5a      	ldr	r3, [pc, #360]	; (800575c <UART_SetConfig+0x660>)
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d827      	bhi.n	800564c <UART_SetConfig+0x550>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x508>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	0800561d 	.word	0x0800561d
 8005608:	08005625 	.word	0x08005625
 800560c:	0800562d 	.word	0x0800562d
 8005610:	08005635 	.word	0x08005635
 8005614:	0800563d 	.word	0x0800563d
 8005618:	08005645 	.word	0x08005645
 800561c:	2300      	movs	r3, #0
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e053      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e04f      	b.n	80056cc <UART_SetConfig+0x5d0>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e04b      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563a:	e047      	b.n	80056cc <UART_SetConfig+0x5d0>
 800563c:	2320      	movs	r3, #32
 800563e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005642:	e043      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005644:	2340      	movs	r3, #64	; 0x40
 8005646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564a:	e03f      	b.n	80056cc <UART_SetConfig+0x5d0>
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005652:	bf00      	nop
 8005654:	e03a      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a43      	ldr	r2, [pc, #268]	; (8005768 <UART_SetConfig+0x66c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d132      	bne.n	80056c6 <UART_SetConfig+0x5ca>
 8005660:	4b3e      	ldr	r3, [pc, #248]	; (800575c <UART_SetConfig+0x660>)
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	2b05      	cmp	r3, #5
 800566a:	d827      	bhi.n	80056bc <UART_SetConfig+0x5c0>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0x578>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	0800568d 	.word	0x0800568d
 8005678:	08005695 	.word	0x08005695
 800567c:	0800569d 	.word	0x0800569d
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056ad 	.word	0x080056ad
 8005688:	080056b5 	.word	0x080056b5
 800568c:	2302      	movs	r3, #2
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e01b      	b.n	80056cc <UART_SetConfig+0x5d0>
 8005694:	2304      	movs	r3, #4
 8005696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569a:	e017      	b.n	80056cc <UART_SetConfig+0x5d0>
 800569c:	2308      	movs	r3, #8
 800569e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a2:	e013      	b.n	80056cc <UART_SetConfig+0x5d0>
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056aa:	e00f      	b.n	80056cc <UART_SetConfig+0x5d0>
 80056ac:	2320      	movs	r3, #32
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b2:	e00b      	b.n	80056cc <UART_SetConfig+0x5d0>
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ba:	e007      	b.n	80056cc <UART_SetConfig+0x5d0>
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c2:	bf00      	nop
 80056c4:	e002      	b.n	80056cc <UART_SetConfig+0x5d0>
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a25      	ldr	r2, [pc, #148]	; (8005768 <UART_SetConfig+0x66c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	f040 80b8 	bne.w	8005848 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d019      	beq.n	8005714 <UART_SetConfig+0x618>
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	dc04      	bgt.n	80056ee <UART_SetConfig+0x5f2>
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d009      	beq.n	80056fc <UART_SetConfig+0x600>
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d00b      	beq.n	8005704 <UART_SetConfig+0x608>
 80056ec:	e042      	b.n	8005774 <UART_SetConfig+0x678>
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d02b      	beq.n	800574a <UART_SetConfig+0x64e>
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d02c      	beq.n	8005750 <UART_SetConfig+0x654>
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d014      	beq.n	8005724 <UART_SetConfig+0x628>
 80056fa:	e03b      	b.n	8005774 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056fc:	f7ff f89c 	bl	8004838 <HAL_RCCEx_GetD3PCLK1Freq>
 8005700:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005702:	e03d      	b.n	8005780 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff f8ab 	bl	8004864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005712:	e035      	b.n	8005780 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff f9ef 	bl	8004afc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005722:	e02d      	b.n	8005780 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <UART_SetConfig+0x660>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <UART_SetConfig+0x660>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <UART_SetConfig+0x670>)
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005742:	e01d      	b.n	8005780 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <UART_SetConfig+0x670>)
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005748:	e01a      	b.n	8005780 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <UART_SetConfig+0x674>)
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800574e:	e017      	b.n	8005780 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005756:	e013      	b.n	8005780 <UART_SetConfig+0x684>
 8005758:	40011400 	.word	0x40011400
 800575c:	58024400 	.word	0x58024400
 8005760:	40007800 	.word	0x40007800
 8005764:	40007c00 	.word	0x40007c00
 8005768:	58000c00 	.word	0x58000c00
 800576c:	03d09000 	.word	0x03d09000
 8005770:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800577e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 824d 	beq.w	8005c22 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	4aad      	ldr	r2, [pc, #692]	; (8005a44 <UART_SetConfig+0x948>)
 800578e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005792:	461a      	mov	r2, r3
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	fbb3 f3f2 	udiv	r3, r3, r2
 800579a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d305      	bcc.n	80057b8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b2:	6a3a      	ldr	r2, [r7, #32]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d903      	bls.n	80057c0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057be:	e230      	b.n	8005c22 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	4618      	mov	r0, r3
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	4a9d      	ldr	r2, [pc, #628]	; (8005a44 <UART_SetConfig+0x948>)
 80057ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f04f 0400 	mov.w	r4, #0
 80057d8:	461a      	mov	r2, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	f7fa fd7c 	bl	80002d8 <__aeabi_uldivmod>
 80057e0:	4603      	mov	r3, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4619      	mov	r1, r3
 80057e6:	4622      	mov	r2, r4
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	f04f 0400 	mov.w	r4, #0
 80057f0:	0214      	lsls	r4, r2, #8
 80057f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057f6:	020b      	lsls	r3, r1, #8
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6852      	ldr	r2, [r2, #4]
 80057fc:	0852      	lsrs	r2, r2, #1
 80057fe:	4611      	mov	r1, r2
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	eb13 0b01 	adds.w	fp, r3, r1
 8005808:	eb44 0c02 	adc.w	ip, r4, r2
 800580c:	4658      	mov	r0, fp
 800580e:	4661      	mov	r1, ip
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f04f 0400 	mov.w	r4, #0
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	f7fa fd5c 	bl	80002d8 <__aeabi_uldivmod>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582c:	d308      	bcc.n	8005840 <UART_SetConfig+0x744>
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005834:	d204      	bcs.n	8005840 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	e1f0      	b.n	8005c22 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005846:	e1ec      	b.n	8005c22 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005850:	f040 8100 	bne.w	8005a54 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	f200 80b7 	bhi.w	80059cc <UART_SetConfig+0x8d0>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x768>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005969 	.word	0x08005969
 8005868:	08005971 	.word	0x08005971
 800586c:	080059cd 	.word	0x080059cd
 8005870:	080059cd 	.word	0x080059cd
 8005874:	08005979 	.word	0x08005979
 8005878:	080059cd 	.word	0x080059cd
 800587c:	080059cd 	.word	0x080059cd
 8005880:	080059cd 	.word	0x080059cd
 8005884:	08005989 	.word	0x08005989
 8005888:	080059cd 	.word	0x080059cd
 800588c:	080059cd 	.word	0x080059cd
 8005890:	080059cd 	.word	0x080059cd
 8005894:	080059cd 	.word	0x080059cd
 8005898:	080059cd 	.word	0x080059cd
 800589c:	080059cd 	.word	0x080059cd
 80058a0:	080059cd 	.word	0x080059cd
 80058a4:	08005999 	.word	0x08005999
 80058a8:	080059cd 	.word	0x080059cd
 80058ac:	080059cd 	.word	0x080059cd
 80058b0:	080059cd 	.word	0x080059cd
 80058b4:	080059cd 	.word	0x080059cd
 80058b8:	080059cd 	.word	0x080059cd
 80058bc:	080059cd 	.word	0x080059cd
 80058c0:	080059cd 	.word	0x080059cd
 80058c4:	080059cd 	.word	0x080059cd
 80058c8:	080059cd 	.word	0x080059cd
 80058cc:	080059cd 	.word	0x080059cd
 80058d0:	080059cd 	.word	0x080059cd
 80058d4:	080059cd 	.word	0x080059cd
 80058d8:	080059cd 	.word	0x080059cd
 80058dc:	080059cd 	.word	0x080059cd
 80058e0:	080059cd 	.word	0x080059cd
 80058e4:	080059bf 	.word	0x080059bf
 80058e8:	080059cd 	.word	0x080059cd
 80058ec:	080059cd 	.word	0x080059cd
 80058f0:	080059cd 	.word	0x080059cd
 80058f4:	080059cd 	.word	0x080059cd
 80058f8:	080059cd 	.word	0x080059cd
 80058fc:	080059cd 	.word	0x080059cd
 8005900:	080059cd 	.word	0x080059cd
 8005904:	080059cd 	.word	0x080059cd
 8005908:	080059cd 	.word	0x080059cd
 800590c:	080059cd 	.word	0x080059cd
 8005910:	080059cd 	.word	0x080059cd
 8005914:	080059cd 	.word	0x080059cd
 8005918:	080059cd 	.word	0x080059cd
 800591c:	080059cd 	.word	0x080059cd
 8005920:	080059cd 	.word	0x080059cd
 8005924:	080059cd 	.word	0x080059cd
 8005928:	080059cd 	.word	0x080059cd
 800592c:	080059cd 	.word	0x080059cd
 8005930:	080059cd 	.word	0x080059cd
 8005934:	080059cd 	.word	0x080059cd
 8005938:	080059cd 	.word	0x080059cd
 800593c:	080059cd 	.word	0x080059cd
 8005940:	080059cd 	.word	0x080059cd
 8005944:	080059cd 	.word	0x080059cd
 8005948:	080059cd 	.word	0x080059cd
 800594c:	080059cd 	.word	0x080059cd
 8005950:	080059cd 	.word	0x080059cd
 8005954:	080059cd 	.word	0x080059cd
 8005958:	080059cd 	.word	0x080059cd
 800595c:	080059cd 	.word	0x080059cd
 8005960:	080059cd 	.word	0x080059cd
 8005964:	080059c5 	.word	0x080059c5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005968:	f7fe f84c 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 800596c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800596e:	e033      	b.n	80059d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe f85e 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8005974:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005976:	e02f      	b.n	80059d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe ff71 	bl	8004864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005986:	e027      	b.n	80059d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff f8b5 	bl	8004afc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005996:	e01f      	b.n	80059d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <UART_SetConfig+0x94c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059a4:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <UART_SetConfig+0x94c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	4a27      	ldr	r2, [pc, #156]	; (8005a4c <UART_SetConfig+0x950>)
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059b6:	e00f      	b.n	80059d8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80059b8:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <UART_SetConfig+0x950>)
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059bc:	e00c      	b.n	80059d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <UART_SetConfig+0x954>)
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059c2:	e009      	b.n	80059d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ca:	e005      	b.n	80059d8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 8121 	beq.w	8005c22 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <UART_SetConfig+0x948>)
 80059e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f2:	005a      	lsls	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	441a      	add	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	2b0f      	cmp	r3, #15
 8005a0c:	d916      	bls.n	8005a3c <UART_SetConfig+0x940>
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d212      	bcs.n	8005a3c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f023 030f 	bic.w	r3, r3, #15
 8005a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a38:	60da      	str	r2, [r3, #12]
 8005a3a:	e0f2      	b.n	8005c22 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a42:	e0ee      	b.n	8005c22 <UART_SetConfig+0xb26>
 8005a44:	0800a500 	.word	0x0800a500
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	03d09000 	.word	0x03d09000
 8005a50:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	f200 80b7 	bhi.w	8005bcc <UART_SetConfig+0xad0>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <UART_SetConfig+0x968>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005b69 	.word	0x08005b69
 8005a68:	08005b71 	.word	0x08005b71
 8005a6c:	08005bcd 	.word	0x08005bcd
 8005a70:	08005bcd 	.word	0x08005bcd
 8005a74:	08005b79 	.word	0x08005b79
 8005a78:	08005bcd 	.word	0x08005bcd
 8005a7c:	08005bcd 	.word	0x08005bcd
 8005a80:	08005bcd 	.word	0x08005bcd
 8005a84:	08005b89 	.word	0x08005b89
 8005a88:	08005bcd 	.word	0x08005bcd
 8005a8c:	08005bcd 	.word	0x08005bcd
 8005a90:	08005bcd 	.word	0x08005bcd
 8005a94:	08005bcd 	.word	0x08005bcd
 8005a98:	08005bcd 	.word	0x08005bcd
 8005a9c:	08005bcd 	.word	0x08005bcd
 8005aa0:	08005bcd 	.word	0x08005bcd
 8005aa4:	08005b99 	.word	0x08005b99
 8005aa8:	08005bcd 	.word	0x08005bcd
 8005aac:	08005bcd 	.word	0x08005bcd
 8005ab0:	08005bcd 	.word	0x08005bcd
 8005ab4:	08005bcd 	.word	0x08005bcd
 8005ab8:	08005bcd 	.word	0x08005bcd
 8005abc:	08005bcd 	.word	0x08005bcd
 8005ac0:	08005bcd 	.word	0x08005bcd
 8005ac4:	08005bcd 	.word	0x08005bcd
 8005ac8:	08005bcd 	.word	0x08005bcd
 8005acc:	08005bcd 	.word	0x08005bcd
 8005ad0:	08005bcd 	.word	0x08005bcd
 8005ad4:	08005bcd 	.word	0x08005bcd
 8005ad8:	08005bcd 	.word	0x08005bcd
 8005adc:	08005bcd 	.word	0x08005bcd
 8005ae0:	08005bcd 	.word	0x08005bcd
 8005ae4:	08005bbf 	.word	0x08005bbf
 8005ae8:	08005bcd 	.word	0x08005bcd
 8005aec:	08005bcd 	.word	0x08005bcd
 8005af0:	08005bcd 	.word	0x08005bcd
 8005af4:	08005bcd 	.word	0x08005bcd
 8005af8:	08005bcd 	.word	0x08005bcd
 8005afc:	08005bcd 	.word	0x08005bcd
 8005b00:	08005bcd 	.word	0x08005bcd
 8005b04:	08005bcd 	.word	0x08005bcd
 8005b08:	08005bcd 	.word	0x08005bcd
 8005b0c:	08005bcd 	.word	0x08005bcd
 8005b10:	08005bcd 	.word	0x08005bcd
 8005b14:	08005bcd 	.word	0x08005bcd
 8005b18:	08005bcd 	.word	0x08005bcd
 8005b1c:	08005bcd 	.word	0x08005bcd
 8005b20:	08005bcd 	.word	0x08005bcd
 8005b24:	08005bcd 	.word	0x08005bcd
 8005b28:	08005bcd 	.word	0x08005bcd
 8005b2c:	08005bcd 	.word	0x08005bcd
 8005b30:	08005bcd 	.word	0x08005bcd
 8005b34:	08005bcd 	.word	0x08005bcd
 8005b38:	08005bcd 	.word	0x08005bcd
 8005b3c:	08005bcd 	.word	0x08005bcd
 8005b40:	08005bcd 	.word	0x08005bcd
 8005b44:	08005bcd 	.word	0x08005bcd
 8005b48:	08005bcd 	.word	0x08005bcd
 8005b4c:	08005bcd 	.word	0x08005bcd
 8005b50:	08005bcd 	.word	0x08005bcd
 8005b54:	08005bcd 	.word	0x08005bcd
 8005b58:	08005bcd 	.word	0x08005bcd
 8005b5c:	08005bcd 	.word	0x08005bcd
 8005b60:	08005bcd 	.word	0x08005bcd
 8005b64:	08005bc5 	.word	0x08005bc5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fd ff4c 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b6e:	e033      	b.n	8005bd8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b70:	f7fd ff5e 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8005b74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b76:	e02f      	b.n	8005bd8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b78:	f107 0314 	add.w	r3, r7, #20
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fe71 	bl	8004864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b86:	e027      	b.n	8005bd8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b88:	f107 0308 	add.w	r3, r7, #8
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe ffb5 	bl	8004afc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b96:	e01f      	b.n	8005bd8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b98:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <UART_SetConfig+0xb50>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ba4:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <UART_SetConfig+0xb50>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <UART_SetConfig+0xb54>)
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bb6:	e00f      	b.n	8005bd8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <UART_SetConfig+0xb54>)
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bbc:	e00c      	b.n	8005bd8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <UART_SetConfig+0xb58>)
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bc2:	e009      	b.n	8005bd8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bca:	e005      	b.n	8005bd8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005bd6:	bf00      	nop
    }

    if (pclk != 0U)
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d021      	beq.n	8005c22 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <UART_SetConfig+0xb5c>)
 8005be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	441a      	add	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	2b0f      	cmp	r3, #15
 8005c08:	d908      	bls.n	8005c1c <UART_SetConfig+0xb20>
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d204      	bcs.n	8005c1c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	e002      	b.n	8005c22 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005c3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3738      	adds	r7, #56	; 0x38
 8005c46:	46bd      	mov	sp, r7
 8005c48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	03d09000 	.word	0x03d09000
 8005c54:	003d0900 	.word	0x003d0900
 8005c58:	0800a500 	.word	0x0800a500

08005c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5a:	d10a      	bne.n	8005d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005db0:	f7fb f988 	bl	80010c4 <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d10e      	bne.n	8005de2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f82c 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e022      	b.n	8005e28 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d10e      	bne.n	8005e0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f816 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e00c      	b.n	8005e28 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e40:	e062      	b.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d05e      	beq.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fb f93b 	bl	80010c4 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d11d      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e6e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e045      	b.n	8005f28 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02e      	beq.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb8:	d126      	bne.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ed2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e00f      	b.n	8005f28 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d08d      	beq.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e027      	b.n	8005f96 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2224      	movs	r2, #36	; 0x24
 8005f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e02d      	b.n	8006016 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2224      	movs	r2, #36	; 0x24
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f850 	bl	800609c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006032:	2302      	movs	r3, #2
 8006034:	e02d      	b.n	8006092 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2224      	movs	r2, #36	; 0x24
 8006042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f812 	bl	800609c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b089      	sub	sp, #36	; 0x24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80060a4:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <UARTEx_SetNbDataToProcess+0xc8>)
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060ae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80060b2:	4a2d      	ldr	r2, [pc, #180]	; (8006168 <UARTEx_SetNbDataToProcess+0xcc>)
 80060b4:	f107 030c 	add.w	r3, r7, #12
 80060b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060bc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d108      	bne.n	80060da <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060d8:	e03d      	b.n	8006156 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060da:	2310      	movs	r3, #16
 80060dc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060de:	2310      	movs	r3, #16
 80060e0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	0e5b      	lsrs	r3, r3, #25
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	0f5b      	lsrs	r3, r3, #29
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006102:	7fbb      	ldrb	r3, [r7, #30]
 8006104:	7f3a      	ldrb	r2, [r7, #28]
 8006106:	f107 0120 	add.w	r1, r7, #32
 800610a:	440a      	add	r2, r1
 800610c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	7f3a      	ldrb	r2, [r7, #28]
 8006116:	f107 0120 	add.w	r1, r7, #32
 800611a:	440a      	add	r2, r1
 800611c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006120:	fb93 f3f2 	sdiv	r3, r3, r2
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800612c:	7ffb      	ldrb	r3, [r7, #31]
 800612e:	7f7a      	ldrb	r2, [r7, #29]
 8006130:	f107 0120 	add.w	r1, r7, #32
 8006134:	440a      	add	r2, r1
 8006136:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	7f7a      	ldrb	r2, [r7, #29]
 8006140:	f107 0120 	add.w	r1, r7, #32
 8006144:	440a      	add	r2, r1
 8006146:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800614a:	fb93 f3f2 	sdiv	r3, r3, r2
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006156:	bf00      	nop
 8006158:	3724      	adds	r7, #36	; 0x24
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	0800a498 	.word	0x0800a498
 8006168:	0800a4a0 	.word	0x0800a4a0

0800616c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800616c:	b084      	sub	sp, #16
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	f107 001c 	add.w	r0, r7, #28
 800617a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b01      	cmp	r3, #1
 8006182:	d120      	bne.n	80061c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	4b25      	ldr	r3, [pc, #148]	; (800622c <USB_CoreInit+0xc0>)
 8006196:	4013      	ands	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d105      	bne.n	80061ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fabe 	bl	800773c <USB_CoreReset>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
 80061c4:	e01a      	b.n	80061fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fab2 	bl	800773c <USB_CoreReset>
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
 80061ee:	e005      	b.n	80061fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d10b      	bne.n	800621a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f043 0206 	orr.w	r2, r3, #6
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006226:	b004      	add	sp, #16
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	ffbdffbf 	.word	0xffbdffbf

08006230 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d165      	bne.n	8006310 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a41      	ldr	r2, [pc, #260]	; (800634c <USB_SetTurnaroundTime+0x11c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d906      	bls.n	800625a <USB_SetTurnaroundTime+0x2a>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4a40      	ldr	r2, [pc, #256]	; (8006350 <USB_SetTurnaroundTime+0x120>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d802      	bhi.n	800625a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006254:	230f      	movs	r3, #15
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e062      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4a3c      	ldr	r2, [pc, #240]	; (8006350 <USB_SetTurnaroundTime+0x120>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d906      	bls.n	8006270 <USB_SetTurnaroundTime+0x40>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4a3b      	ldr	r2, [pc, #236]	; (8006354 <USB_SetTurnaroundTime+0x124>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d802      	bhi.n	8006270 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800626a:	230e      	movs	r3, #14
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e057      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4a38      	ldr	r2, [pc, #224]	; (8006354 <USB_SetTurnaroundTime+0x124>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d906      	bls.n	8006286 <USB_SetTurnaroundTime+0x56>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4a37      	ldr	r2, [pc, #220]	; (8006358 <USB_SetTurnaroundTime+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d802      	bhi.n	8006286 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006280:	230d      	movs	r3, #13
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e04c      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4a33      	ldr	r2, [pc, #204]	; (8006358 <USB_SetTurnaroundTime+0x128>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d906      	bls.n	800629c <USB_SetTurnaroundTime+0x6c>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4a32      	ldr	r2, [pc, #200]	; (800635c <USB_SetTurnaroundTime+0x12c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d802      	bhi.n	800629c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006296:	230c      	movs	r3, #12
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	e041      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4a2f      	ldr	r2, [pc, #188]	; (800635c <USB_SetTurnaroundTime+0x12c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d906      	bls.n	80062b2 <USB_SetTurnaroundTime+0x82>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4a2e      	ldr	r2, [pc, #184]	; (8006360 <USB_SetTurnaroundTime+0x130>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d802      	bhi.n	80062b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062ac:	230b      	movs	r3, #11
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	e036      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <USB_SetTurnaroundTime+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d906      	bls.n	80062c8 <USB_SetTurnaroundTime+0x98>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <USB_SetTurnaroundTime+0x134>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d802      	bhi.n	80062c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062c2:	230a      	movs	r3, #10
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	e02b      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4a26      	ldr	r2, [pc, #152]	; (8006364 <USB_SetTurnaroundTime+0x134>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d906      	bls.n	80062de <USB_SetTurnaroundTime+0xae>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4a25      	ldr	r2, [pc, #148]	; (8006368 <USB_SetTurnaroundTime+0x138>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d802      	bhi.n	80062de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062d8:	2309      	movs	r3, #9
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e020      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4a21      	ldr	r2, [pc, #132]	; (8006368 <USB_SetTurnaroundTime+0x138>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d906      	bls.n	80062f4 <USB_SetTurnaroundTime+0xc4>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4a20      	ldr	r2, [pc, #128]	; (800636c <USB_SetTurnaroundTime+0x13c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d802      	bhi.n	80062f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062ee:	2308      	movs	r3, #8
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e015      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a1d      	ldr	r2, [pc, #116]	; (800636c <USB_SetTurnaroundTime+0x13c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d906      	bls.n	800630a <USB_SetTurnaroundTime+0xda>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <USB_SetTurnaroundTime+0x140>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d802      	bhi.n	800630a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006304:	2307      	movs	r3, #7
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e00a      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800630a:	2306      	movs	r3, #6
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e007      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006316:	2309      	movs	r3, #9
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e001      	b.n	8006320 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800631c:	2309      	movs	r3, #9
 800631e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006338:	431a      	orrs	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	00d8acbf 	.word	0x00d8acbf
 8006350:	00e4e1bf 	.word	0x00e4e1bf
 8006354:	00f423ff 	.word	0x00f423ff
 8006358:	0106737f 	.word	0x0106737f
 800635c:	011a499f 	.word	0x011a499f
 8006360:	01312cff 	.word	0x01312cff
 8006364:	014ca43f 	.word	0x014ca43f
 8006368:	016e35ff 	.word	0x016e35ff
 800636c:	01a6ab1f 	.word	0x01a6ab1f
 8006370:	01e847ff 	.word	0x01e847ff

08006374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d106      	bne.n	80063e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e00b      	b.n	80063fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	e001      	b.n	80063fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e003      	b.n	8006404 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80063fc:	2032      	movs	r0, #50	; 0x32
 80063fe:	f7fa fe6d 	bl	80010dc <HAL_Delay>

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e009      	b.n	8006440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3340      	adds	r3, #64	; 0x40
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3301      	adds	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b0e      	cmp	r3, #14
 8006444:	d9f2      	bls.n	800642c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11c      	bne.n	8006486 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645a:	f043 0302 	orr.w	r3, r3, #2
 800645e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e005      	b.n	8006492 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	4619      	mov	r1, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ac:	461a      	mov	r2, r3
 80064ae:	680b      	ldr	r3, [r1, #0]
 80064b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10c      	bne.n	80064d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064be:	2100      	movs	r1, #0
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f949 	bl	8006758 <USB_SetDevSpeed>
 80064c6:	e008      	b.n	80064da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064c8:	2101      	movs	r1, #1
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f944 	bl	8006758 <USB_SetDevSpeed>
 80064d0:	e003      	b.n	80064da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064d2:	2103      	movs	r1, #3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f93f 	bl	8006758 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064da:	2110      	movs	r1, #16
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8f3 	bl	80066c8 <USB_FlushTxFifo>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f911 	bl	8006714 <USB_FlushRxFifo>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	461a      	mov	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	e043      	b.n	80065ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653c:	d118      	bne.n	8006570 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e013      	b.n	8006582 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	461a      	mov	r2, r3
 8006568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e008      	b.n	8006582 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	461a      	mov	r2, r3
 800657e:	2300      	movs	r3, #0
 8006580:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	461a      	mov	r2, r3
 8006590:	2300      	movs	r3, #0
 8006592:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	461a      	mov	r2, r3
 80065a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3301      	adds	r3, #1
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d3b7      	bcc.n	8006526 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e043      	b.n	8006644 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d2:	d118      	bne.n	8006606 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e013      	b.n	8006618 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	461a      	mov	r2, r3
 80065fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e008      	b.n	8006618 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	461a      	mov	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	461a      	mov	r2, r3
 8006638:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800663c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3301      	adds	r3, #1
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	d3b7      	bcc.n	80065bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800665a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800665e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800666c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f043 0210 	orr.w	r2, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <USB_DevInit+0x2b4>)
 8006686:	4313      	orrs	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f043 0208 	orr.w	r2, r3, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d105      	bne.n	80066b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <USB_DevInit+0x2b8>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066bc:	b004      	add	sp, #16
 80066be:	4770      	bx	lr
 80066c0:	803c3800 	.word	0x803c3800
 80066c4:	40000004 	.word	0x40000004

080066c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	019b      	lsls	r3, r3, #6
 80066da:	f043 0220 	orr.w	r2, r3, #32
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a09      	ldr	r2, [pc, #36]	; (8006710 <USB_FlushTxFifo+0x48>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d0f0      	beq.n	80066e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	00030d40 	.word	0x00030d40

08006714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2210      	movs	r2, #16
 8006724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <USB_FlushRxFifo+0x40>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d901      	bls.n	8006738 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d0f0      	beq.n	8006726 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	00030d40 	.word	0x00030d40

08006758 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006778:	4313      	orrs	r3, r2
 800677a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b087      	sub	sp, #28
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0306 	and.w	r3, r3, #6
 80067a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
 80067ae:	e00a      	b.n	80067c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d002      	beq.n	80067bc <USB_GetDevSpeed+0x32>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b06      	cmp	r3, #6
 80067ba:	d102      	bne.n	80067c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067bc:	2302      	movs	r3, #2
 80067be:	75fb      	strb	r3, [r7, #23]
 80067c0:	e001      	b.n	80067c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067c2:	230f      	movs	r3, #15
 80067c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d139      	bne.n	8006864 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f303 	lsl.w	r3, r1, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800680e:	4313      	orrs	r3, r2
 8006810:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d153      	bne.n	80068d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	78db      	ldrb	r3, [r3, #3]
 8006842:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006844:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	059b      	lsls	r3, r3, #22
 800684a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800684c:	431a      	orrs	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	0159      	lsls	r1, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	440b      	add	r3, r1
 8006856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685a:	4619      	mov	r1, r3
 800685c:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <USB_ActivateEndpoint+0x10c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]
 8006862:	e035      	b.n	80068d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	69da      	ldr	r2, [r3, #28]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	2101      	movs	r1, #1
 8006876:	fa01 f303 	lsl.w	r3, r1, r3
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006882:	4313      	orrs	r3, r2
 8006884:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d119      	bne.n	80068d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	78db      	ldrb	r3, [r3, #3]
 80068b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068b8:	430b      	orrs	r3, r1
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	0159      	lsls	r1, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	440b      	add	r3, r1
 80068c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c8:	4619      	mov	r1, r3
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <USB_ActivateEndpoint+0x10c>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	10008000 	.word	0x10008000

080068e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d161      	bne.n	80069c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006916:	d11f      	bne.n	8006958 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006936:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006956:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	2101      	movs	r1, #1
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	b29b      	uxth	r3, r3
 8006970:	43db      	mvns	r3, r3
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006978:	4013      	ands	r3, r2
 800697a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	2101      	movs	r1, #1
 800698e:	fa01 f303 	lsl.w	r3, r1, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	68f9      	ldr	r1, [r7, #12]
 8006998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800699c:	4013      	ands	r3, r2
 800699e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	0159      	lsls	r1, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	440b      	add	r3, r1
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	4619      	mov	r1, r3
 80069bc:	4b35      	ldr	r3, [pc, #212]	; (8006a94 <USB_DeactivateEndpoint+0x1b0>)
 80069be:	4013      	ands	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]
 80069c2:	e060      	b.n	8006a86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069da:	d11f      	bne.n	8006a1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	43db      	mvns	r3, r3
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	2101      	movs	r1, #1
 8006a52:	fa01 f303 	lsl.w	r3, r1, r3
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a60:	4013      	ands	r3, r2
 8006a62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	0159      	lsls	r1, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	440b      	add	r3, r1
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <USB_DeactivateEndpoint+0x1b4>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	ec337800 	.word	0xec337800
 8006a98:	eff37800 	.word	0xeff37800

08006a9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	; 0x28
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	f040 8163 	bne.w	8006d84 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d132      	bne.n	8006b2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	0159      	lsls	r1, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	440b      	add	r3, r1
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4ba5      	ldr	r3, [pc, #660]	; (8006d78 <USB_EPStartXfer+0x2dc>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	0159      	lsls	r1, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	440b      	add	r3, r1
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b22:	4619      	mov	r1, r3
 8006b24:	4b95      	ldr	r3, [pc, #596]	; (8006d7c <USB_EPStartXfer+0x2e0>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	610b      	str	r3, [r1, #16]
 8006b2a:	e074      	b.n	8006c16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	0159      	lsls	r1, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	440b      	add	r3, r1
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	4619      	mov	r1, r3
 8006b48:	4b8c      	ldr	r3, [pc, #560]	; (8006d7c <USB_EPStartXfer+0x2e0>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	0159      	lsls	r1, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	440b      	add	r3, r1
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4b83      	ldr	r3, [pc, #524]	; (8006d78 <USB_EPStartXfer+0x2dc>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6959      	ldr	r1, [r3, #20]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	440b      	add	r3, r1
 8006b88:	1e59      	subs	r1, r3, #1
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b92:	04d9      	lsls	r1, r3, #19
 8006b94:	4b7a      	ldr	r3, [pc, #488]	; (8006d80 <USB_EPStartXfer+0x2e4>)
 8006b96:	400b      	ands	r3, r1
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	0148      	lsls	r0, r1, #5
 8006b9c:	69f9      	ldr	r1, [r7, #28]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	0148      	lsls	r0, r1, #5
 8006bc2:	69f9      	ldr	r1, [r7, #28]
 8006bc4:	4401      	add	r1, r0
 8006bc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	78db      	ldrb	r3, [r3, #3]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d11f      	bne.n	8006c16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bf4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d14b      	bne.n	8006cb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	461a      	mov	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d128      	bne.n	8006c92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d110      	bne.n	8006c72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e00f      	b.n	8006c92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	e133      	b.n	8006f1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	78db      	ldrb	r3, [r3, #3]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d015      	beq.n	8006d08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 811b 	beq.w	8006f1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d02:	4313      	orrs	r3, r2
 8006d04:	634b      	str	r3, [r1, #52]	; 0x34
 8006d06:	e109      	b.n	8006f1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d110      	bne.n	8006d3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	e00f      	b.n	8006d5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68d9      	ldr	r1, [r3, #12]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	781a      	ldrb	r2, [r3, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	b298      	uxth	r0, r3
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fa38 	bl	80071e4 <USB_WritePacket>
 8006d74:	e0d2      	b.n	8006f1c <USB_EPStartXfer+0x480>
 8006d76:	bf00      	nop
 8006d78:	e007ffff 	.word	0xe007ffff
 8006d7c:	fff80000 	.word	0xfff80000
 8006d80:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	0159      	lsls	r1, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	440b      	add	r3, r1
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4b61      	ldr	r3, [pc, #388]	; (8006f28 <USB_EPStartXfer+0x48c>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	0159      	lsls	r1, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	440b      	add	r3, r1
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4b5a      	ldr	r3, [pc, #360]	; (8006f2c <USB_EPStartXfer+0x490>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d123      	bne.n	8006e18 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de6:	69b9      	ldr	r1, [r7, #24]
 8006de8:	0148      	lsls	r0, r1, #5
 8006dea:	69f9      	ldr	r1, [r7, #28]
 8006dec:	4401      	add	r1, r0
 8006dee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006df2:	4313      	orrs	r3, r2
 8006df4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e14:	6113      	str	r3, [r2, #16]
 8006e16:	e033      	b.n	8006e80 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	1e5a      	subs	r2, r3, #1
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	8afb      	ldrh	r3, [r7, #22]
 8006e3e:	04d9      	lsls	r1, r3, #19
 8006e40:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <USB_EPStartXfer+0x494>)
 8006e42:	400b      	ands	r3, r1
 8006e44:	69b9      	ldr	r1, [r7, #24]
 8006e46:	0148      	lsls	r0, r1, #5
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	4401      	add	r1, r0
 8006e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e50:	4313      	orrs	r3, r2
 8006e52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	8af9      	ldrh	r1, [r7, #22]
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	0148      	lsls	r0, r1, #5
 8006e74:	69f9      	ldr	r1, [r7, #28]
 8006e76:	4401      	add	r1, r0
 8006e78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d10d      	bne.n	8006ea2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68d9      	ldr	r1, [r3, #12]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	78db      	ldrb	r3, [r3, #3]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d128      	bne.n	8006efc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d110      	bne.n	8006edc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e00f      	b.n	8006efc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	fff80000 	.word	0xfff80000
 8006f2c:	e007ffff 	.word	0xe007ffff
 8006f30:	1ff80000 	.word	0x1ff80000

08006f34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f040 80cd 	bne.w	80070f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d132      	bne.n	8006fc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	0159      	lsls	r1, r3, #5
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	440b      	add	r3, r1
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4b98      	ldr	r3, [pc, #608]	; (80071dc <USB_EP0StartXfer+0x2a8>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	691a      	ldr	r2, [r3, #16]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	0159      	lsls	r1, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	440b      	add	r3, r1
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4b88      	ldr	r3, [pc, #544]	; (80071e0 <USB_EP0StartXfer+0x2ac>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	610b      	str	r3, [r1, #16]
 8006fc2:	e04e      	b.n	8007062 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	0159      	lsls	r1, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	440b      	add	r3, r1
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4b7f      	ldr	r3, [pc, #508]	; (80071e0 <USB_EP0StartXfer+0x2ac>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	0159      	lsls	r1, r3, #5
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	4619      	mov	r1, r3
 8007002:	4b76      	ldr	r3, [pc, #472]	; (80071dc <USB_EP0StartXfer+0x2a8>)
 8007004:	4013      	ands	r3, r2
 8007006:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d903      	bls.n	800701c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800703a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007052:	6939      	ldr	r1, [r7, #16]
 8007054:	0148      	lsls	r0, r1, #5
 8007056:	6979      	ldr	r1, [r7, #20]
 8007058:	4401      	add	r1, r0
 800705a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d11e      	bne.n	80070a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	461a      	mov	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e092      	b.n	80071cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d07e      	beq.n	80071cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2101      	movs	r1, #1
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ea:	4313      	orrs	r3, r2
 80070ec:	634b      	str	r3, [r1, #52]	; 0x34
 80070ee:	e06d      	b.n	80071cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	0159      	lsls	r1, r3, #5
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	440b      	add	r3, r1
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	4619      	mov	r1, r3
 800710c:	4b34      	ldr	r3, [pc, #208]	; (80071e0 <USB_EP0StartXfer+0x2ac>)
 800710e:	4013      	ands	r3, r2
 8007110:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	0159      	lsls	r1, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	440b      	add	r3, r1
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	4619      	mov	r1, r3
 800712e:	4b2b      	ldr	r3, [pc, #172]	; (80071dc <USB_EP0StartXfer+0x2a8>)
 8007130:	4013      	ands	r3, r2
 8007132:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007162:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717a:	6939      	ldr	r1, [r7, #16]
 800717c:	0148      	lsls	r0, r1, #5
 800717e:	6979      	ldr	r1, [r7, #20]
 8007180:	4401      	add	r1, r0
 8007182:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007186:	4313      	orrs	r3, r2
 8007188:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d10d      	bne.n	80071ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	68d9      	ldr	r1, [r3, #12]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	460a      	mov	r2, r1
 80071aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	e007ffff 	.word	0xe007ffff
 80071e0:	fff80000 	.word	0xfff80000

080071e4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b089      	sub	sp, #36	; 0x24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4611      	mov	r1, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	460b      	mov	r3, r1
 80071f4:	71fb      	strb	r3, [r7, #7]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007202:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d11a      	bne.n	8007240 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800720a:	88bb      	ldrh	r3, [r7, #4]
 800720c:	3303      	adds	r3, #3
 800720e:	089b      	lsrs	r3, r3, #2
 8007210:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	e00f      	b.n	8007238 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	031a      	lsls	r2, r3, #12
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007224:	461a      	mov	r2, r3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	3304      	adds	r3, #4
 8007230:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	3301      	adds	r3, #1
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d3eb      	bcc.n	8007218 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	; 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800724e:	b480      	push	{r7}
 8007250:	b089      	sub	sp, #36	; 0x24
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	4613      	mov	r3, r2
 800725a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	3303      	adds	r3, #3
 8007268:	089b      	lsrs	r3, r3, #2
 800726a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800726c:	2300      	movs	r3, #0
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e00b      	b.n	800728a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	601a      	str	r2, [r3, #0]
    pDest++;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3304      	adds	r3, #4
 8007282:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	3301      	adds	r3, #1
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	429a      	cmp	r2, r3
 8007290:	d3ef      	bcc.n	8007272 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007292:	69fb      	ldr	r3, [r7, #28]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3724      	adds	r7, #36	; 0x24
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d12c      	bne.n	8007316 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	db12      	blt.n	80072f4 <USB_EPSetStall+0x54>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00f      	beq.n	80072f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	e02b      	b.n	800736e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	db12      	blt.n	800734e <USB_EPSetStall+0xae>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00f      	beq.n	800734e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800734c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800736c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d128      	bne.n	80073ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	78db      	ldrb	r3, [r3, #3]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d003      	beq.n	80073c8 <USB_EPClearStall+0x4c>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	78db      	ldrb	r3, [r3, #3]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d138      	bne.n	800743a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	e027      	b.n	800743a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007408:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	78db      	ldrb	r3, [r3, #3]
 800740e:	2b03      	cmp	r3, #3
 8007410:	d003      	beq.n	800741a <USB_EPClearStall+0x9e>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	78db      	ldrb	r3, [r3, #3]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d10f      	bne.n	800743a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007438:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007466:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800746a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800747c:	68f9      	ldr	r1, [r7, #12]
 800747e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ae:	f023 0302 	bic.w	r3, r3, #2
 80074b2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80074b4:	2003      	movs	r0, #3
 80074b6:	f7f9 fe11 	bl	80010dc <HAL_Delay>

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074de:	f043 0302 	orr.w	r3, r3, #2
 80074e2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80074e4:	2003      	movs	r0, #3
 80074e6:	f7f9 fdf9 	bl	80010dc <HAL_Delay>

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4013      	ands	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800750c:	68fb      	ldr	r3, [r7, #12]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	0c1b      	lsrs	r3, r3, #16
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	4013      	ands	r3, r2
 8007570:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	b29b      	uxth	r3, r3
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4013      	ands	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075b0:	68bb      	ldr	r3, [r7, #8]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	fa22 f303 	lsr.w	r3, r2, r3
 80075ee:	01db      	lsls	r3, r3, #7
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4013      	ands	r3, r2
 800760a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800760c:	68bb      	ldr	r3, [r7, #8]
}
 800760e:	4618      	mov	r0, r3
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0301 	and.w	r3, r3, #1
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	4619      	mov	r1, r3
 8007654:	4b09      	ldr	r3, [pc, #36]	; (800767c <USB_ActivateSetup+0x44>)
 8007656:	4013      	ands	r3, r2
 8007658:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800766c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	fffff800 	.word	0xfffff800

08007680 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	460b      	mov	r3, r1
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	333c      	adds	r3, #60	; 0x3c
 8007696:	3304      	adds	r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4a26      	ldr	r2, [pc, #152]	; (8007738 <USB_EP0_OutStart+0xb8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d90a      	bls.n	80076ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076b4:	d101      	bne.n	80076ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e037      	b.n	800772a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c0:	461a      	mov	r2, r3
 80076c2:	2300      	movs	r3, #0
 80076c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e8:	f043 0318 	orr.w	r3, r3, #24
 80076ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007700:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d10f      	bne.n	8007728 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007722:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	4f54300a 	.word	0x4f54300a

0800773c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <USB_CoreReset+0x64>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e01b      	b.n	8007792 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	daf2      	bge.n	8007748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f043 0201 	orr.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <USB_CoreReset+0x64>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d0f0      	beq.n	8007772 <USB_CoreReset+0x36>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	00030d40 	.word	0x00030d40

080077a4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80077b0:	2010      	movs	r0, #16
 80077b2:	f002 fd91 	bl	800a2d8 <malloc>
 80077b6:	4603      	mov	r3, r0
 80077b8:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d105      	bne.n	80077cc <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077c8:	2302      	movs	r3, #2
 80077ca:	e01b      	b.n	8007804 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c1b      	ldrb	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2207      	movs	r2, #7
 80077e0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80077e2:	e002      	b.n	80077ea <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220a      	movs	r2, #10
 80077e8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80077ea:	2304      	movs	r3, #4
 80077ec:	2203      	movs	r2, #3
 80077ee:	2181      	movs	r1, #129	; 0x81
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fd9c 	bl	800932e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007818:	2181      	movs	r1, #129	; 0x81
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fdad 	bl	800937a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800783c:	4618      	mov	r0, r3
 800783e:	f002 fd53 	bl	800a2e8 <free>
    pdev->pClassData = NULL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007864:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007876:	2b00      	cmp	r3, #0
 8007878:	d045      	beq.n	8007906 <USBD_HID_Setup+0xb2>
 800787a:	2b20      	cmp	r3, #32
 800787c:	f040 80d4 	bne.w	8007a28 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	3b02      	subs	r3, #2
 8007886:	2b09      	cmp	r3, #9
 8007888:	d835      	bhi.n	80078f6 <USBD_HID_Setup+0xa2>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <USBD_HID_Setup+0x3c>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078e7 	.word	0x080078e7
 8007894:	080078c7 	.word	0x080078c7
 8007898:	080078f7 	.word	0x080078f7
 800789c:	080078f7 	.word	0x080078f7
 80078a0:	080078f7 	.word	0x080078f7
 80078a4:	080078f7 	.word	0x080078f7
 80078a8:	080078f7 	.word	0x080078f7
 80078ac:	080078f7 	.word	0x080078f7
 80078b0:	080078d5 	.word	0x080078d5
 80078b4:	080078b9 	.word	0x080078b9
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	885b      	ldrh	r3, [r3, #2]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]
      break;
 80078c4:	e01e      	b.n	8007904 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f9c8 	bl	8008c62 <USBD_CtlSendData>
      break;
 80078d2:	e017      	b.n	8007904 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	0a1b      	lsrs	r3, r3, #8
 80078da:	b29b      	uxth	r3, r3
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	605a      	str	r2, [r3, #4]
      break;
 80078e4:	e00e      	b.n	8007904 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3304      	adds	r3, #4
 80078ea:	2201      	movs	r2, #1
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 f9b7 	bl	8008c62 <USBD_CtlSendData>
      break;
 80078f4:	e006      	b.n	8007904 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f941 	bl	8008b80 <USBD_CtlError>
      ret = USBD_FAIL;
 80078fe:	2303      	movs	r3, #3
 8007900:	75fb      	strb	r3, [r7, #23]
      break;
 8007902:	bf00      	nop
    }
    break;
 8007904:	e097      	b.n	8007a36 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	2b0b      	cmp	r3, #11
 800790c:	f200 8083 	bhi.w	8007a16 <USBD_HID_Setup+0x1c2>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USBD_HID_Setup+0xc4>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007949 	.word	0x08007949
 800791c:	08007a25 	.word	0x08007a25
 8007920:	08007a17 	.word	0x08007a17
 8007924:	08007a17 	.word	0x08007a17
 8007928:	08007a17 	.word	0x08007a17
 800792c:	08007a17 	.word	0x08007a17
 8007930:	08007971 	.word	0x08007971
 8007934:	08007a17 	.word	0x08007a17
 8007938:	08007a17 	.word	0x08007a17
 800793c:	08007a17 	.word	0x08007a17
 8007940:	080079c9 	.word	0x080079c9
 8007944:	080079f1 	.word	0x080079f1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794e:	2b03      	cmp	r3, #3
 8007950:	d107      	bne.n	8007962 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007952:	f107 030a 	add.w	r3, r7, #10
 8007956:	2202      	movs	r2, #2
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f981 	bl	8008c62 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007960:	e061      	b.n	8007a26 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 f90b 	bl	8008b80 <USBD_CtlError>
        ret = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	75fb      	strb	r3, [r7, #23]
      break;
 800796e:	e05a      	b.n	8007a26 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	885b      	ldrh	r3, [r3, #2]
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b22      	cmp	r3, #34	; 0x22
 800797a:	d108      	bne.n	800798e <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	88db      	ldrh	r3, [r3, #6]
 8007980:	2b4a      	cmp	r3, #74	; 0x4a
 8007982:	bf28      	it	cs
 8007984:	234a      	movcs	r3, #74	; 0x4a
 8007986:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8007988:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <USBD_HID_Setup+0x1ec>)
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	e015      	b.n	80079ba <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b21      	cmp	r3, #33	; 0x21
 8007998:	d108      	bne.n	80079ac <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800799a:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <USBD_HID_Setup+0x1f0>)
 800799c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88db      	ldrh	r3, [r3, #6]
 80079a2:	2b09      	cmp	r3, #9
 80079a4:	bf28      	it	cs
 80079a6:	2309      	movcs	r3, #9
 80079a8:	82bb      	strh	r3, [r7, #20]
 80079aa:	e006      	b.n	80079ba <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f8e6 	bl	8008b80 <USBD_CtlError>
        ret = USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	75fb      	strb	r3, [r7, #23]
        break;
 80079b8:	e035      	b.n	8007a26 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079ba:	8abb      	ldrh	r3, [r7, #20]
 80079bc:	461a      	mov	r2, r3
 80079be:	6939      	ldr	r1, [r7, #16]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f94e 	bl	8008c62 <USBD_CtlSendData>
      break;
 80079c6:	e02e      	b.n	8007a26 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d107      	bne.n	80079e2 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3308      	adds	r3, #8
 80079d6:	2201      	movs	r2, #1
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 f941 	bl	8008c62 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80079e0:	e021      	b.n	8007a26 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f8cb 	bl	8008b80 <USBD_CtlError>
        ret = USBD_FAIL;
 80079ea:	2303      	movs	r3, #3
 80079ec:	75fb      	strb	r3, [r7, #23]
      break;
 80079ee:	e01a      	b.n	8007a26 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d106      	bne.n	8007a08 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a06:	e00e      	b.n	8007a26 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 f8b8 	bl	8008b80 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	75fb      	strb	r3, [r7, #23]
      break;
 8007a14:	e007      	b.n	8007a26 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f8b1 	bl	8008b80 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	75fb      	strb	r3, [r7, #23]
      break;
 8007a22:	e000      	b.n	8007a26 <USBD_HID_Setup+0x1d2>
      break;
 8007a24:	bf00      	nop
    }
    break;
 8007a26:	e006      	b.n	8007a36 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f8a8 	bl	8008b80 <USBD_CtlError>
    ret = USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	75fb      	strb	r3, [r7, #23]
    break;
 8007a34:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	240000cc 	.word	0x240000cc
 8007a44:	240000b4 	.word	0x240000b4

08007a48 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d10c      	bne.n	8007a82 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	7b1b      	ldrb	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d108      	bne.n	8007a82 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2201      	movs	r2, #1
 8007a74:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	2181      	movs	r1, #129	; 0x81
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f001 fd24 	bl	80094ca <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	7c1b      	ldrb	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e001      	b.n	8007aa6 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8007aa2:	230a      	movs	r3, #10
 8007aa4:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2222      	movs	r2, #34	; 0x22
 8007ac0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007ac2:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	24000048 	.word	0x24000048

08007ad4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2222      	movs	r2, #34	; 0x22
 8007ae0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007ae2:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	2400006c 	.word	0x2400006c

08007af4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2222      	movs	r2, #34	; 0x22
 8007b00:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	24000090 	.word	0x24000090

08007b14 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b26:	2200      	movs	r2, #0
 8007b28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	220a      	movs	r2, #10
 8007b44:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	240000c0 	.word	0x240000c0

08007b58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e025      	b.n	8007bbc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	79fa      	ldrb	r2, [r7, #7]
 8007bae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f001 fb51 	bl	8009258 <USBD_LL_Init>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e010      	b.n	8007bfe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	f107 020e 	add.w	r2, r7, #14
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fb72 	bl	80092f8 <USBD_LL_Start>
 8007c14:	4603      	mov	r3, r0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	4611      	mov	r1, r2
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
  }

  return USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 ff2c 	bl	8008b0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d00e      	beq.n	8007cf6 <USBD_LL_SetupStage+0x5a>
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d302      	bcc.n	8007ce2 <USBD_LL_SetupStage+0x46>
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d014      	beq.n	8007d0a <USBD_LL_SetupStage+0x6e>
 8007ce0:	e01d      	b.n	8007d1e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa18 	bl	8008120 <USBD_StdDevReq>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf4:	e020      	b.n	8007d38 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa7c 	bl	80081fc <USBD_StdItfReq>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
      break;
 8007d08:	e016      	b.n	8007d38 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fab8 	bl	8008288 <USBD_StdEPReq>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1c:	e00c      	b.n	8007d38 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fb43 	bl	80093b8 <USBD_LL_StallEP>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]
      break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d137      	bne.n	8007dc6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d14a      	bne.n	8007dfe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d913      	bls.n	8007d9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	1ad2      	subs	r2, r2, r3
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	bf28      	it	cs
 8007d8e:	4613      	movcs	r3, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 ff90 	bl	8008cba <USBD_CtlContinueRx>
 8007d9a:	e030      	b.n	8007dfe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d105      	bne.n	8007dbe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 ff8c 	bl	8008cdc <USBD_CtlSendStatus>
 8007dc4:	e01b      	b.n	8007dfe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d013      	beq.n	8007dfa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d10e      	bne.n	8007dfa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	7afa      	ldrb	r2, [r7, #11]
 8007de6:	4611      	mov	r1, r2
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	4798      	blx	r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	e002      	b.n	8007e00 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e000      	b.n	8007e00 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	460b      	mov	r3, r1
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d16a      	bne.n	8007ef2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d155      	bne.n	8007ed8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d914      	bls.n	8007e62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 ff22 	bl	8008c98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e54:	2300      	movs	r3, #0
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f001 fb56 	bl	800950c <USBD_LL_PrepareReceive>
 8007e60:	e03a      	b.n	8007ed8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d11c      	bne.n	8007ea8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d316      	bcc.n	8007ea8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d20f      	bcs.n	8007ea8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 ff03 	bl	8008c98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f001 fb33 	bl	800950c <USBD_LL_PrepareReceive>
 8007ea6:	e017      	b.n	8007ed8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d105      	bne.n	8007eca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 fa73 	bl	80093b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 ff15 	bl	8008d02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d123      	bne.n	8007f2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff fe9b 	bl	8007c1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ef0:	e01b      	b.n	8007f2a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d013      	beq.n	8007f26 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d10e      	bne.n	8007f26 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	7afa      	ldrb	r2, [r7, #11]
 8007f12:	4611      	mov	r1, r2
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	4798      	blx	r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	e002      	b.n	8007f2c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e000      	b.n	8007f2c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6852      	ldr	r2, [r2, #4]
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	4611      	mov	r1, r2
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f78:	2340      	movs	r3, #64	; 0x40
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 f9d5 	bl	800932e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2240      	movs	r2, #64	; 0x40
 8007f90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	2200      	movs	r2, #0
 8007f98:	2180      	movs	r1, #128	; 0x80
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f9c7 	bl	800932e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2240      	movs	r2, #64	; 0x40
 8007faa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2204      	movs	r2, #4
 8007fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800e:	2b04      	cmp	r3, #4
 8008010:	d105      	bne.n	800801e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803a:	2b03      	cmp	r3, #3
 800803c:	d10b      	bne.n	8008056 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d009      	beq.n	80080d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6852      	ldr	r2, [r2, #4]
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	4611      	mov	r1, r2
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
  }

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	3301      	adds	r3, #1
 80080f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008100:	8a3b      	ldrh	r3, [r7, #16]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	b21a      	sxth	r2, r3
 8008106:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800810a:	4313      	orrs	r3, r2
 800810c:	b21b      	sxth	r3, r3
 800810e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008110:	89fb      	ldrh	r3, [r7, #14]
}
 8008112:	4618      	mov	r0, r3
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008136:	2b20      	cmp	r3, #32
 8008138:	d004      	beq.n	8008144 <USBD_StdDevReq+0x24>
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d002      	beq.n	8008144 <USBD_StdDevReq+0x24>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <USBD_StdDevReq+0x38>
 8008142:	e050      	b.n	80081e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e04b      	b.n	80081f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2b09      	cmp	r3, #9
 800815e:	d83c      	bhi.n	80081da <USBD_StdDevReq+0xba>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <USBD_StdDevReq+0x48>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	080081bd 	.word	0x080081bd
 800816c:	080081d1 	.word	0x080081d1
 8008170:	080081db 	.word	0x080081db
 8008174:	080081c7 	.word	0x080081c7
 8008178:	080081db 	.word	0x080081db
 800817c:	0800819b 	.word	0x0800819b
 8008180:	08008191 	.word	0x08008191
 8008184:	080081db 	.word	0x080081db
 8008188:	080081b3 	.word	0x080081b3
 800818c:	080081a5 	.word	0x080081a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f9ce 	bl	8008534 <USBD_GetDescriptor>
      break;
 8008198:	e024      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fb33 	bl	8008808 <USBD_SetAddress>
      break;
 80081a2:	e01f      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb70 	bl	800888c <USBD_SetConfig>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
      break;
 80081b0:	e018      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fc0d 	bl	80089d4 <USBD_GetConfig>
      break;
 80081ba:	e013      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fc3c 	bl	8008a3c <USBD_GetStatus>
      break;
 80081c4:	e00e      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fc6a 	bl	8008aa2 <USBD_SetFeature>
      break;
 80081ce:	e009      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fc79 	bl	8008aca <USBD_ClrFeature>
      break;
 80081d8:	e004      	b.n	80081e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fccf 	bl	8008b80 <USBD_CtlError>
      break;
 80081e2:	bf00      	nop
    }
    break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fcc9 	bl	8008b80 <USBD_CtlError>
    break;
 80081ee:	bf00      	nop
  }

  return ret;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop

080081fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008212:	2b20      	cmp	r3, #32
 8008214:	d003      	beq.n	800821e <USBD_StdItfReq+0x22>
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	d001      	beq.n	800821e <USBD_StdItfReq+0x22>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d12a      	bne.n	8008274 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008224:	3b01      	subs	r3, #1
 8008226:	2b02      	cmp	r3, #2
 8008228:	d81d      	bhi.n	8008266 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	889b      	ldrh	r3, [r3, #4]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	d813      	bhi.n	800825c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88db      	ldrh	r3, [r3, #6]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d110      	bne.n	8008270 <USBD_StdItfReq+0x74>
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10d      	bne.n	8008270 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fd41 	bl	8008cdc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800825a:	e009      	b.n	8008270 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fc8e 	bl	8008b80 <USBD_CtlError>
      break;
 8008264:	e004      	b.n	8008270 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc89 	bl	8008b80 <USBD_CtlError>
      break;
 800826e:	e000      	b.n	8008272 <USBD_StdItfReq+0x76>
      break;
 8008270:	bf00      	nop
    }
    break;
 8008272:	e004      	b.n	800827e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fc82 	bl	8008b80 <USBD_CtlError>
    break;
 800827c:	bf00      	nop
  }

  return ret;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	889b      	ldrh	r3, [r3, #4]
 800829a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d004      	beq.n	80082b2 <USBD_StdEPReq+0x2a>
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d002      	beq.n	80082b2 <USBD_StdEPReq+0x2a>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <USBD_StdEPReq+0x3e>
 80082b0:	e135      	b.n	800851e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]
    break;
 80082c4:	e130      	b.n	8008528 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d03e      	beq.n	800834c <USBD_StdEPReq+0xc4>
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d002      	beq.n	80082d8 <USBD_StdEPReq+0x50>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d077      	beq.n	80083c6 <USBD_StdEPReq+0x13e>
 80082d6:	e11c      	b.n	8008512 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d002      	beq.n	80082e8 <USBD_StdEPReq+0x60>
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d015      	beq.n	8008312 <USBD_StdEPReq+0x8a>
 80082e6:	e02b      	b.n	8008340 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <USBD_StdEPReq+0x80>
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b80      	cmp	r3, #128	; 0x80
 80082f2:	d009      	beq.n	8008308 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f85d 	bl	80093b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 f859 	bl	80093b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008306:	e020      	b.n	800834a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fc38 	bl	8008b80 <USBD_CtlError>
        break;
 8008310:	e01b      	b.n	800834a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10e      	bne.n	8008338 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_StdEPReq+0xb0>
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b80      	cmp	r3, #128	; 0x80
 8008324:	d008      	beq.n	8008338 <USBD_StdEPReq+0xb0>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f840 	bl	80093b8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fccf 	bl	8008cdc <USBD_CtlSendStatus>

        break;
 800833e:	e004      	b.n	800834a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fc1c 	bl	8008b80 <USBD_CtlError>
        break;
 8008348:	bf00      	nop
      }
      break;
 800834a:	e0e7      	b.n	800851c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008352:	2b02      	cmp	r3, #2
 8008354:	d002      	beq.n	800835c <USBD_StdEPReq+0xd4>
 8008356:	2b03      	cmp	r3, #3
 8008358:	d015      	beq.n	8008386 <USBD_StdEPReq+0xfe>
 800835a:	e02d      	b.n	80083b8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00c      	beq.n	800837c <USBD_StdEPReq+0xf4>
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d009      	beq.n	800837c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 f823 	bl	80093b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008372:	2180      	movs	r1, #128	; 0x80
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f81f 	bl	80093b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800837a:	e023      	b.n	80083c4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fbfe 	bl	8008b80 <USBD_CtlError>
        break;
 8008384:	e01e      	b.n	80083c4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	885b      	ldrh	r3, [r3, #2]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d119      	bne.n	80083c2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 f82a 	bl	80093f6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fc9a 	bl	8008cdc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
        }
        break;
 80083b6:	e004      	b.n	80083c2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fbe0 	bl	8008b80 <USBD_CtlError>
        break;
 80083c0:	e000      	b.n	80083c4 <USBD_StdEPReq+0x13c>
        break;
 80083c2:	bf00      	nop
      }
      break;
 80083c4:	e0aa      	b.n	800851c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d002      	beq.n	80083d6 <USBD_StdEPReq+0x14e>
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d032      	beq.n	800843a <USBD_StdEPReq+0x1b2>
 80083d4:	e097      	b.n	8008506 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <USBD_StdEPReq+0x164>
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d004      	beq.n	80083ec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fbcb 	bl	8008b80 <USBD_CtlError>
          break;
 80083ea:	e091      	b.n	8008510 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	da0b      	bge.n	800840c <USBD_StdEPReq+0x184>
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	3310      	adds	r3, #16
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	e00b      	b.n	8008424 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	4413      	add	r3, r2
 8008422:	3304      	adds	r3, #4
 8008424:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2202      	movs	r2, #2
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fc15 	bl	8008c62 <USBD_CtlSendData>
        break;
 8008438:	e06a      	b.n	8008510 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800843a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	da11      	bge.n	8008466 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	f003 020f 	and.w	r2, r3, #15
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	3324      	adds	r3, #36	; 0x24
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d117      	bne.n	800848c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fb8e 	bl	8008b80 <USBD_CtlError>
            break;
 8008464:	e054      	b.n	8008510 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fb7b 	bl	8008b80 <USBD_CtlError>
            break;
 800848a:	e041      	b.n	8008510 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800848c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008490:	2b00      	cmp	r3, #0
 8008492:	da0b      	bge.n	80084ac <USBD_StdEPReq+0x224>
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	3310      	adds	r3, #16
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4413      	add	r3, r2
 80084a8:	3304      	adds	r3, #4
 80084aa:	e00b      	b.n	80084c4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	3304      	adds	r3, #4
 80084c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <USBD_StdEPReq+0x24a>
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d103      	bne.n	80084da <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	e00e      	b.n	80084f8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 ffa8 	bl	8009434 <USBD_LL_IsStallEP>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2201      	movs	r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	e002      	b.n	80084f8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2202      	movs	r2, #2
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fbaf 	bl	8008c62 <USBD_CtlSendData>
          break;
 8008504:	e004      	b.n	8008510 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fb39 	bl	8008b80 <USBD_CtlError>
        break;
 800850e:	bf00      	nop
      }
      break;
 8008510:	e004      	b.n	800851c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fb33 	bl	8008b80 <USBD_CtlError>
      break;
 800851a:	bf00      	nop
    }
    break;
 800851c:	e004      	b.n	8008528 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fb2d 	bl	8008b80 <USBD_CtlError>
    break;
 8008526:	bf00      	nop
  }

  return ret;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	885b      	ldrh	r3, [r3, #2]
 800854e:	0a1b      	lsrs	r3, r3, #8
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	2b06      	cmp	r3, #6
 8008556:	f200 8128 	bhi.w	80087aa <USBD_GetDescriptor+0x276>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <USBD_GetDescriptor+0x2c>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	0800857d 	.word	0x0800857d
 8008564:	08008595 	.word	0x08008595
 8008568:	080085d5 	.word	0x080085d5
 800856c:	080087ab 	.word	0x080087ab
 8008570:	080087ab 	.word	0x080087ab
 8008574:	0800874b 	.word	0x0800874b
 8008578:	08008777 	.word	0x08008777
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7c12      	ldrb	r2, [r2, #16]
 8008588:	f107 0108 	add.w	r1, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
    break;
 8008592:	e112      	b.n	80087ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7c1b      	ldrb	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10d      	bne.n	80085b8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	f107 0208 	add.w	r2, r7, #8
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
 80085ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	2202      	movs	r2, #2
 80085b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80085b6:	e100      	b.n	80087ba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	f107 0208 	add.w	r2, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	2202      	movs	r2, #2
 80085d0:	701a      	strb	r2, [r3, #0]
    break;
 80085d2:	e0f2      	b.n	80087ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	885b      	ldrh	r3, [r3, #2]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b05      	cmp	r3, #5
 80085dc:	f200 80ac 	bhi.w	8008738 <USBD_GetDescriptor+0x204>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <USBD_GetDescriptor+0xb4>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	08008601 	.word	0x08008601
 80085ec:	08008635 	.word	0x08008635
 80085f0:	08008669 	.word	0x08008669
 80085f4:	0800869d 	.word	0x0800869d
 80085f8:	080086d1 	.word	0x080086d1
 80085fc:	08008705 	.word	0x08008705
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	7c12      	ldrb	r2, [r2, #16]
 8008618:	f107 0108 	add.w	r1, r7, #8
 800861c:	4610      	mov	r0, r2
 800861e:	4798      	blx	r3
 8008620:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008622:	e091      	b.n	8008748 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 faaa 	bl	8008b80 <USBD_CtlError>
        err++;
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	3301      	adds	r3, #1
 8008630:	72fb      	strb	r3, [r7, #11]
      break;
 8008632:	e089      	b.n	8008748 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	7c12      	ldrb	r2, [r2, #16]
 800864c:	f107 0108 	add.w	r1, r7, #8
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
 8008654:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008656:	e077      	b.n	8008748 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa90 	bl	8008b80 <USBD_CtlError>
        err++;
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	3301      	adds	r3, #1
 8008664:	72fb      	strb	r3, [r7, #11]
      break;
 8008666:	e06f      	b.n	8008748 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	7c12      	ldrb	r2, [r2, #16]
 8008680:	f107 0108 	add.w	r1, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800868a:	e05d      	b.n	8008748 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa76 	bl	8008b80 <USBD_CtlError>
        err++;
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	3301      	adds	r3, #1
 8008698:	72fb      	strb	r3, [r7, #11]
      break;
 800869a:	e055      	b.n	8008748 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	7c12      	ldrb	r2, [r2, #16]
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086be:	e043      	b.n	8008748 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa5c 	bl	8008b80 <USBD_CtlError>
        err++;
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	3301      	adds	r3, #1
 80086cc:	72fb      	strb	r3, [r7, #11]
      break;
 80086ce:	e03b      	b.n	8008748 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7c12      	ldrb	r2, [r2, #16]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086f2:	e029      	b.n	8008748 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa42 	bl	8008b80 <USBD_CtlError>
        err++;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	3301      	adds	r3, #1
 8008700:	72fb      	strb	r3, [r7, #11]
      break;
 8008702:	e021      	b.n	8008748 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	7c12      	ldrb	r2, [r2, #16]
 800871c:	f107 0108 	add.w	r1, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008726:	e00f      	b.n	8008748 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa28 	bl	8008b80 <USBD_CtlError>
        err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
      break;
 8008736:	e007      	b.n	8008748 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa20 	bl	8008b80 <USBD_CtlError>
      err++;
 8008740:	7afb      	ldrb	r3, [r7, #11]
 8008742:	3301      	adds	r3, #1
 8008744:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008746:	bf00      	nop
    }
    break;
 8008748:	e037      	b.n	80087ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7c1b      	ldrb	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	f107 0208 	add.w	r2, r7, #8
 800875e:	4610      	mov	r0, r2
 8008760:	4798      	blx	r3
 8008762:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008764:	e029      	b.n	80087ba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa09 	bl	8008b80 <USBD_CtlError>
      err++;
 800876e:	7afb      	ldrb	r3, [r7, #11]
 8008770:	3301      	adds	r3, #1
 8008772:	72fb      	strb	r3, [r7, #11]
    break;
 8008774:	e021      	b.n	80087ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7c1b      	ldrb	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10d      	bne.n	800879a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f107 0208 	add.w	r2, r7, #8
 800878a:	4610      	mov	r0, r2
 800878c:	4798      	blx	r3
 800878e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3301      	adds	r3, #1
 8008794:	2207      	movs	r2, #7
 8008796:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008798:	e00f      	b.n	80087ba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9ef 	bl	8008b80 <USBD_CtlError>
      err++;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	3301      	adds	r3, #1
 80087a6:	72fb      	strb	r3, [r7, #11]
    break;
 80087a8:	e007      	b.n	80087ba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9e7 	bl	8008b80 <USBD_CtlError>
    err++;
 80087b2:	7afb      	ldrb	r3, [r7, #11]
 80087b4:	3301      	adds	r3, #1
 80087b6:	72fb      	strb	r3, [r7, #11]
    break;
 80087b8:	bf00      	nop
  }

  if (err != 0U)
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11e      	bne.n	80087fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	88db      	ldrh	r3, [r3, #6]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d016      	beq.n	80087f6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80087c8:	893b      	ldrh	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00e      	beq.n	80087ec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88da      	ldrh	r2, [r3, #6]
 80087d2:	893b      	ldrh	r3, [r7, #8]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	bf28      	it	cs
 80087d8:	4613      	movcs	r3, r2
 80087da:	b29b      	uxth	r3, r3
 80087dc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80087de:	893b      	ldrh	r3, [r7, #8]
 80087e0:	461a      	mov	r2, r3
 80087e2:	68f9      	ldr	r1, [r7, #12]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fa3c 	bl	8008c62 <USBD_CtlSendData>
 80087ea:	e009      	b.n	8008800 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f9c6 	bl	8008b80 <USBD_CtlError>
 80087f4:	e004      	b.n	8008800 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fa70 	bl	8008cdc <USBD_CtlSendStatus>
 80087fc:	e000      	b.n	8008800 <USBD_GetDescriptor+0x2cc>
    return;
 80087fe:	bf00      	nop
    }
  }
}
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop

08008808 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d130      	bne.n	800887c <USBD_SetAddress+0x74>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	88db      	ldrh	r3, [r3, #6]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d12c      	bne.n	800887c <USBD_SetAddress+0x74>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	2b7f      	cmp	r3, #127	; 0x7f
 8008828:	d828      	bhi.n	800887c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008834:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883c:	2b03      	cmp	r3, #3
 800883e:	d104      	bne.n	800884a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f99c 	bl	8008b80 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008848:	e01c      	b.n	8008884 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7bfa      	ldrb	r2, [r7, #15]
 800884e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fe18 	bl	800948c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fa3d 	bl	8008cdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008870:	e008      	b.n	8008884 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	e003      	b.n	8008884 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f97e 	bl	8008b80 <USBD_CtlError>
  }
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	4b4b      	ldr	r3, [pc, #300]	; (80089d0 <USBD_SetConfig+0x144>)
 80088a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088a4:	4b4a      	ldr	r3, [pc, #296]	; (80089d0 <USBD_SetConfig+0x144>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d905      	bls.n	80088b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f966 	bl	8008b80 <USBD_CtlError>
    return USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e087      	b.n	80089c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d002      	beq.n	80088c8 <USBD_SetConfig+0x3c>
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d025      	beq.n	8008912 <USBD_SetConfig+0x86>
 80088c6:	e071      	b.n	80089ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80088c8:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <USBD_SetConfig+0x144>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01c      	beq.n	800890a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80088d0:	4b3f      	ldr	r3, [pc, #252]	; (80089d0 <USBD_SetConfig+0x144>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80088da:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <USBD_SetConfig+0x144>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff f9a7 	bl	8007c34 <USBD_SetClassConfig>
 80088e6:	4603      	mov	r3, r0
 80088e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f944 	bl	8008b80 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80088f8:	e065      	b.n	80089c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f9ee 	bl	8008cdc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2203      	movs	r2, #3
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008908:	e05d      	b.n	80089c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9e6 	bl	8008cdc <USBD_CtlSendStatus>
    break;
 8008910:	e059      	b.n	80089c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008912:	4b2f      	ldr	r3, [pc, #188]	; (80089d0 <USBD_SetConfig+0x144>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d112      	bne.n	8008940 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2202      	movs	r2, #2
 800891e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008922:	4b2b      	ldr	r3, [pc, #172]	; (80089d0 <USBD_SetConfig+0x144>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800892c:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <USBD_SetConfig+0x144>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff f99a 	bl	8007c6c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9cf 	bl	8008cdc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800893e:	e042      	b.n	80089c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008940:	4b23      	ldr	r3, [pc, #140]	; (80089d0 <USBD_SetConfig+0x144>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d02a      	beq.n	80089a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff f988 	bl	8007c6c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800895c:	4b1c      	ldr	r3, [pc, #112]	; (80089d0 <USBD_SetConfig+0x144>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008966:	4b1a      	ldr	r3, [pc, #104]	; (80089d0 <USBD_SetConfig+0x144>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff f961 	bl	8007c34 <USBD_SetClassConfig>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00f      	beq.n	800899c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f8fe 	bl	8008b80 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	b2db      	uxtb	r3, r3
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff f96d 	bl	8007c6c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2202      	movs	r2, #2
 8008996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800899a:	e014      	b.n	80089c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f99d 	bl	8008cdc <USBD_CtlSendStatus>
    break;
 80089a2:	e010      	b.n	80089c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f999 	bl	8008cdc <USBD_CtlSendStatus>
    break;
 80089aa:	e00c      	b.n	80089c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8e6 	bl	8008b80 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <USBD_SetConfig+0x144>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff f956 	bl	8007c6c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]
    break;
 80089c4:	bf00      	nop
  }

  return ret;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	240001ec 	.word	0x240001ec

080089d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d004      	beq.n	80089f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f8c9 	bl	8008b80 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80089ee:	e021      	b.n	8008a34 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	db17      	blt.n	8008a2a <USBD_GetConfig+0x56>
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	dd02      	ble.n	8008a04 <USBD_GetConfig+0x30>
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d00b      	beq.n	8008a1a <USBD_GetConfig+0x46>
 8008a02:	e012      	b.n	8008a2a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f925 	bl	8008c62 <USBD_CtlSendData>
      break;
 8008a18:	e00c      	b.n	8008a34 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f91d 	bl	8008c62 <USBD_CtlSendData>
      break;
 8008a28:	e004      	b.n	8008a34 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f8a7 	bl	8008b80 <USBD_CtlError>
      break;
 8008a32:	bf00      	nop
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d81e      	bhi.n	8008a90 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d004      	beq.n	8008a64 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f88f 	bl	8008b80 <USBD_CtlError>
      break;
 8008a62:	e01a      	b.n	8008a9a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f043 0202 	orr.w	r2, r3, #2
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	330c      	adds	r3, #12
 8008a84:	2202      	movs	r2, #2
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f8ea 	bl	8008c62 <USBD_CtlSendData>
    break;
 8008a8e:	e004      	b.n	8008a9a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f874 	bl	8008b80 <USBD_CtlError>
    break;
 8008a98:	bf00      	nop
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	885b      	ldrh	r3, [r3, #2]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d106      	bne.n	8008ac2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f90d 	bl	8008cdc <USBD_CtlSendStatus>
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ada:	3b01      	subs	r3, #1
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d80b      	bhi.n	8008af8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	885b      	ldrh	r3, [r3, #2]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d10c      	bne.n	8008b02 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f8f3 	bl	8008cdc <USBD_CtlSendStatus>
      }
      break;
 8008af6:	e004      	b.n	8008b02 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f840 	bl	8008b80 <USBD_CtlError>
      break;
 8008b00:	e000      	b.n	8008b04 <USBD_ClrFeature+0x3a>
      break;
 8008b02:	bf00      	nop
  }
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3301      	adds	r3, #1
 8008b34:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff fad3 	bl	80080e2 <SWAPBYTE>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff fac6 	bl	80080e2 <SWAPBYTE>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff fab9 	bl	80080e2 <SWAPBYTE>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	80da      	strh	r2, [r3, #6]
}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b8a:	2180      	movs	r1, #128	; 0x80
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fc13 	bl	80093b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b92:	2100      	movs	r1, #0
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fc0f 	bl	80093b8 <USBD_LL_StallEP>
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d036      	beq.n	8008c26 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bbc:	6938      	ldr	r0, [r7, #16]
 8008bbe:	f000 f836 	bl	8008c2e <USBD_GetLen>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	3301      	adds	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	4413      	add	r3, r2
 8008be8:	2203      	movs	r2, #3
 8008bea:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bf2:	e013      	b.n	8008c1c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	7812      	ldrb	r2, [r2, #0]
 8008bfe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3301      	adds	r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
    idx++;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	4413      	add	r3, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e7      	bne.n	8008bf4 <USBD_GetString+0x52>
 8008c24:	e000      	b.n	8008c28 <USBD_GetString+0x86>
    return;
 8008c26:	bf00      	nop
  }
}
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c3e:	e005      	b.n	8008c4c <USBD_GetLen+0x1e>
  {
    len++;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	3301      	adds	r3, #1
 8008c44:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1f5      	bne.n	8008c40 <USBD_GetLen+0x12>
  }

  return len;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2202      	movs	r2, #2
 8008c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	2100      	movs	r1, #0
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fc1e 	bl	80094ca <USBD_LL_Transmit>

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fc0d 	bl	80094ca <USBD_LL_Transmit>

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fc1d 	bl	800950c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cec:	2300      	movs	r3, #0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fbe9 	bl	80094ca <USBD_LL_Transmit>

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2205      	movs	r2, #5
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fbf7 	bl	800950c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	490f      	ldr	r1, [pc, #60]	; (8008d6c <MX_USB_DEVICE_Init+0x44>)
 8008d30:	480f      	ldr	r0, [pc, #60]	; (8008d70 <MX_USB_DEVICE_Init+0x48>)
 8008d32:	f7fe ff11 	bl	8007b58 <USBD_Init>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d3c:	f7f7 ff98 	bl	8000c70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008d40:	490c      	ldr	r1, [pc, #48]	; (8008d74 <MX_USB_DEVICE_Init+0x4c>)
 8008d42:	480b      	ldr	r0, [pc, #44]	; (8008d70 <MX_USB_DEVICE_Init+0x48>)
 8008d44:	f7fe ff3e 	bl	8007bc4 <USBD_RegisterClass>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d4e:	f7f7 ff8f 	bl	8000c70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d52:	4807      	ldr	r0, [pc, #28]	; (8008d70 <MX_USB_DEVICE_Init+0x48>)
 8008d54:	f7fe ff57 	bl	8007c06 <USBD_Start>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008d5e:	f7f7 ff87 	bl	8000c70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008d62:	f7f9 fed7 	bl	8002b14 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d66:	bf00      	nop
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	24000118 	.word	0x24000118
 8008d70:	2400028c 	.word	0x2400028c
 8008d74:	24000010 	.word	0x24000010

08008d78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2212      	movs	r2, #18
 8008d88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d8a:	4b03      	ldr	r3, [pc, #12]	; (8008d98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	24000134 	.word	0x24000134

08008d9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2204      	movs	r2, #4
 8008dac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dae:	4b03      	ldr	r3, [pc, #12]	; (8008dbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	24000148 	.word	0x24000148

08008dc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4907      	ldr	r1, [pc, #28]	; (8008df4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dd6:	4808      	ldr	r0, [pc, #32]	; (8008df8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dd8:	f7ff fee3 	bl	8008ba2 <USBD_GetString>
 8008ddc:	e004      	b.n	8008de8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4904      	ldr	r1, [pc, #16]	; (8008df4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008de2:	4805      	ldr	r0, [pc, #20]	; (8008df8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008de4:	f7ff fedd 	bl	8008ba2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	2400055c 	.word	0x2400055c
 8008df8:	0800a4a8 	.word	0x0800a4a8

08008dfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	4904      	ldr	r1, [pc, #16]	; (8008e1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e0c:	4804      	ldr	r0, [pc, #16]	; (8008e20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e0e:	f7ff fec8 	bl	8008ba2 <USBD_GetString>
  return USBD_StrDesc;
 8008e12:	4b02      	ldr	r3, [pc, #8]	; (8008e1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	2400055c 	.word	0x2400055c
 8008e20:	0800a4c0 	.word	0x0800a4c0

08008e24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	221a      	movs	r2, #26
 8008e34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e36:	f000 f843 	bl	8008ec0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e3a:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	2400014c 	.word	0x2400014c

08008e48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6039      	str	r1, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d105      	bne.n	8008e66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	4907      	ldr	r1, [pc, #28]	; (8008e7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e5e:	4808      	ldr	r0, [pc, #32]	; (8008e80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e60:	f7ff fe9f 	bl	8008ba2 <USBD_GetString>
 8008e64:	e004      	b.n	8008e70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	4904      	ldr	r1, [pc, #16]	; (8008e7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e6a:	4805      	ldr	r0, [pc, #20]	; (8008e80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e6c:	f7ff fe99 	bl	8008ba2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e70:	4b02      	ldr	r3, [pc, #8]	; (8008e7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	2400055c 	.word	0x2400055c
 8008e80:	0800a4d4 	.word	0x0800a4d4

08008e84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6039      	str	r1, [r7, #0]
 8008e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d105      	bne.n	8008ea2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4907      	ldr	r1, [pc, #28]	; (8008eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e9a:	4808      	ldr	r0, [pc, #32]	; (8008ebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e9c:	f7ff fe81 	bl	8008ba2 <USBD_GetString>
 8008ea0:	e004      	b.n	8008eac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	4904      	ldr	r1, [pc, #16]	; (8008eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ea6:	4805      	ldr	r0, [pc, #20]	; (8008ebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ea8:	f7ff fe7b 	bl	8008ba2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	2400055c 	.word	0x2400055c
 8008ebc:	0800a4e0 	.word	0x0800a4e0

08008ec0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <Get_SerialNum+0x44>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ecc:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <Get_SerialNum+0x48>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <Get_SerialNum+0x4c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	4909      	ldr	r1, [pc, #36]	; (8008f10 <Get_SerialNum+0x50>)
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f814 	bl	8008f18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	4908      	ldr	r1, [pc, #32]	; (8008f14 <Get_SerialNum+0x54>)
 8008ef4:	68b8      	ldr	r0, [r7, #8]
 8008ef6:	f000 f80f 	bl	8008f18 <IntToUnicode>
  }
}
 8008efa:	bf00      	nop
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	1ff1e800 	.word	0x1ff1e800
 8008f08:	1ff1e804 	.word	0x1ff1e804
 8008f0c:	1ff1e808 	.word	0x1ff1e808
 8008f10:	2400014e 	.word	0x2400014e
 8008f14:	2400015e 	.word	0x2400015e

08008f18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75fb      	strb	r3, [r7, #23]
 8008f2e:	e027      	b.n	8008f80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	0f1b      	lsrs	r3, r3, #28
 8008f34:	2b09      	cmp	r3, #9
 8008f36:	d80b      	bhi.n	8008f50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	0f1b      	lsrs	r3, r3, #28
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	4619      	mov	r1, r3
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	440b      	add	r3, r1
 8008f48:	3230      	adds	r2, #48	; 0x30
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	e00a      	b.n	8008f66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	0f1b      	lsrs	r3, r3, #28
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	440b      	add	r3, r1
 8008f60:	3237      	adds	r2, #55	; 0x37
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	3301      	adds	r3, #1
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	75fb      	strb	r3, [r7, #23]
 8008f80:	7dfa      	ldrb	r2, [r7, #23]
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d3d3      	bcc.n	8008f30 <IntToUnicode+0x18>
  }
}
 8008f88:	bf00      	nop
 8008f8a:	371c      	adds	r7, #28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08a      	sub	sp, #40	; 0x28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	609a      	str	r2, [r3, #8]
 8008fa8:	60da      	str	r2, [r3, #12]
 8008faa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a2d      	ldr	r2, [pc, #180]	; (8009068 <HAL_PCD_MspInit+0xd4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d153      	bne.n	800905e <HAL_PCD_MspInit+0xca>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fb6:	4b2d      	ldr	r3, [pc, #180]	; (800906c <HAL_PCD_MspInit+0xd8>)
 8008fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fbc:	4a2b      	ldr	r2, [pc, #172]	; (800906c <HAL_PCD_MspInit+0xd8>)
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008fc6:	4b29      	ldr	r3, [pc, #164]	; (800906c <HAL_PCD_MspInit+0xd8>)
 8008fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008fe2:	f107 0314 	add.w	r3, r7, #20
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4821      	ldr	r0, [pc, #132]	; (8009070 <HAL_PCD_MspInit+0xdc>)
 8008fea:	f7f8 f9b5 	bl	8001358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8008fee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009000:	230a      	movs	r3, #10
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	4619      	mov	r1, r3
 800900a:	4819      	ldr	r0, [pc, #100]	; (8009070 <HAL_PCD_MspInit+0xdc>)
 800900c:	f7f8 f9a4 	bl	8001358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009010:	4b16      	ldr	r3, [pc, #88]	; (800906c <HAL_PCD_MspInit+0xd8>)
 8009012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009016:	4a15      	ldr	r2, [pc, #84]	; (800906c <HAL_PCD_MspInit+0xd8>)
 8009018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800901c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009020:	4b12      	ldr	r3, [pc, #72]	; (800906c <HAL_PCD_MspInit+0xd8>)
 8009022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	2062      	movs	r0, #98	; 0x62
 8009034:	f7f8 f95b 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8009038:	2062      	movs	r0, #98	; 0x62
 800903a:	f7f8 f972 	bl	8001322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800903e:	2200      	movs	r2, #0
 8009040:	2100      	movs	r1, #0
 8009042:	2063      	movs	r0, #99	; 0x63
 8009044:	f7f8 f953 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8009048:	2063      	movs	r0, #99	; 0x63
 800904a:	f7f8 f96a 	bl	8001322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	2065      	movs	r0, #101	; 0x65
 8009054:	f7f8 f94b 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009058:	2065      	movs	r0, #101	; 0x65
 800905a:	f7f8 f962 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800905e:	bf00      	nop
 8009060:	3728      	adds	r7, #40	; 0x28
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40080000 	.word	0x40080000
 800906c:	58024400 	.word	0x58024400
 8009070:	58020000 	.word	0x58020000

08009074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f7fe fe06 	bl	8007c9c <USBD_LL_SetupStage>
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	4619      	mov	r1, r3
 80090c2:	f7fe fe3e 	bl	8007d42 <USBD_LL_DataOutStage>
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	460b      	mov	r3, r1
 80090d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4613      	mov	r3, r2
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	3348      	adds	r3, #72	; 0x48
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	4619      	mov	r1, r3
 80090f6:	f7fe fe87 	bl	8007e08 <USBD_LL_DataInStage>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe ff8b 	bl	800802c <USBD_LL_SOF>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009126:	2301      	movs	r3, #1
 8009128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	e008      	b.n	800914a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d102      	bne.n	8009146 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009140:	2301      	movs	r3, #1
 8009142:	73fb      	strb	r3, [r7, #15]
 8009144:	e001      	b.n	800914a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009146:	f7f7 fd93 	bl	8000c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009150:	7bfa      	ldrb	r2, [r7, #15]
 8009152:	4611      	mov	r1, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe ff2e 	bl	8007fb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fee7 	bl	8007f34 <USBD_LL_Reset>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe ff29 	bl	8007fd6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091a4:	4b04      	ldr	r3, [pc, #16]	; (80091b8 <HAL_PCD_SuspendCallback+0x48>)
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	4a03      	ldr	r2, [pc, #12]	; (80091b8 <HAL_PCD_SuspendCallback+0x48>)
 80091aa:	f043 0306 	orr.w	r3, r3, #6
 80091ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	e000ed00 	.word	0xe000ed00

080091bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe ff18 	bl	8008000 <USBD_LL_Resume>
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe ff43 	bl	800807a <USBD_LL_IsoOUTIncomplete>
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800920e:	78fa      	ldrb	r2, [r7, #3]
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe ff24 	bl	8008060 <USBD_LL_IsoINIncomplete>
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe ff30 	bl	8008094 <USBD_LL_DevConnected>
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe ff2d 	bl	80080aa <USBD_LL_DevDisconnected>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d13e      	bne.n	80092e6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009268:	4a21      	ldr	r2, [pc, #132]	; (80092f0 <USBD_LL_Init+0x98>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <USBD_LL_Init+0x98>)
 8009274:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009278:	4b1d      	ldr	r3, [pc, #116]	; (80092f0 <USBD_LL_Init+0x98>)
 800927a:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <USBD_LL_Init+0x9c>)
 800927c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800927e:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <USBD_LL_Init+0x98>)
 8009280:	2209      	movs	r2, #9
 8009282:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009284:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <USBD_LL_Init+0x98>)
 8009286:	2202      	movs	r2, #2
 8009288:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800928a:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <USBD_LL_Init+0x98>)
 800928c:	2200      	movs	r2, #0
 800928e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009290:	4b17      	ldr	r3, [pc, #92]	; (80092f0 <USBD_LL_Init+0x98>)
 8009292:	2202      	movs	r2, #2
 8009294:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009296:	4b16      	ldr	r3, [pc, #88]	; (80092f0 <USBD_LL_Init+0x98>)
 8009298:	2200      	movs	r2, #0
 800929a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800929c:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <USBD_LL_Init+0x98>)
 800929e:	2200      	movs	r2, #0
 80092a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80092a2:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <USBD_LL_Init+0x98>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80092a8:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <USBD_LL_Init+0x98>)
 80092aa:	2201      	movs	r2, #1
 80092ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80092ae:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <USBD_LL_Init+0x98>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80092b4:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <USBD_LL_Init+0x98>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80092ba:	480d      	ldr	r0, [pc, #52]	; (80092f0 <USBD_LL_Init+0x98>)
 80092bc:	f7f8 fa2d 	bl	800171a <HAL_PCD_Init>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80092c6:	f7f7 fcd3 	bl	8000c70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092ca:	2180      	movs	r1, #128	; 0x80
 80092cc:	4808      	ldr	r0, [pc, #32]	; (80092f0 <USBD_LL_Init+0x98>)
 80092ce:	f7f9 fba6 	bl	8002a1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092d2:	2240      	movs	r2, #64	; 0x40
 80092d4:	2100      	movs	r1, #0
 80092d6:	4806      	ldr	r0, [pc, #24]	; (80092f0 <USBD_LL_Init+0x98>)
 80092d8:	f7f9 fb5a 	bl	8002990 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092dc:	2280      	movs	r2, #128	; 0x80
 80092de:	2101      	movs	r1, #1
 80092e0:	4803      	ldr	r0, [pc, #12]	; (80092f0 <USBD_LL_Init+0x98>)
 80092e2:	f7f9 fb55 	bl	8002990 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	2400075c 	.word	0x2400075c
 80092f4:	40080000 	.word	0x40080000

080092f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800930e:	4618      	mov	r0, r3
 8009310:	f7f8 fb27 	bl	8001962 <HAL_PCD_Start>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f918 	bl	8009550 <USBD_Get_USB_Status>
 8009320:	4603      	mov	r3, r0
 8009322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009324:	7bbb      	ldrb	r3, [r7, #14]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	4608      	mov	r0, r1
 8009338:	4611      	mov	r1, r2
 800933a:	461a      	mov	r2, r3
 800933c:	4603      	mov	r3, r0
 800933e:	70fb      	strb	r3, [r7, #3]
 8009340:	460b      	mov	r3, r1
 8009342:	70bb      	strb	r3, [r7, #2]
 8009344:	4613      	mov	r3, r2
 8009346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009356:	78bb      	ldrb	r3, [r7, #2]
 8009358:	883a      	ldrh	r2, [r7, #0]
 800935a:	78f9      	ldrb	r1, [r7, #3]
 800935c:	f7f8 ff38 	bl	80021d0 <HAL_PCD_EP_Open>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f8f2 	bl	8009550 <USBD_Get_USB_Status>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009370:	7bbb      	ldrb	r3, [r7, #14]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f7f8 ff81 	bl	80022a0 <HAL_PCD_EP_Close>
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f8d3 	bl	8009550 <USBD_Get_USB_Status>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7f9 f841 	bl	800245e <HAL_PCD_EP_SetStall>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f8b4 	bl	8009550 <USBD_Get_USB_Status>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7f9 f886 	bl	8002526 <HAL_PCD_EP_ClrStall>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f895 	bl	8009550 <USBD_Get_USB_Status>
 8009426:	4603      	mov	r3, r0
 8009428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942a:	7bbb      	ldrb	r3, [r7, #14]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800944c:	2b00      	cmp	r3, #0
 800944e:	da0b      	bge.n	8009468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	4613      	mov	r3, r2
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	333e      	adds	r3, #62	; 0x3e
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	e00b      	b.n	8009480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	4613      	mov	r3, r2
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	1a9b      	subs	r3, r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800947e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f8 fe6b 	bl	8002186 <HAL_PCD_SetAddress>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f84a 	bl	8009550 <USBD_Get_USB_Status>
 80094bc:	4603      	mov	r3, r0
 80094be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b086      	sub	sp, #24
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
 80094d6:	460b      	mov	r3, r1
 80094d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094e8:	7af9      	ldrb	r1, [r7, #11]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	f7f8 ff6c 	bl	80023ca <HAL_PCD_EP_Transmit>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f829 	bl	8009550 <USBD_Get_USB_Status>
 80094fe:	4603      	mov	r3, r0
 8009500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009502:	7dbb      	ldrb	r3, [r7, #22]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	607a      	str	r2, [r7, #4]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	460b      	mov	r3, r1
 800951a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800952a:	7af9      	ldrb	r1, [r7, #11]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	f7f8 ff00 	bl	8002334 <HAL_PCD_EP_Receive>
 8009534:	4603      	mov	r3, r0
 8009536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f808 	bl	8009550 <USBD_Get_USB_Status>
 8009540:	4603      	mov	r3, r0
 8009542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009544:	7dbb      	ldrb	r3, [r7, #22]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d817      	bhi.n	8009594 <USBD_Get_USB_Status+0x44>
 8009564:	a201      	add	r2, pc, #4	; (adr r2, 800956c <USBD_Get_USB_Status+0x1c>)
 8009566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956a:	bf00      	nop
 800956c:	0800957d 	.word	0x0800957d
 8009570:	08009583 	.word	0x08009583
 8009574:	08009589 	.word	0x08009589
 8009578:	0800958f 	.word	0x0800958f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
    break;
 8009580:	e00b      	b.n	800959a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009582:	2303      	movs	r3, #3
 8009584:	73fb      	strb	r3, [r7, #15]
    break;
 8009586:	e008      	b.n	800959a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009588:	2301      	movs	r3, #1
 800958a:	73fb      	strb	r3, [r7, #15]
    break;
 800958c:	e005      	b.n	800959a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800958e:	2303      	movs	r3, #3
 8009590:	73fb      	strb	r3, [r7, #15]
    break;
 8009592:	e002      	b.n	800959a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009594:	2303      	movs	r3, #3
 8009596:	73fb      	strb	r3, [r7, #15]
    break;
 8009598:	bf00      	nop
  }
  return usb_status;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <cos>:
 80095a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095aa:	eeb0 7b40 	vmov.f64	d7, d0
 80095ae:	ee17 3a90 	vmov	r3, s15
 80095b2:	4a19      	ldr	r2, [pc, #100]	; (8009618 <cos+0x70>)
 80095b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095b8:	4293      	cmp	r3, r2
 80095ba:	dc04      	bgt.n	80095c6 <cos+0x1e>
 80095bc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8009610 <cos+0x68>
 80095c0:	f000 f9ee 	bl	80099a0 <__kernel_cos>
 80095c4:	e004      	b.n	80095d0 <cos+0x28>
 80095c6:	4a15      	ldr	r2, [pc, #84]	; (800961c <cos+0x74>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	dd04      	ble.n	80095d6 <cos+0x2e>
 80095cc:	ee30 0b40 	vsub.f64	d0, d0, d0
 80095d0:	b005      	add	sp, #20
 80095d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80095d6:	4668      	mov	r0, sp
 80095d8:	f000 f8a6 	bl	8009728 <__ieee754_rem_pio2>
 80095dc:	f000 0003 	and.w	r0, r0, #3
 80095e0:	2801      	cmp	r0, #1
 80095e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095e6:	ed9d 0b00 	vldr	d0, [sp]
 80095ea:	d007      	beq.n	80095fc <cos+0x54>
 80095ec:	2802      	cmp	r0, #2
 80095ee:	d00a      	beq.n	8009606 <cos+0x5e>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d0e5      	beq.n	80095c0 <cos+0x18>
 80095f4:	2001      	movs	r0, #1
 80095f6:	f000 fcdb 	bl	8009fb0 <__kernel_sin>
 80095fa:	e7e9      	b.n	80095d0 <cos+0x28>
 80095fc:	f000 fcd8 	bl	8009fb0 <__kernel_sin>
 8009600:	eeb1 0b40 	vneg.f64	d0, d0
 8009604:	e7e4      	b.n	80095d0 <cos+0x28>
 8009606:	f000 f9cb 	bl	80099a0 <__kernel_cos>
 800960a:	e7f9      	b.n	8009600 <cos+0x58>
 800960c:	f3af 8000 	nop.w
	...
 8009618:	3fe921fb 	.word	0x3fe921fb
 800961c:	7fefffff 	.word	0x7fefffff

08009620 <round>:
 8009620:	ee10 3a90 	vmov	r3, s1
 8009624:	b530      	push	{r4, r5, lr}
 8009626:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800962a:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800962e:	2913      	cmp	r1, #19
 8009630:	ee10 5a90 	vmov	r5, s1
 8009634:	ee10 2a10 	vmov	r2, s0
 8009638:	dc17      	bgt.n	800966a <round+0x4a>
 800963a:	2900      	cmp	r1, #0
 800963c:	da09      	bge.n	8009652 <round+0x32>
 800963e:	3101      	adds	r1, #1
 8009640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009644:	d103      	bne.n	800964e <round+0x2e>
 8009646:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800964a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800964e:	2200      	movs	r2, #0
 8009650:	e024      	b.n	800969c <round+0x7c>
 8009652:	4815      	ldr	r0, [pc, #84]	; (80096a8 <round+0x88>)
 8009654:	4108      	asrs	r0, r1
 8009656:	4203      	tst	r3, r0
 8009658:	d100      	bne.n	800965c <round+0x3c>
 800965a:	b16a      	cbz	r2, 8009678 <round+0x58>
 800965c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009660:	410b      	asrs	r3, r1
 8009662:	442b      	add	r3, r5
 8009664:	ea23 0300 	bic.w	r3, r3, r0
 8009668:	e7f1      	b.n	800964e <round+0x2e>
 800966a:	2933      	cmp	r1, #51	; 0x33
 800966c:	dd05      	ble.n	800967a <round+0x5a>
 800966e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009672:	d101      	bne.n	8009678 <round+0x58>
 8009674:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009678:	bd30      	pop	{r4, r5, pc}
 800967a:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800967e:	f04f 34ff 	mov.w	r4, #4294967295
 8009682:	40c4      	lsrs	r4, r0
 8009684:	4222      	tst	r2, r4
 8009686:	d0f7      	beq.n	8009678 <round+0x58>
 8009688:	2001      	movs	r0, #1
 800968a:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800968e:	fa00 f101 	lsl.w	r1, r0, r1
 8009692:	1852      	adds	r2, r2, r1
 8009694:	bf28      	it	cs
 8009696:	181b      	addcs	r3, r3, r0
 8009698:	ea22 0204 	bic.w	r2, r2, r4
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	ec41 0b10 	vmov	d0, r0, r1
 80096a4:	e7e8      	b.n	8009678 <round+0x58>
 80096a6:	bf00      	nop
 80096a8:	000fffff 	.word	0x000fffff
 80096ac:	00000000 	.word	0x00000000

080096b0 <sin>:
 80096b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096b2:	eeb0 7b40 	vmov.f64	d7, d0
 80096b6:	ee17 3a90 	vmov	r3, s15
 80096ba:	4a19      	ldr	r2, [pc, #100]	; (8009720 <sin+0x70>)
 80096bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096c0:	4293      	cmp	r3, r2
 80096c2:	dc05      	bgt.n	80096d0 <sin+0x20>
 80096c4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8009718 <sin+0x68>
 80096c8:	2000      	movs	r0, #0
 80096ca:	f000 fc71 	bl	8009fb0 <__kernel_sin>
 80096ce:	e004      	b.n	80096da <sin+0x2a>
 80096d0:	4a14      	ldr	r2, [pc, #80]	; (8009724 <sin+0x74>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	dd04      	ble.n	80096e0 <sin+0x30>
 80096d6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80096da:	b005      	add	sp, #20
 80096dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80096e0:	4668      	mov	r0, sp
 80096e2:	f000 f821 	bl	8009728 <__ieee754_rem_pio2>
 80096e6:	f000 0003 	and.w	r0, r0, #3
 80096ea:	2801      	cmp	r0, #1
 80096ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096f0:	ed9d 0b00 	vldr	d0, [sp]
 80096f4:	d004      	beq.n	8009700 <sin+0x50>
 80096f6:	2802      	cmp	r0, #2
 80096f8:	d005      	beq.n	8009706 <sin+0x56>
 80096fa:	b950      	cbnz	r0, 8009712 <sin+0x62>
 80096fc:	2001      	movs	r0, #1
 80096fe:	e7e4      	b.n	80096ca <sin+0x1a>
 8009700:	f000 f94e 	bl	80099a0 <__kernel_cos>
 8009704:	e7e9      	b.n	80096da <sin+0x2a>
 8009706:	2001      	movs	r0, #1
 8009708:	f000 fc52 	bl	8009fb0 <__kernel_sin>
 800970c:	eeb1 0b40 	vneg.f64	d0, d0
 8009710:	e7e3      	b.n	80096da <sin+0x2a>
 8009712:	f000 f945 	bl	80099a0 <__kernel_cos>
 8009716:	e7f9      	b.n	800970c <sin+0x5c>
	...
 8009720:	3fe921fb 	.word	0x3fe921fb
 8009724:	7fefffff 	.word	0x7fefffff

08009728 <__ieee754_rem_pio2>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	eeb0 7b40 	vmov.f64	d7, d0
 800972e:	ee17 5a90 	vmov	r5, s15
 8009732:	4b95      	ldr	r3, [pc, #596]	; (8009988 <__ieee754_rem_pio2+0x260>)
 8009734:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009738:	429e      	cmp	r6, r3
 800973a:	b088      	sub	sp, #32
 800973c:	4604      	mov	r4, r0
 800973e:	dc07      	bgt.n	8009750 <__ieee754_rem_pio2+0x28>
 8009740:	2200      	movs	r2, #0
 8009742:	2300      	movs	r3, #0
 8009744:	ed84 0b00 	vstr	d0, [r4]
 8009748:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800974c:	2000      	movs	r0, #0
 800974e:	e01b      	b.n	8009788 <__ieee754_rem_pio2+0x60>
 8009750:	4b8e      	ldr	r3, [pc, #568]	; (800998c <__ieee754_rem_pio2+0x264>)
 8009752:	429e      	cmp	r6, r3
 8009754:	dc3b      	bgt.n	80097ce <__ieee754_rem_pio2+0xa6>
 8009756:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800975a:	2d00      	cmp	r5, #0
 800975c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8009948 <__ieee754_rem_pio2+0x220>
 8009760:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8009764:	dd19      	ble.n	800979a <__ieee754_rem_pio2+0x72>
 8009766:	ee30 7b46 	vsub.f64	d7, d0, d6
 800976a:	429e      	cmp	r6, r3
 800976c:	d00e      	beq.n	800978c <__ieee754_rem_pio2+0x64>
 800976e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8009950 <__ieee754_rem_pio2+0x228>
 8009772:	ee37 5b46 	vsub.f64	d5, d7, d6
 8009776:	ee37 7b45 	vsub.f64	d7, d7, d5
 800977a:	ed84 5b00 	vstr	d5, [r4]
 800977e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009782:	ed84 7b02 	vstr	d7, [r4, #8]
 8009786:	2001      	movs	r0, #1
 8009788:	b008      	add	sp, #32
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8009958 <__ieee754_rem_pio2+0x230>
 8009790:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009794:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8009960 <__ieee754_rem_pio2+0x238>
 8009798:	e7eb      	b.n	8009772 <__ieee754_rem_pio2+0x4a>
 800979a:	429e      	cmp	r6, r3
 800979c:	ee30 7b06 	vadd.f64	d7, d0, d6
 80097a0:	d00e      	beq.n	80097c0 <__ieee754_rem_pio2+0x98>
 80097a2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8009950 <__ieee754_rem_pio2+0x228>
 80097a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80097aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80097ae:	ed84 5b00 	vstr	d5, [r4]
 80097b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80097be:	e7e3      	b.n	8009788 <__ieee754_rem_pio2+0x60>
 80097c0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8009958 <__ieee754_rem_pio2+0x230>
 80097c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80097c8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8009960 <__ieee754_rem_pio2+0x238>
 80097cc:	e7eb      	b.n	80097a6 <__ieee754_rem_pio2+0x7e>
 80097ce:	4b70      	ldr	r3, [pc, #448]	; (8009990 <__ieee754_rem_pio2+0x268>)
 80097d0:	429e      	cmp	r6, r3
 80097d2:	dc6c      	bgt.n	80098ae <__ieee754_rem_pio2+0x186>
 80097d4:	f000 fc44 	bl	800a060 <fabs>
 80097d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80097dc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8009968 <__ieee754_rem_pio2+0x240>
 80097e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80097e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80097e8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80097ec:	ee17 0a90 	vmov	r0, s15
 80097f0:	eeb1 5b44 	vneg.f64	d5, d4
 80097f4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8009948 <__ieee754_rem_pio2+0x220>
 80097f8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80097fc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8009950 <__ieee754_rem_pio2+0x228>
 8009800:	281f      	cmp	r0, #31
 8009802:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009806:	ee30 6b47 	vsub.f64	d6, d0, d7
 800980a:	dc08      	bgt.n	800981e <__ieee754_rem_pio2+0xf6>
 800980c:	1e42      	subs	r2, r0, #1
 800980e:	4b61      	ldr	r3, [pc, #388]	; (8009994 <__ieee754_rem_pio2+0x26c>)
 8009810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009814:	42b3      	cmp	r3, r6
 8009816:	d002      	beq.n	800981e <__ieee754_rem_pio2+0xf6>
 8009818:	ed84 6b00 	vstr	d6, [r4]
 800981c:	e022      	b.n	8009864 <__ieee754_rem_pio2+0x13c>
 800981e:	ee16 3a90 	vmov	r3, s13
 8009822:	1536      	asrs	r6, r6, #20
 8009824:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009828:	1af3      	subs	r3, r6, r3
 800982a:	2b10      	cmp	r3, #16
 800982c:	ddf4      	ble.n	8009818 <__ieee754_rem_pio2+0xf0>
 800982e:	eeb0 6b40 	vmov.f64	d6, d0
 8009832:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8009958 <__ieee754_rem_pio2+0x230>
 8009836:	eea5 6b03 	vfma.f64	d6, d5, d3
 800983a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800983e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8009842:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8009960 <__ieee754_rem_pio2+0x238>
 8009846:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800984a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800984e:	ee13 3a90 	vmov	r3, s7
 8009852:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009856:	1af6      	subs	r6, r6, r3
 8009858:	2e31      	cmp	r6, #49	; 0x31
 800985a:	dc17      	bgt.n	800988c <__ieee754_rem_pio2+0x164>
 800985c:	eeb0 0b46 	vmov.f64	d0, d6
 8009860:	ed84 3b00 	vstr	d3, [r4]
 8009864:	ed94 6b00 	vldr	d6, [r4]
 8009868:	2d00      	cmp	r5, #0
 800986a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800986e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8009872:	ed84 7b02 	vstr	d7, [r4, #8]
 8009876:	da87      	bge.n	8009788 <__ieee754_rem_pio2+0x60>
 8009878:	eeb1 6b46 	vneg.f64	d6, d6
 800987c:	ed84 6b00 	vstr	d6, [r4]
 8009880:	eeb1 7b47 	vneg.f64	d7, d7
 8009884:	4240      	negs	r0, r0
 8009886:	ed84 7b02 	vstr	d7, [r4, #8]
 800988a:	e77d      	b.n	8009788 <__ieee754_rem_pio2+0x60>
 800988c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8009970 <__ieee754_rem_pio2+0x248>
 8009890:	eeb0 0b46 	vmov.f64	d0, d6
 8009894:	eea5 0b03 	vfma.f64	d0, d5, d3
 8009898:	ee36 7b40 	vsub.f64	d7, d6, d0
 800989c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8009978 <__ieee754_rem_pio2+0x250>
 80098a0:	eea5 7b03 	vfma.f64	d7, d5, d3
 80098a4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 80098a8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80098ac:	e7b4      	b.n	8009818 <__ieee754_rem_pio2+0xf0>
 80098ae:	4b3a      	ldr	r3, [pc, #232]	; (8009998 <__ieee754_rem_pio2+0x270>)
 80098b0:	429e      	cmp	r6, r3
 80098b2:	dd06      	ble.n	80098c2 <__ieee754_rem_pio2+0x19a>
 80098b4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80098b8:	ed80 7b02 	vstr	d7, [r0, #8]
 80098bc:	ed80 7b00 	vstr	d7, [r0]
 80098c0:	e744      	b.n	800974c <__ieee754_rem_pio2+0x24>
 80098c2:	1532      	asrs	r2, r6, #20
 80098c4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80098c8:	ee10 0a10 	vmov	r0, s0
 80098cc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80098d0:	ec41 0b17 	vmov	d7, r0, r1
 80098d4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80098d8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8009980 <__ieee754_rem_pio2+0x258>
 80098dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80098e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80098e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80098ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80098f0:	a908      	add	r1, sp, #32
 80098f2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80098f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098fa:	ed8d 6b04 	vstr	d6, [sp, #16]
 80098fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009902:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009906:	2303      	movs	r3, #3
 8009908:	ed31 7b02 	vldmdb	r1!, {d7}
 800990c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009914:	f103 30ff 	add.w	r0, r3, #4294967295
 8009918:	d013      	beq.n	8009942 <__ieee754_rem_pio2+0x21a>
 800991a:	4920      	ldr	r1, [pc, #128]	; (800999c <__ieee754_rem_pio2+0x274>)
 800991c:	9101      	str	r1, [sp, #4]
 800991e:	2102      	movs	r1, #2
 8009920:	9100      	str	r1, [sp, #0]
 8009922:	a802      	add	r0, sp, #8
 8009924:	4621      	mov	r1, r4
 8009926:	f000 f8a7 	bl	8009a78 <__kernel_rem_pio2>
 800992a:	2d00      	cmp	r5, #0
 800992c:	f6bf af2c 	bge.w	8009788 <__ieee754_rem_pio2+0x60>
 8009930:	ed94 7b00 	vldr	d7, [r4]
 8009934:	eeb1 7b47 	vneg.f64	d7, d7
 8009938:	ed84 7b00 	vstr	d7, [r4]
 800993c:	ed94 7b02 	vldr	d7, [r4, #8]
 8009940:	e79e      	b.n	8009880 <__ieee754_rem_pio2+0x158>
 8009942:	4603      	mov	r3, r0
 8009944:	e7e0      	b.n	8009908 <__ieee754_rem_pio2+0x1e0>
 8009946:	bf00      	nop
 8009948:	54400000 	.word	0x54400000
 800994c:	3ff921fb 	.word	0x3ff921fb
 8009950:	1a626331 	.word	0x1a626331
 8009954:	3dd0b461 	.word	0x3dd0b461
 8009958:	1a600000 	.word	0x1a600000
 800995c:	3dd0b461 	.word	0x3dd0b461
 8009960:	2e037073 	.word	0x2e037073
 8009964:	3ba3198a 	.word	0x3ba3198a
 8009968:	6dc9c883 	.word	0x6dc9c883
 800996c:	3fe45f30 	.word	0x3fe45f30
 8009970:	2e000000 	.word	0x2e000000
 8009974:	3ba3198a 	.word	0x3ba3198a
 8009978:	252049c1 	.word	0x252049c1
 800997c:	397b839a 	.word	0x397b839a
 8009980:	00000000 	.word	0x00000000
 8009984:	41700000 	.word	0x41700000
 8009988:	3fe921fb 	.word	0x3fe921fb
 800998c:	4002d97b 	.word	0x4002d97b
 8009990:	413921fb 	.word	0x413921fb
 8009994:	0800a518 	.word	0x0800a518
 8009998:	7fefffff 	.word	0x7fefffff
 800999c:	0800a598 	.word	0x0800a598

080099a0 <__kernel_cos>:
 80099a0:	ee10 1a90 	vmov	r1, s1
 80099a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80099a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80099ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80099b0:	da05      	bge.n	80099be <__kernel_cos+0x1e>
 80099b2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80099b6:	ee16 3a90 	vmov	r3, s13
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d03d      	beq.n	8009a3a <__kernel_cos+0x9a>
 80099be:	ee20 4b00 	vmul.f64	d4, d0, d0
 80099c2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80099c6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8009a40 <__kernel_cos+0xa0>
 80099ca:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80099ce:	ee24 6b06 	vmul.f64	d6, d4, d6
 80099d2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8009a48 <__kernel_cos+0xa8>
 80099d6:	eea4 5b03 	vfma.f64	d5, d4, d3
 80099da:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8009a50 <__kernel_cos+0xb0>
 80099de:	eea5 3b04 	vfma.f64	d3, d5, d4
 80099e2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8009a58 <__kernel_cos+0xb8>
 80099e6:	eea3 5b04 	vfma.f64	d5, d3, d4
 80099ea:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8009a60 <__kernel_cos+0xc0>
 80099ee:	4b20      	ldr	r3, [pc, #128]	; (8009a70 <__kernel_cos+0xd0>)
 80099f0:	eea5 3b04 	vfma.f64	d3, d5, d4
 80099f4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8009a68 <__kernel_cos+0xc8>
 80099f8:	4299      	cmp	r1, r3
 80099fa:	eea3 5b04 	vfma.f64	d5, d3, d4
 80099fe:	ee25 5b04 	vmul.f64	d5, d5, d4
 8009a02:	eea4 1b05 	vfma.f64	d1, d4, d5
 8009a06:	dc04      	bgt.n	8009a12 <__kernel_cos+0x72>
 8009a08:	ee36 6b41 	vsub.f64	d6, d6, d1
 8009a0c:	ee37 0b46 	vsub.f64	d0, d7, d6
 8009a10:	4770      	bx	lr
 8009a12:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <__kernel_cos+0xd4>)
 8009a14:	4299      	cmp	r1, r3
 8009a16:	dc0d      	bgt.n	8009a34 <__kernel_cos+0x94>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8009a1e:	ec43 2b15 	vmov	d5, r2, r3
 8009a22:	ee37 0b45 	vsub.f64	d0, d7, d5
 8009a26:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009a2a:	ee36 6b41 	vsub.f64	d6, d6, d1
 8009a2e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009a32:	4770      	bx	lr
 8009a34:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8009a38:	e7f3      	b.n	8009a22 <__kernel_cos+0x82>
 8009a3a:	eeb0 0b47 	vmov.f64	d0, d7
 8009a3e:	4770      	bx	lr
 8009a40:	be8838d4 	.word	0xbe8838d4
 8009a44:	bda8fae9 	.word	0xbda8fae9
 8009a48:	bdb4b1c4 	.word	0xbdb4b1c4
 8009a4c:	3e21ee9e 	.word	0x3e21ee9e
 8009a50:	809c52ad 	.word	0x809c52ad
 8009a54:	be927e4f 	.word	0xbe927e4f
 8009a58:	19cb1590 	.word	0x19cb1590
 8009a5c:	3efa01a0 	.word	0x3efa01a0
 8009a60:	16c15177 	.word	0x16c15177
 8009a64:	bf56c16c 	.word	0xbf56c16c
 8009a68:	5555554c 	.word	0x5555554c
 8009a6c:	3fa55555 	.word	0x3fa55555
 8009a70:	3fd33332 	.word	0x3fd33332
 8009a74:	3fe90000 	.word	0x3fe90000

08009a78 <__kernel_rem_pio2>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ed2d 8b06 	vpush	{d8-d10}
 8009a80:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8009a84:	469b      	mov	fp, r3
 8009a86:	460e      	mov	r6, r1
 8009a88:	4bc7      	ldr	r3, [pc, #796]	; (8009da8 <__kernel_rem_pio2+0x330>)
 8009a8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009a8c:	9002      	str	r0, [sp, #8]
 8009a8e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009a92:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8009a94:	1ed1      	subs	r1, r2, #3
 8009a96:	2318      	movs	r3, #24
 8009a98:	f06f 0417 	mvn.w	r4, #23
 8009a9c:	fb91 f1f3 	sdiv	r1, r1, r3
 8009aa0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8009aa4:	f10b 3aff 	add.w	sl, fp, #4294967295
 8009aa8:	fb01 4404 	mla	r4, r1, r4, r4
 8009aac:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8009d90 <__kernel_rem_pio2+0x318>
 8009ab0:	4414      	add	r4, r2
 8009ab2:	eba1 050a 	sub.w	r5, r1, sl
 8009ab6:	aa1a      	add	r2, sp, #104	; 0x68
 8009ab8:	eb09 070a 	add.w	r7, r9, sl
 8009abc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8009ac0:	4696      	mov	lr, r2
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	42bb      	cmp	r3, r7
 8009ac6:	dd0f      	ble.n	8009ae8 <__kernel_rem_pio2+0x70>
 8009ac8:	af6a      	add	r7, sp, #424	; 0x1a8
 8009aca:	2200      	movs	r2, #0
 8009acc:	454a      	cmp	r2, r9
 8009ace:	dc28      	bgt.n	8009b22 <__kernel_rem_pio2+0xaa>
 8009ad0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009ad4:	eb0b 0302 	add.w	r3, fp, r2
 8009ad8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8009adc:	9d02      	ldr	r5, [sp, #8]
 8009ade:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8009d90 <__kernel_rem_pio2+0x318>
 8009ae2:	f04f 0c00 	mov.w	ip, #0
 8009ae6:	e016      	b.n	8009b16 <__kernel_rem_pio2+0x9e>
 8009ae8:	42dd      	cmn	r5, r3
 8009aea:	d409      	bmi.n	8009b00 <__kernel_rem_pio2+0x88>
 8009aec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8009af0:	ee07 2a90 	vmov	s15, r2
 8009af4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009af8:	ecae 7b02 	vstmia	lr!, {d7}
 8009afc:	3301      	adds	r3, #1
 8009afe:	e7e1      	b.n	8009ac4 <__kernel_rem_pio2+0x4c>
 8009b00:	eeb0 7b46 	vmov.f64	d7, d6
 8009b04:	e7f8      	b.n	8009af8 <__kernel_rem_pio2+0x80>
 8009b06:	ecb5 5b02 	vldmia	r5!, {d5}
 8009b0a:	ed33 6b02 	vldmdb	r3!, {d6}
 8009b0e:	f10c 0c01 	add.w	ip, ip, #1
 8009b12:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009b16:	45d4      	cmp	ip, sl
 8009b18:	ddf5      	ble.n	8009b06 <__kernel_rem_pio2+0x8e>
 8009b1a:	eca7 7b02 	vstmia	r7!, {d7}
 8009b1e:	3201      	adds	r2, #1
 8009b20:	e7d4      	b.n	8009acc <__kernel_rem_pio2+0x54>
 8009b22:	ab06      	add	r3, sp, #24
 8009b24:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009b28:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8009d98 <__kernel_rem_pio2+0x320>
 8009b2c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8009da0 <__kernel_rem_pio2+0x328>
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009b36:	9303      	str	r3, [sp, #12]
 8009b38:	464d      	mov	r5, r9
 8009b3a:	ab92      	add	r3, sp, #584	; 0x248
 8009b3c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8009b40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009b44:	3f01      	subs	r7, #1
 8009b46:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8009b4a:	00ff      	lsls	r7, r7, #3
 8009b4c:	ab92      	add	r3, sp, #584	; 0x248
 8009b4e:	19da      	adds	r2, r3, r7
 8009b50:	3a98      	subs	r2, #152	; 0x98
 8009b52:	2300      	movs	r3, #0
 8009b54:	1ae9      	subs	r1, r5, r3
 8009b56:	2900      	cmp	r1, #0
 8009b58:	dc4e      	bgt.n	8009bf8 <__kernel_rem_pio2+0x180>
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fb04 	bl	800a168 <scalbn>
 8009b60:	eeb0 8b40 	vmov.f64	d8, d0
 8009b64:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8009b68:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009b6c:	f000 fa84 	bl	800a078 <floor>
 8009b70:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8009b74:	eea0 8b47 	vfms.f64	d8, d0, d7
 8009b78:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009b7c:	2c00      	cmp	r4, #0
 8009b7e:	edcd 7a01 	vstr	s15, [sp, #4]
 8009b82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b86:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009b8a:	dd4a      	ble.n	8009c22 <__kernel_rem_pio2+0x1aa>
 8009b8c:	1e69      	subs	r1, r5, #1
 8009b8e:	ab06      	add	r3, sp, #24
 8009b90:	f1c4 0018 	rsb	r0, r4, #24
 8009b94:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8009b98:	9a01      	ldr	r2, [sp, #4]
 8009b9a:	fa4c f300 	asr.w	r3, ip, r0
 8009b9e:	441a      	add	r2, r3
 8009ba0:	4083      	lsls	r3, r0
 8009ba2:	9201      	str	r2, [sp, #4]
 8009ba4:	ebac 0203 	sub.w	r2, ip, r3
 8009ba8:	ab06      	add	r3, sp, #24
 8009baa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8009bae:	f1c4 0317 	rsb	r3, r4, #23
 8009bb2:	fa42 f803 	asr.w	r8, r2, r3
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	dd43      	ble.n	8009c44 <__kernel_rem_pio2+0x1cc>
 8009bbc:	9b01      	ldr	r3, [sp, #4]
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	4601      	mov	r1, r0
 8009bc6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8009bca:	4285      	cmp	r5, r0
 8009bcc:	dc6e      	bgt.n	8009cac <__kernel_rem_pio2+0x234>
 8009bce:	2c00      	cmp	r4, #0
 8009bd0:	dd04      	ble.n	8009bdc <__kernel_rem_pio2+0x164>
 8009bd2:	2c01      	cmp	r4, #1
 8009bd4:	d07f      	beq.n	8009cd6 <__kernel_rem_pio2+0x25e>
 8009bd6:	2c02      	cmp	r4, #2
 8009bd8:	f000 8087 	beq.w	8009cea <__kernel_rem_pio2+0x272>
 8009bdc:	f1b8 0f02 	cmp.w	r8, #2
 8009be0:	d130      	bne.n	8009c44 <__kernel_rem_pio2+0x1cc>
 8009be2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009be6:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009bea:	b359      	cbz	r1, 8009c44 <__kernel_rem_pio2+0x1cc>
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 fabb 	bl	800a168 <scalbn>
 8009bf2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009bf6:	e025      	b.n	8009c44 <__kernel_rem_pio2+0x1cc>
 8009bf8:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009bfc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009c00:	a806      	add	r0, sp, #24
 8009c02:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009c06:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009c0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009c0e:	ee10 1a10 	vmov	r1, s0
 8009c12:	ed32 0b02 	vldmdb	r2!, {d0}
 8009c16:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8009c1a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009c1e:	3301      	adds	r3, #1
 8009c20:	e798      	b.n	8009b54 <__kernel_rem_pio2+0xdc>
 8009c22:	d106      	bne.n	8009c32 <__kernel_rem_pio2+0x1ba>
 8009c24:	1e6b      	subs	r3, r5, #1
 8009c26:	aa06      	add	r2, sp, #24
 8009c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c2c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8009c30:	e7c1      	b.n	8009bb6 <__kernel_rem_pio2+0x13e>
 8009c32:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009c36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3e:	da32      	bge.n	8009ca6 <__kernel_rem_pio2+0x22e>
 8009c40:	f04f 0800 	mov.w	r8, #0
 8009c44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	f040 80b0 	bne.w	8009db0 <__kernel_rem_pio2+0x338>
 8009c50:	1e6b      	subs	r3, r5, #1
 8009c52:	4618      	mov	r0, r3
 8009c54:	2200      	movs	r2, #0
 8009c56:	4548      	cmp	r0, r9
 8009c58:	da4e      	bge.n	8009cf8 <__kernel_rem_pio2+0x280>
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	f000 8088 	beq.w	8009d70 <__kernel_rem_pio2+0x2f8>
 8009c60:	aa06      	add	r2, sp, #24
 8009c62:	3c18      	subs	r4, #24
 8009c64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	f000 808e 	beq.w	8009d8a <__kernel_rem_pio2+0x312>
 8009c6e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009c72:	4620      	mov	r0, r4
 8009c74:	9302      	str	r3, [sp, #8]
 8009c76:	f000 fa77 	bl	800a168 <scalbn>
 8009c7a:	9b02      	ldr	r3, [sp, #8]
 8009c7c:	aa6a      	add	r2, sp, #424	; 0x1a8
 8009c7e:	00d9      	lsls	r1, r3, #3
 8009c80:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8009d98 <__kernel_rem_pio2+0x320>
 8009c84:	1850      	adds	r0, r2, r1
 8009c86:	f100 0508 	add.w	r5, r0, #8
 8009c8a:	461c      	mov	r4, r3
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	f280 80bd 	bge.w	8009e0c <__kernel_rem_pio2+0x394>
 8009c92:	2500      	movs	r5, #0
 8009c94:	1b5c      	subs	r4, r3, r5
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	f2c0 80dd 	blt.w	8009e56 <__kernel_rem_pio2+0x3de>
 8009c9c:	4f43      	ldr	r7, [pc, #268]	; (8009dac <__kernel_rem_pio2+0x334>)
 8009c9e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8009d90 <__kernel_rem_pio2+0x318>
 8009ca2:	2400      	movs	r4, #0
 8009ca4:	e0cb      	b.n	8009e3e <__kernel_rem_pio2+0x3c6>
 8009ca6:	f04f 0802 	mov.w	r8, #2
 8009caa:	e787      	b.n	8009bbc <__kernel_rem_pio2+0x144>
 8009cac:	ab06      	add	r3, sp, #24
 8009cae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009cb2:	b949      	cbnz	r1, 8009cc8 <__kernel_rem_pio2+0x250>
 8009cb4:	b12b      	cbz	r3, 8009cc2 <__kernel_rem_pio2+0x24a>
 8009cb6:	aa06      	add	r2, sp, #24
 8009cb8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009cbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	e780      	b.n	8009bca <__kernel_rem_pio2+0x152>
 8009cc8:	aa06      	add	r2, sp, #24
 8009cca:	ebac 0303 	sub.w	r3, ip, r3
 8009cce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	e7f5      	b.n	8009cc2 <__kernel_rem_pio2+0x24a>
 8009cd6:	1e68      	subs	r0, r5, #1
 8009cd8:	ab06      	add	r3, sp, #24
 8009cda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009cde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ce2:	aa06      	add	r2, sp, #24
 8009ce4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009ce8:	e778      	b.n	8009bdc <__kernel_rem_pio2+0x164>
 8009cea:	1e68      	subs	r0, r5, #1
 8009cec:	ab06      	add	r3, sp, #24
 8009cee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009cf2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009cf6:	e7f4      	b.n	8009ce2 <__kernel_rem_pio2+0x26a>
 8009cf8:	a906      	add	r1, sp, #24
 8009cfa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009cfe:	3801      	subs	r0, #1
 8009d00:	430a      	orrs	r2, r1
 8009d02:	e7a8      	b.n	8009c56 <__kernel_rem_pio2+0x1de>
 8009d04:	f10c 0c01 	add.w	ip, ip, #1
 8009d08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d0f9      	beq.n	8009d04 <__kernel_rem_pio2+0x28c>
 8009d10:	eb0b 0305 	add.w	r3, fp, r5
 8009d14:	aa1a      	add	r2, sp, #104	; 0x68
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	1898      	adds	r0, r3, r2
 8009d1a:	3008      	adds	r0, #8
 8009d1c:	1c69      	adds	r1, r5, #1
 8009d1e:	3708      	adds	r7, #8
 8009d20:	2200      	movs	r2, #0
 8009d22:	4465      	add	r5, ip
 8009d24:	9005      	str	r0, [sp, #20]
 8009d26:	428d      	cmp	r5, r1
 8009d28:	f6ff af07 	blt.w	8009b3a <__kernel_rem_pio2+0xc2>
 8009d2c:	a81a      	add	r0, sp, #104	; 0x68
 8009d2e:	eb02 0c03 	add.w	ip, r2, r3
 8009d32:	4484      	add	ip, r0
 8009d34:	9803      	ldr	r0, [sp, #12]
 8009d36:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009d3a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8009d3e:	9001      	str	r0, [sp, #4]
 8009d40:	ee07 0a90 	vmov	s15, r0
 8009d44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d48:	9805      	ldr	r0, [sp, #20]
 8009d4a:	ed8c 7b00 	vstr	d7, [ip]
 8009d4e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009d90 <__kernel_rem_pio2+0x318>
 8009d52:	eb00 0802 	add.w	r8, r0, r2
 8009d56:	f04f 0c00 	mov.w	ip, #0
 8009d5a:	45d4      	cmp	ip, sl
 8009d5c:	dd0c      	ble.n	8009d78 <__kernel_rem_pio2+0x300>
 8009d5e:	eb02 0c07 	add.w	ip, r2, r7
 8009d62:	a86a      	add	r0, sp, #424	; 0x1a8
 8009d64:	4484      	add	ip, r0
 8009d66:	ed8c 7b02 	vstr	d7, [ip, #8]
 8009d6a:	3101      	adds	r1, #1
 8009d6c:	3208      	adds	r2, #8
 8009d6e:	e7da      	b.n	8009d26 <__kernel_rem_pio2+0x2ae>
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	f04f 0c01 	mov.w	ip, #1
 8009d76:	e7c7      	b.n	8009d08 <__kernel_rem_pio2+0x290>
 8009d78:	ecbe 5b02 	vldmia	lr!, {d5}
 8009d7c:	ed38 6b02 	vldmdb	r8!, {d6}
 8009d80:	f10c 0c01 	add.w	ip, ip, #1
 8009d84:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009d88:	e7e7      	b.n	8009d5a <__kernel_rem_pio2+0x2e2>
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	e768      	b.n	8009c60 <__kernel_rem_pio2+0x1e8>
 8009d8e:	bf00      	nop
	...
 8009d9c:	3e700000 	.word	0x3e700000
 8009da0:	00000000 	.word	0x00000000
 8009da4:	41700000 	.word	0x41700000
 8009da8:	0800a6e0 	.word	0x0800a6e0
 8009dac:	0800a6a0 	.word	0x0800a6a0
 8009db0:	4260      	negs	r0, r4
 8009db2:	eeb0 0b48 	vmov.f64	d0, d8
 8009db6:	f000 f9d7 	bl	800a168 <scalbn>
 8009dba:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8009f98 <__kernel_rem_pio2+0x520>
 8009dbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8009dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc6:	db18      	blt.n	8009dfa <__kernel_rem_pio2+0x382>
 8009dc8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8009fa0 <__kernel_rem_pio2+0x528>
 8009dcc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009dd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009dd4:	aa06      	add	r2, sp, #24
 8009dd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009dda:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009dde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009de2:	a906      	add	r1, sp, #24
 8009de4:	ee10 3a10 	vmov	r3, s0
 8009de8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009dec:	1c6b      	adds	r3, r5, #1
 8009dee:	ee17 2a10 	vmov	r2, s14
 8009df2:	3418      	adds	r4, #24
 8009df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009df8:	e739      	b.n	8009c6e <__kernel_rem_pio2+0x1f6>
 8009dfa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009dfe:	aa06      	add	r2, sp, #24
 8009e00:	ee10 3a10 	vmov	r3, s0
 8009e04:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009e08:	462b      	mov	r3, r5
 8009e0a:	e730      	b.n	8009c6e <__kernel_rem_pio2+0x1f6>
 8009e0c:	aa06      	add	r2, sp, #24
 8009e0e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009e12:	9202      	str	r2, [sp, #8]
 8009e14:	ee07 2a90 	vmov	s15, r2
 8009e18:	3c01      	subs	r4, #1
 8009e1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009e1e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009e22:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009e26:	ed25 7b02 	vstmdb	r5!, {d7}
 8009e2a:	e72f      	b.n	8009c8c <__kernel_rem_pio2+0x214>
 8009e2c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8009e30:	ecb7 5b02 	vldmia	r7!, {d5}
 8009e34:	ed9c 6b00 	vldr	d6, [ip]
 8009e38:	3401      	adds	r4, #1
 8009e3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009e3e:	454c      	cmp	r4, r9
 8009e40:	dc01      	bgt.n	8009e46 <__kernel_rem_pio2+0x3ce>
 8009e42:	42a5      	cmp	r5, r4
 8009e44:	daf2      	bge.n	8009e2c <__kernel_rem_pio2+0x3b4>
 8009e46:	aa42      	add	r2, sp, #264	; 0x108
 8009e48:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8009e4c:	ed84 7b00 	vstr	d7, [r4]
 8009e50:	3501      	adds	r5, #1
 8009e52:	3808      	subs	r0, #8
 8009e54:	e71e      	b.n	8009c94 <__kernel_rem_pio2+0x21c>
 8009e56:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8009e58:	2a03      	cmp	r2, #3
 8009e5a:	d84e      	bhi.n	8009efa <__kernel_rem_pio2+0x482>
 8009e5c:	e8df f002 	tbb	[pc, r2]
 8009e60:	021f1f3e 	.word	0x021f1f3e
 8009e64:	3108      	adds	r1, #8
 8009e66:	aa42      	add	r2, sp, #264	; 0x108
 8009e68:	4411      	add	r1, r2
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	461c      	mov	r4, r3
 8009e6e:	2c00      	cmp	r4, #0
 8009e70:	dc61      	bgt.n	8009f36 <__kernel_rem_pio2+0x4be>
 8009e72:	4608      	mov	r0, r1
 8009e74:	461c      	mov	r4, r3
 8009e76:	2c01      	cmp	r4, #1
 8009e78:	dc6d      	bgt.n	8009f56 <__kernel_rem_pio2+0x4de>
 8009e7a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009fa8 <__kernel_rem_pio2+0x530>
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	dc79      	bgt.n	8009f76 <__kernel_rem_pio2+0x4fe>
 8009e82:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8009e86:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8009e8a:	f1b8 0f00 	cmp.w	r8, #0
 8009e8e:	d178      	bne.n	8009f82 <__kernel_rem_pio2+0x50a>
 8009e90:	ed86 5b00 	vstr	d5, [r6]
 8009e94:	ed86 6b02 	vstr	d6, [r6, #8]
 8009e98:	ed86 7b04 	vstr	d7, [r6, #16]
 8009e9c:	e02d      	b.n	8009efa <__kernel_rem_pio2+0x482>
 8009e9e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8009fa8 <__kernel_rem_pio2+0x530>
 8009ea2:	3108      	adds	r1, #8
 8009ea4:	aa42      	add	r2, sp, #264	; 0x108
 8009ea6:	4411      	add	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	da34      	bge.n	8009f18 <__kernel_rem_pio2+0x4a0>
 8009eae:	f1b8 0f00 	cmp.w	r8, #0
 8009eb2:	d037      	beq.n	8009f24 <__kernel_rem_pio2+0x4ac>
 8009eb4:	eeb1 7b46 	vneg.f64	d7, d6
 8009eb8:	ed86 7b00 	vstr	d7, [r6]
 8009ebc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8009ec0:	a844      	add	r0, sp, #272	; 0x110
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	da2e      	bge.n	8009f2a <__kernel_rem_pio2+0x4b2>
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	d001      	beq.n	8009ed6 <__kernel_rem_pio2+0x45e>
 8009ed2:	eeb1 7b47 	vneg.f64	d7, d7
 8009ed6:	ed86 7b02 	vstr	d7, [r6, #8]
 8009eda:	e00e      	b.n	8009efa <__kernel_rem_pio2+0x482>
 8009edc:	aa92      	add	r2, sp, #584	; 0x248
 8009ede:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8009fa8 <__kernel_rem_pio2+0x530>
 8009ee2:	4411      	add	r1, r2
 8009ee4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da0f      	bge.n	8009f0c <__kernel_rem_pio2+0x494>
 8009eec:	f1b8 0f00 	cmp.w	r8, #0
 8009ef0:	d001      	beq.n	8009ef6 <__kernel_rem_pio2+0x47e>
 8009ef2:	eeb1 7b47 	vneg.f64	d7, d7
 8009ef6:	ed86 7b00 	vstr	d7, [r6]
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	f003 0007 	and.w	r0, r3, #7
 8009f00:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8009f04:	ecbd 8b06 	vpop	{d8-d10}
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	ed31 6b02 	vldmdb	r1!, {d6}
 8009f10:	3b01      	subs	r3, #1
 8009f12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f16:	e7e7      	b.n	8009ee8 <__kernel_rem_pio2+0x470>
 8009f18:	ed31 7b02 	vldmdb	r1!, {d7}
 8009f1c:	3801      	subs	r0, #1
 8009f1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009f22:	e7c2      	b.n	8009eaa <__kernel_rem_pio2+0x432>
 8009f24:	eeb0 7b46 	vmov.f64	d7, d6
 8009f28:	e7c6      	b.n	8009eb8 <__kernel_rem_pio2+0x440>
 8009f2a:	ecb0 6b02 	vldmia	r0!, {d6}
 8009f2e:	3101      	adds	r1, #1
 8009f30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f34:	e7c8      	b.n	8009ec8 <__kernel_rem_pio2+0x450>
 8009f36:	ed10 7b04 	vldr	d7, [r0, #-16]
 8009f3a:	ed30 5b02 	vldmdb	r0!, {d5}
 8009f3e:	3c01      	subs	r4, #1
 8009f40:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009f44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f48:	ed00 6b02 	vstr	d6, [r0, #-8]
 8009f4c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f50:	ed80 7b00 	vstr	d7, [r0]
 8009f54:	e78b      	b.n	8009e6e <__kernel_rem_pio2+0x3f6>
 8009f56:	ed10 7b04 	vldr	d7, [r0, #-16]
 8009f5a:	ed30 5b02 	vldmdb	r0!, {d5}
 8009f5e:	3c01      	subs	r4, #1
 8009f60:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009f64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f68:	ed00 6b02 	vstr	d6, [r0, #-8]
 8009f6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f70:	ed80 7b00 	vstr	d7, [r0]
 8009f74:	e77f      	b.n	8009e76 <__kernel_rem_pio2+0x3fe>
 8009f76:	ed31 6b02 	vldmdb	r1!, {d6}
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f80:	e77d      	b.n	8009e7e <__kernel_rem_pio2+0x406>
 8009f82:	eeb1 5b45 	vneg.f64	d5, d5
 8009f86:	eeb1 6b46 	vneg.f64	d6, d6
 8009f8a:	ed86 5b00 	vstr	d5, [r6]
 8009f8e:	eeb1 7b47 	vneg.f64	d7, d7
 8009f92:	ed86 6b02 	vstr	d6, [r6, #8]
 8009f96:	e77f      	b.n	8009e98 <__kernel_rem_pio2+0x420>
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	41700000 	.word	0x41700000
 8009fa0:	00000000 	.word	0x00000000
 8009fa4:	3e700000 	.word	0x3e700000
	...

08009fb0 <__kernel_sin>:
 8009fb0:	ee10 3a90 	vmov	r3, s1
 8009fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fb8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009fbc:	da04      	bge.n	8009fc8 <__kernel_sin+0x18>
 8009fbe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009fc2:	ee17 3a90 	vmov	r3, s15
 8009fc6:	b35b      	cbz	r3, 800a020 <__kernel_sin+0x70>
 8009fc8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009fcc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009fd0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a028 <__kernel_sin+0x78>
 8009fd4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a030 <__kernel_sin+0x80>
 8009fd8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009fdc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a038 <__kernel_sin+0x88>
 8009fe0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009fe4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a040 <__kernel_sin+0x90>
 8009fe8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009fec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a048 <__kernel_sin+0x98>
 8009ff0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009ff4:	b930      	cbnz	r0, 800a004 <__kernel_sin+0x54>
 8009ff6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a050 <__kernel_sin+0xa0>
 8009ffa:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009ffe:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a002:	4770      	bx	lr
 800a004:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a008:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a00c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a010:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a014:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a058 <__kernel_sin+0xa8>
 800a018:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a01c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	5acfd57c 	.word	0x5acfd57c
 800a02c:	3de5d93a 	.word	0x3de5d93a
 800a030:	8a2b9ceb 	.word	0x8a2b9ceb
 800a034:	be5ae5e6 	.word	0xbe5ae5e6
 800a038:	57b1fe7d 	.word	0x57b1fe7d
 800a03c:	3ec71de3 	.word	0x3ec71de3
 800a040:	19c161d5 	.word	0x19c161d5
 800a044:	bf2a01a0 	.word	0xbf2a01a0
 800a048:	1110f8a6 	.word	0x1110f8a6
 800a04c:	3f811111 	.word	0x3f811111
 800a050:	55555549 	.word	0x55555549
 800a054:	bfc55555 	.word	0xbfc55555
 800a058:	55555549 	.word	0x55555549
 800a05c:	3fc55555 	.word	0x3fc55555

0800a060 <fabs>:
 800a060:	ec51 0b10 	vmov	r0, r1, d0
 800a064:	ee10 2a10 	vmov	r2, s0
 800a068:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a06c:	ec43 2b10 	vmov	d0, r2, r3
 800a070:	4770      	bx	lr
 800a072:	0000      	movs	r0, r0
 800a074:	0000      	movs	r0, r0
	...

0800a078 <floor>:
 800a078:	ee10 1a90 	vmov	r1, s1
 800a07c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a080:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a084:	2b13      	cmp	r3, #19
 800a086:	b530      	push	{r4, r5, lr}
 800a088:	ee10 0a10 	vmov	r0, s0
 800a08c:	ee10 5a10 	vmov	r5, s0
 800a090:	dc33      	bgt.n	800a0fa <floor+0x82>
 800a092:	2b00      	cmp	r3, #0
 800a094:	da17      	bge.n	800a0c6 <floor+0x4e>
 800a096:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800a158 <floor+0xe0>
 800a09a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a09e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a6:	dd09      	ble.n	800a0bc <floor+0x44>
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	da50      	bge.n	800a14e <floor+0xd6>
 800a0ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0b0:	4a2b      	ldr	r2, [pc, #172]	; (800a160 <floor+0xe8>)
 800a0b2:	4303      	orrs	r3, r0
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	4283      	cmp	r3, r0
 800a0b8:	bf18      	it	ne
 800a0ba:	4611      	movne	r1, r2
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4602      	mov	r2, r0
 800a0c0:	ec43 2b10 	vmov	d0, r2, r3
 800a0c4:	e020      	b.n	800a108 <floor+0x90>
 800a0c6:	4a27      	ldr	r2, [pc, #156]	; (800a164 <floor+0xec>)
 800a0c8:	411a      	asrs	r2, r3
 800a0ca:	ea01 0402 	and.w	r4, r1, r2
 800a0ce:	4304      	orrs	r4, r0
 800a0d0:	d01a      	beq.n	800a108 <floor+0x90>
 800a0d2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a158 <floor+0xe0>
 800a0d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a0da:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e2:	ddeb      	ble.n	800a0bc <floor+0x44>
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	bfbe      	ittt	lt
 800a0e8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a0ec:	fa40 f303 	asrlt.w	r3, r0, r3
 800a0f0:	18c9      	addlt	r1, r1, r3
 800a0f2:	ea21 0102 	bic.w	r1, r1, r2
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	e7e0      	b.n	800a0bc <floor+0x44>
 800a0fa:	2b33      	cmp	r3, #51	; 0x33
 800a0fc:	dd05      	ble.n	800a10a <floor+0x92>
 800a0fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a102:	d101      	bne.n	800a108 <floor+0x90>
 800a104:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a108:	bd30      	pop	{r4, r5, pc}
 800a10a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	40e2      	lsrs	r2, r4
 800a114:	4202      	tst	r2, r0
 800a116:	d0f7      	beq.n	800a108 <floor+0x90>
 800a118:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800a158 <floor+0xe0>
 800a11c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a120:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a128:	ddc8      	ble.n	800a0bc <floor+0x44>
 800a12a:	2900      	cmp	r1, #0
 800a12c:	da02      	bge.n	800a134 <floor+0xbc>
 800a12e:	2b14      	cmp	r3, #20
 800a130:	d103      	bne.n	800a13a <floor+0xc2>
 800a132:	3101      	adds	r1, #1
 800a134:	ea20 0002 	bic.w	r0, r0, r2
 800a138:	e7c0      	b.n	800a0bc <floor+0x44>
 800a13a:	2401      	movs	r4, #1
 800a13c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a140:	fa04 f303 	lsl.w	r3, r4, r3
 800a144:	4418      	add	r0, r3
 800a146:	42a8      	cmp	r0, r5
 800a148:	bf38      	it	cc
 800a14a:	1909      	addcc	r1, r1, r4
 800a14c:	e7f2      	b.n	800a134 <floor+0xbc>
 800a14e:	2000      	movs	r0, #0
 800a150:	4601      	mov	r1, r0
 800a152:	e7b3      	b.n	800a0bc <floor+0x44>
 800a154:	f3af 8000 	nop.w
 800a158:	8800759c 	.word	0x8800759c
 800a15c:	7e37e43c 	.word	0x7e37e43c
 800a160:	bff00000 	.word	0xbff00000
 800a164:	000fffff 	.word	0x000fffff

0800a168 <scalbn>:
 800a168:	b500      	push	{lr}
 800a16a:	ed2d 8b02 	vpush	{d8}
 800a16e:	b083      	sub	sp, #12
 800a170:	ed8d 0b00 	vstr	d0, [sp]
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a17a:	b9a2      	cbnz	r2, 800a1a6 <scalbn+0x3e>
 800a17c:	9a00      	ldr	r2, [sp, #0]
 800a17e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a182:	4313      	orrs	r3, r2
 800a184:	d03a      	beq.n	800a1fc <scalbn+0x94>
 800a186:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a240 <scalbn+0xd8>
 800a18a:	4b35      	ldr	r3, [pc, #212]	; (800a260 <scalbn+0xf8>)
 800a18c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a190:	4298      	cmp	r0, r3
 800a192:	ed8d 7b00 	vstr	d7, [sp]
 800a196:	da11      	bge.n	800a1bc <scalbn+0x54>
 800a198:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a248 <scalbn+0xe0>
 800a19c:	ed9d 6b00 	vldr	d6, [sp]
 800a1a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1a4:	e007      	b.n	800a1b6 <scalbn+0x4e>
 800a1a6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a1aa:	428a      	cmp	r2, r1
 800a1ac:	d10a      	bne.n	800a1c4 <scalbn+0x5c>
 800a1ae:	ed9d 7b00 	vldr	d7, [sp]
 800a1b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a1b6:	ed8d 7b00 	vstr	d7, [sp]
 800a1ba:	e01f      	b.n	800a1fc <scalbn+0x94>
 800a1bc:	9b01      	ldr	r3, [sp, #4]
 800a1be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a1c2:	3a36      	subs	r2, #54	; 0x36
 800a1c4:	4402      	add	r2, r0
 800a1c6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1ca:	428a      	cmp	r2, r1
 800a1cc:	dd0a      	ble.n	800a1e4 <scalbn+0x7c>
 800a1ce:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800a250 <scalbn+0xe8>
 800a1d2:	eeb0 0b48 	vmov.f64	d0, d8
 800a1d6:	ed9d 1b00 	vldr	d1, [sp]
 800a1da:	f000 f843 	bl	800a264 <copysign>
 800a1de:	ee20 7b08 	vmul.f64	d7, d0, d8
 800a1e2:	e7e8      	b.n	800a1b6 <scalbn+0x4e>
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	dd10      	ble.n	800a20a <scalbn+0xa2>
 800a1e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1f4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1fc:	ed9d 0b00 	vldr	d0, [sp]
 800a200:	b003      	add	sp, #12
 800a202:	ecbd 8b02 	vpop	{d8}
 800a206:	f85d fb04 	ldr.w	pc, [sp], #4
 800a20a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a20e:	da06      	bge.n	800a21e <scalbn+0xb6>
 800a210:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a214:	4298      	cmp	r0, r3
 800a216:	dcda      	bgt.n	800a1ce <scalbn+0x66>
 800a218:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800a248 <scalbn+0xe0>
 800a21c:	e7d9      	b.n	800a1d2 <scalbn+0x6a>
 800a21e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a226:	3236      	adds	r2, #54	; 0x36
 800a228:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a22c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a230:	ec41 0b17 	vmov	d7, r0, r1
 800a234:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800a258 <scalbn+0xf0>
 800a238:	e7b2      	b.n	800a1a0 <scalbn+0x38>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
 800a240:	00000000 	.word	0x00000000
 800a244:	43500000 	.word	0x43500000
 800a248:	c2f8f359 	.word	0xc2f8f359
 800a24c:	01a56e1f 	.word	0x01a56e1f
 800a250:	8800759c 	.word	0x8800759c
 800a254:	7e37e43c 	.word	0x7e37e43c
 800a258:	00000000 	.word	0x00000000
 800a25c:	3c900000 	.word	0x3c900000
 800a260:	ffff3cb0 	.word	0xffff3cb0

0800a264 <copysign>:
 800a264:	ec51 0b10 	vmov	r0, r1, d0
 800a268:	ee11 0a90 	vmov	r0, s3
 800a26c:	ee10 2a10 	vmov	r2, s0
 800a270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a278:	ea41 0300 	orr.w	r3, r1, r0
 800a27c:	ec43 2b10 	vmov	d0, r2, r3
 800a280:	4770      	bx	lr
	...

0800a284 <__errno>:
 800a284:	4b01      	ldr	r3, [pc, #4]	; (800a28c <__errno+0x8>)
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	24000168 	.word	0x24000168

0800a290 <__libc_init_array>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	4e0d      	ldr	r6, [pc, #52]	; (800a2c8 <__libc_init_array+0x38>)
 800a294:	4c0d      	ldr	r4, [pc, #52]	; (800a2cc <__libc_init_array+0x3c>)
 800a296:	1ba4      	subs	r4, r4, r6
 800a298:	10a4      	asrs	r4, r4, #2
 800a29a:	2500      	movs	r5, #0
 800a29c:	42a5      	cmp	r5, r4
 800a29e:	d109      	bne.n	800a2b4 <__libc_init_array+0x24>
 800a2a0:	4e0b      	ldr	r6, [pc, #44]	; (800a2d0 <__libc_init_array+0x40>)
 800a2a2:	4c0c      	ldr	r4, [pc, #48]	; (800a2d4 <__libc_init_array+0x44>)
 800a2a4:	f000 f8ea 	bl	800a47c <_init>
 800a2a8:	1ba4      	subs	r4, r4, r6
 800a2aa:	10a4      	asrs	r4, r4, #2
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	42a5      	cmp	r5, r4
 800a2b0:	d105      	bne.n	800a2be <__libc_init_array+0x2e>
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2b8:	4798      	blx	r3
 800a2ba:	3501      	adds	r5, #1
 800a2bc:	e7ee      	b.n	800a29c <__libc_init_array+0xc>
 800a2be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2c2:	4798      	blx	r3
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	e7f2      	b.n	800a2ae <__libc_init_array+0x1e>
 800a2c8:	0800a6f8 	.word	0x0800a6f8
 800a2cc:	0800a6f8 	.word	0x0800a6f8
 800a2d0:	0800a6f8 	.word	0x0800a6f8
 800a2d4:	0800a6fc 	.word	0x0800a6fc

0800a2d8 <malloc>:
 800a2d8:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <malloc+0xc>)
 800a2da:	4601      	mov	r1, r0
 800a2dc:	6818      	ldr	r0, [r3, #0]
 800a2de:	f000 b861 	b.w	800a3a4 <_malloc_r>
 800a2e2:	bf00      	nop
 800a2e4:	24000168 	.word	0x24000168

0800a2e8 <free>:
 800a2e8:	4b02      	ldr	r3, [pc, #8]	; (800a2f4 <free+0xc>)
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	f000 b80b 	b.w	800a308 <_free_r>
 800a2f2:	bf00      	nop
 800a2f4:	24000168 	.word	0x24000168

0800a2f8 <memset>:
 800a2f8:	4402      	add	r2, r0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d100      	bne.n	800a302 <memset+0xa>
 800a300:	4770      	bx	lr
 800a302:	f803 1b01 	strb.w	r1, [r3], #1
 800a306:	e7f9      	b.n	800a2fc <memset+0x4>

0800a308 <_free_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4605      	mov	r5, r0
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d045      	beq.n	800a39c <_free_r+0x94>
 800a310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a314:	1f0c      	subs	r4, r1, #4
 800a316:	2b00      	cmp	r3, #0
 800a318:	bfb8      	it	lt
 800a31a:	18e4      	addlt	r4, r4, r3
 800a31c:	f000 f8ac 	bl	800a478 <__malloc_lock>
 800a320:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <_free_r+0x98>)
 800a322:	6813      	ldr	r3, [r2, #0]
 800a324:	4610      	mov	r0, r2
 800a326:	b933      	cbnz	r3, 800a336 <_free_r+0x2e>
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	6014      	str	r4, [r2, #0]
 800a32c:	4628      	mov	r0, r5
 800a32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a332:	f000 b8a2 	b.w	800a47a <__malloc_unlock>
 800a336:	42a3      	cmp	r3, r4
 800a338:	d90c      	bls.n	800a354 <_free_r+0x4c>
 800a33a:	6821      	ldr	r1, [r4, #0]
 800a33c:	1862      	adds	r2, r4, r1
 800a33e:	4293      	cmp	r3, r2
 800a340:	bf04      	itt	eq
 800a342:	681a      	ldreq	r2, [r3, #0]
 800a344:	685b      	ldreq	r3, [r3, #4]
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	bf04      	itt	eq
 800a34a:	1852      	addeq	r2, r2, r1
 800a34c:	6022      	streq	r2, [r4, #0]
 800a34e:	6004      	str	r4, [r0, #0]
 800a350:	e7ec      	b.n	800a32c <_free_r+0x24>
 800a352:	4613      	mov	r3, r2
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	b10a      	cbz	r2, 800a35c <_free_r+0x54>
 800a358:	42a2      	cmp	r2, r4
 800a35a:	d9fa      	bls.n	800a352 <_free_r+0x4a>
 800a35c:	6819      	ldr	r1, [r3, #0]
 800a35e:	1858      	adds	r0, r3, r1
 800a360:	42a0      	cmp	r0, r4
 800a362:	d10b      	bne.n	800a37c <_free_r+0x74>
 800a364:	6820      	ldr	r0, [r4, #0]
 800a366:	4401      	add	r1, r0
 800a368:	1858      	adds	r0, r3, r1
 800a36a:	4282      	cmp	r2, r0
 800a36c:	6019      	str	r1, [r3, #0]
 800a36e:	d1dd      	bne.n	800a32c <_free_r+0x24>
 800a370:	6810      	ldr	r0, [r2, #0]
 800a372:	6852      	ldr	r2, [r2, #4]
 800a374:	605a      	str	r2, [r3, #4]
 800a376:	4401      	add	r1, r0
 800a378:	6019      	str	r1, [r3, #0]
 800a37a:	e7d7      	b.n	800a32c <_free_r+0x24>
 800a37c:	d902      	bls.n	800a384 <_free_r+0x7c>
 800a37e:	230c      	movs	r3, #12
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	e7d3      	b.n	800a32c <_free_r+0x24>
 800a384:	6820      	ldr	r0, [r4, #0]
 800a386:	1821      	adds	r1, r4, r0
 800a388:	428a      	cmp	r2, r1
 800a38a:	bf04      	itt	eq
 800a38c:	6811      	ldreq	r1, [r2, #0]
 800a38e:	6852      	ldreq	r2, [r2, #4]
 800a390:	6062      	str	r2, [r4, #4]
 800a392:	bf04      	itt	eq
 800a394:	1809      	addeq	r1, r1, r0
 800a396:	6021      	streq	r1, [r4, #0]
 800a398:	605c      	str	r4, [r3, #4]
 800a39a:	e7c7      	b.n	800a32c <_free_r+0x24>
 800a39c:	bd38      	pop	{r3, r4, r5, pc}
 800a39e:	bf00      	nop
 800a3a0:	240001f0 	.word	0x240001f0

0800a3a4 <_malloc_r>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	1ccd      	adds	r5, r1, #3
 800a3a8:	f025 0503 	bic.w	r5, r5, #3
 800a3ac:	3508      	adds	r5, #8
 800a3ae:	2d0c      	cmp	r5, #12
 800a3b0:	bf38      	it	cc
 800a3b2:	250c      	movcc	r5, #12
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	db01      	blt.n	800a3be <_malloc_r+0x1a>
 800a3ba:	42a9      	cmp	r1, r5
 800a3bc:	d903      	bls.n	800a3c6 <_malloc_r+0x22>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	6033      	str	r3, [r6, #0]
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	bd70      	pop	{r4, r5, r6, pc}
 800a3c6:	f000 f857 	bl	800a478 <__malloc_lock>
 800a3ca:	4a21      	ldr	r2, [pc, #132]	; (800a450 <_malloc_r+0xac>)
 800a3cc:	6814      	ldr	r4, [r2, #0]
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	b991      	cbnz	r1, 800a3f8 <_malloc_r+0x54>
 800a3d2:	4c20      	ldr	r4, [pc, #128]	; (800a454 <_malloc_r+0xb0>)
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	b91b      	cbnz	r3, 800a3e0 <_malloc_r+0x3c>
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 f83d 	bl	800a458 <_sbrk_r>
 800a3de:	6020      	str	r0, [r4, #0]
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f838 	bl	800a458 <_sbrk_r>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d124      	bne.n	800a436 <_malloc_r+0x92>
 800a3ec:	230c      	movs	r3, #12
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f000 f842 	bl	800a47a <__malloc_unlock>
 800a3f6:	e7e4      	b.n	800a3c2 <_malloc_r+0x1e>
 800a3f8:	680b      	ldr	r3, [r1, #0]
 800a3fa:	1b5b      	subs	r3, r3, r5
 800a3fc:	d418      	bmi.n	800a430 <_malloc_r+0x8c>
 800a3fe:	2b0b      	cmp	r3, #11
 800a400:	d90f      	bls.n	800a422 <_malloc_r+0x7e>
 800a402:	600b      	str	r3, [r1, #0]
 800a404:	50cd      	str	r5, [r1, r3]
 800a406:	18cc      	adds	r4, r1, r3
 800a408:	4630      	mov	r0, r6
 800a40a:	f000 f836 	bl	800a47a <__malloc_unlock>
 800a40e:	f104 000b 	add.w	r0, r4, #11
 800a412:	1d23      	adds	r3, r4, #4
 800a414:	f020 0007 	bic.w	r0, r0, #7
 800a418:	1ac3      	subs	r3, r0, r3
 800a41a:	d0d3      	beq.n	800a3c4 <_malloc_r+0x20>
 800a41c:	425a      	negs	r2, r3
 800a41e:	50e2      	str	r2, [r4, r3]
 800a420:	e7d0      	b.n	800a3c4 <_malloc_r+0x20>
 800a422:	428c      	cmp	r4, r1
 800a424:	684b      	ldr	r3, [r1, #4]
 800a426:	bf16      	itet	ne
 800a428:	6063      	strne	r3, [r4, #4]
 800a42a:	6013      	streq	r3, [r2, #0]
 800a42c:	460c      	movne	r4, r1
 800a42e:	e7eb      	b.n	800a408 <_malloc_r+0x64>
 800a430:	460c      	mov	r4, r1
 800a432:	6849      	ldr	r1, [r1, #4]
 800a434:	e7cc      	b.n	800a3d0 <_malloc_r+0x2c>
 800a436:	1cc4      	adds	r4, r0, #3
 800a438:	f024 0403 	bic.w	r4, r4, #3
 800a43c:	42a0      	cmp	r0, r4
 800a43e:	d005      	beq.n	800a44c <_malloc_r+0xa8>
 800a440:	1a21      	subs	r1, r4, r0
 800a442:	4630      	mov	r0, r6
 800a444:	f000 f808 	bl	800a458 <_sbrk_r>
 800a448:	3001      	adds	r0, #1
 800a44a:	d0cf      	beq.n	800a3ec <_malloc_r+0x48>
 800a44c:	6025      	str	r5, [r4, #0]
 800a44e:	e7db      	b.n	800a408 <_malloc_r+0x64>
 800a450:	240001f0 	.word	0x240001f0
 800a454:	240001f4 	.word	0x240001f4

0800a458 <_sbrk_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4c06      	ldr	r4, [pc, #24]	; (800a474 <_sbrk_r+0x1c>)
 800a45c:	2300      	movs	r3, #0
 800a45e:	4605      	mov	r5, r0
 800a460:	4608      	mov	r0, r1
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	f7f6 fcbc 	bl	8000de0 <_sbrk>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_sbrk_r+0x1a>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_sbrk_r+0x1a>
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	24000b64 	.word	0x24000b64

0800a478 <__malloc_lock>:
 800a478:	4770      	bx	lr

0800a47a <__malloc_unlock>:
 800a47a:	4770      	bx	lr

0800a47c <_init>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	bf00      	nop
 800a480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a482:	bc08      	pop	{r3}
 800a484:	469e      	mov	lr, r3
 800a486:	4770      	bx	lr

0800a488 <_fini>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	bf00      	nop
 800a48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48e:	bc08      	pop	{r3}
 800a490:	469e      	mov	lr, r3
 800a492:	4770      	bx	lr
