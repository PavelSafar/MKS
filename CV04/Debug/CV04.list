
CV04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c8  080031c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031c8  080031c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031c8  080031c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080031dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080031dc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d30  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001238  00000000  00000000  00024d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  00025fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000408  00000000  00000000  00026460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b566  00000000  00000000  00026868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000055e4  00000000  00000000  00031dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003f495  00000000  00000000  000373b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00076847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001074  00000000  00000000  000768c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030a0 	.word	0x080030a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030a0 	.word	0x080030a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fefd 	bl	8001028 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe5b 	bl	8000ef0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fb0c 	bl	8000860 <__aeabi_dsub>
 8000248:	f000 fe52 	bl	8000ef0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	46de      	mov	lr, fp
 8000262:	464e      	mov	r6, r9
 8000264:	4645      	mov	r5, r8
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4683      	mov	fp, r0
 800026a:	0007      	movs	r7, r0
 800026c:	030e      	lsls	r6, r1, #12
 800026e:	0048      	lsls	r0, r1, #1
 8000270:	b085      	sub	sp, #20
 8000272:	4692      	mov	sl, r2
 8000274:	001c      	movs	r4, r3
 8000276:	0b36      	lsrs	r6, r6, #12
 8000278:	0d40      	lsrs	r0, r0, #21
 800027a:	0fcd      	lsrs	r5, r1, #31
 800027c:	2800      	cmp	r0, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e09d      	b.n	80003be <__aeabi_ddiv+0x162>
 8000282:	4b95      	ldr	r3, [pc, #596]	; (80004d8 <__aeabi_ddiv+0x27c>)
 8000284:	4298      	cmp	r0, r3
 8000286:	d039      	beq.n	80002fc <__aeabi_ddiv+0xa0>
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	00f6      	lsls	r6, r6, #3
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	431e      	orrs	r6, r3
 8000290:	4a92      	ldr	r2, [pc, #584]	; (80004dc <__aeabi_ddiv+0x280>)
 8000292:	0f7b      	lsrs	r3, r7, #29
 8000294:	4333      	orrs	r3, r6
 8000296:	4699      	mov	r9, r3
 8000298:	4694      	mov	ip, r2
 800029a:	0003      	movs	r3, r0
 800029c:	4463      	add	r3, ip
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	2300      	movs	r3, #0
 80002a2:	2600      	movs	r6, #0
 80002a4:	00ff      	lsls	r7, r7, #3
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	0323      	lsls	r3, r4, #12
 80002aa:	0b1b      	lsrs	r3, r3, #12
 80002ac:	4698      	mov	r8, r3
 80002ae:	0063      	lsls	r3, r4, #1
 80002b0:	0fe4      	lsrs	r4, r4, #31
 80002b2:	4652      	mov	r2, sl
 80002b4:	0d5b      	lsrs	r3, r3, #21
 80002b6:	9401      	str	r4, [sp, #4]
 80002b8:	d100      	bne.n	80002bc <__aeabi_ddiv+0x60>
 80002ba:	e0b3      	b.n	8000424 <__aeabi_ddiv+0x1c8>
 80002bc:	4986      	ldr	r1, [pc, #536]	; (80004d8 <__aeabi_ddiv+0x27c>)
 80002be:	428b      	cmp	r3, r1
 80002c0:	d100      	bne.n	80002c4 <__aeabi_ddiv+0x68>
 80002c2:	e09e      	b.n	8000402 <__aeabi_ddiv+0x1a6>
 80002c4:	4642      	mov	r2, r8
 80002c6:	00d1      	lsls	r1, r2, #3
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0412      	lsls	r2, r2, #16
 80002cc:	430a      	orrs	r2, r1
 80002ce:	4651      	mov	r1, sl
 80002d0:	0f49      	lsrs	r1, r1, #29
 80002d2:	4311      	orrs	r1, r2
 80002d4:	468b      	mov	fp, r1
 80002d6:	4981      	ldr	r1, [pc, #516]	; (80004dc <__aeabi_ddiv+0x280>)
 80002d8:	4652      	mov	r2, sl
 80002da:	468c      	mov	ip, r1
 80002dc:	9900      	ldr	r1, [sp, #0]
 80002de:	4463      	add	r3, ip
 80002e0:	1acb      	subs	r3, r1, r3
 80002e2:	2100      	movs	r1, #0
 80002e4:	00d2      	lsls	r2, r2, #3
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	002b      	movs	r3, r5
 80002ea:	4063      	eors	r3, r4
 80002ec:	469a      	mov	sl, r3
 80002ee:	2e0f      	cmp	r6, #15
 80002f0:	d900      	bls.n	80002f4 <__aeabi_ddiv+0x98>
 80002f2:	e105      	b.n	8000500 <__aeabi_ddiv+0x2a4>
 80002f4:	4b7a      	ldr	r3, [pc, #488]	; (80004e0 <__aeabi_ddiv+0x284>)
 80002f6:	00b6      	lsls	r6, r6, #2
 80002f8:	599b      	ldr	r3, [r3, r6]
 80002fa:	469f      	mov	pc, r3
 80002fc:	465b      	mov	r3, fp
 80002fe:	4333      	orrs	r3, r6
 8000300:	4699      	mov	r9, r3
 8000302:	d000      	beq.n	8000306 <__aeabi_ddiv+0xaa>
 8000304:	e0b8      	b.n	8000478 <__aeabi_ddiv+0x21c>
 8000306:	2302      	movs	r3, #2
 8000308:	2608      	movs	r6, #8
 800030a:	2700      	movs	r7, #0
 800030c:	9000      	str	r0, [sp, #0]
 800030e:	9302      	str	r3, [sp, #8]
 8000310:	e7ca      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000312:	46cb      	mov	fp, r9
 8000314:	003a      	movs	r2, r7
 8000316:	9902      	ldr	r1, [sp, #8]
 8000318:	9501      	str	r5, [sp, #4]
 800031a:	9b01      	ldr	r3, [sp, #4]
 800031c:	469a      	mov	sl, r3
 800031e:	2902      	cmp	r1, #2
 8000320:	d027      	beq.n	8000372 <__aeabi_ddiv+0x116>
 8000322:	2903      	cmp	r1, #3
 8000324:	d100      	bne.n	8000328 <__aeabi_ddiv+0xcc>
 8000326:	e280      	b.n	800082a <__aeabi_ddiv+0x5ce>
 8000328:	2901      	cmp	r1, #1
 800032a:	d044      	beq.n	80003b6 <__aeabi_ddiv+0x15a>
 800032c:	496d      	ldr	r1, [pc, #436]	; (80004e4 <__aeabi_ddiv+0x288>)
 800032e:	9b00      	ldr	r3, [sp, #0]
 8000330:	468c      	mov	ip, r1
 8000332:	4463      	add	r3, ip
 8000334:	001c      	movs	r4, r3
 8000336:	2c00      	cmp	r4, #0
 8000338:	dd38      	ble.n	80003ac <__aeabi_ddiv+0x150>
 800033a:	0753      	lsls	r3, r2, #29
 800033c:	d000      	beq.n	8000340 <__aeabi_ddiv+0xe4>
 800033e:	e213      	b.n	8000768 <__aeabi_ddiv+0x50c>
 8000340:	08d2      	lsrs	r2, r2, #3
 8000342:	465b      	mov	r3, fp
 8000344:	01db      	lsls	r3, r3, #7
 8000346:	d509      	bpl.n	800035c <__aeabi_ddiv+0x100>
 8000348:	4659      	mov	r1, fp
 800034a:	4b67      	ldr	r3, [pc, #412]	; (80004e8 <__aeabi_ddiv+0x28c>)
 800034c:	4019      	ands	r1, r3
 800034e:	468b      	mov	fp, r1
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	00c9      	lsls	r1, r1, #3
 8000354:	468c      	mov	ip, r1
 8000356:	9b00      	ldr	r3, [sp, #0]
 8000358:	4463      	add	r3, ip
 800035a:	001c      	movs	r4, r3
 800035c:	4b63      	ldr	r3, [pc, #396]	; (80004ec <__aeabi_ddiv+0x290>)
 800035e:	429c      	cmp	r4, r3
 8000360:	dc07      	bgt.n	8000372 <__aeabi_ddiv+0x116>
 8000362:	465b      	mov	r3, fp
 8000364:	0564      	lsls	r4, r4, #21
 8000366:	075f      	lsls	r7, r3, #29
 8000368:	025b      	lsls	r3, r3, #9
 800036a:	4317      	orrs	r7, r2
 800036c:	0b1b      	lsrs	r3, r3, #12
 800036e:	0d62      	lsrs	r2, r4, #21
 8000370:	e002      	b.n	8000378 <__aeabi_ddiv+0x11c>
 8000372:	2300      	movs	r3, #0
 8000374:	2700      	movs	r7, #0
 8000376:	4a58      	ldr	r2, [pc, #352]	; (80004d8 <__aeabi_ddiv+0x27c>)
 8000378:	2100      	movs	r1, #0
 800037a:	031b      	lsls	r3, r3, #12
 800037c:	0b1c      	lsrs	r4, r3, #12
 800037e:	0d0b      	lsrs	r3, r1, #20
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	4323      	orrs	r3, r4
 8000384:	0514      	lsls	r4, r2, #20
 8000386:	4a5a      	ldr	r2, [pc, #360]	; (80004f0 <__aeabi_ddiv+0x294>)
 8000388:	0038      	movs	r0, r7
 800038a:	4013      	ands	r3, r2
 800038c:	431c      	orrs	r4, r3
 800038e:	4653      	mov	r3, sl
 8000390:	0064      	lsls	r4, r4, #1
 8000392:	07db      	lsls	r3, r3, #31
 8000394:	0864      	lsrs	r4, r4, #1
 8000396:	431c      	orrs	r4, r3
 8000398:	0021      	movs	r1, r4
 800039a:	b005      	add	sp, #20
 800039c:	bc3c      	pop	{r2, r3, r4, r5}
 800039e:	4690      	mov	r8, r2
 80003a0:	4699      	mov	r9, r3
 80003a2:	46a2      	mov	sl, r4
 80003a4:	46ab      	mov	fp, r5
 80003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a8:	2201      	movs	r2, #1
 80003aa:	4252      	negs	r2, r2
 80003ac:	2301      	movs	r3, #1
 80003ae:	1b1b      	subs	r3, r3, r4
 80003b0:	2b38      	cmp	r3, #56	; 0x38
 80003b2:	dc00      	bgt.n	80003b6 <__aeabi_ddiv+0x15a>
 80003b4:	e1ad      	b.n	8000712 <__aeabi_ddiv+0x4b6>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2300      	movs	r3, #0
 80003ba:	2700      	movs	r7, #0
 80003bc:	e7dc      	b.n	8000378 <__aeabi_ddiv+0x11c>
 80003be:	465b      	mov	r3, fp
 80003c0:	4333      	orrs	r3, r6
 80003c2:	4699      	mov	r9, r3
 80003c4:	d05e      	beq.n	8000484 <__aeabi_ddiv+0x228>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d100      	bne.n	80003cc <__aeabi_ddiv+0x170>
 80003ca:	e18a      	b.n	80006e2 <__aeabi_ddiv+0x486>
 80003cc:	0030      	movs	r0, r6
 80003ce:	f000 fe35 	bl	800103c <__clzsi2>
 80003d2:	0003      	movs	r3, r0
 80003d4:	3b0b      	subs	r3, #11
 80003d6:	2b1c      	cmp	r3, #28
 80003d8:	dd00      	ble.n	80003dc <__aeabi_ddiv+0x180>
 80003da:	e17b      	b.n	80006d4 <__aeabi_ddiv+0x478>
 80003dc:	221d      	movs	r2, #29
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	465a      	mov	r2, fp
 80003e2:	0001      	movs	r1, r0
 80003e4:	40da      	lsrs	r2, r3
 80003e6:	3908      	subs	r1, #8
 80003e8:	408e      	lsls	r6, r1
 80003ea:	0013      	movs	r3, r2
 80003ec:	465f      	mov	r7, fp
 80003ee:	4333      	orrs	r3, r6
 80003f0:	4699      	mov	r9, r3
 80003f2:	408f      	lsls	r7, r1
 80003f4:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <__aeabi_ddiv+0x298>)
 80003f6:	2600      	movs	r6, #0
 80003f8:	1a1b      	subs	r3, r3, r0
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2300      	movs	r3, #0
 80003fe:	9302      	str	r3, [sp, #8]
 8000400:	e752      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000402:	4641      	mov	r1, r8
 8000404:	4653      	mov	r3, sl
 8000406:	430b      	orrs	r3, r1
 8000408:	493b      	ldr	r1, [pc, #236]	; (80004f8 <__aeabi_ddiv+0x29c>)
 800040a:	469b      	mov	fp, r3
 800040c:	468c      	mov	ip, r1
 800040e:	9b00      	ldr	r3, [sp, #0]
 8000410:	4463      	add	r3, ip
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	465b      	mov	r3, fp
 8000416:	2b00      	cmp	r3, #0
 8000418:	d13b      	bne.n	8000492 <__aeabi_ddiv+0x236>
 800041a:	2302      	movs	r3, #2
 800041c:	2200      	movs	r2, #0
 800041e:	431e      	orrs	r6, r3
 8000420:	2102      	movs	r1, #2
 8000422:	e761      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 8000424:	4643      	mov	r3, r8
 8000426:	4313      	orrs	r3, r2
 8000428:	469b      	mov	fp, r3
 800042a:	d037      	beq.n	800049c <__aeabi_ddiv+0x240>
 800042c:	4643      	mov	r3, r8
 800042e:	2b00      	cmp	r3, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1d8>
 8000432:	e162      	b.n	80006fa <__aeabi_ddiv+0x49e>
 8000434:	4640      	mov	r0, r8
 8000436:	f000 fe01 	bl	800103c <__clzsi2>
 800043a:	0003      	movs	r3, r0
 800043c:	3b0b      	subs	r3, #11
 800043e:	2b1c      	cmp	r3, #28
 8000440:	dd00      	ble.n	8000444 <__aeabi_ddiv+0x1e8>
 8000442:	e153      	b.n	80006ec <__aeabi_ddiv+0x490>
 8000444:	0002      	movs	r2, r0
 8000446:	4641      	mov	r1, r8
 8000448:	3a08      	subs	r2, #8
 800044a:	4091      	lsls	r1, r2
 800044c:	4688      	mov	r8, r1
 800044e:	211d      	movs	r1, #29
 8000450:	1acb      	subs	r3, r1, r3
 8000452:	4651      	mov	r1, sl
 8000454:	40d9      	lsrs	r1, r3
 8000456:	000b      	movs	r3, r1
 8000458:	4641      	mov	r1, r8
 800045a:	430b      	orrs	r3, r1
 800045c:	469b      	mov	fp, r3
 800045e:	4653      	mov	r3, sl
 8000460:	4093      	lsls	r3, r2
 8000462:	001a      	movs	r2, r3
 8000464:	9b00      	ldr	r3, [sp, #0]
 8000466:	4925      	ldr	r1, [pc, #148]	; (80004fc <__aeabi_ddiv+0x2a0>)
 8000468:	469c      	mov	ip, r3
 800046a:	4460      	add	r0, ip
 800046c:	0003      	movs	r3, r0
 800046e:	468c      	mov	ip, r1
 8000470:	4463      	add	r3, ip
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2100      	movs	r1, #0
 8000476:	e737      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 8000478:	2303      	movs	r3, #3
 800047a:	46b1      	mov	r9, r6
 800047c:	9000      	str	r0, [sp, #0]
 800047e:	260c      	movs	r6, #12
 8000480:	9302      	str	r3, [sp, #8]
 8000482:	e711      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000484:	2300      	movs	r3, #0
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	2604      	movs	r6, #4
 800048c:	2700      	movs	r7, #0
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	e70a      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000492:	2303      	movs	r3, #3
 8000494:	46c3      	mov	fp, r8
 8000496:	431e      	orrs	r6, r3
 8000498:	2103      	movs	r1, #3
 800049a:	e725      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 800049c:	3301      	adds	r3, #1
 800049e:	431e      	orrs	r6, r3
 80004a0:	2200      	movs	r2, #0
 80004a2:	2101      	movs	r1, #1
 80004a4:	e720      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	469a      	mov	sl, r3
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	2700      	movs	r7, #0
 80004ae:	031b      	lsls	r3, r3, #12
 80004b0:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <__aeabi_ddiv+0x27c>)
 80004b2:	e761      	b.n	8000378 <__aeabi_ddiv+0x11c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	4649      	mov	r1, r9
 80004b8:	031b      	lsls	r3, r3, #12
 80004ba:	4219      	tst	r1, r3
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x264>
 80004be:	e0e2      	b.n	8000686 <__aeabi_ddiv+0x42a>
 80004c0:	4659      	mov	r1, fp
 80004c2:	4219      	tst	r1, r3
 80004c4:	d000      	beq.n	80004c8 <__aeabi_ddiv+0x26c>
 80004c6:	e0de      	b.n	8000686 <__aeabi_ddiv+0x42a>
 80004c8:	430b      	orrs	r3, r1
 80004ca:	031b      	lsls	r3, r3, #12
 80004cc:	0017      	movs	r7, r2
 80004ce:	0b1b      	lsrs	r3, r3, #12
 80004d0:	46a2      	mov	sl, r4
 80004d2:	4a01      	ldr	r2, [pc, #4]	; (80004d8 <__aeabi_ddiv+0x27c>)
 80004d4:	e750      	b.n	8000378 <__aeabi_ddiv+0x11c>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	000007ff 	.word	0x000007ff
 80004dc:	fffffc01 	.word	0xfffffc01
 80004e0:	080030d8 	.word	0x080030d8
 80004e4:	000003ff 	.word	0x000003ff
 80004e8:	feffffff 	.word	0xfeffffff
 80004ec:	000007fe 	.word	0x000007fe
 80004f0:	800fffff 	.word	0x800fffff
 80004f4:	fffffc0d 	.word	0xfffffc0d
 80004f8:	fffff801 	.word	0xfffff801
 80004fc:	000003f3 	.word	0x000003f3
 8000500:	45d9      	cmp	r9, fp
 8000502:	d900      	bls.n	8000506 <__aeabi_ddiv+0x2aa>
 8000504:	e0cb      	b.n	800069e <__aeabi_ddiv+0x442>
 8000506:	d100      	bne.n	800050a <__aeabi_ddiv+0x2ae>
 8000508:	e0c6      	b.n	8000698 <__aeabi_ddiv+0x43c>
 800050a:	003c      	movs	r4, r7
 800050c:	4648      	mov	r0, r9
 800050e:	2700      	movs	r7, #0
 8000510:	9b00      	ldr	r3, [sp, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	465b      	mov	r3, fp
 8000518:	0e16      	lsrs	r6, r2, #24
 800051a:	021b      	lsls	r3, r3, #8
 800051c:	431e      	orrs	r6, r3
 800051e:	0213      	lsls	r3, r2, #8
 8000520:	4698      	mov	r8, r3
 8000522:	0433      	lsls	r3, r6, #16
 8000524:	0c1b      	lsrs	r3, r3, #16
 8000526:	4699      	mov	r9, r3
 8000528:	0c31      	lsrs	r1, r6, #16
 800052a:	9101      	str	r1, [sp, #4]
 800052c:	f7ff fe72 	bl	8000214 <__aeabi_uidivmod>
 8000530:	464a      	mov	r2, r9
 8000532:	4342      	muls	r2, r0
 8000534:	040b      	lsls	r3, r1, #16
 8000536:	0c21      	lsrs	r1, r4, #16
 8000538:	0005      	movs	r5, r0
 800053a:	4319      	orrs	r1, r3
 800053c:	428a      	cmp	r2, r1
 800053e:	d907      	bls.n	8000550 <__aeabi_ddiv+0x2f4>
 8000540:	1989      	adds	r1, r1, r6
 8000542:	3d01      	subs	r5, #1
 8000544:	428e      	cmp	r6, r1
 8000546:	d803      	bhi.n	8000550 <__aeabi_ddiv+0x2f4>
 8000548:	428a      	cmp	r2, r1
 800054a:	d901      	bls.n	8000550 <__aeabi_ddiv+0x2f4>
 800054c:	1e85      	subs	r5, r0, #2
 800054e:	1989      	adds	r1, r1, r6
 8000550:	1a88      	subs	r0, r1, r2
 8000552:	9901      	ldr	r1, [sp, #4]
 8000554:	f7ff fe5e 	bl	8000214 <__aeabi_uidivmod>
 8000558:	0409      	lsls	r1, r1, #16
 800055a:	468c      	mov	ip, r1
 800055c:	464a      	mov	r2, r9
 800055e:	0421      	lsls	r1, r4, #16
 8000560:	4664      	mov	r4, ip
 8000562:	4342      	muls	r2, r0
 8000564:	0c09      	lsrs	r1, r1, #16
 8000566:	0003      	movs	r3, r0
 8000568:	4321      	orrs	r1, r4
 800056a:	428a      	cmp	r2, r1
 800056c:	d904      	bls.n	8000578 <__aeabi_ddiv+0x31c>
 800056e:	1989      	adds	r1, r1, r6
 8000570:	3b01      	subs	r3, #1
 8000572:	428e      	cmp	r6, r1
 8000574:	d800      	bhi.n	8000578 <__aeabi_ddiv+0x31c>
 8000576:	e0f1      	b.n	800075c <__aeabi_ddiv+0x500>
 8000578:	042d      	lsls	r5, r5, #16
 800057a:	431d      	orrs	r5, r3
 800057c:	46ab      	mov	fp, r5
 800057e:	4643      	mov	r3, r8
 8000580:	1a89      	subs	r1, r1, r2
 8000582:	4642      	mov	r2, r8
 8000584:	0c28      	lsrs	r0, r5, #16
 8000586:	0412      	lsls	r2, r2, #16
 8000588:	0c1d      	lsrs	r5, r3, #16
 800058a:	465b      	mov	r3, fp
 800058c:	0c14      	lsrs	r4, r2, #16
 800058e:	0022      	movs	r2, r4
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	435a      	muls	r2, r3
 8000596:	9403      	str	r4, [sp, #12]
 8000598:	436b      	muls	r3, r5
 800059a:	4344      	muls	r4, r0
 800059c:	9502      	str	r5, [sp, #8]
 800059e:	4368      	muls	r0, r5
 80005a0:	191b      	adds	r3, r3, r4
 80005a2:	0c15      	lsrs	r5, r2, #16
 80005a4:	18eb      	adds	r3, r5, r3
 80005a6:	429c      	cmp	r4, r3
 80005a8:	d903      	bls.n	80005b2 <__aeabi_ddiv+0x356>
 80005aa:	2480      	movs	r4, #128	; 0x80
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	46a4      	mov	ip, r4
 80005b0:	4460      	add	r0, ip
 80005b2:	0c1c      	lsrs	r4, r3, #16
 80005b4:	0415      	lsls	r5, r2, #16
 80005b6:	041b      	lsls	r3, r3, #16
 80005b8:	0c2d      	lsrs	r5, r5, #16
 80005ba:	1820      	adds	r0, r4, r0
 80005bc:	195d      	adds	r5, r3, r5
 80005be:	4281      	cmp	r1, r0
 80005c0:	d377      	bcc.n	80006b2 <__aeabi_ddiv+0x456>
 80005c2:	d073      	beq.n	80006ac <__aeabi_ddiv+0x450>
 80005c4:	1a0c      	subs	r4, r1, r0
 80005c6:	4aa2      	ldr	r2, [pc, #648]	; (8000850 <__aeabi_ddiv+0x5f4>)
 80005c8:	1b7d      	subs	r5, r7, r5
 80005ca:	42af      	cmp	r7, r5
 80005cc:	41bf      	sbcs	r7, r7
 80005ce:	4694      	mov	ip, r2
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	427f      	negs	r7, r7
 80005d4:	4463      	add	r3, ip
 80005d6:	1be0      	subs	r0, r4, r7
 80005d8:	001c      	movs	r4, r3
 80005da:	4286      	cmp	r6, r0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_ddiv+0x384>
 80005de:	e0db      	b.n	8000798 <__aeabi_ddiv+0x53c>
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	f7ff fe17 	bl	8000214 <__aeabi_uidivmod>
 80005e6:	464a      	mov	r2, r9
 80005e8:	4342      	muls	r2, r0
 80005ea:	040b      	lsls	r3, r1, #16
 80005ec:	0c29      	lsrs	r1, r5, #16
 80005ee:	0007      	movs	r7, r0
 80005f0:	4319      	orrs	r1, r3
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d907      	bls.n	8000606 <__aeabi_ddiv+0x3aa>
 80005f6:	1989      	adds	r1, r1, r6
 80005f8:	3f01      	subs	r7, #1
 80005fa:	428e      	cmp	r6, r1
 80005fc:	d803      	bhi.n	8000606 <__aeabi_ddiv+0x3aa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	d901      	bls.n	8000606 <__aeabi_ddiv+0x3aa>
 8000602:	1e87      	subs	r7, r0, #2
 8000604:	1989      	adds	r1, r1, r6
 8000606:	1a88      	subs	r0, r1, r2
 8000608:	9901      	ldr	r1, [sp, #4]
 800060a:	f7ff fe03 	bl	8000214 <__aeabi_uidivmod>
 800060e:	0409      	lsls	r1, r1, #16
 8000610:	464a      	mov	r2, r9
 8000612:	4689      	mov	r9, r1
 8000614:	0429      	lsls	r1, r5, #16
 8000616:	464d      	mov	r5, r9
 8000618:	4342      	muls	r2, r0
 800061a:	0c09      	lsrs	r1, r1, #16
 800061c:	0003      	movs	r3, r0
 800061e:	4329      	orrs	r1, r5
 8000620:	428a      	cmp	r2, r1
 8000622:	d907      	bls.n	8000634 <__aeabi_ddiv+0x3d8>
 8000624:	1989      	adds	r1, r1, r6
 8000626:	3b01      	subs	r3, #1
 8000628:	428e      	cmp	r6, r1
 800062a:	d803      	bhi.n	8000634 <__aeabi_ddiv+0x3d8>
 800062c:	428a      	cmp	r2, r1
 800062e:	d901      	bls.n	8000634 <__aeabi_ddiv+0x3d8>
 8000630:	1e83      	subs	r3, r0, #2
 8000632:	1989      	adds	r1, r1, r6
 8000634:	043f      	lsls	r7, r7, #16
 8000636:	1a89      	subs	r1, r1, r2
 8000638:	003a      	movs	r2, r7
 800063a:	9f03      	ldr	r7, [sp, #12]
 800063c:	431a      	orrs	r2, r3
 800063e:	0038      	movs	r0, r7
 8000640:	0413      	lsls	r3, r2, #16
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	4358      	muls	r0, r3
 8000646:	4681      	mov	r9, r0
 8000648:	9802      	ldr	r0, [sp, #8]
 800064a:	0c15      	lsrs	r5, r2, #16
 800064c:	436f      	muls	r7, r5
 800064e:	4343      	muls	r3, r0
 8000650:	4345      	muls	r5, r0
 8000652:	4648      	mov	r0, r9
 8000654:	0c00      	lsrs	r0, r0, #16
 8000656:	4684      	mov	ip, r0
 8000658:	19db      	adds	r3, r3, r7
 800065a:	4463      	add	r3, ip
 800065c:	429f      	cmp	r7, r3
 800065e:	d903      	bls.n	8000668 <__aeabi_ddiv+0x40c>
 8000660:	2080      	movs	r0, #128	; 0x80
 8000662:	0240      	lsls	r0, r0, #9
 8000664:	4684      	mov	ip, r0
 8000666:	4465      	add	r5, ip
 8000668:	4648      	mov	r0, r9
 800066a:	0c1f      	lsrs	r7, r3, #16
 800066c:	0400      	lsls	r0, r0, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c00      	lsrs	r0, r0, #16
 8000672:	197d      	adds	r5, r7, r5
 8000674:	1818      	adds	r0, r3, r0
 8000676:	42a9      	cmp	r1, r5
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x420>
 800067a:	e084      	b.n	8000786 <__aeabi_ddiv+0x52a>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x424>
 800067e:	e07f      	b.n	8000780 <__aeabi_ddiv+0x524>
 8000680:	2301      	movs	r3, #1
 8000682:	431a      	orrs	r2, r3
 8000684:	e657      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	464a      	mov	r2, r9
 800068a:	031b      	lsls	r3, r3, #12
 800068c:	4313      	orrs	r3, r2
 800068e:	031b      	lsls	r3, r3, #12
 8000690:	0b1b      	lsrs	r3, r3, #12
 8000692:	46aa      	mov	sl, r5
 8000694:	4a6f      	ldr	r2, [pc, #444]	; (8000854 <__aeabi_ddiv+0x5f8>)
 8000696:	e66f      	b.n	8000378 <__aeabi_ddiv+0x11c>
 8000698:	42ba      	cmp	r2, r7
 800069a:	d900      	bls.n	800069e <__aeabi_ddiv+0x442>
 800069c:	e735      	b.n	800050a <__aeabi_ddiv+0x2ae>
 800069e:	464b      	mov	r3, r9
 80006a0:	07dc      	lsls	r4, r3, #31
 80006a2:	0858      	lsrs	r0, r3, #1
 80006a4:	087b      	lsrs	r3, r7, #1
 80006a6:	431c      	orrs	r4, r3
 80006a8:	07ff      	lsls	r7, r7, #31
 80006aa:	e734      	b.n	8000516 <__aeabi_ddiv+0x2ba>
 80006ac:	2400      	movs	r4, #0
 80006ae:	42af      	cmp	r7, r5
 80006b0:	d289      	bcs.n	80005c6 <__aeabi_ddiv+0x36a>
 80006b2:	4447      	add	r7, r8
 80006b4:	4547      	cmp	r7, r8
 80006b6:	41a4      	sbcs	r4, r4
 80006b8:	465b      	mov	r3, fp
 80006ba:	4264      	negs	r4, r4
 80006bc:	19a4      	adds	r4, r4, r6
 80006be:	1864      	adds	r4, r4, r1
 80006c0:	3b01      	subs	r3, #1
 80006c2:	42a6      	cmp	r6, r4
 80006c4:	d21e      	bcs.n	8000704 <__aeabi_ddiv+0x4a8>
 80006c6:	42a0      	cmp	r0, r4
 80006c8:	d86d      	bhi.n	80007a6 <__aeabi_ddiv+0x54a>
 80006ca:	d100      	bne.n	80006ce <__aeabi_ddiv+0x472>
 80006cc:	e0b6      	b.n	800083c <__aeabi_ddiv+0x5e0>
 80006ce:	1a24      	subs	r4, r4, r0
 80006d0:	469b      	mov	fp, r3
 80006d2:	e778      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 80006d4:	0003      	movs	r3, r0
 80006d6:	465a      	mov	r2, fp
 80006d8:	3b28      	subs	r3, #40	; 0x28
 80006da:	409a      	lsls	r2, r3
 80006dc:	2700      	movs	r7, #0
 80006de:	4691      	mov	r9, r2
 80006e0:	e688      	b.n	80003f4 <__aeabi_ddiv+0x198>
 80006e2:	4658      	mov	r0, fp
 80006e4:	f000 fcaa 	bl	800103c <__clzsi2>
 80006e8:	3020      	adds	r0, #32
 80006ea:	e672      	b.n	80003d2 <__aeabi_ddiv+0x176>
 80006ec:	0003      	movs	r3, r0
 80006ee:	4652      	mov	r2, sl
 80006f0:	3b28      	subs	r3, #40	; 0x28
 80006f2:	409a      	lsls	r2, r3
 80006f4:	4693      	mov	fp, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	e6b4      	b.n	8000464 <__aeabi_ddiv+0x208>
 80006fa:	4650      	mov	r0, sl
 80006fc:	f000 fc9e 	bl	800103c <__clzsi2>
 8000700:	3020      	adds	r0, #32
 8000702:	e69a      	b.n	800043a <__aeabi_ddiv+0x1de>
 8000704:	42a6      	cmp	r6, r4
 8000706:	d1e2      	bne.n	80006ce <__aeabi_ddiv+0x472>
 8000708:	45b8      	cmp	r8, r7
 800070a:	d9dc      	bls.n	80006c6 <__aeabi_ddiv+0x46a>
 800070c:	1a34      	subs	r4, r6, r0
 800070e:	469b      	mov	fp, r3
 8000710:	e759      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 8000712:	2b1f      	cmp	r3, #31
 8000714:	dc65      	bgt.n	80007e2 <__aeabi_ddiv+0x586>
 8000716:	4c50      	ldr	r4, [pc, #320]	; (8000858 <__aeabi_ddiv+0x5fc>)
 8000718:	9900      	ldr	r1, [sp, #0]
 800071a:	46a4      	mov	ip, r4
 800071c:	465c      	mov	r4, fp
 800071e:	4461      	add	r1, ip
 8000720:	0008      	movs	r0, r1
 8000722:	408c      	lsls	r4, r1
 8000724:	0011      	movs	r1, r2
 8000726:	4082      	lsls	r2, r0
 8000728:	40d9      	lsrs	r1, r3
 800072a:	1e50      	subs	r0, r2, #1
 800072c:	4182      	sbcs	r2, r0
 800072e:	430c      	orrs	r4, r1
 8000730:	4314      	orrs	r4, r2
 8000732:	465a      	mov	r2, fp
 8000734:	40da      	lsrs	r2, r3
 8000736:	0013      	movs	r3, r2
 8000738:	0762      	lsls	r2, r4, #29
 800073a:	d009      	beq.n	8000750 <__aeabi_ddiv+0x4f4>
 800073c:	220f      	movs	r2, #15
 800073e:	4022      	ands	r2, r4
 8000740:	2a04      	cmp	r2, #4
 8000742:	d005      	beq.n	8000750 <__aeabi_ddiv+0x4f4>
 8000744:	0022      	movs	r2, r4
 8000746:	1d14      	adds	r4, r2, #4
 8000748:	4294      	cmp	r4, r2
 800074a:	4189      	sbcs	r1, r1
 800074c:	4249      	negs	r1, r1
 800074e:	185b      	adds	r3, r3, r1
 8000750:	021a      	lsls	r2, r3, #8
 8000752:	d562      	bpl.n	800081a <__aeabi_ddiv+0x5be>
 8000754:	2201      	movs	r2, #1
 8000756:	2300      	movs	r3, #0
 8000758:	2700      	movs	r7, #0
 800075a:	e60d      	b.n	8000378 <__aeabi_ddiv+0x11c>
 800075c:	428a      	cmp	r2, r1
 800075e:	d800      	bhi.n	8000762 <__aeabi_ddiv+0x506>
 8000760:	e70a      	b.n	8000578 <__aeabi_ddiv+0x31c>
 8000762:	1e83      	subs	r3, r0, #2
 8000764:	1989      	adds	r1, r1, r6
 8000766:	e707      	b.n	8000578 <__aeabi_ddiv+0x31c>
 8000768:	230f      	movs	r3, #15
 800076a:	4013      	ands	r3, r2
 800076c:	2b04      	cmp	r3, #4
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x516>
 8000770:	e5e6      	b.n	8000340 <__aeabi_ddiv+0xe4>
 8000772:	1d17      	adds	r7, r2, #4
 8000774:	4297      	cmp	r7, r2
 8000776:	4192      	sbcs	r2, r2
 8000778:	4253      	negs	r3, r2
 800077a:	449b      	add	fp, r3
 800077c:	08fa      	lsrs	r2, r7, #3
 800077e:	e5e0      	b.n	8000342 <__aeabi_ddiv+0xe6>
 8000780:	2800      	cmp	r0, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_ddiv+0x52a>
 8000784:	e5d7      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000786:	1871      	adds	r1, r6, r1
 8000788:	1e53      	subs	r3, r2, #1
 800078a:	42b1      	cmp	r1, r6
 800078c:	d327      	bcc.n	80007de <__aeabi_ddiv+0x582>
 800078e:	42a9      	cmp	r1, r5
 8000790:	d315      	bcc.n	80007be <__aeabi_ddiv+0x562>
 8000792:	d058      	beq.n	8000846 <__aeabi_ddiv+0x5ea>
 8000794:	001a      	movs	r2, r3
 8000796:	e773      	b.n	8000680 <__aeabi_ddiv+0x424>
 8000798:	2b00      	cmp	r3, #0
 800079a:	dc00      	bgt.n	800079e <__aeabi_ddiv+0x542>
 800079c:	e604      	b.n	80003a8 <__aeabi_ddiv+0x14c>
 800079e:	2301      	movs	r3, #1
 80007a0:	2200      	movs	r2, #0
 80007a2:	449b      	add	fp, r3
 80007a4:	e5cd      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80007a6:	2302      	movs	r3, #2
 80007a8:	4447      	add	r7, r8
 80007aa:	4547      	cmp	r7, r8
 80007ac:	4189      	sbcs	r1, r1
 80007ae:	425b      	negs	r3, r3
 80007b0:	469c      	mov	ip, r3
 80007b2:	4249      	negs	r1, r1
 80007b4:	1989      	adds	r1, r1, r6
 80007b6:	190c      	adds	r4, r1, r4
 80007b8:	44e3      	add	fp, ip
 80007ba:	1a24      	subs	r4, r4, r0
 80007bc:	e703      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 80007be:	4643      	mov	r3, r8
 80007c0:	005f      	lsls	r7, r3, #1
 80007c2:	4547      	cmp	r7, r8
 80007c4:	419b      	sbcs	r3, r3
 80007c6:	46b8      	mov	r8, r7
 80007c8:	425b      	negs	r3, r3
 80007ca:	199e      	adds	r6, r3, r6
 80007cc:	3a02      	subs	r2, #2
 80007ce:	1989      	adds	r1, r1, r6
 80007d0:	42a9      	cmp	r1, r5
 80007d2:	d000      	beq.n	80007d6 <__aeabi_ddiv+0x57a>
 80007d4:	e754      	b.n	8000680 <__aeabi_ddiv+0x424>
 80007d6:	4540      	cmp	r0, r8
 80007d8:	d000      	beq.n	80007dc <__aeabi_ddiv+0x580>
 80007da:	e751      	b.n	8000680 <__aeabi_ddiv+0x424>
 80007dc:	e5ab      	b.n	8000336 <__aeabi_ddiv+0xda>
 80007de:	001a      	movs	r2, r3
 80007e0:	e7f6      	b.n	80007d0 <__aeabi_ddiv+0x574>
 80007e2:	211f      	movs	r1, #31
 80007e4:	465f      	mov	r7, fp
 80007e6:	4249      	negs	r1, r1
 80007e8:	1b0c      	subs	r4, r1, r4
 80007ea:	40e7      	lsrs	r7, r4
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d007      	beq.n	8000800 <__aeabi_ddiv+0x5a4>
 80007f0:	491a      	ldr	r1, [pc, #104]	; (800085c <__aeabi_ddiv+0x600>)
 80007f2:	9b00      	ldr	r3, [sp, #0]
 80007f4:	468c      	mov	ip, r1
 80007f6:	4463      	add	r3, ip
 80007f8:	0018      	movs	r0, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	4083      	lsls	r3, r0
 80007fe:	431a      	orrs	r2, r3
 8000800:	1e50      	subs	r0, r2, #1
 8000802:	4182      	sbcs	r2, r0
 8000804:	433a      	orrs	r2, r7
 8000806:	2707      	movs	r7, #7
 8000808:	2300      	movs	r3, #0
 800080a:	4017      	ands	r7, r2
 800080c:	d009      	beq.n	8000822 <__aeabi_ddiv+0x5c6>
 800080e:	210f      	movs	r1, #15
 8000810:	2300      	movs	r3, #0
 8000812:	4011      	ands	r1, r2
 8000814:	0014      	movs	r4, r2
 8000816:	2904      	cmp	r1, #4
 8000818:	d195      	bne.n	8000746 <__aeabi_ddiv+0x4ea>
 800081a:	0022      	movs	r2, r4
 800081c:	075f      	lsls	r7, r3, #29
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	0b1b      	lsrs	r3, r3, #12
 8000822:	08d2      	lsrs	r2, r2, #3
 8000824:	4317      	orrs	r7, r2
 8000826:	2200      	movs	r2, #0
 8000828:	e5a6      	b.n	8000378 <__aeabi_ddiv+0x11c>
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	4659      	mov	r1, fp
 800082e:	031b      	lsls	r3, r3, #12
 8000830:	430b      	orrs	r3, r1
 8000832:	031b      	lsls	r3, r3, #12
 8000834:	0017      	movs	r7, r2
 8000836:	0b1b      	lsrs	r3, r3, #12
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <__aeabi_ddiv+0x5f8>)
 800083a:	e59d      	b.n	8000378 <__aeabi_ddiv+0x11c>
 800083c:	42bd      	cmp	r5, r7
 800083e:	d8b2      	bhi.n	80007a6 <__aeabi_ddiv+0x54a>
 8000840:	469b      	mov	fp, r3
 8000842:	2400      	movs	r4, #0
 8000844:	e6bf      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 8000846:	4580      	cmp	r8, r0
 8000848:	d3b9      	bcc.n	80007be <__aeabi_ddiv+0x562>
 800084a:	001a      	movs	r2, r3
 800084c:	e7c3      	b.n	80007d6 <__aeabi_ddiv+0x57a>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	000003ff 	.word	0x000003ff
 8000854:	000007ff 	.word	0x000007ff
 8000858:	0000041e 	.word	0x0000041e
 800085c:	0000043e 	.word	0x0000043e

08000860 <__aeabi_dsub>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	4657      	mov	r7, sl
 8000864:	464e      	mov	r6, r9
 8000866:	4645      	mov	r5, r8
 8000868:	46de      	mov	lr, fp
 800086a:	000c      	movs	r4, r1
 800086c:	0309      	lsls	r1, r1, #12
 800086e:	b5e0      	push	{r5, r6, r7, lr}
 8000870:	0a49      	lsrs	r1, r1, #9
 8000872:	0f46      	lsrs	r6, r0, #29
 8000874:	005f      	lsls	r7, r3, #1
 8000876:	4331      	orrs	r1, r6
 8000878:	031e      	lsls	r6, r3, #12
 800087a:	0fdb      	lsrs	r3, r3, #31
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	469b      	mov	fp, r3
 8000880:	0f53      	lsrs	r3, r2, #29
 8000882:	4333      	orrs	r3, r6
 8000884:	4ec8      	ldr	r6, [pc, #800]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000886:	0065      	lsls	r5, r4, #1
 8000888:	00c0      	lsls	r0, r0, #3
 800088a:	0fe4      	lsrs	r4, r4, #31
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	0d6d      	lsrs	r5, r5, #21
 8000890:	46a2      	mov	sl, r4
 8000892:	4681      	mov	r9, r0
 8000894:	0d7f      	lsrs	r7, r7, #21
 8000896:	469c      	mov	ip, r3
 8000898:	4690      	mov	r8, r2
 800089a:	42b7      	cmp	r7, r6
 800089c:	d100      	bne.n	80008a0 <__aeabi_dsub+0x40>
 800089e:	e0b9      	b.n	8000a14 <__aeabi_dsub+0x1b4>
 80008a0:	465b      	mov	r3, fp
 80008a2:	2601      	movs	r6, #1
 80008a4:	4073      	eors	r3, r6
 80008a6:	469b      	mov	fp, r3
 80008a8:	1bee      	subs	r6, r5, r7
 80008aa:	45a3      	cmp	fp, r4
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dsub+0x50>
 80008ae:	e083      	b.n	80009b8 <__aeabi_dsub+0x158>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	dd63      	ble.n	800097c <__aeabi_dsub+0x11c>
 80008b4:	2f00      	cmp	r7, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_dsub+0x5a>
 80008b8:	e0b1      	b.n	8000a1e <__aeabi_dsub+0x1be>
 80008ba:	4663      	mov	r3, ip
 80008bc:	4313      	orrs	r3, r2
 80008be:	d100      	bne.n	80008c2 <__aeabi_dsub+0x62>
 80008c0:	e123      	b.n	8000b0a <__aeabi_dsub+0x2aa>
 80008c2:	1e73      	subs	r3, r6, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_dsub+0x6a>
 80008c8:	e1ba      	b.n	8000c40 <__aeabi_dsub+0x3e0>
 80008ca:	1a86      	subs	r6, r0, r2
 80008cc:	4663      	mov	r3, ip
 80008ce:	42b0      	cmp	r0, r6
 80008d0:	4180      	sbcs	r0, r0
 80008d2:	2501      	movs	r5, #1
 80008d4:	1ac9      	subs	r1, r1, r3
 80008d6:	4240      	negs	r0, r0
 80008d8:	1a09      	subs	r1, r1, r0
 80008da:	020b      	lsls	r3, r1, #8
 80008dc:	d400      	bmi.n	80008e0 <__aeabi_dsub+0x80>
 80008de:	e147      	b.n	8000b70 <__aeabi_dsub+0x310>
 80008e0:	0249      	lsls	r1, r1, #9
 80008e2:	0a4b      	lsrs	r3, r1, #9
 80008e4:	4698      	mov	r8, r3
 80008e6:	4643      	mov	r3, r8
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_dsub+0x8e>
 80008ec:	e189      	b.n	8000c02 <__aeabi_dsub+0x3a2>
 80008ee:	4640      	mov	r0, r8
 80008f0:	f000 fba4 	bl	800103c <__clzsi2>
 80008f4:	0003      	movs	r3, r0
 80008f6:	3b08      	subs	r3, #8
 80008f8:	2b1f      	cmp	r3, #31
 80008fa:	dd00      	ble.n	80008fe <__aeabi_dsub+0x9e>
 80008fc:	e17c      	b.n	8000bf8 <__aeabi_dsub+0x398>
 80008fe:	2220      	movs	r2, #32
 8000900:	0030      	movs	r0, r6
 8000902:	1ad2      	subs	r2, r2, r3
 8000904:	4641      	mov	r1, r8
 8000906:	40d0      	lsrs	r0, r2
 8000908:	4099      	lsls	r1, r3
 800090a:	0002      	movs	r2, r0
 800090c:	409e      	lsls	r6, r3
 800090e:	430a      	orrs	r2, r1
 8000910:	429d      	cmp	r5, r3
 8000912:	dd00      	ble.n	8000916 <__aeabi_dsub+0xb6>
 8000914:	e16a      	b.n	8000bec <__aeabi_dsub+0x38c>
 8000916:	1b5d      	subs	r5, r3, r5
 8000918:	1c6b      	adds	r3, r5, #1
 800091a:	2b1f      	cmp	r3, #31
 800091c:	dd00      	ble.n	8000920 <__aeabi_dsub+0xc0>
 800091e:	e194      	b.n	8000c4a <__aeabi_dsub+0x3ea>
 8000920:	2120      	movs	r1, #32
 8000922:	0010      	movs	r0, r2
 8000924:	0035      	movs	r5, r6
 8000926:	1ac9      	subs	r1, r1, r3
 8000928:	408e      	lsls	r6, r1
 800092a:	40da      	lsrs	r2, r3
 800092c:	4088      	lsls	r0, r1
 800092e:	40dd      	lsrs	r5, r3
 8000930:	1e71      	subs	r1, r6, #1
 8000932:	418e      	sbcs	r6, r1
 8000934:	0011      	movs	r1, r2
 8000936:	2207      	movs	r2, #7
 8000938:	4328      	orrs	r0, r5
 800093a:	2500      	movs	r5, #0
 800093c:	4306      	orrs	r6, r0
 800093e:	4032      	ands	r2, r6
 8000940:	2a00      	cmp	r2, #0
 8000942:	d009      	beq.n	8000958 <__aeabi_dsub+0xf8>
 8000944:	230f      	movs	r3, #15
 8000946:	4033      	ands	r3, r6
 8000948:	2b04      	cmp	r3, #4
 800094a:	d005      	beq.n	8000958 <__aeabi_dsub+0xf8>
 800094c:	1d33      	adds	r3, r6, #4
 800094e:	42b3      	cmp	r3, r6
 8000950:	41b6      	sbcs	r6, r6
 8000952:	4276      	negs	r6, r6
 8000954:	1989      	adds	r1, r1, r6
 8000956:	001e      	movs	r6, r3
 8000958:	020b      	lsls	r3, r1, #8
 800095a:	d400      	bmi.n	800095e <__aeabi_dsub+0xfe>
 800095c:	e23d      	b.n	8000dda <__aeabi_dsub+0x57a>
 800095e:	1c6a      	adds	r2, r5, #1
 8000960:	4b91      	ldr	r3, [pc, #580]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000962:	0555      	lsls	r5, r2, #21
 8000964:	0d6d      	lsrs	r5, r5, #21
 8000966:	429a      	cmp	r2, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dsub+0x10c>
 800096a:	e119      	b.n	8000ba0 <__aeabi_dsub+0x340>
 800096c:	4a8f      	ldr	r2, [pc, #572]	; (8000bac <__aeabi_dsub+0x34c>)
 800096e:	08f6      	lsrs	r6, r6, #3
 8000970:	400a      	ands	r2, r1
 8000972:	0757      	lsls	r7, r2, #29
 8000974:	0252      	lsls	r2, r2, #9
 8000976:	4337      	orrs	r7, r6
 8000978:	0b12      	lsrs	r2, r2, #12
 800097a:	e09b      	b.n	8000ab4 <__aeabi_dsub+0x254>
 800097c:	2e00      	cmp	r6, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dsub+0x122>
 8000980:	e0c5      	b.n	8000b0e <__aeabi_dsub+0x2ae>
 8000982:	1c6e      	adds	r6, r5, #1
 8000984:	0576      	lsls	r6, r6, #21
 8000986:	0d76      	lsrs	r6, r6, #21
 8000988:	2e01      	cmp	r6, #1
 800098a:	dc00      	bgt.n	800098e <__aeabi_dsub+0x12e>
 800098c:	e148      	b.n	8000c20 <__aeabi_dsub+0x3c0>
 800098e:	4667      	mov	r7, ip
 8000990:	1a86      	subs	r6, r0, r2
 8000992:	1bcb      	subs	r3, r1, r7
 8000994:	42b0      	cmp	r0, r6
 8000996:	41bf      	sbcs	r7, r7
 8000998:	427f      	negs	r7, r7
 800099a:	46b8      	mov	r8, r7
 800099c:	001f      	movs	r7, r3
 800099e:	4643      	mov	r3, r8
 80009a0:	1aff      	subs	r7, r7, r3
 80009a2:	003b      	movs	r3, r7
 80009a4:	46b8      	mov	r8, r7
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	d500      	bpl.n	80009ac <__aeabi_dsub+0x14c>
 80009aa:	e15f      	b.n	8000c6c <__aeabi_dsub+0x40c>
 80009ac:	4337      	orrs	r7, r6
 80009ae:	d19a      	bne.n	80008e6 <__aeabi_dsub+0x86>
 80009b0:	2200      	movs	r2, #0
 80009b2:	2400      	movs	r4, #0
 80009b4:	2500      	movs	r5, #0
 80009b6:	e079      	b.n	8000aac <__aeabi_dsub+0x24c>
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_dsub+0x15e>
 80009bc:	e0fa      	b.n	8000bb4 <__aeabi_dsub+0x354>
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dsub+0x164>
 80009c2:	e08d      	b.n	8000ae0 <__aeabi_dsub+0x280>
 80009c4:	4b78      	ldr	r3, [pc, #480]	; (8000ba8 <__aeabi_dsub+0x348>)
 80009c6:	429d      	cmp	r5, r3
 80009c8:	d067      	beq.n	8000a9a <__aeabi_dsub+0x23a>
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	4667      	mov	r7, ip
 80009ce:	041b      	lsls	r3, r3, #16
 80009d0:	431f      	orrs	r7, r3
 80009d2:	46bc      	mov	ip, r7
 80009d4:	2e38      	cmp	r6, #56	; 0x38
 80009d6:	dc00      	bgt.n	80009da <__aeabi_dsub+0x17a>
 80009d8:	e152      	b.n	8000c80 <__aeabi_dsub+0x420>
 80009da:	4663      	mov	r3, ip
 80009dc:	4313      	orrs	r3, r2
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	181e      	adds	r6, r3, r0
 80009e4:	4286      	cmp	r6, r0
 80009e6:	4180      	sbcs	r0, r0
 80009e8:	4240      	negs	r0, r0
 80009ea:	1809      	adds	r1, r1, r0
 80009ec:	020b      	lsls	r3, r1, #8
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_dsub+0x192>
 80009f0:	e0be      	b.n	8000b70 <__aeabi_dsub+0x310>
 80009f2:	4b6d      	ldr	r3, [pc, #436]	; (8000ba8 <__aeabi_dsub+0x348>)
 80009f4:	3501      	adds	r5, #1
 80009f6:	429d      	cmp	r5, r3
 80009f8:	d100      	bne.n	80009fc <__aeabi_dsub+0x19c>
 80009fa:	e0d2      	b.n	8000ba2 <__aeabi_dsub+0x342>
 80009fc:	4a6b      	ldr	r2, [pc, #428]	; (8000bac <__aeabi_dsub+0x34c>)
 80009fe:	0873      	lsrs	r3, r6, #1
 8000a00:	400a      	ands	r2, r1
 8000a02:	2101      	movs	r1, #1
 8000a04:	400e      	ands	r6, r1
 8000a06:	431e      	orrs	r6, r3
 8000a08:	0851      	lsrs	r1, r2, #1
 8000a0a:	07d3      	lsls	r3, r2, #31
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	431e      	orrs	r6, r3
 8000a10:	4032      	ands	r2, r6
 8000a12:	e795      	b.n	8000940 <__aeabi_dsub+0xe0>
 8000a14:	001e      	movs	r6, r3
 8000a16:	4316      	orrs	r6, r2
 8000a18:	d000      	beq.n	8000a1c <__aeabi_dsub+0x1bc>
 8000a1a:	e745      	b.n	80008a8 <__aeabi_dsub+0x48>
 8000a1c:	e740      	b.n	80008a0 <__aeabi_dsub+0x40>
 8000a1e:	4b62      	ldr	r3, [pc, #392]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000a20:	429d      	cmp	r5, r3
 8000a22:	d03a      	beq.n	8000a9a <__aeabi_dsub+0x23a>
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	4667      	mov	r7, ip
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	431f      	orrs	r7, r3
 8000a2c:	46bc      	mov	ip, r7
 8000a2e:	2e38      	cmp	r6, #56	; 0x38
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dsub+0x1d4>
 8000a32:	e0eb      	b.n	8000c0c <__aeabi_dsub+0x3ac>
 8000a34:	2e1f      	cmp	r6, #31
 8000a36:	dc00      	bgt.n	8000a3a <__aeabi_dsub+0x1da>
 8000a38:	e13a      	b.n	8000cb0 <__aeabi_dsub+0x450>
 8000a3a:	0033      	movs	r3, r6
 8000a3c:	4667      	mov	r7, ip
 8000a3e:	3b20      	subs	r3, #32
 8000a40:	40df      	lsrs	r7, r3
 8000a42:	003b      	movs	r3, r7
 8000a44:	2e20      	cmp	r6, #32
 8000a46:	d005      	beq.n	8000a54 <__aeabi_dsub+0x1f4>
 8000a48:	2740      	movs	r7, #64	; 0x40
 8000a4a:	1bbf      	subs	r7, r7, r6
 8000a4c:	4666      	mov	r6, ip
 8000a4e:	40be      	lsls	r6, r7
 8000a50:	4332      	orrs	r2, r6
 8000a52:	4690      	mov	r8, r2
 8000a54:	4646      	mov	r6, r8
 8000a56:	1e72      	subs	r2, r6, #1
 8000a58:	4196      	sbcs	r6, r2
 8000a5a:	4333      	orrs	r3, r6
 8000a5c:	e0da      	b.n	8000c14 <__aeabi_dsub+0x3b4>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dsub+0x204>
 8000a62:	e214      	b.n	8000e8e <__aeabi_dsub+0x62e>
 8000a64:	4663      	mov	r3, ip
 8000a66:	4313      	orrs	r3, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dsub+0x20c>
 8000a6a:	e168      	b.n	8000d3e <__aeabi_dsub+0x4de>
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	074e      	lsls	r6, r1, #29
 8000a70:	08c0      	lsrs	r0, r0, #3
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	031b      	lsls	r3, r3, #12
 8000a76:	4306      	orrs	r6, r0
 8000a78:	4219      	tst	r1, r3
 8000a7a:	d008      	beq.n	8000a8e <__aeabi_dsub+0x22e>
 8000a7c:	4660      	mov	r0, ip
 8000a7e:	08c0      	lsrs	r0, r0, #3
 8000a80:	4218      	tst	r0, r3
 8000a82:	d104      	bne.n	8000a8e <__aeabi_dsub+0x22e>
 8000a84:	4663      	mov	r3, ip
 8000a86:	0001      	movs	r1, r0
 8000a88:	08d2      	lsrs	r2, r2, #3
 8000a8a:	075e      	lsls	r6, r3, #29
 8000a8c:	4316      	orrs	r6, r2
 8000a8e:	00f3      	lsls	r3, r6, #3
 8000a90:	4699      	mov	r9, r3
 8000a92:	00c9      	lsls	r1, r1, #3
 8000a94:	0f72      	lsrs	r2, r6, #29
 8000a96:	4d44      	ldr	r5, [pc, #272]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	08de      	lsrs	r6, r3, #3
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000aa0:	074f      	lsls	r7, r1, #29
 8000aa2:	4337      	orrs	r7, r6
 8000aa4:	08ca      	lsrs	r2, r1, #3
 8000aa6:	429d      	cmp	r5, r3
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dsub+0x24c>
 8000aaa:	e06e      	b.n	8000b8a <__aeabi_dsub+0x32a>
 8000aac:	0312      	lsls	r2, r2, #12
 8000aae:	056d      	lsls	r5, r5, #21
 8000ab0:	0b12      	lsrs	r2, r2, #12
 8000ab2:	0d6d      	lsrs	r5, r5, #21
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	0312      	lsls	r2, r2, #12
 8000ab8:	0b13      	lsrs	r3, r2, #12
 8000aba:	0d0a      	lsrs	r2, r1, #20
 8000abc:	0512      	lsls	r2, r2, #20
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <__aeabi_dsub+0x350>)
 8000ac2:	052d      	lsls	r5, r5, #20
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	432b      	orrs	r3, r5
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	07e4      	lsls	r4, r4, #31
 8000acc:	085b      	lsrs	r3, r3, #1
 8000ace:	4323      	orrs	r3, r4
 8000ad0:	0038      	movs	r0, r7
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	bc3c      	pop	{r2, r3, r4, r5}
 8000ad6:	4690      	mov	r8, r2
 8000ad8:	4699      	mov	r9, r3
 8000ada:	46a2      	mov	sl, r4
 8000adc:	46ab      	mov	fp, r5
 8000ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	d011      	beq.n	8000b0a <__aeabi_dsub+0x2aa>
 8000ae6:	1e73      	subs	r3, r6, #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d000      	beq.n	8000aee <__aeabi_dsub+0x28e>
 8000aec:	e107      	b.n	8000cfe <__aeabi_dsub+0x49e>
 8000aee:	1886      	adds	r6, r0, r2
 8000af0:	4286      	cmp	r6, r0
 8000af2:	4180      	sbcs	r0, r0
 8000af4:	4461      	add	r1, ip
 8000af6:	4240      	negs	r0, r0
 8000af8:	1809      	adds	r1, r1, r0
 8000afa:	2501      	movs	r5, #1
 8000afc:	020b      	lsls	r3, r1, #8
 8000afe:	d537      	bpl.n	8000b70 <__aeabi_dsub+0x310>
 8000b00:	2502      	movs	r5, #2
 8000b02:	e77b      	b.n	80009fc <__aeabi_dsub+0x19c>
 8000b04:	003e      	movs	r6, r7
 8000b06:	4661      	mov	r1, ip
 8000b08:	4691      	mov	r9, r2
 8000b0a:	0035      	movs	r5, r6
 8000b0c:	e7c5      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000b0e:	465c      	mov	r4, fp
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dsub+0x2b6>
 8000b14:	e0e1      	b.n	8000cda <__aeabi_dsub+0x47a>
 8000b16:	000b      	movs	r3, r1
 8000b18:	4303      	orrs	r3, r0
 8000b1a:	d0f3      	beq.n	8000b04 <__aeabi_dsub+0x2a4>
 8000b1c:	1c73      	adds	r3, r6, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dsub+0x2c2>
 8000b20:	e1ac      	b.n	8000e7c <__aeabi_dsub+0x61c>
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000b24:	429f      	cmp	r7, r3
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dsub+0x2ca>
 8000b28:	e13a      	b.n	8000da0 <__aeabi_dsub+0x540>
 8000b2a:	43f3      	mvns	r3, r6
 8000b2c:	2b38      	cmp	r3, #56	; 0x38
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_dsub+0x2d2>
 8000b30:	e16f      	b.n	8000e12 <__aeabi_dsub+0x5b2>
 8000b32:	2b1f      	cmp	r3, #31
 8000b34:	dd00      	ble.n	8000b38 <__aeabi_dsub+0x2d8>
 8000b36:	e18c      	b.n	8000e52 <__aeabi_dsub+0x5f2>
 8000b38:	2520      	movs	r5, #32
 8000b3a:	000e      	movs	r6, r1
 8000b3c:	1aed      	subs	r5, r5, r3
 8000b3e:	40ae      	lsls	r6, r5
 8000b40:	46b0      	mov	r8, r6
 8000b42:	0006      	movs	r6, r0
 8000b44:	46aa      	mov	sl, r5
 8000b46:	40de      	lsrs	r6, r3
 8000b48:	4645      	mov	r5, r8
 8000b4a:	4335      	orrs	r5, r6
 8000b4c:	002e      	movs	r6, r5
 8000b4e:	4655      	mov	r5, sl
 8000b50:	40d9      	lsrs	r1, r3
 8000b52:	40a8      	lsls	r0, r5
 8000b54:	4663      	mov	r3, ip
 8000b56:	1e45      	subs	r5, r0, #1
 8000b58:	41a8      	sbcs	r0, r5
 8000b5a:	1a5b      	subs	r3, r3, r1
 8000b5c:	469c      	mov	ip, r3
 8000b5e:	4330      	orrs	r0, r6
 8000b60:	1a16      	subs	r6, r2, r0
 8000b62:	42b2      	cmp	r2, r6
 8000b64:	4192      	sbcs	r2, r2
 8000b66:	4663      	mov	r3, ip
 8000b68:	4252      	negs	r2, r2
 8000b6a:	1a99      	subs	r1, r3, r2
 8000b6c:	003d      	movs	r5, r7
 8000b6e:	e6b4      	b.n	80008da <__aeabi_dsub+0x7a>
 8000b70:	2207      	movs	r2, #7
 8000b72:	4032      	ands	r2, r6
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	d000      	beq.n	8000b7a <__aeabi_dsub+0x31a>
 8000b78:	e6e4      	b.n	8000944 <__aeabi_dsub+0xe4>
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000b7c:	08f6      	lsrs	r6, r6, #3
 8000b7e:	074f      	lsls	r7, r1, #29
 8000b80:	4337      	orrs	r7, r6
 8000b82:	08ca      	lsrs	r2, r1, #3
 8000b84:	429d      	cmp	r5, r3
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dsub+0x32a>
 8000b88:	e790      	b.n	8000aac <__aeabi_dsub+0x24c>
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dsub+0x332>
 8000b90:	e1a6      	b.n	8000ee0 <__aeabi_dsub+0x680>
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	031b      	lsls	r3, r3, #12
 8000b96:	431a      	orrs	r2, r3
 8000b98:	0312      	lsls	r2, r2, #12
 8000b9a:	0b12      	lsrs	r2, r2, #12
 8000b9c:	4d02      	ldr	r5, [pc, #8]	; (8000ba8 <__aeabi_dsub+0x348>)
 8000b9e:	e789      	b.n	8000ab4 <__aeabi_dsub+0x254>
 8000ba0:	0015      	movs	r5, r2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e785      	b.n	8000ab4 <__aeabi_dsub+0x254>
 8000ba8:	000007ff 	.word	0x000007ff
 8000bac:	ff7fffff 	.word	0xff7fffff
 8000bb0:	800fffff 	.word	0x800fffff
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dsub+0x35a>
 8000bb8:	e0c7      	b.n	8000d4a <__aeabi_dsub+0x4ea>
 8000bba:	1c6b      	adds	r3, r5, #1
 8000bbc:	055e      	lsls	r6, r3, #21
 8000bbe:	0d76      	lsrs	r6, r6, #21
 8000bc0:	2e01      	cmp	r6, #1
 8000bc2:	dc00      	bgt.n	8000bc6 <__aeabi_dsub+0x366>
 8000bc4:	e0f0      	b.n	8000da8 <__aeabi_dsub+0x548>
 8000bc6:	4dc8      	ldr	r5, [pc, #800]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000bc8:	42ab      	cmp	r3, r5
 8000bca:	d100      	bne.n	8000bce <__aeabi_dsub+0x36e>
 8000bcc:	e0b9      	b.n	8000d42 <__aeabi_dsub+0x4e2>
 8000bce:	1885      	adds	r5, r0, r2
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	4285      	cmp	r5, r0
 8000bd4:	4189      	sbcs	r1, r1
 8000bd6:	4462      	add	r2, ip
 8000bd8:	4249      	negs	r1, r1
 8000bda:	1851      	adds	r1, r2, r1
 8000bdc:	2207      	movs	r2, #7
 8000bde:	07ce      	lsls	r6, r1, #31
 8000be0:	086d      	lsrs	r5, r5, #1
 8000be2:	432e      	orrs	r6, r5
 8000be4:	0849      	lsrs	r1, r1, #1
 8000be6:	4032      	ands	r2, r6
 8000be8:	001d      	movs	r5, r3
 8000bea:	e6a9      	b.n	8000940 <__aeabi_dsub+0xe0>
 8000bec:	49bf      	ldr	r1, [pc, #764]	; (8000eec <__aeabi_dsub+0x68c>)
 8000bee:	1aed      	subs	r5, r5, r3
 8000bf0:	4011      	ands	r1, r2
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	4032      	ands	r2, r6
 8000bf6:	e6a3      	b.n	8000940 <__aeabi_dsub+0xe0>
 8000bf8:	0032      	movs	r2, r6
 8000bfa:	3828      	subs	r0, #40	; 0x28
 8000bfc:	4082      	lsls	r2, r0
 8000bfe:	2600      	movs	r6, #0
 8000c00:	e686      	b.n	8000910 <__aeabi_dsub+0xb0>
 8000c02:	0030      	movs	r0, r6
 8000c04:	f000 fa1a 	bl	800103c <__clzsi2>
 8000c08:	3020      	adds	r0, #32
 8000c0a:	e673      	b.n	80008f4 <__aeabi_dsub+0x94>
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	1e5a      	subs	r2, r3, #1
 8000c12:	4193      	sbcs	r3, r2
 8000c14:	1ac6      	subs	r6, r0, r3
 8000c16:	42b0      	cmp	r0, r6
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	1a09      	subs	r1, r1, r0
 8000c1e:	e65c      	b.n	80008da <__aeabi_dsub+0x7a>
 8000c20:	000e      	movs	r6, r1
 8000c22:	4667      	mov	r7, ip
 8000c24:	4306      	orrs	r6, r0
 8000c26:	4317      	orrs	r7, r2
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d15e      	bne.n	8000cea <__aeabi_dsub+0x48a>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_dsub+0x3d2>
 8000c30:	e0f3      	b.n	8000e1a <__aeabi_dsub+0x5ba>
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dsub+0x3d8>
 8000c36:	e11e      	b.n	8000e76 <__aeabi_dsub+0x616>
 8000c38:	465c      	mov	r4, fp
 8000c3a:	4661      	mov	r1, ip
 8000c3c:	4691      	mov	r9, r2
 8000c3e:	e72c      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000c40:	4fa9      	ldr	r7, [pc, #676]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000c42:	42be      	cmp	r6, r7
 8000c44:	d07b      	beq.n	8000d3e <__aeabi_dsub+0x4de>
 8000c46:	001e      	movs	r6, r3
 8000c48:	e6f1      	b.n	8000a2e <__aeabi_dsub+0x1ce>
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	3d1f      	subs	r5, #31
 8000c4e:	40e8      	lsrs	r0, r5
 8000c50:	2b20      	cmp	r3, #32
 8000c52:	d003      	beq.n	8000c5c <__aeabi_dsub+0x3fc>
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	1acb      	subs	r3, r1, r3
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	4316      	orrs	r6, r2
 8000c5c:	1e73      	subs	r3, r6, #1
 8000c5e:	419e      	sbcs	r6, r3
 8000c60:	2207      	movs	r2, #7
 8000c62:	4306      	orrs	r6, r0
 8000c64:	4032      	ands	r2, r6
 8000c66:	2100      	movs	r1, #0
 8000c68:	2500      	movs	r5, #0
 8000c6a:	e783      	b.n	8000b74 <__aeabi_dsub+0x314>
 8000c6c:	1a16      	subs	r6, r2, r0
 8000c6e:	4663      	mov	r3, ip
 8000c70:	42b2      	cmp	r2, r6
 8000c72:	4180      	sbcs	r0, r0
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	4240      	negs	r0, r0
 8000c78:	1a0b      	subs	r3, r1, r0
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	465c      	mov	r4, fp
 8000c7e:	e632      	b.n	80008e6 <__aeabi_dsub+0x86>
 8000c80:	2e1f      	cmp	r6, #31
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dsub+0x426>
 8000c84:	e0ab      	b.n	8000dde <__aeabi_dsub+0x57e>
 8000c86:	2720      	movs	r7, #32
 8000c88:	1bbb      	subs	r3, r7, r6
 8000c8a:	469a      	mov	sl, r3
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	4657      	mov	r7, sl
 8000c90:	40bb      	lsls	r3, r7
 8000c92:	4699      	mov	r9, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	464f      	mov	r7, r9
 8000c98:	40f3      	lsrs	r3, r6
 8000c9a:	431f      	orrs	r7, r3
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4657      	mov	r7, sl
 8000ca0:	40ba      	lsls	r2, r7
 8000ca2:	1e57      	subs	r7, r2, #1
 8000ca4:	41ba      	sbcs	r2, r7
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	4662      	mov	r2, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	1889      	adds	r1, r1, r2
 8000cae:	e698      	b.n	80009e2 <__aeabi_dsub+0x182>
 8000cb0:	2720      	movs	r7, #32
 8000cb2:	1bbb      	subs	r3, r7, r6
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	4657      	mov	r7, sl
 8000cba:	40bb      	lsls	r3, r7
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	464f      	mov	r7, r9
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	4657      	mov	r7, sl
 8000cca:	40ba      	lsls	r2, r7
 8000ccc:	1e57      	subs	r7, r2, #1
 8000cce:	41ba      	sbcs	r2, r7
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	4662      	mov	r2, ip
 8000cd4:	40f2      	lsrs	r2, r6
 8000cd6:	1a89      	subs	r1, r1, r2
 8000cd8:	e79c      	b.n	8000c14 <__aeabi_dsub+0x3b4>
 8000cda:	4b83      	ldr	r3, [pc, #524]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	d05f      	beq.n	8000da0 <__aeabi_dsub+0x540>
 8000ce0:	2580      	movs	r5, #128	; 0x80
 8000ce2:	042d      	lsls	r5, r5, #16
 8000ce4:	4273      	negs	r3, r6
 8000ce6:	4329      	orrs	r1, r5
 8000ce8:	e720      	b.n	8000b2c <__aeabi_dsub+0x2cc>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d10c      	bne.n	8000d08 <__aeabi_dsub+0x4a8>
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dsub+0x494>
 8000cf2:	e0d0      	b.n	8000e96 <__aeabi_dsub+0x636>
 8000cf4:	465c      	mov	r4, fp
 8000cf6:	4661      	mov	r1, ip
 8000cf8:	4691      	mov	r9, r2
 8000cfa:	4d7b      	ldr	r5, [pc, #492]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000cfc:	e6cd      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000cfe:	4f7a      	ldr	r7, [pc, #488]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000d00:	42be      	cmp	r6, r7
 8000d02:	d01c      	beq.n	8000d3e <__aeabi_dsub+0x4de>
 8000d04:	001e      	movs	r6, r3
 8000d06:	e665      	b.n	80009d4 <__aeabi_dsub+0x174>
 8000d08:	2f00      	cmp	r7, #0
 8000d0a:	d018      	beq.n	8000d3e <__aeabi_dsub+0x4de>
 8000d0c:	08c0      	lsrs	r0, r0, #3
 8000d0e:	074e      	lsls	r6, r1, #29
 8000d10:	4306      	orrs	r6, r0
 8000d12:	2080      	movs	r0, #128	; 0x80
 8000d14:	08c9      	lsrs	r1, r1, #3
 8000d16:	0300      	lsls	r0, r0, #12
 8000d18:	4201      	tst	r1, r0
 8000d1a:	d008      	beq.n	8000d2e <__aeabi_dsub+0x4ce>
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	08dc      	lsrs	r4, r3, #3
 8000d20:	4204      	tst	r4, r0
 8000d22:	d104      	bne.n	8000d2e <__aeabi_dsub+0x4ce>
 8000d24:	0021      	movs	r1, r4
 8000d26:	46da      	mov	sl, fp
 8000d28:	08d2      	lsrs	r2, r2, #3
 8000d2a:	075e      	lsls	r6, r3, #29
 8000d2c:	4316      	orrs	r6, r2
 8000d2e:	00f3      	lsls	r3, r6, #3
 8000d30:	4699      	mov	r9, r3
 8000d32:	2401      	movs	r4, #1
 8000d34:	4653      	mov	r3, sl
 8000d36:	00c9      	lsls	r1, r1, #3
 8000d38:	0f72      	lsrs	r2, r6, #29
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	401c      	ands	r4, r3
 8000d3e:	4d6a      	ldr	r5, [pc, #424]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000d40:	e6ab      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000d42:	001d      	movs	r5, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	2700      	movs	r7, #0
 8000d48:	e6b4      	b.n	8000ab4 <__aeabi_dsub+0x254>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d159      	bne.n	8000e02 <__aeabi_dsub+0x5a2>
 8000d4e:	000b      	movs	r3, r1
 8000d50:	4303      	orrs	r3, r0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dsub+0x4f6>
 8000d54:	e6d6      	b.n	8000b04 <__aeabi_dsub+0x2a4>
 8000d56:	1c73      	adds	r3, r6, #1
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dsub+0x4fc>
 8000d5a:	e0b2      	b.n	8000ec2 <__aeabi_dsub+0x662>
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d01e      	beq.n	8000da0 <__aeabi_dsub+0x540>
 8000d62:	43f3      	mvns	r3, r6
 8000d64:	2b38      	cmp	r3, #56	; 0x38
 8000d66:	dc6f      	bgt.n	8000e48 <__aeabi_dsub+0x5e8>
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_dsub+0x50e>
 8000d6c:	e097      	b.n	8000e9e <__aeabi_dsub+0x63e>
 8000d6e:	2520      	movs	r5, #32
 8000d70:	000e      	movs	r6, r1
 8000d72:	1aed      	subs	r5, r5, r3
 8000d74:	40ae      	lsls	r6, r5
 8000d76:	46b0      	mov	r8, r6
 8000d78:	0006      	movs	r6, r0
 8000d7a:	46aa      	mov	sl, r5
 8000d7c:	40de      	lsrs	r6, r3
 8000d7e:	4645      	mov	r5, r8
 8000d80:	4335      	orrs	r5, r6
 8000d82:	002e      	movs	r6, r5
 8000d84:	4655      	mov	r5, sl
 8000d86:	40a8      	lsls	r0, r5
 8000d88:	40d9      	lsrs	r1, r3
 8000d8a:	1e45      	subs	r5, r0, #1
 8000d8c:	41a8      	sbcs	r0, r5
 8000d8e:	448c      	add	ip, r1
 8000d90:	4306      	orrs	r6, r0
 8000d92:	18b6      	adds	r6, r6, r2
 8000d94:	4296      	cmp	r6, r2
 8000d96:	4192      	sbcs	r2, r2
 8000d98:	4251      	negs	r1, r2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	003d      	movs	r5, r7
 8000d9e:	e625      	b.n	80009ec <__aeabi_dsub+0x18c>
 8000da0:	003d      	movs	r5, r7
 8000da2:	4661      	mov	r1, ip
 8000da4:	4691      	mov	r9, r2
 8000da6:	e678      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000da8:	000b      	movs	r3, r1
 8000daa:	4303      	orrs	r3, r0
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d000      	beq.n	8000db2 <__aeabi_dsub+0x552>
 8000db0:	e655      	b.n	8000a5e <__aeabi_dsub+0x1fe>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f5      	beq.n	8000da2 <__aeabi_dsub+0x542>
 8000db6:	4663      	mov	r3, ip
 8000db8:	4313      	orrs	r3, r2
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dsub+0x55e>
 8000dbc:	e66d      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000dbe:	1886      	adds	r6, r0, r2
 8000dc0:	4286      	cmp	r6, r0
 8000dc2:	4180      	sbcs	r0, r0
 8000dc4:	4461      	add	r1, ip
 8000dc6:	4240      	negs	r0, r0
 8000dc8:	1809      	adds	r1, r1, r0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	020b      	lsls	r3, r1, #8
 8000dce:	d400      	bmi.n	8000dd2 <__aeabi_dsub+0x572>
 8000dd0:	e6d0      	b.n	8000b74 <__aeabi_dsub+0x314>
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <__aeabi_dsub+0x68c>)
 8000dd4:	3501      	adds	r5, #1
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	e5b2      	b.n	8000940 <__aeabi_dsub+0xe0>
 8000dda:	46b1      	mov	r9, r6
 8000ddc:	e65d      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000dde:	0033      	movs	r3, r6
 8000de0:	4667      	mov	r7, ip
 8000de2:	3b20      	subs	r3, #32
 8000de4:	40df      	lsrs	r7, r3
 8000de6:	003b      	movs	r3, r7
 8000de8:	2e20      	cmp	r6, #32
 8000dea:	d005      	beq.n	8000df8 <__aeabi_dsub+0x598>
 8000dec:	2740      	movs	r7, #64	; 0x40
 8000dee:	1bbf      	subs	r7, r7, r6
 8000df0:	4666      	mov	r6, ip
 8000df2:	40be      	lsls	r6, r7
 8000df4:	4332      	orrs	r2, r6
 8000df6:	4690      	mov	r8, r2
 8000df8:	4646      	mov	r6, r8
 8000dfa:	1e72      	subs	r2, r6, #1
 8000dfc:	4196      	sbcs	r6, r2
 8000dfe:	4333      	orrs	r3, r6
 8000e00:	e5ef      	b.n	80009e2 <__aeabi_dsub+0x182>
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000e04:	429f      	cmp	r7, r3
 8000e06:	d0cb      	beq.n	8000da0 <__aeabi_dsub+0x540>
 8000e08:	2580      	movs	r5, #128	; 0x80
 8000e0a:	042d      	lsls	r5, r5, #16
 8000e0c:	4273      	negs	r3, r6
 8000e0e:	4329      	orrs	r1, r5
 8000e10:	e7a8      	b.n	8000d64 <__aeabi_dsub+0x504>
 8000e12:	4308      	orrs	r0, r1
 8000e14:	1e41      	subs	r1, r0, #1
 8000e16:	4188      	sbcs	r0, r1
 8000e18:	e6a2      	b.n	8000b60 <__aeabi_dsub+0x300>
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dsub+0x5c0>
 8000e1e:	e63c      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000e20:	4663      	mov	r3, ip
 8000e22:	1a86      	subs	r6, r0, r2
 8000e24:	1acf      	subs	r7, r1, r3
 8000e26:	42b0      	cmp	r0, r6
 8000e28:	419b      	sbcs	r3, r3
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	1afb      	subs	r3, r7, r3
 8000e2e:	4698      	mov	r8, r3
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	d54e      	bpl.n	8000ed2 <__aeabi_dsub+0x672>
 8000e34:	1a16      	subs	r6, r2, r0
 8000e36:	4663      	mov	r3, ip
 8000e38:	42b2      	cmp	r2, r6
 8000e3a:	4192      	sbcs	r2, r2
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	4252      	negs	r2, r2
 8000e40:	1a89      	subs	r1, r1, r2
 8000e42:	465c      	mov	r4, fp
 8000e44:	2200      	movs	r2, #0
 8000e46:	e57b      	b.n	8000940 <__aeabi_dsub+0xe0>
 8000e48:	4301      	orrs	r1, r0
 8000e4a:	000e      	movs	r6, r1
 8000e4c:	1e71      	subs	r1, r6, #1
 8000e4e:	418e      	sbcs	r6, r1
 8000e50:	e79f      	b.n	8000d92 <__aeabi_dsub+0x532>
 8000e52:	001d      	movs	r5, r3
 8000e54:	000e      	movs	r6, r1
 8000e56:	3d20      	subs	r5, #32
 8000e58:	40ee      	lsrs	r6, r5
 8000e5a:	46b0      	mov	r8, r6
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_dsub+0x60a>
 8000e60:	2540      	movs	r5, #64	; 0x40
 8000e62:	1aeb      	subs	r3, r5, r3
 8000e64:	4099      	lsls	r1, r3
 8000e66:	4308      	orrs	r0, r1
 8000e68:	4681      	mov	r9, r0
 8000e6a:	4648      	mov	r0, r9
 8000e6c:	4643      	mov	r3, r8
 8000e6e:	1e41      	subs	r1, r0, #1
 8000e70:	4188      	sbcs	r0, r1
 8000e72:	4318      	orrs	r0, r3
 8000e74:	e674      	b.n	8000b60 <__aeabi_dsub+0x300>
 8000e76:	2200      	movs	r2, #0
 8000e78:	2400      	movs	r4, #0
 8000e7a:	e617      	b.n	8000aac <__aeabi_dsub+0x24c>
 8000e7c:	1a16      	subs	r6, r2, r0
 8000e7e:	4663      	mov	r3, ip
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	4192      	sbcs	r2, r2
 8000e84:	1a59      	subs	r1, r3, r1
 8000e86:	4252      	negs	r2, r2
 8000e88:	1a89      	subs	r1, r1, r2
 8000e8a:	003d      	movs	r5, r7
 8000e8c:	e525      	b.n	80008da <__aeabi_dsub+0x7a>
 8000e8e:	4661      	mov	r1, ip
 8000e90:	4691      	mov	r9, r2
 8000e92:	4d15      	ldr	r5, [pc, #84]	; (8000ee8 <__aeabi_dsub+0x688>)
 8000e94:	e601      	b.n	8000a9a <__aeabi_dsub+0x23a>
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	2400      	movs	r4, #0
 8000e9a:	0312      	lsls	r2, r2, #12
 8000e9c:	e679      	b.n	8000b92 <__aeabi_dsub+0x332>
 8000e9e:	001d      	movs	r5, r3
 8000ea0:	000e      	movs	r6, r1
 8000ea2:	3d20      	subs	r5, #32
 8000ea4:	40ee      	lsrs	r6, r5
 8000ea6:	46b0      	mov	r8, r6
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d004      	beq.n	8000eb6 <__aeabi_dsub+0x656>
 8000eac:	2540      	movs	r5, #64	; 0x40
 8000eae:	1aeb      	subs	r3, r5, r3
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	4308      	orrs	r0, r1
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	464e      	mov	r6, r9
 8000eb8:	4643      	mov	r3, r8
 8000eba:	1e71      	subs	r1, r6, #1
 8000ebc:	418e      	sbcs	r6, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	e767      	b.n	8000d92 <__aeabi_dsub+0x532>
 8000ec2:	1886      	adds	r6, r0, r2
 8000ec4:	4296      	cmp	r6, r2
 8000ec6:	419b      	sbcs	r3, r3
 8000ec8:	4461      	add	r1, ip
 8000eca:	425b      	negs	r3, r3
 8000ecc:	18c9      	adds	r1, r1, r3
 8000ece:	003d      	movs	r5, r7
 8000ed0:	e58c      	b.n	80009ec <__aeabi_dsub+0x18c>
 8000ed2:	4647      	mov	r7, r8
 8000ed4:	4337      	orrs	r7, r6
 8000ed6:	d0ce      	beq.n	8000e76 <__aeabi_dsub+0x616>
 8000ed8:	2207      	movs	r2, #7
 8000eda:	4641      	mov	r1, r8
 8000edc:	4032      	ands	r2, r6
 8000ede:	e649      	b.n	8000b74 <__aeabi_dsub+0x314>
 8000ee0:	2700      	movs	r7, #0
 8000ee2:	003a      	movs	r2, r7
 8000ee4:	e5e6      	b.n	8000ab4 <__aeabi_dsub+0x254>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	000007ff 	.word	0x000007ff
 8000eec:	ff7fffff 	.word	0xff7fffff

08000ef0 <__aeabi_d2iz>:
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	4d14      	ldr	r5, [pc, #80]	; (8000f44 <__aeabi_d2iz+0x54>)
 8000ef4:	030a      	lsls	r2, r1, #12
 8000ef6:	004b      	lsls	r3, r1, #1
 8000ef8:	0b12      	lsrs	r2, r2, #12
 8000efa:	0d5b      	lsrs	r3, r3, #21
 8000efc:	0fc9      	lsrs	r1, r1, #31
 8000efe:	2400      	movs	r4, #0
 8000f00:	42ab      	cmp	r3, r5
 8000f02:	dd11      	ble.n	8000f28 <__aeabi_d2iz+0x38>
 8000f04:	4c10      	ldr	r4, [pc, #64]	; (8000f48 <__aeabi_d2iz+0x58>)
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	dc10      	bgt.n	8000f2c <__aeabi_d2iz+0x3c>
 8000f0a:	2480      	movs	r4, #128	; 0x80
 8000f0c:	0364      	lsls	r4, r4, #13
 8000f0e:	4322      	orrs	r2, r4
 8000f10:	4c0e      	ldr	r4, [pc, #56]	; (8000f4c <__aeabi_d2iz+0x5c>)
 8000f12:	1ae4      	subs	r4, r4, r3
 8000f14:	2c1f      	cmp	r4, #31
 8000f16:	dd0c      	ble.n	8000f32 <__aeabi_d2iz+0x42>
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <__aeabi_d2iz+0x60>)
 8000f1a:	1ac3      	subs	r3, r0, r3
 8000f1c:	40da      	lsrs	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	425c      	negs	r4, r3
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_d2iz+0x38>
 8000f26:	001c      	movs	r4, r3
 8000f28:	0020      	movs	r0, r4
 8000f2a:	bd30      	pop	{r4, r5, pc}
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <__aeabi_d2iz+0x64>)
 8000f2e:	18cc      	adds	r4, r1, r3
 8000f30:	e7fa      	b.n	8000f28 <__aeabi_d2iz+0x38>
 8000f32:	4d09      	ldr	r5, [pc, #36]	; (8000f58 <__aeabi_d2iz+0x68>)
 8000f34:	40e0      	lsrs	r0, r4
 8000f36:	46ac      	mov	ip, r5
 8000f38:	4463      	add	r3, ip
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	e7ee      	b.n	8000f20 <__aeabi_d2iz+0x30>
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	000003fe 	.word	0x000003fe
 8000f48:	0000041d 	.word	0x0000041d
 8000f4c:	00000433 	.word	0x00000433
 8000f50:	00000413 	.word	0x00000413
 8000f54:	7fffffff 	.word	0x7fffffff
 8000f58:	fffffbed 	.word	0xfffffbed

08000f5c <__aeabi_ui2d>:
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	1e04      	subs	r4, r0, #0
 8000f60:	d025      	beq.n	8000fae <__aeabi_ui2d+0x52>
 8000f62:	f000 f86b 	bl	800103c <__clzsi2>
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <__aeabi_ui2d+0x5c>)
 8000f68:	1a1b      	subs	r3, r3, r0
 8000f6a:	055b      	lsls	r3, r3, #21
 8000f6c:	0d5b      	lsrs	r3, r3, #21
 8000f6e:	280a      	cmp	r0, #10
 8000f70:	dd12      	ble.n	8000f98 <__aeabi_ui2d+0x3c>
 8000f72:	380b      	subs	r0, #11
 8000f74:	4084      	lsls	r4, r0
 8000f76:	2200      	movs	r2, #0
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	0b24      	lsrs	r4, r4, #12
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	0010      	movs	r0, r2
 8000f80:	0324      	lsls	r4, r4, #12
 8000f82:	0d0a      	lsrs	r2, r1, #20
 8000f84:	0b24      	lsrs	r4, r4, #12
 8000f86:	0512      	lsls	r2, r2, #20
 8000f88:	4322      	orrs	r2, r4
 8000f8a:	4c0c      	ldr	r4, [pc, #48]	; (8000fbc <__aeabi_ui2d+0x60>)
 8000f8c:	051b      	lsls	r3, r3, #20
 8000f8e:	4022      	ands	r2, r4
 8000f90:	4313      	orrs	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	0859      	lsrs	r1, r3, #1
 8000f96:	bd10      	pop	{r4, pc}
 8000f98:	0002      	movs	r2, r0
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	3215      	adds	r2, #21
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	210b      	movs	r1, #11
 8000fa4:	1a08      	subs	r0, r1, r0
 8000fa6:	40c4      	lsrs	r4, r0
 8000fa8:	0324      	lsls	r4, r4, #12
 8000faa:	0b24      	lsrs	r4, r4, #12
 8000fac:	e7e6      	b.n	8000f7c <__aeabi_ui2d+0x20>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	e7e2      	b.n	8000f7c <__aeabi_ui2d+0x20>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	0000041e 	.word	0x0000041e
 8000fbc:	800fffff 	.word	0x800fffff

08000fc0 <__aeabi_cdrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	1c10      	adds	r0, r2, #0
 8000fc4:	4662      	mov	r2, ip
 8000fc6:	468c      	mov	ip, r1
 8000fc8:	1c19      	adds	r1, r3, #0
 8000fca:	4663      	mov	r3, ip
 8000fcc:	e000      	b.n	8000fd0 <__aeabi_cdcmpeq>
 8000fce:	46c0      	nop			; (mov r8, r8)

08000fd0 <__aeabi_cdcmpeq>:
 8000fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000fd2:	f000 f8f1 	bl	80011b8 <__ledf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d401      	bmi.n	8000fde <__aeabi_cdcmpeq+0xe>
 8000fda:	2100      	movs	r1, #0
 8000fdc:	42c8      	cmn	r0, r1
 8000fde:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fe0 <__aeabi_dcmpeq>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	f000 f849 	bl	8001078 <__eqdf2>
 8000fe6:	4240      	negs	r0, r0
 8000fe8:	3001      	adds	r0, #1
 8000fea:	bd10      	pop	{r4, pc}

08000fec <__aeabi_dcmplt>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	f000 f8e3 	bl	80011b8 <__ledf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	db01      	blt.n	8000ffa <__aeabi_dcmplt+0xe>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	bd10      	pop	{r4, pc}
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)

08001000 <__aeabi_dcmple>:
 8001000:	b510      	push	{r4, lr}
 8001002:	f000 f8d9 	bl	80011b8 <__ledf2>
 8001006:	2800      	cmp	r0, #0
 8001008:	dd01      	ble.n	800100e <__aeabi_dcmple+0xe>
 800100a:	2000      	movs	r0, #0
 800100c:	bd10      	pop	{r4, pc}
 800100e:	2001      	movs	r0, #1
 8001010:	bd10      	pop	{r4, pc}
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__aeabi_dcmpgt>:
 8001014:	b510      	push	{r4, lr}
 8001016:	f000 f86b 	bl	80010f0 <__gedf2>
 800101a:	2800      	cmp	r0, #0
 800101c:	dc01      	bgt.n	8001022 <__aeabi_dcmpgt+0xe>
 800101e:	2000      	movs	r0, #0
 8001020:	bd10      	pop	{r4, pc}
 8001022:	2001      	movs	r0, #1
 8001024:	bd10      	pop	{r4, pc}
 8001026:	46c0      	nop			; (mov r8, r8)

08001028 <__aeabi_dcmpge>:
 8001028:	b510      	push	{r4, lr}
 800102a:	f000 f861 	bl	80010f0 <__gedf2>
 800102e:	2800      	cmp	r0, #0
 8001030:	da01      	bge.n	8001036 <__aeabi_dcmpge+0xe>
 8001032:	2000      	movs	r0, #0
 8001034:	bd10      	pop	{r4, pc}
 8001036:	2001      	movs	r0, #1
 8001038:	bd10      	pop	{r4, pc}
 800103a:	46c0      	nop			; (mov r8, r8)

0800103c <__clzsi2>:
 800103c:	211c      	movs	r1, #28
 800103e:	2301      	movs	r3, #1
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	4298      	cmp	r0, r3
 8001044:	d301      	bcc.n	800104a <__clzsi2+0xe>
 8001046:	0c00      	lsrs	r0, r0, #16
 8001048:	3910      	subs	r1, #16
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	4298      	cmp	r0, r3
 800104e:	d301      	bcc.n	8001054 <__clzsi2+0x18>
 8001050:	0a00      	lsrs	r0, r0, #8
 8001052:	3908      	subs	r1, #8
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	4298      	cmp	r0, r3
 8001058:	d301      	bcc.n	800105e <__clzsi2+0x22>
 800105a:	0900      	lsrs	r0, r0, #4
 800105c:	3904      	subs	r1, #4
 800105e:	a202      	add	r2, pc, #8	; (adr r2, 8001068 <__clzsi2+0x2c>)
 8001060:	5c10      	ldrb	r0, [r2, r0]
 8001062:	1840      	adds	r0, r0, r1
 8001064:	4770      	bx	lr
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	02020304 	.word	0x02020304
 800106c:	01010101 	.word	0x01010101
	...

08001078 <__eqdf2>:
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	464f      	mov	r7, r9
 800107c:	4646      	mov	r6, r8
 800107e:	46d6      	mov	lr, sl
 8001080:	4684      	mov	ip, r0
 8001082:	b5c0      	push	{r6, r7, lr}
 8001084:	4680      	mov	r8, r0
 8001086:	4e19      	ldr	r6, [pc, #100]	; (80010ec <__eqdf2+0x74>)
 8001088:	0318      	lsls	r0, r3, #12
 800108a:	030f      	lsls	r7, r1, #12
 800108c:	004d      	lsls	r5, r1, #1
 800108e:	0b00      	lsrs	r0, r0, #12
 8001090:	005c      	lsls	r4, r3, #1
 8001092:	4682      	mov	sl, r0
 8001094:	0b3f      	lsrs	r7, r7, #12
 8001096:	0d6d      	lsrs	r5, r5, #21
 8001098:	0fc9      	lsrs	r1, r1, #31
 800109a:	4691      	mov	r9, r2
 800109c:	0d64      	lsrs	r4, r4, #21
 800109e:	0fdb      	lsrs	r3, r3, #31
 80010a0:	2001      	movs	r0, #1
 80010a2:	42b5      	cmp	r5, r6
 80010a4:	d00a      	beq.n	80010bc <__eqdf2+0x44>
 80010a6:	42b4      	cmp	r4, r6
 80010a8:	d003      	beq.n	80010b2 <__eqdf2+0x3a>
 80010aa:	42a5      	cmp	r5, r4
 80010ac:	d101      	bne.n	80010b2 <__eqdf2+0x3a>
 80010ae:	4557      	cmp	r7, sl
 80010b0:	d00c      	beq.n	80010cc <__eqdf2+0x54>
 80010b2:	bc1c      	pop	{r2, r3, r4}
 80010b4:	4690      	mov	r8, r2
 80010b6:	4699      	mov	r9, r3
 80010b8:	46a2      	mov	sl, r4
 80010ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010bc:	4666      	mov	r6, ip
 80010be:	433e      	orrs	r6, r7
 80010c0:	d1f7      	bne.n	80010b2 <__eqdf2+0x3a>
 80010c2:	42ac      	cmp	r4, r5
 80010c4:	d1f5      	bne.n	80010b2 <__eqdf2+0x3a>
 80010c6:	4654      	mov	r4, sl
 80010c8:	4314      	orrs	r4, r2
 80010ca:	d1f2      	bne.n	80010b2 <__eqdf2+0x3a>
 80010cc:	2001      	movs	r0, #1
 80010ce:	45c8      	cmp	r8, r9
 80010d0:	d1ef      	bne.n	80010b2 <__eqdf2+0x3a>
 80010d2:	4299      	cmp	r1, r3
 80010d4:	d007      	beq.n	80010e6 <__eqdf2+0x6e>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d1eb      	bne.n	80010b2 <__eqdf2+0x3a>
 80010da:	4663      	mov	r3, ip
 80010dc:	431f      	orrs	r7, r3
 80010de:	0038      	movs	r0, r7
 80010e0:	1e47      	subs	r7, r0, #1
 80010e2:	41b8      	sbcs	r0, r7
 80010e4:	e7e5      	b.n	80010b2 <__eqdf2+0x3a>
 80010e6:	2000      	movs	r0, #0
 80010e8:	e7e3      	b.n	80010b2 <__eqdf2+0x3a>
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	000007ff 	.word	0x000007ff

080010f0 <__gedf2>:
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	464f      	mov	r7, r9
 80010f4:	4646      	mov	r6, r8
 80010f6:	46d6      	mov	lr, sl
 80010f8:	004d      	lsls	r5, r1, #1
 80010fa:	b5c0      	push	{r6, r7, lr}
 80010fc:	030e      	lsls	r6, r1, #12
 80010fe:	0fc9      	lsrs	r1, r1, #31
 8001100:	468a      	mov	sl, r1
 8001102:	492c      	ldr	r1, [pc, #176]	; (80011b4 <__gedf2+0xc4>)
 8001104:	031f      	lsls	r7, r3, #12
 8001106:	005c      	lsls	r4, r3, #1
 8001108:	4680      	mov	r8, r0
 800110a:	0b36      	lsrs	r6, r6, #12
 800110c:	0d6d      	lsrs	r5, r5, #21
 800110e:	4691      	mov	r9, r2
 8001110:	0b3f      	lsrs	r7, r7, #12
 8001112:	0d64      	lsrs	r4, r4, #21
 8001114:	0fdb      	lsrs	r3, r3, #31
 8001116:	428d      	cmp	r5, r1
 8001118:	d01e      	beq.n	8001158 <__gedf2+0x68>
 800111a:	428c      	cmp	r4, r1
 800111c:	d016      	beq.n	800114c <__gedf2+0x5c>
 800111e:	2d00      	cmp	r5, #0
 8001120:	d11e      	bne.n	8001160 <__gedf2+0x70>
 8001122:	4330      	orrs	r0, r6
 8001124:	4684      	mov	ip, r0
 8001126:	2c00      	cmp	r4, #0
 8001128:	d101      	bne.n	800112e <__gedf2+0x3e>
 800112a:	433a      	orrs	r2, r7
 800112c:	d023      	beq.n	8001176 <__gedf2+0x86>
 800112e:	4662      	mov	r2, ip
 8001130:	2a00      	cmp	r2, #0
 8001132:	d01a      	beq.n	800116a <__gedf2+0x7a>
 8001134:	459a      	cmp	sl, r3
 8001136:	d029      	beq.n	800118c <__gedf2+0x9c>
 8001138:	4651      	mov	r1, sl
 800113a:	2002      	movs	r0, #2
 800113c:	3901      	subs	r1, #1
 800113e:	4008      	ands	r0, r1
 8001140:	3801      	subs	r0, #1
 8001142:	bc1c      	pop	{r2, r3, r4}
 8001144:	4690      	mov	r8, r2
 8001146:	4699      	mov	r9, r3
 8001148:	46a2      	mov	sl, r4
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	0039      	movs	r1, r7
 800114e:	4311      	orrs	r1, r2
 8001150:	d0e5      	beq.n	800111e <__gedf2+0x2e>
 8001152:	2002      	movs	r0, #2
 8001154:	4240      	negs	r0, r0
 8001156:	e7f4      	b.n	8001142 <__gedf2+0x52>
 8001158:	4330      	orrs	r0, r6
 800115a:	d1fa      	bne.n	8001152 <__gedf2+0x62>
 800115c:	42ac      	cmp	r4, r5
 800115e:	d00f      	beq.n	8001180 <__gedf2+0x90>
 8001160:	2c00      	cmp	r4, #0
 8001162:	d10f      	bne.n	8001184 <__gedf2+0x94>
 8001164:	433a      	orrs	r2, r7
 8001166:	d0e7      	beq.n	8001138 <__gedf2+0x48>
 8001168:	e00c      	b.n	8001184 <__gedf2+0x94>
 800116a:	2201      	movs	r2, #1
 800116c:	3b01      	subs	r3, #1
 800116e:	4393      	bics	r3, r2
 8001170:	0018      	movs	r0, r3
 8001172:	3001      	adds	r0, #1
 8001174:	e7e5      	b.n	8001142 <__gedf2+0x52>
 8001176:	4663      	mov	r3, ip
 8001178:	2000      	movs	r0, #0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0e1      	beq.n	8001142 <__gedf2+0x52>
 800117e:	e7db      	b.n	8001138 <__gedf2+0x48>
 8001180:	433a      	orrs	r2, r7
 8001182:	d1e6      	bne.n	8001152 <__gedf2+0x62>
 8001184:	459a      	cmp	sl, r3
 8001186:	d1d7      	bne.n	8001138 <__gedf2+0x48>
 8001188:	42a5      	cmp	r5, r4
 800118a:	dcd5      	bgt.n	8001138 <__gedf2+0x48>
 800118c:	42a5      	cmp	r5, r4
 800118e:	db05      	blt.n	800119c <__gedf2+0xac>
 8001190:	42be      	cmp	r6, r7
 8001192:	d8d1      	bhi.n	8001138 <__gedf2+0x48>
 8001194:	d008      	beq.n	80011a8 <__gedf2+0xb8>
 8001196:	2000      	movs	r0, #0
 8001198:	42be      	cmp	r6, r7
 800119a:	d2d2      	bcs.n	8001142 <__gedf2+0x52>
 800119c:	4650      	mov	r0, sl
 800119e:	2301      	movs	r3, #1
 80011a0:	3801      	subs	r0, #1
 80011a2:	4398      	bics	r0, r3
 80011a4:	3001      	adds	r0, #1
 80011a6:	e7cc      	b.n	8001142 <__gedf2+0x52>
 80011a8:	45c8      	cmp	r8, r9
 80011aa:	d8c5      	bhi.n	8001138 <__gedf2+0x48>
 80011ac:	2000      	movs	r0, #0
 80011ae:	45c8      	cmp	r8, r9
 80011b0:	d3f4      	bcc.n	800119c <__gedf2+0xac>
 80011b2:	e7c6      	b.n	8001142 <__gedf2+0x52>
 80011b4:	000007ff 	.word	0x000007ff

080011b8 <__ledf2>:
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	464f      	mov	r7, r9
 80011bc:	4646      	mov	r6, r8
 80011be:	46d6      	mov	lr, sl
 80011c0:	004d      	lsls	r5, r1, #1
 80011c2:	b5c0      	push	{r6, r7, lr}
 80011c4:	030e      	lsls	r6, r1, #12
 80011c6:	0fc9      	lsrs	r1, r1, #31
 80011c8:	468a      	mov	sl, r1
 80011ca:	492e      	ldr	r1, [pc, #184]	; (8001284 <__ledf2+0xcc>)
 80011cc:	031f      	lsls	r7, r3, #12
 80011ce:	005c      	lsls	r4, r3, #1
 80011d0:	4680      	mov	r8, r0
 80011d2:	0b36      	lsrs	r6, r6, #12
 80011d4:	0d6d      	lsrs	r5, r5, #21
 80011d6:	4691      	mov	r9, r2
 80011d8:	0b3f      	lsrs	r7, r7, #12
 80011da:	0d64      	lsrs	r4, r4, #21
 80011dc:	0fdb      	lsrs	r3, r3, #31
 80011de:	428d      	cmp	r5, r1
 80011e0:	d018      	beq.n	8001214 <__ledf2+0x5c>
 80011e2:	428c      	cmp	r4, r1
 80011e4:	d011      	beq.n	800120a <__ledf2+0x52>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d118      	bne.n	800121c <__ledf2+0x64>
 80011ea:	4330      	orrs	r0, r6
 80011ec:	4684      	mov	ip, r0
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	d11e      	bne.n	8001230 <__ledf2+0x78>
 80011f2:	433a      	orrs	r2, r7
 80011f4:	d11c      	bne.n	8001230 <__ledf2+0x78>
 80011f6:	4663      	mov	r3, ip
 80011f8:	2000      	movs	r0, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d030      	beq.n	8001260 <__ledf2+0xa8>
 80011fe:	4651      	mov	r1, sl
 8001200:	2002      	movs	r0, #2
 8001202:	3901      	subs	r1, #1
 8001204:	4008      	ands	r0, r1
 8001206:	3801      	subs	r0, #1
 8001208:	e02a      	b.n	8001260 <__ledf2+0xa8>
 800120a:	0039      	movs	r1, r7
 800120c:	4311      	orrs	r1, r2
 800120e:	d0ea      	beq.n	80011e6 <__ledf2+0x2e>
 8001210:	2002      	movs	r0, #2
 8001212:	e025      	b.n	8001260 <__ledf2+0xa8>
 8001214:	4330      	orrs	r0, r6
 8001216:	d1fb      	bne.n	8001210 <__ledf2+0x58>
 8001218:	42ac      	cmp	r4, r5
 800121a:	d026      	beq.n	800126a <__ledf2+0xb2>
 800121c:	2c00      	cmp	r4, #0
 800121e:	d126      	bne.n	800126e <__ledf2+0xb6>
 8001220:	433a      	orrs	r2, r7
 8001222:	d124      	bne.n	800126e <__ledf2+0xb6>
 8001224:	4651      	mov	r1, sl
 8001226:	2002      	movs	r0, #2
 8001228:	3901      	subs	r1, #1
 800122a:	4008      	ands	r0, r1
 800122c:	3801      	subs	r0, #1
 800122e:	e017      	b.n	8001260 <__ledf2+0xa8>
 8001230:	4662      	mov	r2, ip
 8001232:	2a00      	cmp	r2, #0
 8001234:	d00f      	beq.n	8001256 <__ledf2+0x9e>
 8001236:	459a      	cmp	sl, r3
 8001238:	d1e1      	bne.n	80011fe <__ledf2+0x46>
 800123a:	42a5      	cmp	r5, r4
 800123c:	db05      	blt.n	800124a <__ledf2+0x92>
 800123e:	42be      	cmp	r6, r7
 8001240:	d8dd      	bhi.n	80011fe <__ledf2+0x46>
 8001242:	d019      	beq.n	8001278 <__ledf2+0xc0>
 8001244:	2000      	movs	r0, #0
 8001246:	42be      	cmp	r6, r7
 8001248:	d20a      	bcs.n	8001260 <__ledf2+0xa8>
 800124a:	4650      	mov	r0, sl
 800124c:	2301      	movs	r3, #1
 800124e:	3801      	subs	r0, #1
 8001250:	4398      	bics	r0, r3
 8001252:	3001      	adds	r0, #1
 8001254:	e004      	b.n	8001260 <__ledf2+0xa8>
 8001256:	2201      	movs	r2, #1
 8001258:	3b01      	subs	r3, #1
 800125a:	4393      	bics	r3, r2
 800125c:	0018      	movs	r0, r3
 800125e:	3001      	adds	r0, #1
 8001260:	bc1c      	pop	{r2, r3, r4}
 8001262:	4690      	mov	r8, r2
 8001264:	4699      	mov	r9, r3
 8001266:	46a2      	mov	sl, r4
 8001268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126a:	433a      	orrs	r2, r7
 800126c:	d1d0      	bne.n	8001210 <__ledf2+0x58>
 800126e:	459a      	cmp	sl, r3
 8001270:	d1c5      	bne.n	80011fe <__ledf2+0x46>
 8001272:	42a5      	cmp	r5, r4
 8001274:	dcc3      	bgt.n	80011fe <__ledf2+0x46>
 8001276:	e7e0      	b.n	800123a <__ledf2+0x82>
 8001278:	45c8      	cmp	r8, r9
 800127a:	d8c0      	bhi.n	80011fe <__ledf2+0x46>
 800127c:	2000      	movs	r0, #0
 800127e:	45c8      	cmp	r8, r9
 8001280:	d3e3      	bcc.n	800124a <__ledf2+0x92>
 8001282:	e7ed      	b.n	8001260 <__ledf2+0xa8>
 8001284:	000007ff 	.word	0x000007ff

08001288 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC_Init(void);
/* USER CODE BEGIN PFP */
static volatile uint32_t raw_pot;
static uint32_t avg_pot;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	raw_pot = avg_pot >> ADC_Q;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0b1a      	lsrs	r2, r3, #12
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x40>)
 8001298:	601a      	str	r2, [r3, #0]
	avg_pot -= raw_pot;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x40>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1a9a      	subs	r2, r3, r2
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80012a6:	601a      	str	r2, [r3, #0]
	avg_pot += HAL_ADC_GetValue(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fd2e 	bl	8001d0c <HAL_ADC_GetValue>
 80012b0:	0002      	movs	r2, r0
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	18d2      	adds	r2, r2, r3
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000002c 	.word	0x2000002c
 80012c8:	20000028 	.word	0x20000028

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sct_init();
 80012d0:	f000 f9a0 	bl	8001614 <sct_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d4:	f000 fae2 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d8:	f000 f83a 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012dc:	f000 f8e2 	bl	80014a4 <MX_GPIO_Init>
  MX_ADC_Init();
 80012e0:	f000 f886 	bl	80013f0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <main+0x74>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 ff56 	bl	8002198 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(5);
 80012ec:	2005      	movs	r0, #5
 80012ee:	f000 fb39 	bl	8001964 <HAL_Delay>
  HAL_ADC_Start_IT(&hadc);
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <main+0x74>)
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 fc97 	bl	8001c28 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sct_value(raw_pot/(4095.0/501.0),raw_pot/(4095/9));
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <main+0x78>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fe2c 	bl	8000f5c <__aeabi_ui2d>
 8001304:	4a10      	ldr	r2, [pc, #64]	; (8001348 <main+0x7c>)
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <main+0x80>)
 8001308:	f7fe ffa8 	bl	800025c <__aeabi_ddiv>
 800130c:	0003      	movs	r3, r0
 800130e:	000c      	movs	r4, r1
 8001310:	0018      	movs	r0, r3
 8001312:	0021      	movs	r1, r4
 8001314:	f7fe ff84 	bl	8000220 <__aeabi_d2uiz>
 8001318:	0003      	movs	r3, r0
 800131a:	b29c      	uxth	r4, r3
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <main+0x78>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	23c8      	movs	r3, #200	; 0xc8
 8001322:	33ff      	adds	r3, #255	; 0xff
 8001324:	0019      	movs	r1, r3
 8001326:	0010      	movs	r0, r2
 8001328:	f7fe feee 	bl	8000108 <__udivsi3>
 800132c:	0003      	movs	r3, r0
 800132e:	b29b      	uxth	r3, r3
 8001330:	0019      	movs	r1, r3
 8001332:	0020      	movs	r0, r4
 8001334:	f000 f976 	bl	8001624 <sct_value>
	  HAL_Delay(50);
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f000 fb13 	bl	8001964 <HAL_Delay>
	  sct_value(raw_pot/(4095.0/501.0),raw_pot/(4095/9));
 800133e:	e7dc      	b.n	80012fa <main+0x2e>
 8001340:	20000030 	.word	0x20000030
 8001344:	20000028 	.word	0x20000028
 8001348:	01886e5f 	.word	0x01886e5f
 800134c:	402058e9 	.word	0x402058e9

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b091      	sub	sp, #68	; 0x44
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	2410      	movs	r4, #16
 8001358:	193b      	adds	r3, r7, r4
 800135a:	0018      	movs	r0, r3
 800135c:	2330      	movs	r3, #48	; 0x30
 800135e:	001a      	movs	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	f001 fe95 	bl	8003090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001366:	003b      	movs	r3, r7
 8001368:	0018      	movs	r0, r3
 800136a:	2310      	movs	r3, #16
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f001 fe8e 	bl	8003090 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001374:	0021      	movs	r1, r4
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2212      	movs	r2, #18
 800137a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2201      	movs	r2, #1
 8001380:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2201      	movs	r2, #1
 8001386:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2210      	movs	r2, #16
 800138c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2210      	movs	r2, #16
 8001392:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2202      	movs	r2, #2
 8001398:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	22a0      	movs	r2, #160	; 0xa0
 80013a4:	0392      	lsls	r2, r2, #14
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	0018      	movs	r0, r3
 80013b2:	f001 f9fb 	bl	80027ac <HAL_RCC_OscConfig>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f8f1 	bl	80015a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	003b      	movs	r3, r7
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c4:	003b      	movs	r3, r7
 80013c6:	2202      	movs	r2, #2
 80013c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ca:	003b      	movs	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d0:	003b      	movs	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013d6:	003b      	movs	r3, r7
 80013d8:	2101      	movs	r1, #1
 80013da:	0018      	movs	r0, r3
 80013dc:	f001 fd02 	bl	8002de4 <HAL_RCC_ClockConfig>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e4:	f000 f8dc 	bl	80015a0 <Error_Handler>
  }
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b011      	add	sp, #68	; 0x44
 80013ee:	bd90      	pop	{r4, r7, pc}

080013f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	0018      	movs	r0, r3
 80013fa:	230c      	movs	r3, #12
 80013fc:	001a      	movs	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	f001 fe46 	bl	8003090 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <MX_ADC_Init+0xac>)
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <MX_ADC_Init+0xb0>)
 8001408:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <MX_ADC_Init+0xac>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <MX_ADC_Init+0xac>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <MX_ADC_Init+0xac>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_ADC_Init+0xac>)
 800141e:	2201      	movs	r2, #1
 8001420:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_ADC_Init+0xac>)
 8001424:	2204      	movs	r2, #4
 8001426:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <MX_ADC_Init+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_ADC_Init+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_ADC_Init+0xac>)
 8001436:	2201      	movs	r2, #1
 8001438:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_ADC_Init+0xac>)
 800143c:	2200      	movs	r2, #0
 800143e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <MX_ADC_Init+0xac>)
 8001442:	22c2      	movs	r2, #194	; 0xc2
 8001444:	32ff      	adds	r2, #255	; 0xff
 8001446:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_ADC_Init+0xac>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_ADC_Init+0xac>)
 8001450:	2224      	movs	r2, #36	; 0x24
 8001452:	2100      	movs	r1, #0
 8001454:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_ADC_Init+0xac>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_ADC_Init+0xac>)
 800145e:	0018      	movs	r0, r3
 8001460:	f000 faa2 	bl	80019a8 <HAL_ADC_Init>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001468:	f000 f89a 	bl	80015a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	0152      	lsls	r2, r2, #5
 8001478:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2207      	movs	r2, #7
 800147e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001480:	1d3a      	adds	r2, r7, #4
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_ADC_Init+0xac>)
 8001484:	0011      	movs	r1, r2
 8001486:	0018      	movs	r0, r3
 8001488:	f000 fd14 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001490:	f000 f886 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b004      	add	sp, #16
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000030 	.word	0x20000030
 80014a0:	40012400 	.word	0x40012400

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	240c      	movs	r4, #12
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	0018      	movs	r0, r3
 80014b0:	2314      	movs	r3, #20
 80014b2:	001a      	movs	r2, r3
 80014b4:	2100      	movs	r1, #0
 80014b6:	f001 fdeb 	bl	8003090 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0309      	lsls	r1, r1, #12
 80014c4:	430a      	orrs	r2, r1
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	031b      	lsls	r3, r3, #12
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0289      	lsls	r1, r1, #10
 80014e0:	430a      	orrs	r2, r1
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	02c9      	lsls	r1, r1, #11
 80014fc:	430a      	orrs	r2, r1
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_GPIO_Init+0xf0>)
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	02db      	lsls	r3, r3, #11
 8001508:	4013      	ands	r3, r2
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 800150e:	2387      	movs	r3, #135	; 0x87
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4821      	ldr	r0, [pc, #132]	; (8001598 <MX_GPIO_Init+0xf4>)
 8001514:	2200      	movs	r2, #0
 8001516:	0019      	movs	r1, r3
 8001518:	f001 f92a 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2203      	movs	r2, #3
 8001520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	193b      	adds	r3, r7, r4
 800152a:	2201      	movs	r2, #1
 800152c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	193b      	adds	r3, r7, r4
 8001530:	4a1a      	ldr	r2, [pc, #104]	; (800159c <MX_GPIO_Init+0xf8>)
 8001532:	0019      	movs	r1, r3
 8001534:	0010      	movs	r0, r2
 8001536:	f000 ffab 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_NLA_Pin;
 800153a:	0021      	movs	r1, r4
 800153c:	187b      	adds	r3, r7, r1
 800153e:	2284      	movs	r2, #132	; 0x84
 8001540:	00d2      	lsls	r2, r2, #3
 8001542:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2201      	movs	r2, #1
 8001548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	000c      	movs	r4, r1
 8001558:	187b      	adds	r3, r7, r1
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <MX_GPIO_Init+0xf4>)
 800155c:	0019      	movs	r1, r3
 800155e:	0010      	movs	r0, r2
 8001560:	f000 ff96 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_CLK_Pin SCT_SDI_Pin */
  GPIO_InitStruct.Pin = SCT_CLK_Pin|SCT_SDI_Pin;
 8001564:	0021      	movs	r1, r4
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2218      	movs	r2, #24
 800156a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2201      	movs	r2, #1
 8001570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2201      	movs	r2, #1
 800157c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	187b      	adds	r3, r7, r1
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <MX_GPIO_Init+0xf4>)
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f000 ff83 	bl	8002490 <HAL_GPIO_Init>

}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b009      	add	sp, #36	; 0x24
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40021000 	.word	0x40021000
 8001598:	48000400 	.word	0x48000400
 800159c:	48000800 	.word	0x48000800

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <sct_led>:
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)


void sct_led(uint32_t value)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j<32; j++)
 80015b4:	230f      	movs	r3, #15
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e019      	b.n	80015f2 <sct_led+0x46>
	{
		sct_sdi(value&1);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	d003      	beq.n	80015ce <sct_led+0x22>
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <sct_led+0x64>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	e002      	b.n	80015d4 <sct_led+0x28>
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <sct_led+0x64>)
 80015d0:	2210      	movs	r2, #16
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
		value=value>>1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
		sct_clk(1);
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <sct_led+0x64>)
 80015dc:	2208      	movs	r2, #8
 80015de:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <sct_led+0x64>)
 80015e2:	2208      	movs	r2, #8
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint8_t j = 0; j<32; j++)
 80015e6:	210f      	movs	r1, #15
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	3201      	adds	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	230f      	movs	r3, #15
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b1f      	cmp	r3, #31
 80015fa:	d9e0      	bls.n	80015be <sct_led+0x12>
	}
	sct_nla(1);
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <sct_led+0x64>)
 80015fe:	2220      	movs	r2, #32
 8001600:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 8001602:	4b03      	ldr	r3, [pc, #12]	; (8001610 <sct_led+0x64>)
 8001604:	2220      	movs	r2, #32
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}
 8001610:	48000400 	.word	0x48000400

08001614 <sct_init>:

void sct_init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

	sct_led(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff ffc7 	bl	80015ac <sct_led>
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <sct_value>:

void sct_value(uint16_t value, uint16_t bargraph)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	0002      	movs	r2, r0
 800162c:	1dbb      	adds	r3, r7, #6
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	1c0a      	adds	r2, r1, #0
 8001634:	801a      	strh	r2, [r3, #0]
	value = value%1000;
 8001636:	1dbc      	adds	r4, r7, #6
 8001638:	1dbb      	adds	r3, r7, #6
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	23fa      	movs	r3, #250	; 0xfa
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	0010      	movs	r0, r2
 8001642:	f7fe fde7 	bl	8000214 <__aeabi_uidivmod>
 8001646:	000b      	movs	r3, r1
 8001648:	8023      	strh	r3, [r4, #0]
	uint32_t out = reg_values[2][value%10];
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	210a      	movs	r1, #10
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe fddf 	bl	8000214 <__aeabi_uidivmod>
 8001656:	000b      	movs	r3, r1
 8001658:	b29b      	uxth	r3, r3
 800165a:	001a      	movs	r2, r3
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <sct_value+0xe4>)
 800165e:	3214      	adds	r2, #20
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	58d3      	ldr	r3, [r2, r3]
 8001664:	60fb      	str	r3, [r7, #12]
	value = value /10;
 8001666:	1dbc      	adds	r4, r7, #6
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	210a      	movs	r1, #10
 800166e:	0018      	movs	r0, r3
 8001670:	f7fe fd4a 	bl	8000108 <__udivsi3>
 8001674:	0003      	movs	r3, r0
 8001676:	8023      	strh	r3, [r4, #0]
	if(value>0)
 8001678:	1dbb      	adds	r3, r7, #6
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d02b      	beq.n	80016d8 <sct_value+0xb4>
	{
		out |= reg_values[1][value%10];
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	210a      	movs	r1, #10
 8001686:	0018      	movs	r0, r3
 8001688:	f7fe fdc4 	bl	8000214 <__aeabi_uidivmod>
 800168c:	000b      	movs	r3, r1
 800168e:	b29b      	uxth	r3, r3
 8001690:	001a      	movs	r2, r3
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <sct_value+0xe4>)
 8001694:	320a      	adds	r2, #10
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	58d3      	ldr	r3, [r2, r3]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
		value = value /10;
 80016a0:	1dbc      	adds	r4, r7, #6
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	210a      	movs	r1, #10
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7fe fd2d 	bl	8000108 <__udivsi3>
 80016ae:	0003      	movs	r3, r0
 80016b0:	8023      	strh	r3, [r4, #0]
		if(value>0)
 80016b2:	1dbb      	adds	r3, r7, #6
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00e      	beq.n	80016d8 <sct_value+0xb4>
		{
			out |= reg_values[0][value%10];
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	210a      	movs	r1, #10
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7fe fda7 	bl	8000214 <__aeabi_uidivmod>
 80016c6:	000b      	movs	r3, r1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	001a      	movs	r2, r3
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <sct_value+0xe4>)
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
		}
	}
	out |= reg_values[3][bargraph%10];
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	210a      	movs	r1, #10
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd98 	bl	8000214 <__aeabi_uidivmod>
 80016e4:	000b      	movs	r3, r1
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	001a      	movs	r2, r3
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <sct_value+0xe4>)
 80016ec:	321e      	adds	r2, #30
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	58d3      	ldr	r3, [r2, r3]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
	sct_led(out);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff ff56 	bl	80015ac <sct_led>
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b005      	add	sp, #20
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	08003118 	.word	0x08003118

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_MspInit+0x44>)
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_MspInit+0x44>)
 8001718:	2101      	movs	r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_MspInit+0x44>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x44>)
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_MspInit+0x44>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0549      	lsls	r1, r1, #21
 8001734:	430a      	orrs	r2, r1
 8001736:	61da      	str	r2, [r3, #28]
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_MspInit+0x44>)
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	055b      	lsls	r3, r3, #21
 8001740:	4013      	ands	r3, r2
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	2314      	movs	r3, #20
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	0018      	movs	r0, r3
 8001762:	2314      	movs	r3, #20
 8001764:	001a      	movs	r2, r3
 8001766:	2100      	movs	r1, #0
 8001768:	f001 fc92 	bl	8003090 <memset>
  if(hadc->Instance==ADC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_ADC_MspInit+0x94>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d134      	bne.n	80017e0 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_ADC_MspInit+0x98>)
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_ADC_MspInit+0x98>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0089      	lsls	r1, r1, #2
 8001780:	430a      	orrs	r2, r1
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_ADC_MspInit+0x98>)
 8001786:	699a      	ldr	r2, [r3, #24]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_ADC_MspInit+0x98>)
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_ADC_MspInit+0x98>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0289      	lsls	r1, r1, #10
 800179c:	430a      	orrs	r2, r1
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_ADC_MspInit+0x98>)
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ae:	2114      	movs	r1, #20
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2203      	movs	r2, #3
 80017ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	187a      	adds	r2, r7, r1
 80017c4:	2390      	movs	r3, #144	; 0x90
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	0011      	movs	r1, r2
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 fe60 	bl	8002490 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	200c      	movs	r0, #12
 80017d6:	f000 fe29 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80017da:	200c      	movs	r0, #12
 80017dc:	f000 fe3b 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b00a      	add	sp, #40	; 0x28
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012400 	.word	0x40012400
 80017ec:	40021000 	.word	0x40021000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 f888 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <ADC1_IRQHandler+0x14>)
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fa7a 	bl	8001d24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	20000030 	.word	0x20000030

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <LoopForever+0x6>)
  ldr r1, =_edata
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <LoopForever+0xe>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001864:	4c0b      	ldr	r4, [pc, #44]	; (8001894 <LoopForever+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001872:	f7ff ffe3 	bl	800183c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001876:	f001 fbe7 	bl	8003048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff fd27 	bl	80012cc <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   r0, =_estack
 8001880:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800188c:	080031d0 	.word	0x080031d0
  ldr r2, =_sbss
 8001890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001894:	20000074 	.word	0x20000074

08001898 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <DMA1_Channel1_IRQHandler>
	...

0800189c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_Init+0x24>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_Init+0x24>)
 80018a6:	2110      	movs	r1, #16
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f809 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b2:	f7ff ff2b 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_InitTick+0x5c>)
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_InitTick+0x60>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	0019      	movs	r1, r3
 80018d6:	23fa      	movs	r3, #250	; 0xfa
 80018d8:	0098      	lsls	r0, r3, #2
 80018da:	f7fe fc15 	bl	8000108 <__udivsi3>
 80018de:	0003      	movs	r3, r0
 80018e0:	0019      	movs	r1, r3
 80018e2:	0020      	movs	r0, r4
 80018e4:	f7fe fc10 	bl	8000108 <__udivsi3>
 80018e8:	0003      	movs	r3, r0
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 fdc3 	bl	8002476 <HAL_SYSTICK_Config>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e00f      	b.n	8001918 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d80b      	bhi.n	8001916 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	2301      	movs	r3, #1
 8001902:	425b      	negs	r3, r3
 8001904:	2200      	movs	r2, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f000 fd90 	bl	800242c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_InitTick+0x64>)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b003      	add	sp, #12
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_IncTick+0x1c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x20>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_IncTick+0x20>)
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20000008 	.word	0x20000008
 800194c:	20000070 	.word	0x20000070

08001950 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <HAL_GetTick+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000070 	.word	0x20000070

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fff0 	bl	8001950 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_Delay+0x40>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	001a      	movs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	189b      	adds	r3, r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	f7ff ffe0 	bl	8001950 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000008 	.word	0x20000008

080019a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	230f      	movs	r3, #15
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e125      	b.n	8001c12 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2234      	movs	r2, #52	; 0x34
 80019d8:	2100      	movs	r1, #0
 80019da:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff feb8 	bl	8001754 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	2210      	movs	r2, #16
 80019ea:	4013      	ands	r3, r2
 80019ec:	d000      	beq.n	80019f0 <HAL_ADC_Init+0x48>
 80019ee:	e103      	b.n	8001bf8 <HAL_ADC_Init+0x250>
 80019f0:	230f      	movs	r3, #15
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d000      	beq.n	80019fc <HAL_ADC_Init+0x54>
 80019fa:	e0fd      	b.n	8001bf8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a06:	d000      	beq.n	8001a0a <HAL_ADC_Init+0x62>
 8001a08:	e0f6      	b.n	8001bf8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	4a83      	ldr	r2, [pc, #524]	; (8001c1c <HAL_ADC_Init+0x274>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	2202      	movs	r2, #2
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d112      	bne.n	8001a4e <HAL_ADC_Init+0xa6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d009      	beq.n	8001a4a <HAL_ADC_Init+0xa2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	401a      	ands	r2, r3
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0xa6>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_ADC_Init+0xa8>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d116      	bne.n	8001a82 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2218      	movs	r2, #24
 8001a5c:	4393      	bics	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	0899      	lsrs	r1, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4964      	ldr	r1, [pc, #400]	; (8001c20 <HAL_ADC_Init+0x278>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7e1b      	ldrb	r3, [r3, #24]
 8001a96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e5b      	ldrb	r3, [r3, #25]
 8001a9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e9b      	ldrb	r3, [r3, #26]
 8001aa4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001aa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d002      	beq.n	8001ab6 <HAL_ADC_Init+0x10e>
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_Init+0x110>
 8001ab6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ab8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001abe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_Init+0x124>
 8001ac8:	2304      	movs	r3, #4
 8001aca:	e000      	b.n	8001ace <HAL_ADC_Init+0x126>
 8001acc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001ace:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2124      	movs	r1, #36	; 0x24
 8001ad4:	5c5b      	ldrb	r3, [r3, r1]
 8001ad6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ad8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7edb      	ldrb	r3, [r3, #27]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d115      	bne.n	8001b14 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e9b      	ldrb	r3, [r3, #26]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	0252      	lsls	r2, r2, #9
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	e00b      	b.n	8001b14 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	2220      	movs	r2, #32
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	23c2      	movs	r3, #194	; 0xc2
 8001b1a:	33ff      	adds	r3, #255	; 0xff
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	055b      	lsls	r3, r3, #21
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d01b      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d017      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d013      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d00f      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00b      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d007      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d003      	beq.n	8001b84 <HAL_ADC_Init+0x1dc>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	d112      	bne.n	8001baa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2107      	movs	r1, #7
 8001b90:	438a      	bics	r2, r1
 8001b92:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6959      	ldr	r1, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_ADC_Init+0x27c>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	2201      	movs	r2, #1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bd0:	e01c      	b.n	8001c0c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	2212      	movs	r2, #18
 8001bd8:	4393      	bics	r3, r2
 8001bda:	2210      	movs	r2, #16
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	2201      	movs	r2, #1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001bee:	230f      	movs	r3, #15
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bf6:	e009      	b.n	8001c0c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c04:	230f      	movs	r3, #15
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	781b      	ldrb	r3, [r3, #0]
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	fffffefd 	.word	0xfffffefd
 8001c20:	fffe0219 	.word	0xfffe0219
 8001c24:	833fffe7 	.word	0x833fffe7

08001c28 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	230f      	movs	r3, #15
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d156      	bne.n	8001cf2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2234      	movs	r2, #52	; 0x34
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Start_IT+0x2a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e056      	b.n	8001d00 <HAL_ADC_Start_IT+0xd8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2234      	movs	r2, #52	; 0x34
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7e5b      	ldrb	r3, [r3, #25]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d007      	beq.n	8001c72 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001c62:	230f      	movs	r3, #15
 8001c64:	18fc      	adds	r4, r7, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 fa19 	bl	80020a0 <ADC_Enable>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c72:	230f      	movs	r3, #15
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d13e      	bne.n	8001cfa <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_ADC_Start_IT+0xe0>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2234      	movs	r2, #52	; 0x34
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	221c      	movs	r2, #28
 8001ca2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d110      	bne.n	8001cce <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	438a      	bics	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2118      	movs	r1, #24
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
          break;
 8001ccc:	e008      	b.n	8001ce0 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	211c      	movs	r1, #28
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
          break;
 8001cde:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2104      	movs	r1, #4
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e003      	b.n	8001cfa <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b005      	add	sp, #20
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	fffff0fe 	.word	0xfffff0fe

08001d0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2204      	movs	r2, #4
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_IRQHandler+0x24>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d00d      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2208      	movs	r2, #8
 8001d50:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d14f      	bne.n	8001df6 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d148      	bne.n	8001df6 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d12d      	bne.n	8001de6 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d129      	bne.n	8001de6 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d122      	bne.n	8001de6 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d110      	bne.n	8001dce <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	210c      	movs	r1, #12
 8001db8:	438a      	bics	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	4a33      	ldr	r2, [pc, #204]	; (8001e90 <HAL_ADC_IRQHandler+0x16c>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
 8001dcc:	e00b      	b.n	8001de6 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dde:	2201      	movs	r2, #1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff fa4d 	bl	8001288 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d115      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x10c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b80      	cmp	r3, #128	; 0x80
 8001e10:	d10e      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0252      	lsls	r2, r2, #9
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f836 	bl	8001e94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2210      	movs	r2, #16
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d123      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x162>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2210      	movs	r2, #16
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11c      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d006      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10d      	bne.n	8001e7e <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	2202      	movs	r2, #2
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2210      	movs	r2, #16
 8001e74:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f813 	bl	8001ea4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2210      	movs	r2, #16
 8001e84:	601a      	str	r2, [r3, #0]
  }

}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	fffffefe 	.word	0xfffffefe

08001e94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	055b      	lsls	r3, r3, #21
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d011      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x46>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d00d      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x46>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d009      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x46>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d005      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x46>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d001      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x46>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2234      	movs	r2, #52	; 0x34
 8001efe:	5c9b      	ldrb	r3, [r3, r2]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x54>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0bb      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1cc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2234      	movs	r2, #52	; 0x34
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d000      	beq.n	8001f1e <HAL_ADC_ConfigChannel+0x6a>
 8001f1c:	e09f      	b.n	800205e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_ADC_ConfigChannel+0x1d4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d100      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x76>
 8001f28:	e077      	b.n	800201a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	409a      	lsls	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d037      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d033      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d02f      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d02b      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d027      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d023      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d01f      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	d01b      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2107      	movs	r1, #7
 8001f90:	400b      	ands	r3, r1
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d012      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	438a      	bics	r2, r1
 8001fa4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6959      	ldr	r1, [r3, #20]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d003      	beq.n	8001fcc <HAL_ADC_ConfigChannel+0x118>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b11      	cmp	r3, #17
 8001fca:	d152      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_ADC_ConfigChannel+0x1d8>)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d102      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x12a>
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	e001      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x12e>
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	03db      	lsls	r3, r3, #15
 8001fe2:	4a2a      	ldr	r2, [pc, #168]	; (800208c <HAL_ADC_ConfigChannel+0x1d8>)
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d140      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_ADC_ConfigChannel+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4927      	ldr	r1, [pc, #156]	; (8002094 <HAL_ADC_ConfigChannel+0x1e0>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7fe f886 	bl	8000108 <__udivsi3>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	001a      	movs	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	189b      	adds	r3, r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800200a:	e002      	b.n	8002012 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3b01      	subs	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f9      	bne.n	800200c <HAL_ADC_ConfigChannel+0x158>
 8002018:	e02b      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	4099      	lsls	r1, r3
 8002028:	000b      	movs	r3, r1
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b10      	cmp	r3, #16
 800203a:	d003      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x190>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b11      	cmp	r3, #17
 8002042:	d116      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x1d8>)
 8002046:	6819      	ldr	r1, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b10      	cmp	r3, #16
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1a0>
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_ADC_ConfigChannel+0x1e4>)
 8002052:	e000      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1a2>
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_ADC_ConfigChannel+0x1e8>)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_ADC_ConfigChannel+0x1d8>)
 8002058:	400a      	ands	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e009      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	2220      	movs	r2, #32
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800206a:	230f      	movs	r3, #15
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2234      	movs	r2, #52	; 0x34
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800207a:	230f      	movs	r3, #15
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}
 8002088:	00001001 	.word	0x00001001
 800208c:	40012708 	.word	0x40012708
 8002090:	20000000 	.word	0x20000000
 8002094:	000f4240 	.word	0x000f4240
 8002098:	ff7fffff 	.word	0xff7fffff
 800209c:	ffbfffff 	.word	0xffbfffff

080020a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2203      	movs	r2, #3
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d112      	bne.n	80020e4 <ADC_Enable+0x44>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d009      	beq.n	80020e0 <ADC_Enable+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	401a      	ands	r2, r3
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	429a      	cmp	r2, r3
 80020de:	d101      	bne.n	80020e4 <ADC_Enable+0x44>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <ADC_Enable+0x46>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d14b      	bne.n	8002182 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <ADC_Enable+0xec>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	d00d      	beq.n	8002112 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	2210      	movs	r2, #16
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	2201      	movs	r2, #1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e038      	b.n	8002184 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <ADC_Enable+0xf0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	491b      	ldr	r1, [pc, #108]	; (8002194 <ADC_Enable+0xf4>)
 8002128:	0018      	movs	r0, r3
 800212a:	f7fd ffed 	bl	8000108 <__udivsi3>
 800212e:	0003      	movs	r3, r0
 8002130:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002132:	e002      	b.n	800213a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002140:	f7ff fc06 	bl	8001950 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002148:	e014      	b.n	8002174 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800214a:	f7ff fc01 	bl	8001950 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d90d      	bls.n	8002174 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	2210      	movs	r2, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	2201      	movs	r2, #1
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e007      	b.n	8002184 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	2b01      	cmp	r3, #1
 8002180:	d1e3      	bne.n	800214a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	80000017 	.word	0x80000017
 8002190:	20000000 	.word	0x20000000
 8002194:	000f4240 	.word	0x000f4240

08002198 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a0:	2317      	movs	r3, #23
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2234      	movs	r2, #52	; 0x34
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_ADCEx_Calibration_Start+0x26>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e084      	b.n	80022c8 <HAL_ADCEx_Calibration_Start+0x130>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2234      	movs	r2, #52	; 0x34
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2203      	movs	r2, #3
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d112      	bne.n	80021fa <HAL_ADCEx_Calibration_Start+0x62>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d009      	beq.n	80021f6 <HAL_ADCEx_Calibration_Start+0x5e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	401a      	ands	r2, r3
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d101      	bne.n	80021fa <HAL_ADCEx_Calibration_Start+0x62>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_ADCEx_Calibration_Start+0x64>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d152      	bne.n	80022a6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_ADCEx_Calibration_Start+0x138>)
 8002206:	4013      	ands	r3, r2
 8002208:	2202      	movs	r2, #2
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2203      	movs	r2, #3
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2103      	movs	r1, #3
 8002228:	438a      	bics	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	0609      	lsls	r1, r1, #24
 800223a:	430a      	orrs	r2, r1
 800223c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800223e:	f7ff fb87 	bl	8001950 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002246:	e014      	b.n	8002272 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002248:	f7ff fb82 	bl	8001950 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d90d      	bls.n	8002272 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	2212      	movs	r2, #18
 800225c:	4393      	bics	r3, r2
 800225e:	2210      	movs	r2, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2234      	movs	r2, #52	; 0x34
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e02a      	b.n	80022c8 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	0fdb      	lsrs	r3, r3, #31
 800227a:	07da      	lsls	r2, r3, #31
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	429a      	cmp	r2, r3
 8002282:	d0e1      	beq.n	8002248 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68d9      	ldr	r1, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	2203      	movs	r2, #3
 800229a:	4393      	bics	r3, r2
 800229c:	2201      	movs	r2, #1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38
 80022a4:	e009      	b.n	80022ba <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	2220      	movs	r2, #32
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80022b2:	2317      	movs	r3, #23
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2234      	movs	r2, #52	; 0x34
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80022c2:	2317      	movs	r3, #23
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b006      	add	sp, #24
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	fffffefd 	.word	0xfffffefd

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b7f      	cmp	r3, #127	; 0x7f
 80022e6:	d809      	bhi.n	80022fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	001a      	movs	r2, r3
 80022ee:	231f      	movs	r3, #31
 80022f0:	401a      	ands	r2, r3
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_EnableIRQ+0x30>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	4091      	lsls	r1, r2
 80022f8:	000a      	movs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
  }
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	0002      	movs	r2, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b7f      	cmp	r3, #127	; 0x7f
 800231c:	d828      	bhi.n	8002370 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800231e:	4a2f      	ldr	r2, [pc, #188]	; (80023dc <__NVIC_SetPriority+0xd4>)
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	33c0      	adds	r3, #192	; 0xc0
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	589b      	ldr	r3, [r3, r2]
 800232e:	1dfa      	adds	r2, r7, #7
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	0011      	movs	r1, r2
 8002334:	2203      	movs	r2, #3
 8002336:	400a      	ands	r2, r1
 8002338:	00d2      	lsls	r2, r2, #3
 800233a:	21ff      	movs	r1, #255	; 0xff
 800233c:	4091      	lsls	r1, r2
 800233e:	000a      	movs	r2, r1
 8002340:	43d2      	mvns	r2, r2
 8002342:	401a      	ands	r2, r3
 8002344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	22ff      	movs	r2, #255	; 0xff
 800234c:	401a      	ands	r2, r3
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	2303      	movs	r3, #3
 8002356:	4003      	ands	r3, r0
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235c:	481f      	ldr	r0, [pc, #124]	; (80023dc <__NVIC_SetPriority+0xd4>)
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b25b      	sxtb	r3, r3
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	430a      	orrs	r2, r1
 8002368:	33c0      	adds	r3, #192	; 0xc0
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800236e:	e031      	b.n	80023d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <__NVIC_SetPriority+0xd8>)
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	0019      	movs	r1, r3
 8002378:	230f      	movs	r3, #15
 800237a:	400b      	ands	r3, r1
 800237c:	3b08      	subs	r3, #8
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3306      	adds	r3, #6
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	18d3      	adds	r3, r2, r3
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1dfa      	adds	r2, r7, #7
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	0011      	movs	r1, r2
 8002390:	2203      	movs	r2, #3
 8002392:	400a      	ands	r2, r1
 8002394:	00d2      	lsls	r2, r2, #3
 8002396:	21ff      	movs	r1, #255	; 0xff
 8002398:	4091      	lsls	r1, r2
 800239a:	000a      	movs	r2, r1
 800239c:	43d2      	mvns	r2, r2
 800239e:	401a      	ands	r2, r3
 80023a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	401a      	ands	r2, r3
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	0018      	movs	r0, r3
 80023b0:	2303      	movs	r3, #3
 80023b2:	4003      	ands	r3, r0
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <__NVIC_SetPriority+0xd8>)
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	001c      	movs	r4, r3
 80023c0:	230f      	movs	r3, #15
 80023c2:	4023      	ands	r3, r4
 80023c4:	3b08      	subs	r3, #8
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	430a      	orrs	r2, r1
 80023ca:	3306      	adds	r3, #6
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	18c3      	adds	r3, r0, r3
 80023d0:	3304      	adds	r3, #4
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b003      	add	sp, #12
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <SysTick_Config+0x40>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e010      	b.n	800241c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <SysTick_Config+0x44>)
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	3a01      	subs	r2, #1
 8002400:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	2301      	movs	r3, #1
 8002404:	425b      	negs	r3, r3
 8002406:	2103      	movs	r1, #3
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff ff7d 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SysTick_Config+0x44>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x44>)
 8002416:	2207      	movs	r2, #7
 8002418:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	00ffffff 	.word	0x00ffffff
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	210f      	movs	r1, #15
 8002438:	187b      	adds	r3, r7, r1
 800243a:	1c02      	adds	r2, r0, #0
 800243c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	187b      	adds	r3, r7, r1
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b25b      	sxtb	r3, r3
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b004      	add	sp, #16
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	0002      	movs	r2, r0
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b25b      	sxtb	r3, r3
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff ff33 	bl	80022d4 <__NVIC_EnableIRQ>
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ffaf 	bl	80023e4 <SysTick_Config>
 8002486:	0003      	movs	r3, r0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e14f      	b.n	8002740 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4091      	lsls	r1, r2
 80024aa:	000a      	movs	r2, r1
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d100      	bne.n	80024b8 <HAL_GPIO_Init+0x28>
 80024b6:	e140      	b.n	800273a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d00b      	beq.n	80024d8 <HAL_GPIO_Init+0x48>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	409a      	lsls	r2, r3
 80024e6:	0013      	movs	r3, r2
 80024e8:	43da      	mvns	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	409a      	lsls	r2, r3
 80024fa:	0013      	movs	r3, r2
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	2201      	movs	r2, #1
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	409a      	lsls	r2, r3
 8002548:	0013      	movs	r3, r2
 800254a:	43da      	mvns	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0xea>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b12      	cmp	r3, #18
 8002578:	d123      	bne.n	80025c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	58d3      	ldr	r3, [r2, r3]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2207      	movs	r2, #7
 800258c:	4013      	ands	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	409a      	lsls	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2107      	movs	r1, #7
 80025a6:	400b      	ands	r3, r1
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	6939      	ldr	r1, [r7, #16]
 80025c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	409a      	lsls	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	43da      	mvns	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	401a      	ands	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	055b      	lsls	r3, r3, #21
 80025fe:	4013      	ands	r3, r2
 8002600:	d100      	bne.n	8002604 <HAL_GPIO_Init+0x174>
 8002602:	e09a      	b.n	800273a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002604:	4b54      	ldr	r3, [pc, #336]	; (8002758 <HAL_GPIO_Init+0x2c8>)
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_GPIO_Init+0x2c8>)
 800260a:	2101      	movs	r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	619a      	str	r2, [r3, #24]
 8002610:	4b51      	ldr	r3, [pc, #324]	; (8002758 <HAL_GPIO_Init+0x2c8>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2201      	movs	r2, #1
 8002616:	4013      	ands	r3, r2
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800261c:	4a4f      	ldr	r2, [pc, #316]	; (800275c <HAL_GPIO_Init+0x2cc>)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	589b      	ldr	r3, [r3, r2]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2203      	movs	r2, #3
 800262e:	4013      	ands	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	409a      	lsls	r2, r3
 8002636:	0013      	movs	r3, r2
 8002638:	43da      	mvns	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	2390      	movs	r3, #144	; 0x90
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	429a      	cmp	r2, r3
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x1e2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a44      	ldr	r2, [pc, #272]	; (8002760 <HAL_GPIO_Init+0x2d0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x1de>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a43      	ldr	r2, [pc, #268]	; (8002764 <HAL_GPIO_Init+0x2d4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x1da>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_GPIO_Init+0x2d8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x1d6>
 8002662:	2303      	movs	r3, #3
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x1e4>
 8002666:	2305      	movs	r3, #5
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x1e4>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x1e4>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x1e4>
 8002672:	2300      	movs	r3, #0
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	2103      	movs	r1, #3
 8002678:	400a      	ands	r2, r1
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002684:	4935      	ldr	r1, [pc, #212]	; (800275c <HAL_GPIO_Init+0x2cc>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_GPIO_Init+0x2dc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43da      	mvns	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	4013      	ands	r3, r2
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_GPIO_Init+0x2dc>)
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_GPIO_Init+0x2dc>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_GPIO_Init+0x2dc>)
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <HAL_GPIO_Init+0x2dc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	035b      	lsls	r3, r3, #13
 80026fe:	4013      	ands	r3, r2
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_GPIO_Init+0x2dc>)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_GPIO_Init+0x2dc>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	4013      	ands	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_GPIO_Init+0x2dc>)
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	40da      	lsrs	r2, r3
 8002748:	1e13      	subs	r3, r2, #0
 800274a:	d000      	beq.n	800274e <HAL_GPIO_Init+0x2be>
 800274c:	e6a8      	b.n	80024a0 <HAL_GPIO_Init+0x10>
  } 
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b006      	add	sp, #24
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	48000c00 	.word	0x48000c00
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	0008      	movs	r0, r1
 800277a:	0011      	movs	r1, r2
 800277c:	1cbb      	adds	r3, r7, #2
 800277e:	1c02      	adds	r2, r0, #0
 8002780:	801a      	strh	r2, [r3, #0]
 8002782:	1c7b      	adds	r3, r7, #1
 8002784:	1c0a      	adds	r2, r1, #0
 8002786:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002788:	1c7b      	adds	r3, r7, #1
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002790:	1cbb      	adds	r3, r7, #2
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279a:	1cbb      	adds	r3, r7, #2
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e303      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d100      	bne.n	80027ca <HAL_RCC_OscConfig+0x1e>
 80027c8:	e08d      	b.n	80028e6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027ca:	4bc4      	ldr	r3, [pc, #784]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	220c      	movs	r2, #12
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00e      	beq.n	80027f4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d6:	4bc1      	ldr	r3, [pc, #772]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	220c      	movs	r2, #12
 80027dc:	4013      	ands	r3, r2
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x64>
 80027e2:	4bbe      	ldr	r3, [pc, #760]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	401a      	ands	r2, r3
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d10d      	bne.n	8002810 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	4bb9      	ldr	r3, [pc, #740]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x56>
 8002800:	e070      	b.n	80028e4 <HAL_RCC_OscConfig+0x138>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d000      	beq.n	800280c <HAL_RCC_OscConfig+0x60>
 800280a:	e06b      	b.n	80028e4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e2da      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x7c>
 8002818:	4bb0      	ldr	r3, [pc, #704]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4baf      	ldr	r3, [pc, #700]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0249      	lsls	r1, r1, #9
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e02f      	b.n	8002888 <HAL_RCC_OscConfig+0xdc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x9e>
 8002830:	4baa      	ldr	r3, [pc, #680]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4ba9      	ldr	r3, [pc, #676]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002836:	49aa      	ldr	r1, [pc, #680]	; (8002ae0 <HAL_RCC_OscConfig+0x334>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4ba7      	ldr	r3, [pc, #668]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4ba6      	ldr	r3, [pc, #664]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002842:	49a8      	ldr	r1, [pc, #672]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e01e      	b.n	8002888 <HAL_RCC_OscConfig+0xdc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10e      	bne.n	8002870 <HAL_RCC_OscConfig+0xc4>
 8002852:	4ba2      	ldr	r3, [pc, #648]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4ba1      	ldr	r3, [pc, #644]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	02c9      	lsls	r1, r1, #11
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4b9e      	ldr	r3, [pc, #632]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b9d      	ldr	r3, [pc, #628]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0249      	lsls	r1, r1, #9
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xdc>
 8002870:	4b9a      	ldr	r3, [pc, #616]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b99      	ldr	r3, [pc, #612]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002876:	499a      	ldr	r1, [pc, #616]	; (8002ae0 <HAL_RCC_OscConfig+0x334>)
 8002878:	400a      	ands	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	4b97      	ldr	r3, [pc, #604]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b96      	ldr	r3, [pc, #600]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002882:	4998      	ldr	r1, [pc, #608]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002884:	400a      	ands	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f85e 	bl	8001950 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289a:	f7ff f859 	bl	8001950 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e28c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ac:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	029b      	lsls	r3, r3, #10
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0xee>
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7ff f849 	bl	8001950 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff f844 	bl	8001950 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e277      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x118>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2202      	movs	r2, #2
 80028ec:	4013      	ands	r3, r2
 80028ee:	d100      	bne.n	80028f2 <HAL_RCC_OscConfig+0x146>
 80028f0:	e069      	b.n	80029c6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f2:	4b7a      	ldr	r3, [pc, #488]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	220c      	movs	r2, #12
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00b      	beq.n	8002914 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028fc:	4b77      	ldr	r3, [pc, #476]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	220c      	movs	r2, #12
 8002902:	4013      	ands	r3, r2
 8002904:	2b08      	cmp	r3, #8
 8002906:	d11c      	bne.n	8002942 <HAL_RCC_OscConfig+0x196>
 8002908:	4b74      	ldr	r3, [pc, #464]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	4013      	ands	r3, r2
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002914:	4b71      	ldr	r3, [pc, #452]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x17e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e24d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b6c      	ldr	r3, [pc, #432]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	22f8      	movs	r2, #248	; 0xf8
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	00da      	lsls	r2, r3, #3
 800293a:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002940:	e041      	b.n	80029c6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d024      	beq.n	8002994 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	4b64      	ldr	r3, [pc, #400]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fffb 	bl	8001950 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe fff6 	bl	8001950 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e229      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d0f1      	beq.n	8002960 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22f8      	movs	r2, #248	; 0xf8
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00da      	lsls	r2, r3, #3
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe ffd6 	bl	8001950 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fe ffd1 	bl	8001950 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e204      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029bc:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f1      	bne.n	80029aa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2208      	movs	r2, #8
 80029cc:	4013      	ands	r3, r2
 80029ce:	d036      	beq.n	8002a3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d019      	beq.n	8002a0c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80029da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029dc:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80029de:	2101      	movs	r1, #1
 80029e0:	430a      	orrs	r2, r1
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe ffb4 	bl	8001950 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe ffaf 	bl	8001950 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1e2      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d0f1      	beq.n	80029ee <HAL_RCC_OscConfig+0x242>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	4b32      	ldr	r3, [pc, #200]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7fe ff9a 	bl	8001950 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe ff95 	bl	8001950 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1c8      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2204      	movs	r2, #4
 8002a44:	4013      	ands	r3, r2
 8002a46:	d100      	bne.n	8002a4a <HAL_RCC_OscConfig+0x29e>
 8002a48:	e0b6      	b.n	8002bb8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	231f      	movs	r3, #31
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	055b      	lsls	r3, r3, #21
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	0549      	lsls	r1, r1, #21
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a7a:	231f      	movs	r3, #31
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_OscConfig+0x33c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCC_OscConfig+0x33c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x33c>)
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0049      	lsls	r1, r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9c:	f7fe ff58 	bl	8001950 <HAL_GetTick>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe ff53 	bl	8001950 <HAL_GetTick>
 8002aaa:	0002      	movs	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e186      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x33c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10f      	bne.n	8002aec <HAL_RCC_OscConfig+0x340>
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	621a      	str	r2, [r3, #32]
 8002ad8:	e036      	b.n	8002b48 <HAL_RCC_OscConfig+0x39c>
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	fffeffff 	.word	0xfffeffff
 8002ae4:	fffbffff 	.word	0xfffbffff
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x362>
 8002af4:	4bb6      	ldr	r3, [pc, #728]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	4bb5      	ldr	r3, [pc, #724]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	438a      	bics	r2, r1
 8002afe:	621a      	str	r2, [r3, #32]
 8002b00:	4bb3      	ldr	r3, [pc, #716]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	4bb2      	ldr	r3, [pc, #712]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b06:	2104      	movs	r1, #4
 8002b08:	438a      	bics	r2, r1
 8002b0a:	621a      	str	r2, [r3, #32]
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x39c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x384>
 8002b16:	4bae      	ldr	r3, [pc, #696]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	4bad      	ldr	r3, [pc, #692]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	621a      	str	r2, [r3, #32]
 8002b22:	4bab      	ldr	r3, [pc, #684]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	4baa      	ldr	r3, [pc, #680]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	621a      	str	r2, [r3, #32]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x39c>
 8002b30:	4ba7      	ldr	r3, [pc, #668]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	4ba6      	ldr	r3, [pc, #664]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	438a      	bics	r2, r1
 8002b3a:	621a      	str	r2, [r3, #32]
 8002b3c:	4ba4      	ldr	r3, [pc, #656]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	4ba3      	ldr	r3, [pc, #652]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b42:	2104      	movs	r1, #4
 8002b44:	438a      	bics	r2, r1
 8002b46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d014      	beq.n	8002b7a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fefe 	bl	8001950 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	e009      	b.n	8002b6e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fef9 	bl	8001950 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	4a9b      	ldr	r2, [pc, #620]	; (8002dd4 <HAL_RCC_OscConfig+0x628>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e12b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	4b98      	ldr	r3, [pc, #608]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x3ae>
 8002b78:	e013      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fee9 	bl	8001950 <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	e009      	b.n	8002b98 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fee4 	bl	8001950 <HAL_GetTick>
 8002b88:	0002      	movs	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	4a91      	ldr	r2, [pc, #580]	; (8002dd4 <HAL_RCC_OscConfig+0x628>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e116      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba2:	231f      	movs	r3, #31
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	4b87      	ldr	r3, [pc, #540]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002bb2:	4989      	ldr	r1, [pc, #548]	; (8002dd8 <HAL_RCC_OscConfig+0x62c>)
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d12a      	bne.n	8002c20 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b80      	ldr	r3, [pc, #512]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bd6:	4b7e      	ldr	r3, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bda:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7fe feb5 	bl	8001950 <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bec:	f7fe feb0 	bl	8001950 <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0e3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bfe:	4b74      	ldr	r3, [pc, #464]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d0f1      	beq.n	8002bec <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c08:	4b71      	ldr	r3, [pc, #452]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	22f8      	movs	r2, #248	; 0xf8
 8002c0e:	4393      	bics	r3, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	00da      	lsls	r2, r3, #3
 8002c18:	4b6d      	ldr	r3, [pc, #436]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1e:	e034      	b.n	8002c8a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	3305      	adds	r3, #5
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c28:	4b69      	ldr	r3, [pc, #420]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c2e:	2104      	movs	r1, #4
 8002c30:	438a      	bics	r2, r1
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c34:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	22f8      	movs	r2, #248	; 0xf8
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	00da      	lsls	r2, r3, #3
 8002c44:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4a:	e01e      	b.n	8002c8a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c4c:	4b60      	ldr	r3, [pc, #384]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c50:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c52:	2104      	movs	r1, #4
 8002c54:	430a      	orrs	r2, r1
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c58:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	438a      	bics	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fe74 	bl	8001950 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c6e:	f7fe fe6f 	bl	8001950 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0a2      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1f1      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d100      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4e8>
 8002c92:	e097      	b.n	8002dc4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c94:	4b4e      	ldr	r3, [pc, #312]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	220c      	movs	r2, #12
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d100      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
 8002ca0:	e06b      	b.n	8002d7a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d14c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002cb0:	494a      	ldr	r1, [pc, #296]	; (8002ddc <HAL_RCC_OscConfig+0x630>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fe4b 	bl	8001950 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fe46 	bl	8001950 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e079      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	049b      	lsls	r3, r3, #18
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cde:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	; (8002de0 <HAL_RCC_OscConfig+0x634>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	0449      	lsls	r1, r1, #17
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fe19 	bl	8001950 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fe14 	bl	8001950 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e047      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	049b      	lsls	r3, r3, #18
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x578>
 8002d42:	e03f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d4a:	4924      	ldr	r1, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x630>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe fdfe 	bl	8001950 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe fdf9 	bl	8001950 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e02c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6c:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	049b      	lsls	r3, r3, #18
 8002d74:	4013      	ands	r3, r2
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5ae>
 8002d78:	e024      	b.n	8002dc4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d10e      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	220f      	movs	r2, #15
 8002da6:	401a      	ands	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	23f0      	movs	r3, #240	; 0xf0
 8002db4:	039b      	lsls	r3, r3, #14
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b008      	add	sp, #32
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	00001388 	.word	0x00001388
 8002dd8:	efffffff 	.word	0xefffffff
 8002ddc:	feffffff 	.word	0xfeffffff
 8002de0:	ffc2ffff 	.word	0xffc2ffff

08002de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b3      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d911      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e09a      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d015      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d006      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e44:	21e0      	movs	r1, #224	; 0xe0
 8002e46:	00c9      	lsls	r1, r1, #3
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	22f0      	movs	r2, #240	; 0xf0
 8002e52:	4393      	bics	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d040      	beq.n	8002eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	029b      	lsls	r3, r3, #10
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d114      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06e      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	049b      	lsls	r3, r3, #18
 8002e92:	4013      	ands	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e062      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e05b      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2203      	movs	r2, #3
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fd48 	bl	8001950 <HAL_GetTick>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec4:	e009      	b.n	8002eda <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec6:	f7fe fd43 	bl	8001950 <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <HAL_RCC_ClockConfig+0x18c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e042      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	220c      	movs	r2, #12
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1ec      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d211      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4393      	bics	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_RCC_ClockConfig+0x184>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e020      	b.n	8002f60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2204      	movs	r2, #4
 8002f24:	4013      	ands	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_RCC_ClockConfig+0x190>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f3c:	f000 f820 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f40:	0001      	movs	r1, r0
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x188>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	220f      	movs	r2, #15
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x194>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	000a      	movs	r2, r1
 8002f52:	40da      	lsrs	r2, r3
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x198>)
 8002f56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fe fcb3 	bl	80018c4 <HAL_InitTick>
  
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	00001388 	.word	0x00001388
 8002f74:	fffff8ff 	.word	0xfffff8ff
 8002f78:	080031b8 	.word	0x080031b8
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b08f      	sub	sp, #60	; 0x3c
 8002f84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f86:	2314      	movs	r3, #20
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f8e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f9a:	c313      	stmia	r3!, {r0, r1, r4}
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa8:	2300      	movs	r3, #0
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	220c      	movs	r2, #12
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d002      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x4a>
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d003      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x50>
 8002fc8:	e02d      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fce:	e02d      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	0c9b      	lsrs	r3, r3, #18
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2214      	movs	r2, #20
 8002fda:	18ba      	adds	r2, r7, r2
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	1d3a      	adds	r2, r7, #4
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffa:	4812      	ldr	r0, [pc, #72]	; (8003044 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ffc:	f7fd f884 	bl	8000108 <__udivsi3>
 8003000:	0003      	movs	r3, r0
 8003002:	001a      	movs	r2, r3
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	4353      	muls	r3, r2
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	e009      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800300c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800300e:	000a      	movs	r2, r1
 8003010:	0152      	lsls	r2, r2, #5
 8003012:	1a52      	subs	r2, r2, r1
 8003014:	0193      	lsls	r3, r2, #6
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	185b      	adds	r3, r3, r1
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003024:	e002      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800302a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b00f      	add	sp, #60	; 0x3c
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	080030b8 	.word	0x080030b8
 800303c:	080030c8 	.word	0x080030c8
 8003040:	40021000 	.word	0x40021000
 8003044:	007a1200 	.word	0x007a1200

08003048 <__libc_init_array>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	2600      	movs	r6, #0
 800304c:	4d0c      	ldr	r5, [pc, #48]	; (8003080 <__libc_init_array+0x38>)
 800304e:	4c0d      	ldr	r4, [pc, #52]	; (8003084 <__libc_init_array+0x3c>)
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	42a6      	cmp	r6, r4
 8003056:	d109      	bne.n	800306c <__libc_init_array+0x24>
 8003058:	2600      	movs	r6, #0
 800305a:	f000 f821 	bl	80030a0 <_init>
 800305e:	4d0a      	ldr	r5, [pc, #40]	; (8003088 <__libc_init_array+0x40>)
 8003060:	4c0a      	ldr	r4, [pc, #40]	; (800308c <__libc_init_array+0x44>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	42a6      	cmp	r6, r4
 8003068:	d105      	bne.n	8003076 <__libc_init_array+0x2e>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	00b3      	lsls	r3, r6, #2
 800306e:	58eb      	ldr	r3, [r5, r3]
 8003070:	4798      	blx	r3
 8003072:	3601      	adds	r6, #1
 8003074:	e7ee      	b.n	8003054 <__libc_init_array+0xc>
 8003076:	00b3      	lsls	r3, r6, #2
 8003078:	58eb      	ldr	r3, [r5, r3]
 800307a:	4798      	blx	r3
 800307c:	3601      	adds	r6, #1
 800307e:	e7f2      	b.n	8003066 <__libc_init_array+0x1e>
 8003080:	080031c8 	.word	0x080031c8
 8003084:	080031c8 	.word	0x080031c8
 8003088:	080031c8 	.word	0x080031c8
 800308c:	080031cc 	.word	0x080031cc

08003090 <memset>:
 8003090:	0003      	movs	r3, r0
 8003092:	1812      	adds	r2, r2, r0
 8003094:	4293      	cmp	r3, r2
 8003096:	d100      	bne.n	800309a <memset+0xa>
 8003098:	4770      	bx	lr
 800309a:	7019      	strb	r1, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	e7f9      	b.n	8003094 <memset+0x4>

080030a0 <_init>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a6:	bc08      	pop	{r3}
 80030a8:	469e      	mov	lr, r3
 80030aa:	4770      	bx	lr

080030ac <_fini>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr
