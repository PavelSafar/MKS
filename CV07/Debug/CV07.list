
CV07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060dc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800632c  0800632c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800632c  0800632c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800632c  0800632c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  2000007c  080063b0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  080063b0  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001968b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003368  00000000  00000000  0003972f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  0003ca98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  0003e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000100ef  00000000  00000000  0003f950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a8d  00000000  00000000  0004fa3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005909d  00000000  00000000  000604cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  000b95e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006184 	.word	0x08006184

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08006184 	.word	0x08006184

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000098 	.word	0x20000098
 800024c:	200000ec 	.word	0x200000ec

08000250 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	0008      	movs	r0, r1
 800025a:	607a      	str	r2, [r7, #4]
 800025c:	0019      	movs	r1, r3
 800025e:	260b      	movs	r6, #11
 8000260:	19bb      	adds	r3, r7, r6
 8000262:	1c02      	adds	r2, r0, #0
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	2508      	movs	r5, #8
 8000268:	197b      	adds	r3, r7, r5
 800026a:	1c0a      	adds	r2, r1, #0
 800026c:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685c      	ldr	r4, [r3, #4]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	6898      	ldr	r0, [r3, #8]
 8000276:	197b      	adds	r3, r7, r5
 8000278:	881d      	ldrh	r5, [r3, #0]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	19bb      	adds	r3, r7, r6
 800027e:	7819      	ldrb	r1, [r3, #0]
 8000280:	002b      	movs	r3, r5
 8000282:	47a0      	blx	r4
 8000284:	0003      	movs	r3, r0
 8000286:	617b      	str	r3, [r7, #20]
  return ret;
 8000288:	697b      	ldr	r3, [r7, #20]
}
 800028a:	0018      	movs	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	b007      	add	sp, #28
 8000290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000292 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8000292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000294:	b087      	sub	sp, #28
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	0008      	movs	r0, r1
 800029c:	607a      	str	r2, [r7, #4]
 800029e:	0019      	movs	r1, r3
 80002a0:	260b      	movs	r6, #11
 80002a2:	19bb      	adds	r3, r7, r6
 80002a4:	1c02      	adds	r2, r0, #0
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	2508      	movs	r5, #8
 80002aa:	197b      	adds	r3, r7, r5
 80002ac:	1c0a      	adds	r2, r1, #0
 80002ae:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681c      	ldr	r4, [r3, #0]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	197b      	adds	r3, r7, r5
 80002ba:	881d      	ldrh	r5, [r3, #0]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	19bb      	adds	r3, r7, r6
 80002c0:	7819      	ldrb	r1, [r3, #0]
 80002c2:	002b      	movs	r3, r5
 80002c4:	47a0      	blx	r4
 80002c6:	0003      	movs	r3, r0
 80002c8:	617b      	str	r3, [r7, #20]
  return ret;
 80002ca:	697b      	ldr	r3, [r7, #20]
}
 80002cc:	0018      	movs	r0, r3
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b007      	add	sp, #28
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	000a      	movs	r2, r1
 80002de:	1cfb      	adds	r3, r7, #3
 80002e0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80002e2:	2310      	movs	r3, #16
 80002e4:	18fa      	adds	r2, r7, r3
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	2120      	movs	r1, #32
 80002ec:	f7ff ffb0 	bl	8000250 <lis2dw12_read_reg>
 80002f0:	0003      	movs	r3, r0
 80002f2:	617b      	str	r3, [r7, #20]

  if (ret == 0) {
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d12a      	bne.n	8000350 <lis2dw12_power_mode_set+0x7c>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 80002fa:	1cfb      	adds	r3, r7, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	089b      	lsrs	r3, r3, #2
 8000300:	1c1a      	adds	r2, r3, #0
 8000302:	2303      	movs	r3, #3
 8000304:	4013      	ands	r3, r2
 8000306:	b2da      	uxtb	r2, r3
 8000308:	2410      	movs	r4, #16
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2103      	movs	r1, #3
 800030e:	400a      	ands	r2, r1
 8000310:	0090      	lsls	r0, r2, #2
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	210c      	movs	r1, #12
 8000316:	438a      	bics	r2, r1
 8000318:	1c11      	adds	r1, r2, #0
 800031a:	1c02      	adds	r2, r0, #0
 800031c:	430a      	orrs	r2, r1
 800031e:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000320:	1cfb      	adds	r3, r7, #3
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	b2da      	uxtb	r2, r3
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2103      	movs	r1, #3
 800032e:	400a      	ands	r2, r1
 8000330:	0010      	movs	r0, r2
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	2103      	movs	r1, #3
 8000336:	438a      	bics	r2, r1
 8000338:	1c11      	adds	r1, r2, #0
 800033a:	1c02      	adds	r2, r0, #0
 800033c:	430a      	orrs	r2, r1
 800033e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000340:	193a      	adds	r2, r7, r4
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	2301      	movs	r3, #1
 8000346:	2120      	movs	r1, #32
 8000348:	f7ff ffa3 	bl	8000292 <lis2dw12_write_reg>
 800034c:	0003      	movs	r3, r0
 800034e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d108      	bne.n	8000368 <lis2dw12_power_mode_set+0x94>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000356:	230c      	movs	r3, #12
 8000358:	18fa      	adds	r2, r7, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	2301      	movs	r3, #1
 800035e:	2125      	movs	r1, #37	; 0x25
 8000360:	f7ff ff76 	bl	8000250 <lis2dw12_read_reg>
 8000364:	0003      	movs	r3, r0
 8000366:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d11a      	bne.n	80003a4 <lis2dw12_power_mode_set+0xd0>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 800036e:	1cfb      	adds	r3, r7, #3
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	091b      	lsrs	r3, r3, #4
 8000374:	1c1a      	adds	r2, r3, #0
 8000376:	2301      	movs	r3, #1
 8000378:	4013      	ands	r3, r2
 800037a:	b2da      	uxtb	r2, r3
 800037c:	240c      	movs	r4, #12
 800037e:	193b      	adds	r3, r7, r4
 8000380:	2101      	movs	r1, #1
 8000382:	400a      	ands	r2, r1
 8000384:	0090      	lsls	r0, r2, #2
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	2104      	movs	r1, #4
 800038a:	438a      	bics	r2, r1
 800038c:	1c11      	adds	r1, r2, #0
 800038e:	1c02      	adds	r2, r0, #0
 8000390:	430a      	orrs	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000394:	193a      	adds	r2, r7, r4
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	2301      	movs	r3, #1
 800039a:	2125      	movs	r1, #37	; 0x25
 800039c:	f7ff ff79 	bl	8000292 <lis2dw12_write_reg>
 80003a0:	0003      	movs	r3, r0
 80003a2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80003a4:	697b      	ldr	r3, [r7, #20]
}
 80003a6:	0018      	movs	r0, r3
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b007      	add	sp, #28
 80003ac:	bd90      	pop	{r4, r7, pc}

080003ae <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80003ae:	b590      	push	{r4, r7, lr}
 80003b0:	b087      	sub	sp, #28
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	000a      	movs	r2, r1
 80003b8:	1cfb      	adds	r3, r7, #3
 80003ba:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003bc:	2310      	movs	r3, #16
 80003be:	18fa      	adds	r2, r7, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	2120      	movs	r1, #32
 80003c6:	f7ff ff43 	bl	8000250 <lis2dw12_read_reg>
 80003ca:	0003      	movs	r3, r0
 80003cc:	617b      	str	r3, [r7, #20]

  if (ret == 0) {
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d116      	bne.n	8000402 <lis2dw12_data_rate_set+0x54>
    ctrl1.odr = (uint8_t) val;
 80003d4:	1cfb      	adds	r3, r7, #3
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	220f      	movs	r2, #15
 80003da:	4013      	ands	r3, r2
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	2410      	movs	r4, #16
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0110      	lsls	r0, r2, #4
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	210f      	movs	r1, #15
 80003e8:	400a      	ands	r2, r1
 80003ea:	1c11      	adds	r1, r2, #0
 80003ec:	1c02      	adds	r2, r0, #0
 80003ee:	430a      	orrs	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003f2:	193a      	adds	r2, r7, r4
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	2301      	movs	r3, #1
 80003f8:	2120      	movs	r1, #32
 80003fa:	f7ff ff4a 	bl	8000292 <lis2dw12_write_reg>
 80003fe:	0003      	movs	r3, r0
 8000400:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d108      	bne.n	800041a <lis2dw12_data_rate_set+0x6c>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000408:	230c      	movs	r3, #12
 800040a:	18fa      	adds	r2, r7, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	2301      	movs	r3, #1
 8000410:	2122      	movs	r1, #34	; 0x22
 8000412:	f7ff ff1d 	bl	8000250 <lis2dw12_read_reg>
 8000416:	0003      	movs	r3, r0
 8000418:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d11a      	bne.n	8000456 <lis2dw12_data_rate_set+0xa8>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8000420:	1cfb      	adds	r3, r7, #3
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	1c1a      	adds	r2, r3, #0
 8000428:	2303      	movs	r3, #3
 800042a:	4013      	ands	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2103      	movs	r1, #3
 8000434:	400a      	ands	r2, r1
 8000436:	0010      	movs	r0, r2
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	2103      	movs	r1, #3
 800043c:	438a      	bics	r2, r1
 800043e:	1c11      	adds	r1, r2, #0
 8000440:	1c02      	adds	r2, r0, #0
 8000442:	430a      	orrs	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000446:	193a      	adds	r2, r7, r4
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	2301      	movs	r3, #1
 800044c:	2122      	movs	r1, #34	; 0x22
 800044e:	f7ff ff20 	bl	8000292 <lis2dw12_write_reg>
 8000452:	0003      	movs	r3, r0
 8000454:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000456:	697b      	ldr	r3, [r7, #20]
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b007      	add	sp, #28
 800045e:	bd90      	pop	{r4, r7, pc}

08000460 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	000a      	movs	r2, r1
 800046a:	1cfb      	adds	r3, r7, #3
 800046c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800046e:	2308      	movs	r3, #8
 8000470:	18fa      	adds	r2, r7, r3
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	2301      	movs	r3, #1
 8000476:	2121      	movs	r1, #33	; 0x21
 8000478:	f7ff feea 	bl	8000250 <lis2dw12_read_reg>
 800047c:	0003      	movs	r3, r0
 800047e:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d118      	bne.n	80004b8 <lis2dw12_block_data_update_set+0x58>
    reg.bdu = val;
 8000486:	1cfb      	adds	r3, r7, #3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	2408      	movs	r4, #8
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2101      	movs	r1, #1
 8000496:	400a      	ands	r2, r1
 8000498:	00d0      	lsls	r0, r2, #3
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	2108      	movs	r1, #8
 800049e:	438a      	bics	r2, r1
 80004a0:	1c11      	adds	r1, r2, #0
 80004a2:	1c02      	adds	r2, r0, #0
 80004a4:	430a      	orrs	r2, r1
 80004a6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80004a8:	193a      	adds	r2, r7, r4
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	2301      	movs	r3, #1
 80004ae:	2121      	movs	r1, #33	; 0x21
 80004b0:	f7ff feef 	bl	8000292 <lis2dw12_write_reg>
 80004b4:	0003      	movs	r3, r0
 80004b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80004b8:	68fb      	ldr	r3, [r7, #12]
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b005      	add	sp, #20
 80004c0:	bd90      	pop	{r4, r7, pc}

080004c2 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80004c2:	b590      	push	{r4, r7, lr}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	000a      	movs	r2, r1
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80004d0:	2308      	movs	r3, #8
 80004d2:	18fa      	adds	r2, r7, r3
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	2125      	movs	r1, #37	; 0x25
 80004da:	f7ff feb9 	bl	8000250 <lis2dw12_read_reg>
 80004de:	0003      	movs	r3, r0
 80004e0:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d118      	bne.n	800051a <lis2dw12_full_scale_set+0x58>
    reg.fs = (uint8_t) val;
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2203      	movs	r2, #3
 80004ee:	4013      	ands	r3, r2
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	2408      	movs	r4, #8
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2103      	movs	r1, #3
 80004f8:	400a      	ands	r2, r1
 80004fa:	0110      	lsls	r0, r2, #4
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	2130      	movs	r1, #48	; 0x30
 8000500:	438a      	bics	r2, r1
 8000502:	1c11      	adds	r1, r2, #0
 8000504:	1c02      	adds	r2, r0, #0
 8000506:	430a      	orrs	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800050a:	193a      	adds	r2, r7, r4
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	2125      	movs	r1, #37	; 0x25
 8000512:	f7ff febe 	bl	8000292 <lis2dw12_write_reg>
 8000516:	0003      	movs	r3, r0
 8000518:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b005      	add	sp, #20
 8000522:	bd90      	pop	{r4, r7, pc}

08000524 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b087      	sub	sp, #28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800052e:	210c      	movs	r1, #12
 8000530:	000c      	movs	r4, r1
 8000532:	187a      	adds	r2, r7, r1
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	2306      	movs	r3, #6
 8000538:	2128      	movs	r1, #40	; 0x28
 800053a:	f7ff fe89 	bl	8000250 <lis2dw12_read_reg>
 800053e:	0003      	movs	r3, r0
 8000540:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	b21a      	sxth	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	5e9b      	ldrsh	r3, [r3, r2]
 8000554:	b29b      	uxth	r3, r3
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	b29a      	uxth	r2, r3
 800055a:	187b      	adds	r3, r7, r1
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	18d3      	adds	r3, r2, r3
 8000562:	b29b      	uxth	r3, r3
 8000564:	b21a      	sxth	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800056a:	187b      	adds	r3, r7, r1
 800056c:	78da      	ldrb	r2, [r3, #3]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3302      	adds	r3, #2
 8000572:	b212      	sxth	r2, r2
 8000574:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	3302      	adds	r3, #2
 800057a:	2200      	movs	r2, #0
 800057c:	5e9b      	ldrsh	r3, [r3, r2]
 800057e:	b29b      	uxth	r3, r3
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b29a      	uxth	r2, r3
 8000584:	187b      	adds	r3, r7, r1
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	b29b      	uxth	r3, r3
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	b29a      	uxth	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3302      	adds	r3, #2
 8000592:	b212      	sxth	r2, r2
 8000594:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000596:	187b      	adds	r3, r7, r1
 8000598:	795a      	ldrb	r2, [r3, #5]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	3304      	adds	r3, #4
 800059e:	b212      	sxth	r2, r2
 80005a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	5e9b      	ldrsh	r3, [r3, r2]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	18d3      	adds	r3, r2, r3
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	3304      	adds	r3, #4
 80005be:	b212      	sxth	r2, r2
 80005c0:	801a      	strh	r2, [r3, #0]
  return ret;
 80005c2:	697b      	ldr	r3, [r7, #20]
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b007      	add	sp, #28
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	210f      	movs	r1, #15
 80005de:	f7ff fe37 	bl	8000250 <lis2dw12_read_reg>
 80005e2:	0003      	movs	r3, r0
 80005e4:	60fb      	str	r3, [r7, #12]
  return ret;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b004      	add	sp, #16
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	000a      	movs	r2, r1
 80005fa:	1cfb      	adds	r3, r7, #3
 80005fc:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80005fe:	2308      	movs	r3, #8
 8000600:	18fa      	adds	r2, r7, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	2301      	movs	r3, #1
 8000606:	212e      	movs	r1, #46	; 0x2e
 8000608:	f7ff fe22 	bl	8000250 <lis2dw12_read_reg>
 800060c:	0003      	movs	r3, r0
 800060e:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d116      	bne.n	8000644 <lis2dw12_fifo_mode_set+0x54>
    reg.fmode = (uint8_t) val;
 8000616:	1cfb      	adds	r3, r7, #3
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2207      	movs	r2, #7
 800061c:	4013      	ands	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	2408      	movs	r4, #8
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0150      	lsls	r0, r2, #5
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	211f      	movs	r1, #31
 800062a:	400a      	ands	r2, r1
 800062c:	1c11      	adds	r1, r2, #0
 800062e:	1c02      	adds	r2, r0, #0
 8000630:	430a      	orrs	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg,
 8000634:	193a      	adds	r2, r7, r4
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	212e      	movs	r1, #46	; 0x2e
 800063c:	f7ff fe29 	bl	8000292 <lis2dw12_write_reg>
 8000640:	0003      	movs	r3, r0
 8000642:	60fb      	str	r3, [r7, #12]
                             1);
  }

  return ret;
 8000644:	68fb      	ldr	r3, [r7, #12]
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	b005      	add	sp, #20
 800064c:	bd90      	pop	{r4, r7, pc}

0800064e <lis2dw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  lis2dw12_fifo_samples_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_SAMPLES, (uint8_t *) &reg,
 8000658:	2408      	movs	r4, #8
 800065a:	193a      	adds	r2, r7, r4
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	2301      	movs	r3, #1
 8000660:	212f      	movs	r1, #47	; 0x2f
 8000662:	f7ff fdf5 	bl	8000250 <lis2dw12_read_reg>
 8000666:	0003      	movs	r3, r0
 8000668:	60fb      	str	r3, [r7, #12]
                          1);
  *val = reg.diff;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	069b      	lsls	r3, r3, #26
 8000670:	0e9b      	lsrs	r3, r3, #26
 8000672:	b2db      	uxtb	r3, r3
 8000674:	001a      	movs	r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	701a      	strb	r2, [r3, #0]
  return ret;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b005      	add	sp, #20
 8000682:	bd90      	pop	{r4, r7, pc}

08000684 <platform_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af04      	add	r7, sp, #16
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	0008      	movs	r0, r1
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	0019      	movs	r1, r3
 8000692:	240b      	movs	r4, #11
 8000694:	193b      	adds	r3, r7, r4
 8000696:	1c02      	adds	r2, r0, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	2508      	movs	r5, #8
 800069c:	197b      	adds	r3, r7, r5
 800069e:	1c0a      	adds	r2, r1, #0
 80006a0:	801a      	strh	r2, [r3, #0]
 HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	197b      	adds	r3, r7, r5
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	2133      	movs	r1, #51	; 0x33
 80006be:	f000 ffad 	bl	800161c <HAL_I2C_Mem_Write>
 return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b004      	add	sp, #16
 80006ca:	bdb0      	pop	{r4, r5, r7, pc}

080006cc <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	0008      	movs	r0, r1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	0019      	movs	r1, r3
 80006da:	240b      	movs	r4, #11
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	2508      	movs	r5, #8
 80006e4:	197b      	adds	r3, r7, r5
 80006e6:	1c0a      	adds	r2, r1, #0
 80006e8:	801a      	strh	r2, [r3, #0]
 HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	197b      	adds	r3, r7, r5
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	2133      	movs	r1, #51	; 0x33
 8000706:	f001 f8b7 	bl	8001878 <HAL_I2C_Mem_Read>
 return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <_write>:
int _write(int file, char const *buf, int n)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b29a      	uxth	r2, r3
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <_write+0x28>)
 800072c:	f002 fc7a 	bl	8003024 <HAL_UART_Transmit>
 return n;
 8000730:	687b      	ldr	r3, [r7, #4]
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20001098 	.word	0x20001098

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b09a      	sub	sp, #104	; 0x68
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fc67 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f85b 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f92d 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000752:	f000 f8b9 	bl	80008c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000756:	f000 f8f7 	bl	8000948 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xVisualQueue */
  osMessageQDef(xVisualQueue, 16, int16_t);
 800075a:	2158      	movs	r1, #88	; 0x58
 800075c:	187b      	adds	r3, r7, r1
 800075e:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <main+0xa4>)
 8000760:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000762:	c331      	stmia	r3!, {r0, r4, r5}
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	601a      	str	r2, [r3, #0]
  xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f003 f881 	bl	8003874 <osMessageCreate>
 8000772:	0002      	movs	r2, r0
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0xa8>)
 8000776:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000778:	213c      	movs	r1, #60	; 0x3c
 800077a:	187b      	adds	r3, r7, r1
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <main+0xac>)
 800077e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000780:	c331      	stmia	r3!, {r0, r4, r5}
 8000782:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000784:	c331      	stmia	r3!, {r0, r4, r5}
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f003 f80f 	bl	80037b2 <osThreadCreate>
 8000794:	0002      	movs	r2, r0
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <main+0xb0>)
 8000798:	601a      	str	r2, [r3, #0]

  /* definition and creation of VisualTask */
  osThreadDef(VisualTask, StartVisualTask, osPriorityNormal, 0, 128);
 800079a:	2120      	movs	r1, #32
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <main+0xb4>)
 80007a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007a2:	c331      	stmia	r3!, {r0, r4, r5}
 80007a4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007a6:	c331      	stmia	r3!, {r0, r4, r5}
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	601a      	str	r2, [r3, #0]
  VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fffe 	bl	80037b2 <osThreadCreate>
 80007b6:	0002      	movs	r2, r0
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <main+0xb8>)
 80007ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of AcceleroTask */
  osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityNormal, 0, 128);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <main+0xbc>)
 80007c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c2:	c313      	stmia	r3!, {r0, r1, r4}
 80007c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c6:	c313      	stmia	r3!, {r0, r1, r4}
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	601a      	str	r2, [r3, #0]
  AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 ffee 	bl	80037b2 <osThreadCreate>
 80007d6:	0002      	movs	r2, r0
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <main+0xc0>)
 80007da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f002 ffe1 	bl	80037a2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0xa0>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	0800619c 	.word	0x0800619c
 80007e8:	20001094 	.word	0x20001094
 80007ec:	080061b8 	.word	0x080061b8
 80007f0:	2000103c 	.word	0x2000103c
 80007f4:	080061e0 	.word	0x080061e0
 80007f8:	20001090 	.word	0x20001090
 80007fc:	0800620c 	.word	0x0800620c
 8000800:	2000108c 	.word	0x2000108c

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b095      	sub	sp, #84	; 0x54
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	2420      	movs	r4, #32
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2330      	movs	r3, #48	; 0x30
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f004 fd94 	bl	8005342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	2310      	movs	r3, #16
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	2310      	movs	r3, #16
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f004 fd8c 	bl	8005342 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f004 fd85 	bl	8005342 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2210      	movs	r2, #16
 800084a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22a0      	movs	r2, #160	; 0xa0
 800085c:	0392      	lsls	r2, r2, #14
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	187b      	adds	r3, r7, r1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fc0f 	bl	800208c <HAL_RCC_OscConfig>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000872:	f000 f9eb 	bl	8000c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	2110      	movs	r1, #16
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2207      	movs	r2, #7
 800087c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2101      	movs	r1, #1
 8000894:	0018      	movs	r0, r3
 8000896:	f001 ff15 	bl	80026c4 <HAL_RCC_ClockConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089e:	f000 f9d5 	bl	8000c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2220      	movs	r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	003b      	movs	r3, r7
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 f883 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ba:	f000 f9c7 	bl	8000c4c <Error_Handler>
  }
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b015      	add	sp, #84	; 0x54
 80008c4:	bd90      	pop	{r4, r7, pc}
	...

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_I2C1_Init+0x74>)
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fdf3 	bl	80014f0 <HAL_I2C_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 f99d 	bl	8000c4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_I2C1_Init+0x74>)
 8000914:	2100      	movs	r1, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fb20 	bl	8001f5c <HAL_I2CEx_ConfigAnalogFilter>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 f994 	bl	8000c4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <MX_I2C1_Init+0x74>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fb63 	bl	8001ff4 <HAL_I2CEx_ConfigDigitalFilter>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 f98b 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20001040 	.word	0x20001040
 8000940:	40005400 	.word	0x40005400
 8000944:	0000020b 	.word	0x0000020b

08000948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART2_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <MX_USART2_UART_Init+0x60>)
 8000956:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800096c:	220c      	movs	r2, #12
 800096e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800098a:	0018      	movs	r0, r3
 800098c:	f002 faf6 	bl	8002f7c <HAL_UART_Init>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000994:	f000 f95a 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	20001098 	.word	0x20001098
 80009a4:	40004400 	.word	0x40004400
 80009a8:	000f4240 	.word	0x000f4240

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	240c      	movs	r4, #12
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f004 fcc0 	bl	8005342 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_GPIO_Init+0xbc>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_GPIO_Init+0xbc>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_GPIO_Init+0xbc>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_GPIO_Init+0xbc>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_GPIO_Init+0xbc>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	02c9      	lsls	r1, r1, #11
 80009e8:	430a      	orrs	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_GPIO_Init+0xbc>)
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	02db      	lsls	r3, r3, #11
 80009f4:	4013      	ands	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2200      	movs	r2, #0
 8000a00:	2110      	movs	r1, #16
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fd56 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_GPIO_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fd50 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2210      	movs	r2, #16
 8000a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	193a      	adds	r2, r7, r4
 8000a2e:	2390      	movs	r3, #144	; 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fbcd 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <MX_GPIO_Init+0xc0>)
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0010      	movs	r0, r2
 8000a5c:	f000 fbba 	bl	80011d4 <HAL_GPIO_Init>

}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400

08000a70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f002 fee7 	bl	800384c <osDelay>
 8000a7e:	e7fb      	b.n	8000a78 <StartDefaultTask+0x8>

08000a80 <StartVisualTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  int16_t msg;
	  if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY))
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <StartVisualTask+0x7c>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	425a      	negs	r2, r3
 8000a90:	230e      	movs	r3, #14
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	0019      	movs	r1, r3
 8000a96:	f003 f97a 	bl	8003d8e <xQueueReceive>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d02a      	beq.n	8000af4 <StartVisualTask+0x74>
	  {
		  if(msg<-1000) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a9e:	230e      	movs	r3, #14
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <StartVisualTask+0x80>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	da07      	bge.n	8000abc <StartVisualTask+0x3c>
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 fcfd 	bl	80014b4 <HAL_GPIO_WritePin>
 8000aba:	e006      	b.n	8000aca <StartVisualTask+0x4a>
		  else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000abc:	2390      	movs	r3, #144	; 0x90
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fcf5 	bl	80014b4 <HAL_GPIO_WritePin>

		  if(msg> +1000) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000aca:	230e      	movs	r3, #14
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	5e9a      	ldrsh	r2, [r3, r2]
 8000ad2:	23fa      	movs	r3, #250	; 0xfa
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	dd06      	ble.n	8000ae8 <StartVisualTask+0x68>
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <StartVisualTask+0x84>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	2101      	movs	r1, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fce7 	bl	80014b4 <HAL_GPIO_WritePin>
 8000ae6:	e005      	b.n	8000af4 <StartVisualTask+0x74>
		  else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <StartVisualTask+0x84>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fce0 	bl	80014b4 <HAL_GPIO_WritePin>
	  }




    osDelay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f002 fea9 	bl	800384c <osDelay>
  {
 8000afa:	e7c5      	b.n	8000a88 <StartVisualTask+0x8>
 8000afc:	20001094 	.word	0x20001094
 8000b00:	fffffc18 	.word	0xfffffc18
 8000b04:	48000400 	.word	0x48000400

08000b08 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcceleroTask */
	uint8_t whoamI = 0;
 8000b10:	2115      	movs	r1, #21
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get(&lis2dw12, &whoamI);
 8000b18:	000c      	movs	r4, r1
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fd53 	bl	80005cc <lis2dw12_device_id_get>
	printf("LIS2DW12_ID %s\n", (whoamI == LIS2DW12_ID) ? "OK" : "FAIL");
 8000b26:	0021      	movs	r1, r4
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b44      	cmp	r3, #68	; 0x44
 8000b2e:	d101      	bne.n	8000b34 <StartAcceleroTask+0x2c>
 8000b30:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <StartAcceleroTask+0x10c>)
 8000b32:	e000      	b.n	8000b36 <StartAcceleroTask+0x2e>
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <StartAcceleroTask+0x110>)
 8000b36:	4a39      	ldr	r2, [pc, #228]	; (8000c1c <StartAcceleroTask+0x114>)
 8000b38:	0019      	movs	r1, r3
 8000b3a:	0010      	movs	r0, r2
 8000b3c:	f004 fc0a 	bl	8005354 <iprintf>
	lis2dw12_full_scale_set(&lis2dw12, LIS2DW12_2g);
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fcbc 	bl	80004c2 <lis2dw12_full_scale_set>
	lis2dw12_power_mode_set(&lis2dw12, LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2);
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b4c:	2111      	movs	r1, #17
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fbc0 	bl	80002d4 <lis2dw12_power_mode_set>
	lis2dw12_block_data_update_set(&lis2dw12, PROPERTY_ENABLE);
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fc81 	bl	8000460 <lis2dw12_block_data_update_set>
	lis2dw12_fifo_mode_set(&lis2dw12, LIS2DW12_STREAM_MODE); // enable continuous FIFO
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b60:	2106      	movs	r1, #6
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fd44 	bl	80005f0 <lis2dw12_fifo_mode_set>
	lis2dw12_data_rate_set(&lis2dw12, LIS2DW12_XL_ODR_25Hz); // enable part from power-down
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fc1e 	bl	80003ae <lis2dw12_data_rate_set>

	uint8_t samples;
	int16_t raw_acceleration[3];
	uint8_t UARTpresc = 0;
 8000b72:	2317      	movs	r3, #23
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	18fa      	adds	r2, r7, r3
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fd63 	bl	800064e <lis2dw12_fifo_data_level_get>
	  for (uint8_t i = 0; i < samples; i++) {
 8000b88:	2316      	movs	r3, #22
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e00c      	b.n	8000bac <StartAcceleroTask+0xa4>
	   // Read acceleration data
	   lis2dw12_acceleration_raw_get(&lis2dw12, raw_acceleration);
 8000b92:	230c      	movs	r3, #12
 8000b94:	18fa      	adds	r2, r7, r3
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <StartAcceleroTask+0x108>)
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fcc2 	bl	8000524 <lis2dw12_acceleration_raw_get>
	  for (uint8_t i = 0; i < samples; i++) {
 8000ba0:	2116      	movs	r1, #22
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	3201      	adds	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	2314      	movs	r3, #20
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2216      	movs	r2, #22
 8000bb4:	18ba      	adds	r2, r7, r2
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3ea      	bcc.n	8000b92 <StartAcceleroTask+0x8a>

	  }
	  if(UARTpresc>=20)
 8000bbc:	2317      	movs	r3, #23
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b13      	cmp	r3, #19
 8000bc4:	d912      	bls.n	8000bec <StartAcceleroTask+0xe4>
	  {
		  printf("X=%d Y=%d Z=%d\n", raw_acceleration[0], raw_acceleration[1], raw_acceleration[2]);
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	5e9b      	ldrsh	r3, [r3, r2]
 8000bce:	0019      	movs	r1, r3
 8000bd0:	183b      	adds	r3, r7, r0
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	5e9b      	ldrsh	r3, [r3, r2]
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	183b      	adds	r3, r7, r0
 8000bda:	2004      	movs	r0, #4
 8000bdc:	5e1b      	ldrsh	r3, [r3, r0]
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <StartAcceleroTask+0x118>)
 8000be0:	f004 fbb8 	bl	8005354 <iprintf>
		  UARTpresc = 0;
 8000be4:	2317      	movs	r3, #23
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	  }
	  UARTpresc++;
 8000bec:	2117      	movs	r1, #23
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	3201      	adds	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
	  xQueueSend(xVisualQueueHandle, &raw_acceleration[0], 0);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <StartAcceleroTask+0x11c>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	18f9      	adds	r1, r7, r3
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	f002 ffff 	bl	8003c06 <xQueueGenericSend>
	  osDelay(50);
 8000c08:	2032      	movs	r0, #50	; 0x32
 8000c0a:	f002 fe1f 	bl	800384c <osDelay>
	  lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000c0e:	e7b4      	b.n	8000b7a <StartAcceleroTask+0x72>
 8000c10:	20000000 	.word	0x20000000
 8000c14:	08006228 	.word	0x08006228
 8000c18:	0800622c 	.word	0x0800622c
 8000c1c:	08006234 	.word	0x08006234
 8000c20:	08006244 	.word	0x08006244
 8000c24:	20001094 	.word	0x20001094

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 fa01 	bl	8001040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40002000 	.word	0x40002000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	619a      	str	r2, [r3, #24]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	69da      	ldr	r2, [r3, #28]
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0549      	lsls	r1, r1, #21
 8000c80:	430a      	orrs	r2, r1
 8000c82:	61da      	str	r2, [r3, #28]
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_MspInit+0x44>)
 8000c86:	69da      	ldr	r2, [r3, #28]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	055b      	lsls	r3, r3, #21
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	2314      	movs	r3, #20
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f004 fb45 	bl	8005342 <memset>
  if(hi2c->Instance==I2C1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_I2C_MspInit+0x90>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d132      	bne.n	8000d28 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_I2C_MspInit+0x94>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_I2C_MspInit+0x94>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	02c9      	lsls	r1, r1, #11
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_I2C_MspInit+0x94>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	02db      	lsls	r3, r3, #11
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cde:	2114      	movs	r1, #20
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	22c0      	movs	r2, #192	; 0xc0
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2212      	movs	r2, #18
 8000cec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_I2C_MspInit+0x98>)
 8000d04:	0019      	movs	r1, r3
 8000d06:	0010      	movs	r0, r2
 8000d08:	f000 fa64 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_I2C_MspInit+0x94>)
 8000d0e:	69da      	ldr	r2, [r3, #28]
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0x94>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0389      	lsls	r1, r1, #14
 8000d16:	430a      	orrs	r2, r1
 8000d18:	61da      	str	r2, [r3, #28]
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_I2C_MspInit+0x94>)
 8000d1c:	69da      	ldr	r2, [r3, #28]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	039b      	lsls	r3, r3, #14
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b00a      	add	sp, #40	; 0x28
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2314      	movs	r3, #20
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f004 faf7 	bl	8005342 <memset>
  if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d132      	bne.n	8000dc4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	61da      	str	r2, [r3, #28]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d96:	2114      	movs	r1, #20
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2203      	movs	r2, #3
 8000dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2201      	movs	r2, #1
 8000db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	2390      	movs	r3, #144	; 0x90
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fa08 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b00a      	add	sp, #40	; 0x28
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	0019      	movs	r1, r3
 8000dea:	2013      	movs	r0, #19
 8000dec:	f000 f9cc 	bl	8001188 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000df0:	2013      	movs	r0, #19
 8000df2:	f000 f9de 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_InitTick+0xa8>)
 8000df8:	69da      	ldr	r2, [r3, #28]
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_InitTick+0xa8>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0049      	lsls	r1, r1, #1
 8000e00:	430a      	orrs	r2, r1
 8000e02:	61da      	str	r2, [r3, #28]
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_InitTick+0xa8>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e12:	230c      	movs	r3, #12
 8000e14:	18fa      	adds	r2, r7, r3
 8000e16:	2310      	movs	r3, #16
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 fda3 	bl	8002968 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e22:	f001 fd8b 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8000e26:	0003      	movs	r3, r0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	4914      	ldr	r1, [pc, #80]	; (8000e80 <HAL_InitTick+0xac>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff f96a 	bl	8000108 <__udivsi3>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3b01      	subs	r3, #1
 8000e38:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <HAL_InitTick+0xb4>)
 8000e3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_InitTick+0xb8>)
 8000e44:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e48:	6a3a      	ldr	r2, [r7, #32]
 8000e4a:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 fe7c 	bl	8002b58 <HAL_TIM_Base_Init>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d105      	bne.n	8000e70 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_InitTick+0xb0>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 feaa 	bl	8002bc0 <HAL_TIM_Base_Start_IT>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	e000      	b.n	8000e72 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b00a      	add	sp, #40	; 0x28
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	000f4240 	.word	0x000f4240
 8000e84:	20001118 	.word	0x20001118
 8000e88:	40002000 	.word	0x40002000
 8000e8c:	000003e7 	.word	0x000003e7

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <TIM14_IRQHandler+0x14>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 feac 	bl	8002c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20001118 	.word	0x20001118

08000eb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e00a      	b.n	8000ee0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eca:	e000      	b.n	8000ece <_read+0x16>
 8000ecc:	bf00      	nop
 8000ece:	0001      	movs	r1, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	b2ca      	uxtb	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf0      	blt.n	8000eca <_read+0x12>
	}

return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b006      	add	sp, #24
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	425b      	negs	r3, r3
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	0192      	lsls	r2, r2, #6
 8000f16:	605a      	str	r2, [r3, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f004 f9ae 	bl	80052dc <__errno>
 8000f80:	0003      	movs	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	425b      	negs	r3, r3
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d2      	adds	r2, r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <_sbrk+0x64>)
 8000f9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b006      	add	sp, #24
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20002000 	.word	0x20002000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	200002ec 	.word	0x200002ec
 8000fb4:	20001160 	.word	0x20001160

08000fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopForever+0xe>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopForever+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fee:	f7ff ffe3 	bl	8000fb8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ff2:	f004 f979 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff6:	f7ff fba3 	bl	8000740 <main>

08000ffa <LoopForever>:

LoopForever:
    b LoopForever
 8000ffa:	e7fe      	b.n	8000ffa <LoopForever>
  ldr   r0, =_estack
 8000ffc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001008:	08006334 	.word	0x08006334
  ldr r2, =_sbss
 800100c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001010:	20001160 	.word	0x20001160

08001014 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_IRQHandler>
	...

08001018 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_Init+0x24>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_Init+0x24>)
 8001022:	2110      	movs	r1, #16
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fed3 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102e:	f7ff fe13 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	001a      	movs	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	18d2      	adds	r2, r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000010 	.word	0x20000010
 8001060:	20001158 	.word	0x20001158

08001064 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	20001158 	.word	0x20001158

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b7f      	cmp	r3, #127	; 0x7f
 800108a:	d809      	bhi.n	80010a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	231f      	movs	r3, #31
 8001094:	401a      	ands	r2, r3
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_EnableIRQ+0x30>)
 8001098:	2101      	movs	r1, #1
 800109a:	4091      	lsls	r1, r2
 800109c:	000a      	movs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
  }
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b7f      	cmp	r3, #127	; 0x7f
 80010c0:	d828      	bhi.n	8001114 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <__NVIC_SetPriority+0xd4>)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	33c0      	adds	r3, #192	; 0xc0
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	589b      	ldr	r3, [r3, r2]
 80010d2:	1dfa      	adds	r2, r7, #7
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	0011      	movs	r1, r2
 80010d8:	2203      	movs	r2, #3
 80010da:	400a      	ands	r2, r1
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	21ff      	movs	r1, #255	; 0xff
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	401a      	ands	r2, r3
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	4003      	ands	r3, r0
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	481f      	ldr	r0, [pc, #124]	; (8001180 <__NVIC_SetPriority+0xd4>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	430a      	orrs	r2, r1
 800110c:	33c0      	adds	r3, #192	; 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001112:	e031      	b.n	8001178 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <__NVIC_SetPriority+0xd8>)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0019      	movs	r1, r3
 800111c:	230f      	movs	r3, #15
 800111e:	400b      	ands	r3, r1
 8001120:	3b08      	subs	r3, #8
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3306      	adds	r3, #6
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	0011      	movs	r1, r2
 8001134:	2203      	movs	r2, #3
 8001136:	400a      	ands	r2, r1
 8001138:	00d2      	lsls	r2, r2, #3
 800113a:	21ff      	movs	r1, #255	; 0xff
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	22ff      	movs	r2, #255	; 0xff
 800114c:	401a      	ands	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	2303      	movs	r3, #3
 8001156:	4003      	ands	r3, r0
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001c      	movs	r4, r3
 8001164:	230f      	movs	r3, #15
 8001166:	4023      	ands	r3, r4
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	430a      	orrs	r2, r1
 800116e:	3306      	adds	r3, #6
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	18c3      	adds	r3, r0, r3
 8001174:	3304      	adds	r3, #4
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b003      	add	sp, #12
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	210f      	movs	r1, #15
 8001194:	187b      	adds	r3, r7, r1
 8001196:	1c02      	adds	r2, r0, #0
 8001198:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	187b      	adds	r3, r7, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff ff81 	bl	80010ac <__NVIC_SetPriority>
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	0002      	movs	r2, r0
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff57 	bl	8001078 <__NVIC_EnableIRQ>
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e14f      	b.n	8001484 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d100      	bne.n	80011fc <HAL_GPIO_Init+0x28>
 80011fa:	e140      	b.n	800147e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d00b      	beq.n	800121c <HAL_GPIO_Init+0x48>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001210:	2b11      	cmp	r3, #17
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	2201      	movs	r2, #1
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0xea>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	58d3      	ldr	r3, [r2, r3]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2207      	movs	r2, #7
 80012d0:	4013      	ands	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2107      	movs	r1, #7
 80012ea:	400b      	ands	r3, r1
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	6939      	ldr	r1, [r7, #16]
 8001304:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	401a      	ands	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	055b      	lsls	r3, r3, #21
 8001342:	4013      	ands	r3, r2
 8001344:	d100      	bne.n	8001348 <HAL_GPIO_Init+0x174>
 8001346:	e09a      	b.n	800147e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b54      	ldr	r3, [pc, #336]	; (800149c <HAL_GPIO_Init+0x2c8>)
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_GPIO_Init+0x2c8>)
 800134e:	2101      	movs	r1, #1
 8001350:	430a      	orrs	r2, r1
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <HAL_GPIO_Init+0x2c8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2201      	movs	r2, #1
 800135a:	4013      	ands	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	589b      	ldr	r3, [r3, r2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2203      	movs	r2, #3
 8001372:	4013      	ands	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	43da      	mvns	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	2390      	movs	r3, #144	; 0x90
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	429a      	cmp	r2, r3
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x1e2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x1de>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a43      	ldr	r2, [pc, #268]	; (80014a8 <HAL_GPIO_Init+0x2d4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x1da>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a42      	ldr	r2, [pc, #264]	; (80014ac <HAL_GPIO_Init+0x2d8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x1d6>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013b6:	2300      	movs	r3, #0
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	2103      	movs	r1, #3
 80013bc:	400a      	ands	r2, r1
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	4013      	ands	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	035b      	lsls	r3, r3, #13
 8001442:	4013      	ands	r3, r2
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43da      	mvns	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	039b      	lsls	r3, r3, #14
 800146c:	4013      	ands	r3, r2
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	40da      	lsrs	r2, r3
 800148c:	1e13      	subs	r3, r2, #0
 800148e:	d000      	beq.n	8001492 <HAL_GPIO_Init+0x2be>
 8001490:	e6a8      	b.n	80011e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b006      	add	sp, #24
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	0008      	movs	r0, r1
 80014be:	0011      	movs	r1, r2
 80014c0:	1cbb      	adds	r3, r7, #2
 80014c2:	1c02      	adds	r2, r0, #0
 80014c4:	801a      	strh	r2, [r3, #0]
 80014c6:	1c7b      	adds	r3, r7, #1
 80014c8:	1c0a      	adds	r2, r1, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014cc:	1c7b      	adds	r3, r7, #1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d4:	1cbb      	adds	r3, r7, #2
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e082      	b.n	8001608 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2241      	movs	r2, #65	; 0x41
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	2100      	movs	r1, #0
 8001514:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fbc1 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2241      	movs	r2, #65	; 0x41
 8001522:	2124      	movs	r1, #36	; 0x24
 8001524:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_I2C_Init+0x120>)
 8001540:	400a      	ands	r2, r1
 8001542:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4931      	ldr	r1, [pc, #196]	; (8001614 <HAL_I2C_Init+0x124>)
 8001550:	400a      	ands	r2, r1
 8001552:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0209      	lsls	r1, r1, #8
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	e007      	b.n	800157e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2184      	movs	r1, #132	; 0x84
 8001578:	0209      	lsls	r1, r1, #8
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d104      	bne.n	8001590 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	491f      	ldr	r1, [pc, #124]	; (8001618 <HAL_I2C_Init+0x128>)
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	491a      	ldr	r1, [pc, #104]	; (8001614 <HAL_I2C_Init+0x124>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	0011      	movs	r1, r2
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	021a      	lsls	r2, r3, #8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69d9      	ldr	r1, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2241      	movs	r2, #65	; 0x41
 80015f4:	2120      	movs	r1, #32
 80015f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2242      	movs	r2, #66	; 0x42
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}
 8001610:	f0ffffff 	.word	0xf0ffffff
 8001614:	ffff7fff 	.word	0xffff7fff
 8001618:	02008000 	.word	0x02008000

0800161c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	000c      	movs	r4, r1
 8001626:	0010      	movs	r0, r2
 8001628:	0019      	movs	r1, r3
 800162a:	230a      	movs	r3, #10
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	1c22      	adds	r2, r4, #0
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	2308      	movs	r3, #8
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	1c02      	adds	r2, r0, #0
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	1dbb      	adds	r3, r7, #6
 800163c:	1c0a      	adds	r2, r1, #0
 800163e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2241      	movs	r2, #65	; 0x41
 8001644:	5c9b      	ldrb	r3, [r3, r2]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b20      	cmp	r3, #32
 800164a:	d000      	beq.n	800164e <HAL_I2C_Mem_Write+0x32>
 800164c:	e10c      	b.n	8001868 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_I2C_Mem_Write+0x42>
 8001654:	232c      	movs	r3, #44	; 0x2c
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0ff      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_I2C_Mem_Write+0x5c>
 8001674:	2302      	movs	r3, #2
 8001676:	e0f8      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001680:	f7ff fcf0 	bl	8001064 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	0219      	lsls	r1, r3, #8
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2319      	movs	r3, #25
 8001694:	2201      	movs	r2, #1
 8001696:	f000 fb0b 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e3      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2241      	movs	r2, #65	; 0x41
 80016a6:	2121      	movs	r1, #33	; 0x21
 80016a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2242      	movs	r2, #66	; 0x42
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	222c      	movs	r2, #44	; 0x2c
 80016c2:	18ba      	adds	r2, r7, r2
 80016c4:	8812      	ldrh	r2, [r2, #0]
 80016c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ce:	1dbb      	adds	r3, r7, #6
 80016d0:	881c      	ldrh	r4, [r3, #0]
 80016d2:	2308      	movs	r3, #8
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	230a      	movs	r3, #10
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	8819      	ldrh	r1, [r3, #0]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	0023      	movs	r3, r4
 80016ea:	f000 f9f9 	bl	8001ae0 <I2C_RequestMemoryWrite>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d005      	beq.n	80016fe <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0b5      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	2bff      	cmp	r3, #255	; 0xff
 8001706:	d911      	bls.n	800172c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	22ff      	movs	r2, #255	; 0xff
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	045c      	lsls	r4, r3, #17
 8001718:	230a      	movs	r3, #10
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	8819      	ldrh	r1, [r3, #0]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	0023      	movs	r3, r4
 8001726:	f000 fbe3 	bl	8001ef0 <I2C_TransferConfig>
 800172a:	e012      	b.n	8001752 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	049c      	lsls	r4, r3, #18
 8001740:	230a      	movs	r3, #10
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	8819      	ldrh	r1, [r3, #0]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	0023      	movs	r3, r4
 800174e:	f000 fbcf 	bl	8001ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fae8 	bl	8001d2e <I2C_WaitOnTXISFlagUntilTimeout>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e081      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03a      	beq.n	8001816 <HAL_I2C_Mem_Write+0x1fa>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d136      	bne.n	8001816 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	0013      	movs	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	f000 fa7b 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e053      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d911      	bls.n	80017f0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	045c      	lsls	r4, r3, #17
 80017dc:	230a      	movs	r3, #10
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	8819      	ldrh	r1, [r3, #0]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	0023      	movs	r3, r4
 80017ea:	f000 fb81 	bl	8001ef0 <I2C_TransferConfig>
 80017ee:	e012      	b.n	8001816 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	049c      	lsls	r4, r3, #18
 8001804:	230a      	movs	r3, #10
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	0023      	movs	r3, r4
 8001812:	f000 fb6d 	bl	8001ef0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181a:	b29b      	uxth	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d198      	bne.n	8001752 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	0018      	movs	r0, r3
 8001828:	f000 fac0 	bl	8001dac <I2C_WaitOnSTOPFlagUntilTimeout>
 800182c:	1e03      	subs	r3, r0, #0
 800182e:	d001      	beq.n	8001834 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e01a      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2220      	movs	r2, #32
 800183a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	490b      	ldr	r1, [pc, #44]	; (8001874 <HAL_I2C_Mem_Write+0x258>)
 8001848:	400a      	ands	r2, r1
 800184a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2241      	movs	r2, #65	; 0x41
 8001850:	2120      	movs	r1, #32
 8001852:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2242      	movs	r2, #66	; 0x42
 8001858:	2100      	movs	r1, #0
 800185a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2240      	movs	r2, #64	; 0x40
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
  }
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b007      	add	sp, #28
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	fe00e800 	.word	0xfe00e800

08001878 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	000c      	movs	r4, r1
 8001882:	0010      	movs	r0, r2
 8001884:	0019      	movs	r1, r3
 8001886:	230a      	movs	r3, #10
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	1c22      	adds	r2, r4, #0
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	2308      	movs	r3, #8
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	1dbb      	adds	r3, r7, #6
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2241      	movs	r2, #65	; 0x41
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b20      	cmp	r3, #32
 80018a6:	d000      	beq.n	80018aa <HAL_I2C_Mem_Read+0x32>
 80018a8:	e110      	b.n	8001acc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_I2C_Mem_Read+0x42>
 80018b0:	232c      	movs	r3, #44	; 0x2c
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e103      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_I2C_Mem_Read+0x5c>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0fc      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	2101      	movs	r1, #1
 80018da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff fbc2 	bl	8001064 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	0219      	lsls	r1, r3, #8
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2319      	movs	r3, #25
 80018f0:	2201      	movs	r2, #1
 80018f2:	f000 f9dd 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e7      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2241      	movs	r2, #65	; 0x41
 8001902:	2122      	movs	r1, #34	; 0x22
 8001904:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2242      	movs	r2, #66	; 0x42
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	222c      	movs	r2, #44	; 0x2c
 800191e:	18ba      	adds	r2, r7, r2
 8001920:	8812      	ldrh	r2, [r2, #0]
 8001922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	881c      	ldrh	r4, [r3, #0]
 800192e:	2308      	movs	r3, #8
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	881a      	ldrh	r2, [r3, #0]
 8001934:	230a      	movs	r3, #10
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	8819      	ldrh	r1, [r3, #0]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	0023      	movs	r3, r4
 8001946:	f000 f92f 	bl	8001ba8 <I2C_RequestMemoryRead>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d005      	beq.n	800195a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2240      	movs	r2, #64	; 0x40
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0b9      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d911      	bls.n	8001988 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	b2da      	uxtb	r2, r3
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	045c      	lsls	r4, r3, #17
 8001974:	230a      	movs	r3, #10
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	8819      	ldrh	r1, [r3, #0]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_I2C_Mem_Read+0x260>)
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	0023      	movs	r3, r4
 8001982:	f000 fab5 	bl	8001ef0 <I2C_TransferConfig>
 8001986:	e012      	b.n	80019ae <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	b2da      	uxtb	r2, r3
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	049c      	lsls	r4, r3, #18
 800199c:	230a      	movs	r3, #10
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	8819      	ldrh	r1, [r3, #0]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_I2C_Mem_Read+0x260>)
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	0023      	movs	r3, r4
 80019aa:	f000 faa1 	bl	8001ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	0013      	movs	r3, r2
 80019b8:	2200      	movs	r2, #0
 80019ba:	2104      	movs	r1, #4
 80019bc:	f000 f978 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e082      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03a      	beq.n	8001a7a <HAL_I2C_Mem_Read+0x202>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d136      	bne.n	8001a7a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	0013      	movs	r3, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	f000 f949 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e053      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d911      	bls.n	8001a54 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	045c      	lsls	r4, r3, #17
 8001a40:	230a      	movs	r3, #10
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	8819      	ldrh	r1, [r3, #0]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	0023      	movs	r3, r4
 8001a4e:	f000 fa4f 	bl	8001ef0 <I2C_TransferConfig>
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	049c      	lsls	r4, r3, #18
 8001a68:	230a      	movs	r3, #10
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	0023      	movs	r3, r4
 8001a76:	f000 fa3b 	bl	8001ef0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d194      	bne.n	80019ae <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f98e 	bl	8001dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e01a      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	490c      	ldr	r1, [pc, #48]	; (8001adc <HAL_I2C_Mem_Read+0x264>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2241      	movs	r2, #65	; 0x41
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2242      	movs	r2, #66	; 0x42
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b007      	add	sp, #28
 8001ad4:	bd90      	pop	{r4, r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	80002400 	.word	0x80002400
 8001adc:	fe00e800 	.word	0xfe00e800

08001ae0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	000c      	movs	r4, r1
 8001aea:	0010      	movs	r0, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	250a      	movs	r5, #10
 8001af0:	197b      	adds	r3, r7, r5
 8001af2:	1c22      	adds	r2, r4, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	2308      	movs	r3, #8
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	1c02      	adds	r2, r0, #0
 8001afc:	801a      	strh	r2, [r3, #0]
 8001afe:	1dbb      	adds	r3, r7, #6
 8001b00:	1c0a      	adds	r2, r1, #0
 8001b02:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b04:	1dbb      	adds	r3, r7, #6
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	045c      	lsls	r4, r3, #17
 8001b0e:	197b      	adds	r3, r7, r5
 8001b10:	8819      	ldrh	r1, [r3, #0]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <I2C_RequestMemoryWrite+0xc4>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	0023      	movs	r3, r4
 8001b1a:	f000 f9e9 	bl	8001ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f902 	bl	8001d2e <I2C_WaitOnTXISFlagUntilTimeout>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e033      	b.n	8001b9a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b32:	1dbb      	adds	r3, r7, #6
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
 8001b48:	e019      	b.n	8001b7e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f8e3 	bl	8001d2e <I2C_WaitOnTXISFlagUntilTimeout>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d001      	beq.n	8001b70 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e014      	b.n	8001b9a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b70:	2308      	movs	r3, #8
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b7e:	6a3a      	ldr	r2, [r7, #32]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	0013      	movs	r3, r2
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	f000 f890 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d001      	beq.n	8001b98 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	80002000 	.word	0x80002000

08001ba8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	000c      	movs	r4, r1
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	250a      	movs	r5, #10
 8001bb8:	197b      	adds	r3, r7, r5
 8001bba:	1c22      	adds	r2, r4, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	1c02      	adds	r2, r0, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	1dbb      	adds	r3, r7, #6
 8001bc8:	1c0a      	adds	r2, r1, #0
 8001bca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	197b      	adds	r3, r7, r5
 8001bd4:	8819      	ldrh	r1, [r3, #0]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <I2C_RequestMemoryRead+0xc0>)
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f000 f987 	bl	8001ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f8a0 	bl	8001d2e <I2C_WaitOnTXISFlagUntilTimeout>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e033      	b.n	8001c5e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf6:	1dbb      	adds	r3, r7, #6
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfe:	2308      	movs	r3, #8
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c0c:	e019      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c0e:	2308      	movs	r3, #8
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	6a39      	ldr	r1, [r7, #32]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f881 	bl	8001d2e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d001      	beq.n	8001c34 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e014      	b.n	8001c5e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c34:	2308      	movs	r3, #8
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c42:	6a3a      	ldr	r2, [r7, #32]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	f000 f82e 	bl	8001cb0 <I2C_WaitOnFlagUntilTimeout>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bdb0      	pop	{r4, r5, r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	80002000 	.word	0x80002000

08001c6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d103      	bne.n	8001c8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d007      	beq.n	8001ca8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	619a      	str	r2, [r3, #24]
  }
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc0:	e021      	b.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	d01e      	beq.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc8:	f7ff f9cc 	bl	8001064 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d302      	bcc.n	8001cde <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d113      	bne.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2241      	movs	r2, #65	; 0x41
 8001cee:	2120      	movs	r1, #32
 8001cf0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2242      	movs	r2, #66	; 0x42
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	2100      	movs	r1, #0
 8001d00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	425a      	negs	r2, r3
 8001d16:	4153      	adcs	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	1dfb      	adds	r3, r7, #7
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d0ce      	beq.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d3a:	e02b      	b.n	8001d94 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 f86e 	bl	8001e24 <I2C_IsAcknowledgeFailed>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d001      	beq.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e029      	b.n	8001da4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3301      	adds	r3, #1
 8001d54:	d01e      	beq.n	8001d94 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d56:	f7ff f985 	bl	8001064 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d302      	bcc.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d113      	bne.n	8001d94 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	2220      	movs	r2, #32
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2241      	movs	r2, #65	; 0x41
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2242      	movs	r2, #66	; 0x42
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e007      	b.n	8001da4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d1cc      	bne.n	8001d3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b004      	add	sp, #16
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db8:	e028      	b.n	8001e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f82f 	bl	8001e24 <I2C_IsAcknowledgeFailed>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e026      	b.n	8001e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dce:	f7ff f949 	bl	8001064 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d113      	bne.n	8001e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	2220      	movs	r2, #32
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2241      	movs	r2, #65	; 0x41
 8001df4:	2120      	movs	r1, #32
 8001df6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2242      	movs	r2, #66	; 0x42
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e007      	b.n	8001e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2220      	movs	r2, #32
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d1cf      	bne.n	8001dba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2210      	movs	r2, #16
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d151      	bne.n	8001ee2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e3e:	e021      	b.n	8001e84 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	d01e      	beq.n	8001e84 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7ff f90d 	bl	8001064 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <I2C_IsAcknowledgeFailed+0x38>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d113      	bne.n	8001e84 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	2220      	movs	r2, #32
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2241      	movs	r2, #65	; 0x41
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2242      	movs	r2, #66	; 0x42
 8001e74:	2100      	movs	r1, #0
 8001e76:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e02f      	b.n	8001ee4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d1d6      	bne.n	8001e40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2210      	movs	r2, #16
 8001e98:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff fee1 	bl	8001c6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	490d      	ldr	r1, [pc, #52]	; (8001eec <I2C_IsAcknowledgeFailed+0xc8>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2241      	movs	r2, #65	; 0x41
 8001eca:	2120      	movs	r1, #32
 8001ecc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2242      	movs	r2, #66	; 0x42
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2240      	movs	r2, #64	; 0x40
 8001eda:	2100      	movs	r1, #0
 8001edc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	fe00e800 	.word	0xfe00e800

08001ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	0008      	movs	r0, r1
 8001efa:	0011      	movs	r1, r2
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	240a      	movs	r4, #10
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	1c02      	adds	r2, r0, #0
 8001f04:	801a      	strh	r2, [r3, #0]
 8001f06:	2009      	movs	r0, #9
 8001f08:	183b      	adds	r3, r7, r0
 8001f0a:	1c0a      	adds	r2, r1, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	0d51      	lsrs	r1, r2, #21
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	00d2      	lsls	r2, r2, #3
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <I2C_TransferConfig+0x68>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	43d2      	mvns	r2, r2
 8001f24:	401a      	ands	r2, r3
 8001f26:	0011      	movs	r1, r2
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	059b      	lsls	r3, r3, #22
 8001f2e:	0d9a      	lsrs	r2, r3, #22
 8001f30:	183b      	adds	r3, r7, r0
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	0418      	lsls	r0, r3, #16
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	4003      	ands	r3, r0
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b005      	add	sp, #20
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	03ff63ff 	.word	0x03ff63ff

08001f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2241      	movs	r2, #65	; 0x41
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d138      	bne.n	8001fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	5c9b      	ldrb	r3, [r3, r2]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e032      	b.n	8001fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	2101      	movs	r1, #1
 8001f86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2241      	movs	r2, #65	; 0x41
 8001f8c:	2124      	movs	r1, #36	; 0x24
 8001f8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2241      	movs	r2, #65	; 0x41
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	ffffefff 	.word	0xffffefff

08001ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2241      	movs	r2, #65	; 0x41
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	d139      	bne.n	800207e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002014:	2302      	movs	r3, #2
 8002016:	e033      	b.n	8002080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	2101      	movs	r1, #1
 800201e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2241      	movs	r2, #65	; 0x41
 8002024:	2124      	movs	r1, #36	; 0x24
 8002026:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2101      	movs	r1, #1
 8002034:	438a      	bics	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2241      	movs	r2, #65	; 0x41
 800206e:	2120      	movs	r1, #32
 8002070:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
  }
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}
 8002088:	fffff0ff 	.word	0xfffff0ff

0800208c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e303      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d100      	bne.n	80020aa <HAL_RCC_OscConfig+0x1e>
 80020a8:	e08d      	b.n	80021c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020aa:	4bc4      	ldr	r3, [pc, #784]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	220c      	movs	r2, #12
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00e      	beq.n	80020d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b6:	4bc1      	ldr	r3, [pc, #772]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	220c      	movs	r2, #12
 80020bc:	4013      	ands	r3, r2
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x64>
 80020c2:	4bbe      	ldr	r3, [pc, #760]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	401a      	ands	r2, r3
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	4bb9      	ldr	r3, [pc, #740]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_RCC_OscConfig+0x56>
 80020e0:	e070      	b.n	80021c4 <HAL_RCC_OscConfig+0x138>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d000      	beq.n	80020ec <HAL_RCC_OscConfig+0x60>
 80020ea:	e06b      	b.n	80021c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e2da      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_OscConfig+0x7c>
 80020f8:	4bb0      	ldr	r3, [pc, #704]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4baf      	ldr	r3, [pc, #700]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0249      	lsls	r1, r1, #9
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e02f      	b.n	8002168 <HAL_RCC_OscConfig+0xdc>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x9e>
 8002110:	4baa      	ldr	r3, [pc, #680]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4ba9      	ldr	r3, [pc, #676]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002116:	49aa      	ldr	r1, [pc, #680]	; (80023c0 <HAL_RCC_OscConfig+0x334>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4ba7      	ldr	r3, [pc, #668]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4ba6      	ldr	r3, [pc, #664]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002122:	49a8      	ldr	r1, [pc, #672]	; (80023c4 <HAL_RCC_OscConfig+0x338>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e01e      	b.n	8002168 <HAL_RCC_OscConfig+0xdc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10e      	bne.n	8002150 <HAL_RCC_OscConfig+0xc4>
 8002132:	4ba2      	ldr	r3, [pc, #648]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4ba1      	ldr	r3, [pc, #644]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	02c9      	lsls	r1, r1, #11
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b9d      	ldr	r3, [pc, #628]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0249      	lsls	r1, r1, #9
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xdc>
 8002150:	4b9a      	ldr	r3, [pc, #616]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b99      	ldr	r3, [pc, #612]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002156:	499a      	ldr	r1, [pc, #616]	; (80023c0 <HAL_RCC_OscConfig+0x334>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4b97      	ldr	r3, [pc, #604]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002162:	4998      	ldr	r1, [pc, #608]	; (80023c4 <HAL_RCC_OscConfig+0x338>)
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d014      	beq.n	800219a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe ff78 	bl	8001064 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217a:	f7fe ff73 	bl	8001064 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e28c      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218c:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	4013      	ands	r3, r2
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0xee>
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe ff63 	bl	8001064 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe ff5e 	bl	8001064 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e277      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x118>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2202      	movs	r2, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	d100      	bne.n	80021d2 <HAL_RCC_OscConfig+0x146>
 80021d0:	e069      	b.n	80022a6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021d2:	4b7a      	ldr	r3, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	220c      	movs	r2, #12
 80021d8:	4013      	ands	r3, r2
 80021da:	d00b      	beq.n	80021f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021dc:	4b77      	ldr	r3, [pc, #476]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	220c      	movs	r2, #12
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d11c      	bne.n	8002222 <HAL_RCC_OscConfig+0x196>
 80021e8:	4b74      	ldr	r3, [pc, #464]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	025b      	lsls	r3, r3, #9
 80021f0:	4013      	ands	r3, r2
 80021f2:	d116      	bne.n	8002222 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f4:	4b71      	ldr	r3, [pc, #452]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e24d      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b6c      	ldr	r3, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	22f8      	movs	r2, #248	; 0xf8
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	00da      	lsls	r2, r3, #3
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002220:	e041      	b.n	80022a6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d024      	beq.n	8002274 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222a:	4b64      	ldr	r3, [pc, #400]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe ff15 	bl	8001064 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe ff10 	bl	8001064 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e229      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	22f8      	movs	r2, #248	; 0xf8
 8002262:	4393      	bics	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00da      	lsls	r2, r3, #3
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e018      	b.n	80022a6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002274:	4b51      	ldr	r3, [pc, #324]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800227a:	2101      	movs	r1, #1
 800227c:	438a      	bics	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fef0 	bl	8001064 <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe feeb 	bl	8001064 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e204      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229c:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d1f1      	bne.n	800228a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2208      	movs	r2, #8
 80022ac:	4013      	ands	r3, r2
 80022ae:	d036      	beq.n	800231e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d019      	beq.n	80022ec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80022ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80022be:	2101      	movs	r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fece 	bl	8001064 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe fec9 	bl	8001064 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1e2      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f1      	beq.n	80022ce <HAL_RCC_OscConfig+0x242>
 80022ea:	e018      	b.n	800231e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80022ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	438a      	bics	r2, r1
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe feb4 	bl	8001064 <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002302:	f7fe feaf 	bl	8001064 <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1c8      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d1f1      	bne.n	8002302 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d100      	bne.n	800232a <HAL_RCC_OscConfig+0x29e>
 8002328:	e0b6      	b.n	8002498 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	055b      	lsls	r3, r3, #21
 800233a:	4013      	ands	r3, r2
 800233c:	d111      	bne.n	8002362 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	0549      	lsls	r1, r1, #21
 8002348:	430a      	orrs	r2, r1
 800234a:	61da      	str	r2, [r3, #28]
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	055b      	lsls	r3, r3, #21
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800235a:	231f      	movs	r3, #31
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_OscConfig+0x33c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4013      	ands	r3, r2
 800236c:	d11a      	bne.n	80023a4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_RCC_OscConfig+0x33c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x33c>)
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0049      	lsls	r1, r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237c:	f7fe fe72 	bl	8001064 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fe6d 	bl	8001064 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e186      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_OscConfig+0x33c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10f      	bne.n	80023cc <HAL_RCC_OscConfig+0x340>
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <HAL_RCC_OscConfig+0x330>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	430a      	orrs	r2, r1
 80023b6:	621a      	str	r2, [r3, #32]
 80023b8:	e036      	b.n	8002428 <HAL_RCC_OscConfig+0x39c>
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	40021000 	.word	0x40021000
 80023c0:	fffeffff 	.word	0xfffeffff
 80023c4:	fffbffff 	.word	0xfffbffff
 80023c8:	40007000 	.word	0x40007000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x362>
 80023d4:	4bb6      	ldr	r3, [pc, #728]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	4bb5      	ldr	r3, [pc, #724]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	621a      	str	r2, [r3, #32]
 80023e0:	4bb3      	ldr	r3, [pc, #716]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	4bb2      	ldr	r3, [pc, #712]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80023e6:	2104      	movs	r1, #4
 80023e8:	438a      	bics	r2, r1
 80023ea:	621a      	str	r2, [r3, #32]
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x39c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x384>
 80023f6:	4bae      	ldr	r3, [pc, #696]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	4bad      	ldr	r3, [pc, #692]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	430a      	orrs	r2, r1
 8002400:	621a      	str	r2, [r3, #32]
 8002402:	4bab      	ldr	r3, [pc, #684]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	4baa      	ldr	r3, [pc, #680]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	621a      	str	r2, [r3, #32]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x39c>
 8002410:	4ba7      	ldr	r3, [pc, #668]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	4ba6      	ldr	r3, [pc, #664]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	621a      	str	r2, [r3, #32]
 800241c:	4ba4      	ldr	r3, [pc, #656]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	4ba3      	ldr	r3, [pc, #652]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002422:	2104      	movs	r1, #4
 8002424:	438a      	bics	r2, r1
 8002426:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d014      	beq.n	800245a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe fe18 	bl	8001064 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e009      	b.n	800244e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fe13 	bl	8001064 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a9b      	ldr	r2, [pc, #620]	; (80026b4 <HAL_RCC_OscConfig+0x628>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e12b      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	4b98      	ldr	r3, [pc, #608]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x3ae>
 8002458:	e013      	b.n	8002482 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe fe03 	bl	8001064 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002462:	e009      	b.n	8002478 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fdfe 	bl	8001064 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4a91      	ldr	r2, [pc, #580]	; (80026b4 <HAL_RCC_OscConfig+0x628>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e116      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002492:	4989      	ldr	r1, [pc, #548]	; (80026b8 <HAL_RCC_OscConfig+0x62c>)
 8002494:	400a      	ands	r2, r1
 8002496:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2210      	movs	r2, #16
 800249e:	4013      	ands	r3, r2
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d12a      	bne.n	8002500 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024aa:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ae:	4b80      	ldr	r3, [pc, #512]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024b0:	2104      	movs	r1, #4
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024b6:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ba:	4b7d      	ldr	r3, [pc, #500]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fdcf 	bl	8001064 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024cc:	f7fe fdca 	bl	8001064 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0e3      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024de:	4b74      	ldr	r3, [pc, #464]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	d0f1      	beq.n	80024cc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024e8:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	22f8      	movs	r2, #248	; 0xf8
 80024ee:	4393      	bics	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	00da      	lsls	r2, r3, #3
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
 80024fe:	e034      	b.n	800256a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	3305      	adds	r3, #5
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002508:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800250a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800250e:	2104      	movs	r1, #4
 8002510:	438a      	bics	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	22f8      	movs	r2, #248	; 0xf8
 800251a:	4393      	bics	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	00da      	lsls	r2, r3, #3
 8002524:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002526:	430a      	orrs	r2, r1
 8002528:	635a      	str	r2, [r3, #52]	; 0x34
 800252a:	e01e      	b.n	800256a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800252c:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800252e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002530:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002532:	2104      	movs	r1, #4
 8002534:	430a      	orrs	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002538:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800253a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253c:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800253e:	2101      	movs	r1, #1
 8002540:	438a      	bics	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe fd8e 	bl	8001064 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800254e:	f7fe fd89 	bl	8001064 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0a2      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d1f1      	bne.n	800254e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x4e8>
 8002572:	e097      	b.n	80026a4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002574:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	220c      	movs	r2, #12
 800257a:	4013      	ands	r3, r2
 800257c:	2b08      	cmp	r3, #8
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x4f6>
 8002580:	e06b      	b.n	800265a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d14c      	bne.n	8002624 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002590:	494a      	ldr	r1, [pc, #296]	; (80026bc <HAL_RCC_OscConfig+0x630>)
 8002592:	400a      	ands	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fd65 	bl	8001064 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fd60 	bl	8001064 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e079      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	049b      	lsls	r3, r3, #18
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	220f      	movs	r2, #15
 80025c4:	4393      	bics	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025d2:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x634>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0449      	lsls	r1, r1, #17
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fd33 	bl	8001064 <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fd2e 	bl	8001064 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e047      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	049b      	lsls	r3, r3, #18
 800261e:	4013      	ands	r3, r2
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x578>
 8002622:	e03f      	b.n	80026a4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800262a:	4924      	ldr	r1, [pc, #144]	; (80026bc <HAL_RCC_OscConfig+0x630>)
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd18 	bl	8001064 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fd13 	bl	8001064 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e02c      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	049b      	lsls	r3, r3, #18
 8002654:	4013      	ands	r3, r2
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x5ae>
 8002658:	e024      	b.n	80026a4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e01f      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCC_OscConfig+0x624>)
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	025b      	lsls	r3, r3, #9
 8002678:	401a      	ands	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	429a      	cmp	r2, r3
 8002680:	d10e      	bne.n	80026a0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	220f      	movs	r2, #15
 8002686:	401a      	ands	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	23f0      	movs	r3, #240	; 0xf0
 8002694:	039b      	lsls	r3, r3, #14
 8002696:	401a      	ands	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b008      	add	sp, #32
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40021000 	.word	0x40021000
 80026b4:	00001388 	.word	0x00001388
 80026b8:	efffffff 	.word	0xefffffff
 80026bc:	feffffff 	.word	0xfeffffff
 80026c0:	ffc2ffff 	.word	0xffc2ffff

080026c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b3      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d911      	bls.n	800270a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4393      	bics	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	4b55      	ldr	r3, [pc, #340]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e09a      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	d015      	beq.n	8002740 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2204      	movs	r2, #4
 800271a:	4013      	ands	r3, r2
 800271c:	d006      	beq.n	800272c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800271e:	4b4b      	ldr	r3, [pc, #300]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 8002724:	21e0      	movs	r1, #224	; 0xe0
 8002726:	00c9      	lsls	r1, r1, #3
 8002728:	430a      	orrs	r2, r1
 800272a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	22f0      	movs	r2, #240	; 0xf0
 8002732:	4393      	bics	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d040      	beq.n	80027cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b3e      	ldr	r3, [pc, #248]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d114      	bne.n	8002788 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06e      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	049b      	lsls	r3, r3, #18
 8002772:	4013      	ands	r3, r2
 8002774:	d108      	bne.n	8002788 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e062      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e05b      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	4393      	bics	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7fe fc62 	bl	8001064 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a4:	e009      	b.n	80027ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7fe fc5d 	bl	8001064 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_RCC_ClockConfig+0x18c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e042      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	220c      	movs	r2, #12
 80027c0:	401a      	ands	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1ec      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d211      	bcs.n	80027fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	4393      	bics	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x184>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e020      	b.n	8002840 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2204      	movs	r2, #4
 8002804:	4013      	ands	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_RCC_ClockConfig+0x190>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800281c:	f000 f820 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8002820:	0001      	movs	r1, r0
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x188>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	220f      	movs	r2, #15
 800282a:	4013      	ands	r3, r2
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_RCC_ClockConfig+0x194>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	000a      	movs	r2, r1
 8002832:	40da      	lsrs	r2, r3
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x198>)
 8002836:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe facb 	bl	8000dd4 <HAL_InitTick>
  
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	00001388 	.word	0x00001388
 8002854:	fffff8ff 	.word	0xfffff8ff
 8002858:	0800627c 	.word	0x0800627c
 800285c:	2000000c 	.word	0x2000000c

08002860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b08f      	sub	sp, #60	; 0x3c
 8002864:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002866:	2314      	movs	r3, #20
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800286e:	c313      	stmia	r3!, {r0, r1, r4}
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800287a:	c313      	stmia	r3!, {r0, r1, r4}
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
 8002888:	2300      	movs	r3, #0
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	220c      	movs	r2, #12
 800289e:	4013      	ands	r3, r2
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d002      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x4a>
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d003      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x50>
 80028a8:	e02d      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028ae:	e02d      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	220f      	movs	r2, #15
 80028b6:	4013      	ands	r3, r2
 80028b8:	2214      	movs	r2, #20
 80028ba:	18ba      	adds	r2, r7, r2
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	220f      	movs	r2, #15
 80028c6:	4013      	ands	r3, r2
 80028c8:	1d3a      	adds	r2, r7, #4
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	025b      	lsls	r3, r3, #9
 80028d4:	4013      	ands	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028da:	4812      	ldr	r0, [pc, #72]	; (8002924 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028dc:	f7fd fc14 	bl	8000108 <__udivsi3>
 80028e0:	0003      	movs	r3, r0
 80028e2:	001a      	movs	r2, r3
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	4353      	muls	r3, r2
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ea:	e009      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ee:	000a      	movs	r2, r1
 80028f0:	0152      	lsls	r2, r2, #5
 80028f2:	1a52      	subs	r2, r2, r1
 80028f4:	0193      	lsls	r3, r2, #6
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	185b      	adds	r3, r3, r1
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002904:	e002      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800290a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b00f      	add	sp, #60	; 0x3c
 8002914:	bd90      	pop	{r4, r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	08006254 	.word	0x08006254
 800291c:	08006264 	.word	0x08006264
 8002920:	40021000 	.word	0x40021000
 8002924:	007a1200 	.word	0x007a1200

08002928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b02      	ldr	r3, [pc, #8]	; (8002938 <HAL_RCC_GetHCLKFreq+0x10>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	2000000c 	.word	0x2000000c

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002940:	f7ff fff2 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002944:	0001      	movs	r1, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	2207      	movs	r2, #7
 800294e:	4013      	ands	r3, r2
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	40d9      	lsrs	r1, r3
 8002956:	000b      	movs	r3, r1
}    
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	0800628c 	.word	0x0800628c

08002968 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_RCC_GetClockConfig+0x4c>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	401a      	ands	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_GetClockConfig+0x4c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	22f0      	movs	r2, #240	; 0xf0
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCC_GetClockConfig+0x4c>)
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	23e0      	movs	r3, #224	; 0xe0
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetClockConfig+0x50>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	401a      	ands	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	025b      	lsls	r3, r3, #9
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029d8:	e08f      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2317      	movs	r3, #23
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	055b      	lsls	r3, r3, #21
 80029ea:	4013      	ands	r3, r2
 80029ec:	d111      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0549      	lsls	r1, r1, #21
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	055b      	lsls	r3, r3, #21
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2317      	movs	r3, #23
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d11a      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1e:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	0049      	lsls	r1, r1, #1
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fb1a 	bl	8001064 <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e008      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7fe fb15 	bl	8001064 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b64      	cmp	r3, #100	; 0x64
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e077      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a54:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	23c0      	movs	r3, #192	; 0xc0
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d034      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	23c0      	movs	r3, #192	; 0xc0
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d02c      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a33      	ldr	r2, [pc, #204]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a80:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	0249      	lsls	r1, r1, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a94:	492d      	ldr	r1, [pc, #180]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fadc 	bl	8001064 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fad7 	bl	8001064 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e038      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae4:	2317      	movs	r3, #23
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d105      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af4:	4917      	ldr	r1, [pc, #92]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	4013      	ands	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	2210      	movs	r2, #16
 8002b28:	4393      	bics	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b006      	add	sp, #24
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	fffffcff 	.word	0xfffffcff
 8002b4c:	fffeffff 	.word	0xfffeffff
 8002b50:	00001388 	.word	0x00001388
 8002b54:	efffffff 	.word	0xefffffff

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e01e      	b.n	8002ba8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223d      	movs	r2, #61	; 0x3d
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223c      	movs	r2, #60	; 0x3c
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f815 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223d      	movs	r2, #61	; 0x3d
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	0019      	movs	r1, r3
 8002b98:	0010      	movs	r0, r2
 8002b9a:	f000 f969 	bl	8002e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223d      	movs	r2, #61	; 0x3d
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2207      	movs	r2, #7
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d007      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d124      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2202      	movs	r2, #2
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d11d      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4252      	negs	r2, r2
 8002c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f8fa 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e007      	b.n	8002c5e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 f8ed 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 f8f9 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d125      	bne.n	8002cbe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2205      	movs	r2, #5
 8002c86:	4252      	negs	r2, r2
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	23c0      	movs	r3, #192	; 0xc0
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f8cd 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002ca6:	e007      	b.n	8002cb8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f8c0 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f8cc 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d124      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11d      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2209      	movs	r2, #9
 8002ce0:	4252      	negs	r2, r2
 8002ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f8a1 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002cfe:	e007      	b.n	8002d10 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f894 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 f8a0 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d125      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d11e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2211      	movs	r2, #17
 8002d38:	4252      	negs	r2, r2
 8002d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	23c0      	movs	r3, #192	; 0xc0
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f874 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e007      	b.n	8002d6a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f867 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f873 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10f      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2202      	movs	r2, #2
 8002d92:	4252      	negs	r2, r2
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fd ff45 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d10f      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d108      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2281      	movs	r2, #129	; 0x81
 8002dc0:	4252      	negs	r2, r2
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 f8d0 	bl	8002f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d10f      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2240      	movs	r2, #64	; 0x40
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d108      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2241      	movs	r2, #65	; 0x41
 8002dee:	4252      	negs	r2, r2
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f833 	bl	8002e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2220      	movs	r2, #32
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d10f      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d108      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2221      	movs	r2, #33	; 0x21
 8002e1c:	4252      	negs	r2, r2
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f89a 	bl	8002f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <TIM_Base_SetConfig+0xd0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0x20>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	; (8002f44 <TIM_Base_SetConfig+0xd4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d108      	bne.n	8002ea2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2270      	movs	r2, #112	; 0x70
 8002e94:	4393      	bics	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <TIM_Base_SetConfig+0xd0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <TIM_Base_SetConfig+0xd4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00f      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <TIM_Base_SetConfig+0xd8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <TIM_Base_SetConfig+0xdc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <TIM_Base_SetConfig+0xe0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <TIM_Base_SetConfig+0xe4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <TIM_Base_SetConfig+0xe8>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	4393      	bics	r3, r2
 8002eea:	001a      	movs	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <TIM_Base_SetConfig+0xd0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0xba>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <TIM_Base_SetConfig+0xdc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0xba>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <TIM_Base_SetConfig+0xe0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0xba>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <TIM_Base_SetConfig+0xe4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d103      	bne.n	8002f32 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	615a      	str	r2, [r3, #20]
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40002000 	.word	0x40002000
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40014800 	.word	0x40014800
 8002f58:	fffffcff 	.word	0xfffffcff

08002f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e044      	b.n	8003018 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2270      	movs	r2, #112	; 0x70
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fd fecb 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	; 0x24
 8002faa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f8d8 	bl	8003174 <UART_SetConfig>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e024      	b.n	8003018 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fa51 	bl	8003480 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	490d      	ldr	r1, [pc, #52]	; (8003020 <HAL_UART_Init+0xa4>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fae9 	bl	80035e8 <UART_CheckIdleState>
 8003016:	0003      	movs	r3, r0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fffff7ff 	.word	0xfffff7ff

08003024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	2b20      	cmp	r3, #32
 800303a:	d000      	beq.n	800303e <HAL_UART_Transmit+0x1a>
 800303c:	e095      	b.n	800316a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_UART_Transmit+0x28>
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e08d      	b.n	800316c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	429a      	cmp	r2, r3
 800305a:	d109      	bne.n	8003070 <HAL_UART_Transmit+0x4c>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	d001      	beq.n	8003070 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e07d      	b.n	800316c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2270      	movs	r2, #112	; 0x70
 8003074:	5c9b      	ldrb	r3, [r3, r2]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_UART_Transmit+0x5a>
 800307a:	2302      	movs	r3, #2
 800307c:	e076      	b.n	800316c <HAL_UART_Transmit+0x148>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2270      	movs	r2, #112	; 0x70
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2221      	movs	r2, #33	; 0x21
 8003090:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003092:	f7fd ffe7 	bl	8001064 <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1dba      	adds	r2, r7, #6
 800309e:	2150      	movs	r1, #80	; 0x50
 80030a0:	8812      	ldrh	r2, [r2, #0]
 80030a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1dba      	adds	r2, r7, #6
 80030a8:	2152      	movs	r1, #82	; 0x52
 80030aa:	8812      	ldrh	r2, [r2, #0]
 80030ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	015b      	lsls	r3, r3, #5
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0xa8>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d4:	e02d      	b.n	8003132 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	0013      	movs	r3, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	f000 fac6 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e03d      	b.n	800316c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	05d2      	lsls	r2, r2, #23
 8003100:	0dd2      	lsrs	r2, r2, #23
 8003102:	b292      	uxth	r2, r2
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e008      	b.n	8003120 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b292      	uxth	r2, r2
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2252      	movs	r2, #82	; 0x52
 8003124:	5a9b      	ldrh	r3, [r3, r2]
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b299      	uxth	r1, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2252      	movs	r2, #82	; 0x52
 8003130:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2252      	movs	r2, #82	; 0x52
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cb      	bne.n	80030d6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	0013      	movs	r3, r2
 8003148:	2200      	movs	r2, #0
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	f000 fa92 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8003150:	1e03      	subs	r3, r0, #0
 8003152:	d001      	beq.n	8003158 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e009      	b.n	800316c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2270      	movs	r2, #112	; 0x70
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b008      	add	sp, #32
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003180:	2317      	movs	r3, #23
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4aad      	ldr	r2, [pc, #692]	; (800345c <UART_SetConfig+0x2e8>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4aa8      	ldr	r2, [pc, #672]	; (8003460 <UART_SetConfig+0x2ec>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a9f      	ldr	r2, [pc, #636]	; (8003464 <UART_SetConfig+0x2f0>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9b      	ldr	r2, [pc, #620]	; (8003468 <UART_SetConfig+0x2f4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d125      	bne.n	800324a <UART_SetConfig+0xd6>
 80031fe:	4b9b      	ldr	r3, [pc, #620]	; (800346c <UART_SetConfig+0x2f8>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	2203      	movs	r2, #3
 8003204:	4013      	ands	r3, r2
 8003206:	2b01      	cmp	r3, #1
 8003208:	d00f      	beq.n	800322a <UART_SetConfig+0xb6>
 800320a:	d304      	bcc.n	8003216 <UART_SetConfig+0xa2>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d011      	beq.n	8003234 <UART_SetConfig+0xc0>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d005      	beq.n	8003220 <UART_SetConfig+0xac>
 8003214:	e013      	b.n	800323e <UART_SetConfig+0xca>
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e022      	b.n	8003266 <UART_SetConfig+0xf2>
 8003220:	231f      	movs	r3, #31
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2202      	movs	r2, #2
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e01d      	b.n	8003266 <UART_SetConfig+0xf2>
 800322a:	231f      	movs	r3, #31
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2204      	movs	r2, #4
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e018      	b.n	8003266 <UART_SetConfig+0xf2>
 8003234:	231f      	movs	r3, #31
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2208      	movs	r2, #8
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e013      	b.n	8003266 <UART_SetConfig+0xf2>
 800323e:	231f      	movs	r3, #31
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2210      	movs	r2, #16
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	e00d      	b.n	8003266 <UART_SetConfig+0xf2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a88      	ldr	r2, [pc, #544]	; (8003470 <UART_SetConfig+0x2fc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d104      	bne.n	800325e <UART_SetConfig+0xea>
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e003      	b.n	8003266 <UART_SetConfig+0xf2>
 800325e:	231f      	movs	r3, #31
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2210      	movs	r2, #16
 8003264:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	429a      	cmp	r2, r3
 8003270:	d000      	beq.n	8003274 <UART_SetConfig+0x100>
 8003272:	e07d      	b.n	8003370 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003274:	231f      	movs	r3, #31
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d01c      	beq.n	80032b8 <UART_SetConfig+0x144>
 800327e:	dc02      	bgt.n	8003286 <UART_SetConfig+0x112>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <UART_SetConfig+0x11c>
 8003284:	e04b      	b.n	800331e <UART_SetConfig+0x1aa>
 8003286:	2b04      	cmp	r3, #4
 8003288:	d025      	beq.n	80032d6 <UART_SetConfig+0x162>
 800328a:	2b08      	cmp	r3, #8
 800328c:	d037      	beq.n	80032fe <UART_SetConfig+0x18a>
 800328e:	e046      	b.n	800331e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7ff fb54 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8003294:	0003      	movs	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	005a      	lsls	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	18d2      	adds	r2, r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0019      	movs	r1, r3
 80032aa:	0010      	movs	r0, r2
 80032ac:	f7fc ff2c 	bl	8000108 <__udivsi3>
 80032b0:	0003      	movs	r3, r0
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	61bb      	str	r3, [r7, #24]
        break;
 80032b6:	e037      	b.n	8003328 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	4a6d      	ldr	r2, [pc, #436]	; (8003474 <UART_SetConfig+0x300>)
 80032c0:	189a      	adds	r2, r3, r2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f7fc ff1d 	bl	8000108 <__udivsi3>
 80032ce:	0003      	movs	r3, r0
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	61bb      	str	r3, [r7, #24]
        break;
 80032d4:	e028      	b.n	8003328 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7ff fac3 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 80032da:	0003      	movs	r3, r0
 80032dc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	005a      	lsls	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	18d2      	adds	r2, r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0019      	movs	r1, r3
 80032f0:	0010      	movs	r0, r2
 80032f2:	f7fc ff09 	bl	8000108 <__udivsi3>
 80032f6:	0003      	movs	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	61bb      	str	r3, [r7, #24]
        break;
 80032fc:	e014      	b.n	8003328 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0252      	lsls	r2, r2, #9
 8003308:	189a      	adds	r2, r3, r2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	0019      	movs	r1, r3
 8003310:	0010      	movs	r0, r2
 8003312:	f7fc fef9 	bl	8000108 <__udivsi3>
 8003316:	0003      	movs	r3, r0
 8003318:	b29b      	uxth	r3, r3
 800331a:	61bb      	str	r3, [r7, #24]
        break;
 800331c:	e004      	b.n	8003328 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800331e:	2317      	movs	r3, #23
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
        break;
 8003326:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d91b      	bls.n	8003366 <UART_SetConfig+0x1f2>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4a51      	ldr	r2, [pc, #324]	; (8003478 <UART_SetConfig+0x304>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d817      	bhi.n	8003366 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	b29a      	uxth	r2, r3
 800333a:	200a      	movs	r0, #10
 800333c:	183b      	adds	r3, r7, r0
 800333e:	210f      	movs	r1, #15
 8003340:	438a      	bics	r2, r1
 8003342:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	b29b      	uxth	r3, r3
 800334a:	2207      	movs	r2, #7
 800334c:	4013      	ands	r3, r2
 800334e:	b299      	uxth	r1, r3
 8003350:	183b      	adds	r3, r7, r0
 8003352:	183a      	adds	r2, r7, r0
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	183a      	adds	r2, r7, r0
 8003360:	8812      	ldrh	r2, [r2, #0]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e06c      	b.n	8003440 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003366:	2317      	movs	r3, #23
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e067      	b.n	8003440 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003370:	231f      	movs	r3, #31
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d01b      	beq.n	80033b2 <UART_SetConfig+0x23e>
 800337a:	dc02      	bgt.n	8003382 <UART_SetConfig+0x20e>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <UART_SetConfig+0x218>
 8003380:	e049      	b.n	8003416 <UART_SetConfig+0x2a2>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d024      	beq.n	80033d0 <UART_SetConfig+0x25c>
 8003386:	2b08      	cmp	r3, #8
 8003388:	d035      	beq.n	80033f6 <UART_SetConfig+0x282>
 800338a:	e044      	b.n	8003416 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7ff fad6 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8003390:	0003      	movs	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	085a      	lsrs	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	18d2      	adds	r2, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0019      	movs	r1, r3
 80033a4:	0010      	movs	r0, r2
 80033a6:	f7fc feaf 	bl	8000108 <__udivsi3>
 80033aa:	0003      	movs	r3, r0
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e036      	b.n	8003420 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	4a30      	ldr	r2, [pc, #192]	; (800347c <UART_SetConfig+0x308>)
 80033ba:	189a      	adds	r2, r3, r2
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0019      	movs	r1, r3
 80033c2:	0010      	movs	r0, r2
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	61bb      	str	r3, [r7, #24]
        break;
 80033ce:	e027      	b.n	8003420 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d0:	f7ff fa46 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 80033d4:	0003      	movs	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	085a      	lsrs	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	18d2      	adds	r2, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f7fc fe8d 	bl	8000108 <__udivsi3>
 80033ee:	0003      	movs	r3, r0
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e014      	b.n	8003420 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0212      	lsls	r2, r2, #8
 8003400:	189a      	adds	r2, r3, r2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0019      	movs	r1, r3
 8003408:	0010      	movs	r0, r2
 800340a:	f7fc fe7d 	bl	8000108 <__udivsi3>
 800340e:	0003      	movs	r3, r0
 8003410:	b29b      	uxth	r3, r3
 8003412:	61bb      	str	r3, [r7, #24]
        break;
 8003414:	e004      	b.n	8003420 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003416:	2317      	movs	r3, #23
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
        break;
 800341e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b0f      	cmp	r3, #15
 8003424:	d908      	bls.n	8003438 <UART_SetConfig+0x2c4>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4a13      	ldr	r2, [pc, #76]	; (8003478 <UART_SetConfig+0x304>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d804      	bhi.n	8003438 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	e003      	b.n	8003440 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003438:	2317      	movs	r3, #23
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800344c:	2317      	movs	r3, #23
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	781b      	ldrb	r3, [r3, #0]
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b008      	add	sp, #32
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	ffff69f3 	.word	0xffff69f3
 8003460:	ffffcfff 	.word	0xffffcfff
 8003464:	fffff4ff 	.word	0xfffff4ff
 8003468:	40013800 	.word	0x40013800
 800346c:	40021000 	.word	0x40021000
 8003470:	40004400 	.word	0x40004400
 8003474:	00f42400 	.word	0x00f42400
 8003478:	0000ffff 	.word	0x0000ffff
 800347c:	007a1200 	.word	0x007a1200

08003480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	2201      	movs	r2, #1
 800348e:	4013      	ands	r3, r2
 8003490:	d00b      	beq.n	80034aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4a4a      	ldr	r2, [pc, #296]	; (80035c4 <UART_AdvFeatureConfig+0x144>)
 800349a:	4013      	ands	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2202      	movs	r2, #2
 80034b0:	4013      	ands	r3, r2
 80034b2:	d00b      	beq.n	80034cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4a43      	ldr	r2, [pc, #268]	; (80035c8 <UART_AdvFeatureConfig+0x148>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2204      	movs	r2, #4
 80034d2:	4013      	ands	r3, r2
 80034d4:	d00b      	beq.n	80034ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <UART_AdvFeatureConfig+0x14c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2208      	movs	r2, #8
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00b      	beq.n	8003510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a34      	ldr	r2, [pc, #208]	; (80035d0 <UART_AdvFeatureConfig+0x150>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2210      	movs	r2, #16
 8003516:	4013      	ands	r3, r2
 8003518:	d00b      	beq.n	8003532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <UART_AdvFeatureConfig+0x154>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2220      	movs	r2, #32
 8003538:	4013      	ands	r3, r2
 800353a:	d00b      	beq.n	8003554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <UART_AdvFeatureConfig+0x158>)
 8003544:	4013      	ands	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2240      	movs	r2, #64	; 0x40
 800355a:	4013      	ands	r3, r2
 800355c:	d01d      	beq.n	800359a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <UART_AdvFeatureConfig+0x15c>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	035b      	lsls	r3, r3, #13
 800357e:	429a      	cmp	r2, r3
 8003580:	d10b      	bne.n	800359a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <UART_AdvFeatureConfig+0x160>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	4013      	ands	r3, r2
 80035a2:	d00b      	beq.n	80035bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <UART_AdvFeatureConfig+0x164>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	fffdffff 	.word	0xfffdffff
 80035c8:	fffeffff 	.word	0xfffeffff
 80035cc:	fffbffff 	.word	0xfffbffff
 80035d0:	ffff7fff 	.word	0xffff7fff
 80035d4:	ffffefff 	.word	0xffffefff
 80035d8:	ffffdfff 	.word	0xffffdfff
 80035dc:	ffefffff 	.word	0xffefffff
 80035e0:	ff9fffff 	.word	0xff9fffff
 80035e4:	fff7ffff 	.word	0xfff7ffff

080035e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035f6:	f7fd fd35 	bl	8001064 <HAL_GetTick>
 80035fa:	0003      	movs	r3, r0
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2208      	movs	r2, #8
 8003606:	4013      	ands	r3, r2
 8003608:	2b08      	cmp	r3, #8
 800360a:	d10d      	bne.n	8003628 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	0399      	lsls	r1, r3, #14
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <UART_CheckIdleState+0x88>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	0013      	movs	r3, r2
 800361a:	2200      	movs	r2, #0
 800361c:	f000 f82a 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e01f      	b.n	8003668 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2204      	movs	r2, #4
 8003630:	4013      	ands	r3, r2
 8003632:	2b04      	cmp	r3, #4
 8003634:	d10d      	bne.n	8003652 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	03d9      	lsls	r1, r3, #15
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <UART_CheckIdleState+0x88>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	0013      	movs	r3, r2
 8003644:	2200      	movs	r2, #0
 8003646:	f000 f815 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e00a      	b.n	8003668 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2270      	movs	r2, #112	; 0x70
 8003662:	2100      	movs	r1, #0
 8003664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}
 8003670:	01ffffff 	.word	0x01ffffff

08003674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003684:	e05d      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3301      	adds	r3, #1
 800368a:	d05a      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fd fcea 	bl	8001064 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11b      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	492f      	ldr	r1, [pc, #188]	; (800376c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036ae:	400a      	ands	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	438a      	bics	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2270      	movs	r2, #112	; 0x70
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e043      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2204      	movs	r2, #4
 80036e2:	4013      	ands	r3, r2
 80036e4:	d02d      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	401a      	ands	r2, r3
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d123      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4917      	ldr	r1, [pc, #92]	; (800376c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	438a      	bics	r2, r1
 8003722:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2270      	movs	r2, #112	; 0x70
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	425a      	negs	r2, r3
 8003752:	4153      	adcs	r3, r2
 8003754:	b2db      	uxtb	r3, r3
 8003756:	001a      	movs	r2, r3
 8003758:	1dfb      	adds	r3, r7, #7
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d092      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	fffffe5f 	.word	0xfffffe5f

08003770 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	0002      	movs	r2, r0
 8003778:	1dbb      	adds	r3, r7, #6
 800377a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003780:	1dbb      	adds	r3, r7, #6
 8003782:	2200      	movs	r2, #0
 8003784:	5e9b      	ldrsh	r3, [r3, r2]
 8003786:	2b84      	cmp	r3, #132	; 0x84
 8003788:	d006      	beq.n	8003798 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800378a:	1dbb      	adds	r3, r7, #6
 800378c:	2200      	movs	r2, #0
 800378e:	5e9a      	ldrsh	r2, [r3, r2]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	3303      	adds	r3, #3
 8003796:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b004      	add	sp, #16
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037a6:	f000 fe57 	bl	8004458 <vTaskStartScheduler>
  
  return osOK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b4:	b089      	sub	sp, #36	; 0x24
 80037b6:	af04      	add	r7, sp, #16
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <osThreadCreate+0x54>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01c      	beq.n	8003806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685c      	ldr	r4, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681d      	ldr	r5, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691e      	ldr	r6, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2208      	movs	r2, #8
 80037dc:	5e9b      	ldrsh	r3, [r3, r2]
 80037de:	0018      	movs	r0, r3
 80037e0:	f7ff ffc6 	bl	8003770 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	9201      	str	r2, [sp, #4]
 80037f2:	9000      	str	r0, [sp, #0]
 80037f4:	000b      	movs	r3, r1
 80037f6:	0032      	movs	r2, r6
 80037f8:	0029      	movs	r1, r5
 80037fa:	0020      	movs	r0, r4
 80037fc:	f000 fc99 	bl	8004132 <xTaskCreateStatic>
 8003800:	0003      	movs	r3, r0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e01d      	b.n	8003842 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685c      	ldr	r4, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003812:	b29e      	uxth	r6, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2208      	movs	r2, #8
 8003818:	5e9b      	ldrsh	r3, [r3, r2]
 800381a:	0018      	movs	r0, r3
 800381c:	f7ff ffa8 	bl	8003770 <makeFreeRtosPriority>
 8003820:	0001      	movs	r1, r0
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	230c      	movs	r3, #12
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	9100      	str	r1, [sp, #0]
 800382c:	0013      	movs	r3, r2
 800382e:	0032      	movs	r2, r6
 8003830:	0029      	movs	r1, r5
 8003832:	0020      	movs	r0, r4
 8003834:	f000 fcc0 	bl	80041b8 <xTaskCreate>
 8003838:	0003      	movs	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d001      	beq.n	8003842 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b005      	add	sp, #20
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <osDelay+0x16>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	e000      	b.n	8003864 <osDelay+0x18>
 8003862:	2301      	movs	r3, #1
 8003864:	0018      	movs	r0, r3
 8003866:	f000 fdd1 	bl	800440c <vTaskDelay>
  
  return osOK;
 800386a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b004      	add	sp, #16
 8003872:	bd80      	pop	{r7, pc}

08003874 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af02      	add	r7, sp, #8
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d012      	beq.n	80038ac <osMessageCreate+0x38>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68dc      	ldr	r4, [r3, #12]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	0023      	movs	r3, r4
 80038a4:	f000 f90c 	bl	8003ac0 <xQueueGenericCreateStatic>
 80038a8:	0003      	movs	r3, r0
 80038aa:	e008      	b.n	80038be <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	0019      	movs	r1, r3
 80038b8:	f000 f94d 	bl	8003b56 <xQueueGenericCreate>
 80038bc:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b003      	add	sp, #12
 80038c4:	bd90      	pop	{r4, r7, pc}

080038c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3308      	adds	r3, #8
 80038d2:	001a      	movs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	4252      	negs	r2, r2
 80038de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3308      	adds	r3, #8
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3308      	adds	r3, #8
 80038ee:	001a      	movs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b002      	add	sp, #8
 8003900:	bd80      	pop	{r7, pc}

08003902 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}

08003918 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}

0800395c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	3301      	adds	r3, #1
 8003970:	d103      	bne.n	800397a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e00c      	b.n	8003994 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3308      	adds	r3, #8
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e002      	b.n	8003988 <vListInsert+0x2c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d2f6      	bcs.n	8003982 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d103      	bne.n	80039fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <xQueueGenericReset+0x18>
 8003a2c:	b672      	cpsid	i
 8003a2e:	e7fe      	b.n	8003a2e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003a30:	f001 fa16 	bl	8004e60 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	434b      	muls	r3, r1
 8003a42:	18d2      	adds	r2, r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	1e59      	subs	r1, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	434b      	muls	r3, r1
 8003a66:	18d2      	adds	r2, r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2244      	movs	r2, #68	; 0x44
 8003a70:	21ff      	movs	r1, #255	; 0xff
 8003a72:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2245      	movs	r2, #69	; 0x45
 8003a78:	21ff      	movs	r1, #255	; 0xff
 8003a7a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d013      	beq.n	8003ab2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3310      	adds	r3, #16
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 feec 	bl	800486c <xTaskRemoveFromEventList>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d00c      	beq.n	8003ab2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a98:	f001 f9d2 	bl	8004e40 <vPortYield>
 8003a9c:	e009      	b.n	8003ab2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3310      	adds	r3, #16
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7ff ff0f 	bl	80038c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3324      	adds	r3, #36	; 0x24
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7ff ff0a 	bl	80038c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ab2:	f001 f9e7 	bl	8004e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ab6:	2301      	movs	r3, #1
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <xQueueGenericCreateStatic+0x18>
 8003ad4:	b672      	cpsid	i
 8003ad6:	e7fe      	b.n	8003ad6 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <xQueueGenericCreateStatic+0x22>
 8003ade:	b672      	cpsid	i
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <xQueueGenericCreateStatic+0x2e>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <xQueueGenericCreateStatic+0x32>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <xQueueGenericCreateStatic+0x34>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <xQueueGenericCreateStatic+0x3c>
 8003af8:	b672      	cpsid	i
 8003afa:	e7fe      	b.n	8003afa <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <xQueueGenericCreateStatic+0x48>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <xQueueGenericCreateStatic+0x4c>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <xQueueGenericCreateStatic+0x4e>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xQueueGenericCreateStatic+0x56>
 8003b12:	b672      	cpsid	i
 8003b14:	e7fe      	b.n	8003b14 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b16:	2348      	movs	r3, #72	; 0x48
 8003b18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b48      	cmp	r3, #72	; 0x48
 8003b1e:	d001      	beq.n	8003b24 <xQueueGenericCreateStatic+0x64>
 8003b20:	b672      	cpsid	i
 8003b22:	e7fe      	b.n	8003b22 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00e      	beq.n	8003b4c <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2246      	movs	r2, #70	; 0x46
 8003b32:	2101      	movs	r1, #1
 8003b34:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b36:	2328      	movs	r3, #40	; 0x28
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	781c      	ldrb	r4, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	0023      	movs	r3, r4
 8003b48:	f000 f83b 	bl	8003bc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b4c:	697b      	ldr	r3, [r7, #20]
	}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b007      	add	sp, #28
 8003b54:	bd90      	pop	{r4, r7, pc}

08003b56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b56:	b590      	push	{r4, r7, lr}
 8003b58:	b08b      	sub	sp, #44	; 0x2c
 8003b5a:	af02      	add	r7, sp, #8
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <xQueueGenericCreate+0x18>
 8003b6a:	b672      	cpsid	i
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e003      	b.n	8003b82 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4353      	muls	r3, r2
 8003b80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3348      	adds	r3, #72	; 0x48
 8003b86:	0018      	movs	r0, r3
 8003b88:	f001 fa02 	bl	8004f90 <pvPortMalloc>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3348      	adds	r3, #72	; 0x48
 8003b9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2246      	movs	r2, #70	; 0x46
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ba4:	1dfb      	adds	r3, r7, #7
 8003ba6:	781c      	ldrb	r4, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	0023      	movs	r3, r4
 8003bb4:	f000 f805 	bl	8003bc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b009      	add	sp, #36	; 0x24
 8003bc0:	bd90      	pop	{r4, r7, pc}

08003bc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	001a      	movs	r2, r3
 8003bd0:	1cfb      	adds	r3, r7, #3
 8003bd2:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e002      	b.n	8003be8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff ff0d 	bl	8003a18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b004      	add	sp, #16
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <xQueueGenericSend+0x20>
 8003c22:	b672      	cpsid	i
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <xQueueGenericSend+0x2e>
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <xQueueGenericSend+0x32>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <xQueueGenericSend+0x34>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <xQueueGenericSend+0x3c>
 8003c3e:	b672      	cpsid	i
 8003c40:	e7fe      	b.n	8003c40 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d103      	bne.n	8003c50 <xQueueGenericSend+0x4a>
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <xQueueGenericSend+0x4e>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <xQueueGenericSend+0x50>
 8003c54:	2300      	movs	r3, #0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueGenericSend+0x58>
 8003c5a:	b672      	cpsid	i
 8003c5c:	e7fe      	b.n	8003c5c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c5e:	f000 ff9d 	bl	8004b9c <xTaskGetSchedulerState>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d102      	bne.n	8003c6c <xQueueGenericSend+0x66>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <xQueueGenericSend+0x6a>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <xQueueGenericSend+0x6c>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericSend+0x74>
 8003c76:	b672      	cpsid	i
 8003c78:	e7fe      	b.n	8003c78 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c7a:	f001 f8f1 	bl	8004e60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <xQueueGenericSend+0x8a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d11e      	bne.n	8003cce <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 f92e 	bl	8003ef8 <prvCopyDataToQueue>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	3324      	adds	r3, #36	; 0x24
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 fddd 	bl	800486c <xTaskRemoveFromEventList>
 8003cb2:	1e03      	subs	r3, r0, #0
 8003cb4:	d007      	beq.n	8003cc6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cb6:	f001 f8c3 	bl	8004e40 <vPortYield>
 8003cba:	e004      	b.n	8003cc6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cc2:	f001 f8bd 	bl	8004e40 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cc6:	f001 f8dd 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e05b      	b.n	8003d86 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cd4:	f001 f8d6 	bl	8004e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e054      	b.n	8003d86 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ce2:	2314      	movs	r3, #20
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 fe1c 	bl	8004924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cf0:	f001 f8c8 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cf4:	f000 fbfe 	bl	80044f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cf8:	f001 f8b2 	bl	8004e60 <vPortEnterCritical>
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2244      	movs	r2, #68	; 0x44
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	3301      	adds	r3, #1
 8003d06:	d103      	bne.n	8003d10 <xQueueGenericSend+0x10a>
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	2244      	movs	r2, #68	; 0x44
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	2245      	movs	r2, #69	; 0x45
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	d103      	bne.n	8003d24 <xQueueGenericSend+0x11e>
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	2245      	movs	r2, #69	; 0x45
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]
 8003d24:	f001 f8ae 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d28:	1d3a      	adds	r2, r7, #4
 8003d2a:	2314      	movs	r3, #20
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 fe0b 	bl	800494c <xTaskCheckForTimeOut>
 8003d36:	1e03      	subs	r3, r0, #0
 8003d38:	d11e      	bne.n	8003d78 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 f9e0 	bl	8004102 <prvIsQueueFull>
 8003d42:	1e03      	subs	r3, r0, #0
 8003d44:	d011      	beq.n	8003d6a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	3310      	adds	r3, #16
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 fd6e 	bl	8004830 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 f95f 	bl	800401a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d5c:	f000 fbd6 	bl	800450c <xTaskResumeAll>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d18a      	bne.n	8003c7a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003d64:	f001 f86c 	bl	8004e40 <vPortYield>
 8003d68:	e787      	b.n	8003c7a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 f954 	bl	800401a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d72:	f000 fbcb 	bl	800450c <xTaskResumeAll>
 8003d76:	e780      	b.n	8003c7a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 f94d 	bl	800401a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d80:	f000 fbc4 	bl	800450c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d84:	2300      	movs	r3, #0
		}
	}
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b00a      	add	sp, #40	; 0x28
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b08a      	sub	sp, #40	; 0x28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueReceive+0x1e>
 8003da8:	b672      	cpsid	i
 8003daa:	e7fe      	b.n	8003daa <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <xQueueReceive+0x2c>
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <xQueueReceive+0x30>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <xQueueReceive+0x32>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <xQueueReceive+0x3a>
 8003dc4:	b672      	cpsid	i
 8003dc6:	e7fe      	b.n	8003dc6 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc8:	f000 fee8 	bl	8004b9c <xTaskGetSchedulerState>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d102      	bne.n	8003dd6 <xQueueReceive+0x48>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <xQueueReceive+0x4c>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueReceive+0x4e>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <xQueueReceive+0x56>
 8003de0:	b672      	cpsid	i
 8003de2:	e7fe      	b.n	8003de2 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de4:	f001 f83c 	bl	8004e60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 f8e7 	bl	8003fce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1e5a      	subs	r2, r3, #1
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	3310      	adds	r3, #16
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fd29 	bl	800486c <xTaskRemoveFromEventList>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d001      	beq.n	8003e22 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e1e:	f001 f80f 	bl	8004e40 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e22:	f001 f82f 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e062      	b.n	8003ef0 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e30:	f001 f828 	bl	8004e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e05b      	b.n	8003ef0 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e3e:	2314      	movs	r3, #20
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 fd6e 	bl	8004924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e4c:	f001 f81a 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e50:	f000 fb50 	bl	80044f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e54:	f001 f804 	bl	8004e60 <vPortEnterCritical>
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2244      	movs	r2, #68	; 0x44
 8003e5c:	5c9b      	ldrb	r3, [r3, r2]
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	d103      	bne.n	8003e6c <xQueueReceive+0xde>
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2244      	movs	r2, #68	; 0x44
 8003e68:	2100      	movs	r1, #0
 8003e6a:	5499      	strb	r1, [r3, r2]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2245      	movs	r2, #69	; 0x45
 8003e70:	5c9b      	ldrb	r3, [r3, r2]
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	d103      	bne.n	8003e80 <xQueueReceive+0xf2>
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2245      	movs	r2, #69	; 0x45
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]
 8003e80:	f001 f800 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e84:	1d3a      	adds	r2, r7, #4
 8003e86:	2314      	movs	r3, #20
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	0011      	movs	r1, r2
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 fd5d 	bl	800494c <xTaskCheckForTimeOut>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d11e      	bne.n	8003ed4 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f000 f91c 	bl	80040d6 <prvIsQueueEmpty>
 8003e9e:	1e03      	subs	r3, r0, #0
 8003ea0:	d011      	beq.n	8003ec6 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 fcc0 	bl	8004830 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 f8b1 	bl	800401a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003eb8:	f000 fb28 	bl	800450c <xTaskResumeAll>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d191      	bne.n	8003de4 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003ec0:	f000 ffbe 	bl	8004e40 <vPortYield>
 8003ec4:	e78e      	b.n	8003de4 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f8a6 	bl	800401a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ece:	f000 fb1d 	bl	800450c <xTaskResumeAll>
 8003ed2:	e787      	b.n	8003de4 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f89f 	bl	800401a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003edc:	f000 fb16 	bl	800450c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f000 f8f7 	bl	80040d6 <prvIsQueueEmpty>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d100      	bne.n	8003eee <xQueueReceive+0x160>
 8003eec:	e77a      	b.n	8003de4 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003eee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b00a      	add	sp, #40	; 0x28
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10e      	bne.n	8003f34 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d14e      	bne.n	8003fbc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 fe56 	bl	8004bd4 <xTaskPriorityDisinherit>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e043      	b.n	8003fbc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6898      	ldr	r0, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0019      	movs	r1, r3
 8003f46:	f001 f9f3 	bl	8005330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	18d2      	adds	r2, r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d32b      	bcc.n	8003fbc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e026      	b.n	8003fbc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68d8      	ldr	r0, [r3, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	0019      	movs	r1, r3
 8003f7a:	f001 f9d9 	bl	8005330 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	425b      	negs	r3, r3
 8003f88:	18d2      	adds	r2, r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d207      	bcs.n	8003faa <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	425b      	negs	r3, r3
 8003fa4:	18d2      	adds	r2, r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d105      	bne.n	8003fbc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fc4:	697b      	ldr	r3, [r7, #20]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b006      	add	sp, #24
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d018      	beq.n	8004012 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	18d2      	adds	r2, r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d303      	bcc.n	8004002 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68d9      	ldr	r1, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	0018      	movs	r0, r3
 800400e:	f001 f98f 	bl	8005330 <memcpy>
	}
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}

0800401a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004022:	f000 ff1d 	bl	8004e60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004026:	230f      	movs	r3, #15
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	2145      	movs	r1, #69	; 0x45
 800402e:	5c52      	ldrb	r2, [r2, r1]
 8004030:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004032:	e013      	b.n	800405c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	d016      	beq.n	800406a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3324      	adds	r3, #36	; 0x24
 8004040:	0018      	movs	r0, r3
 8004042:	f000 fc13 	bl	800486c <xTaskRemoveFromEventList>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d001      	beq.n	800404e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800404a:	f000 fccf 	bl	80049ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800404e:	210f      	movs	r1, #15
 8004050:	187b      	adds	r3, r7, r1
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	187b      	adds	r3, r7, r1
 800405a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800405c:	230f      	movs	r3, #15
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b25b      	sxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	dce5      	bgt.n	8004034 <prvUnlockQueue+0x1a>
 8004068:	e000      	b.n	800406c <prvUnlockQueue+0x52>
					break;
 800406a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2245      	movs	r2, #69	; 0x45
 8004070:	21ff      	movs	r1, #255	; 0xff
 8004072:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004074:	f000 ff06 	bl	8004e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004078:	f000 fef2 	bl	8004e60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800407c:	230e      	movs	r3, #14
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	2144      	movs	r1, #68	; 0x44
 8004084:	5c52      	ldrb	r2, [r2, r1]
 8004086:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004088:	e013      	b.n	80040b2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3310      	adds	r3, #16
 8004096:	0018      	movs	r0, r3
 8004098:	f000 fbe8 	bl	800486c <xTaskRemoveFromEventList>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80040a0:	f000 fca4 	bl	80049ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040a4:	210e      	movs	r1, #14
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b2:	230e      	movs	r3, #14
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dce5      	bgt.n	800408a <prvUnlockQueue+0x70>
 80040be:	e000      	b.n	80040c2 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80040c0:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2244      	movs	r2, #68	; 0x44
 80040c6:	21ff      	movs	r1, #255	; 0xff
 80040c8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80040ca:	f000 fedb 	bl	8004e84 <vPortExitCritical>
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040de:	f000 febf 	bl	8004e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e001      	b.n	80040f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040f4:	f000 fec6 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 80040f8:	68fb      	ldr	r3, [r7, #12]
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b004      	add	sp, #16
 8004100:	bd80      	pop	{r7, pc}

08004102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800410a:	f000 fea9 	bl	8004e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	429a      	cmp	r2, r3
 8004118:	d102      	bne.n	8004120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800411a:	2301      	movs	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e001      	b.n	8004124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004124:	f000 feae 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 8004128:	68fb      	ldr	r3, [r7, #12]
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}

08004132 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b08d      	sub	sp, #52	; 0x34
 8004136:	af04      	add	r7, sp, #16
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <xTaskCreateStatic+0x18>
 8004146:	b672      	cpsid	i
 8004148:	e7fe      	b.n	8004148 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <xTaskCreateStatic+0x22>
 8004150:	b672      	cpsid	i
 8004152:	e7fe      	b.n	8004152 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004154:	2354      	movs	r3, #84	; 0x54
 8004156:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b54      	cmp	r3, #84	; 0x54
 800415c:	d001      	beq.n	8004162 <xTaskCreateStatic+0x30>
 800415e:	b672      	cpsid	i
 8004160:	e7fe      	b.n	8004160 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <xTaskCreateStatic+0x78>
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004176:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2251      	movs	r2, #81	; 0x51
 800417c:	2102      	movs	r1, #2
 800417e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004180:	683c      	ldr	r4, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	2300      	movs	r3, #0
 800418a:	9303      	str	r3, [sp, #12]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	9302      	str	r3, [sp, #8]
 8004190:	2318      	movs	r3, #24
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	0023      	movs	r3, r4
 800419c:	f000 f858 	bl	8004250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 f8ce 	bl	8004344 <prvAddNewTaskToReadyList>
 80041a8:	e001      	b.n	80041ae <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ae:	69bb      	ldr	r3, [r7, #24]
	}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b009      	add	sp, #36	; 0x24
 80041b6:	bd90      	pop	{r4, r7, pc}

080041b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b08d      	sub	sp, #52	; 0x34
 80041bc:	af04      	add	r7, sp, #16
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	1dbb      	adds	r3, r7, #6
 80041c6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c8:	1dbb      	adds	r3, r7, #6
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 fede 	bl	8004f90 <pvPortMalloc>
 80041d4:	0003      	movs	r3, r0
 80041d6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041de:	2054      	movs	r0, #84	; 0x54
 80041e0:	f000 fed6 	bl	8004f90 <pvPortMalloc>
 80041e4:	0003      	movs	r3, r0
 80041e6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
 80041f4:	e006      	b.n	8004204 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f000 ff6f 	bl	80050dc <vPortFree>
 80041fe:	e001      	b.n	8004204 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	2251      	movs	r2, #81	; 0x51
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004212:	1dbb      	adds	r3, r7, #6
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	683c      	ldr	r4, [r7, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	2300      	movs	r3, #0
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	0023      	movs	r3, r4
 800422e:	f000 f80f 	bl	8004250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	0018      	movs	r0, r3
 8004236:	f000 f885 	bl	8004344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800423a:	2301      	movs	r3, #1
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e002      	b.n	8004246 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004240:	2301      	movs	r3, #1
 8004242:	425b      	negs	r3, r3
 8004244:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004246:	69bb      	ldr	r3, [r7, #24]
	}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b009      	add	sp, #36	; 0x24
 800424e:	bd90      	pop	{r4, r7, pc}

08004250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4936      	ldr	r1, [pc, #216]	; (8004340 <prvInitialiseNewTask+0xf0>)
 8004266:	468c      	mov	ip, r1
 8004268:	4463      	add	r3, ip
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2207      	movs	r2, #7
 8004274:	4393      	bics	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	d001      	beq.n	8004284 <prvInitialiseNewTask+0x34>
 8004280:	b672      	cpsid	i
 8004282:	e7fe      	b.n	8004282 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e013      	b.n	80042b2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	18d3      	adds	r3, r2, r3
 8004290:	7818      	ldrb	r0, [r3, #0]
 8004292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004294:	2134      	movs	r1, #52	; 0x34
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	18d3      	adds	r3, r2, r3
 800429a:	185b      	adds	r3, r3, r1
 800429c:	1c02      	adds	r2, r0, #0
 800429e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	18d3      	adds	r3, r2, r3
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d9e8      	bls.n	800428a <prvInitialiseNewTask+0x3a>
 80042b8:	e000      	b.n	80042bc <prvInitialiseNewTask+0x6c>
		{
			break;
 80042ba:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	2243      	movs	r2, #67	; 0x43
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d901      	bls.n	80042ce <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ca:	2306      	movs	r3, #6
 80042cc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2200      	movs	r2, #0
 80042de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	3304      	adds	r3, #4
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fb0c 	bl	8003902 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	3318      	adds	r3, #24
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff fb07 	bl	8003902 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	2207      	movs	r2, #7
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2200      	movs	r2, #0
 800430e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2250      	movs	r2, #80	; 0x50
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	0018      	movs	r0, r3
 8004320:	f000 fd08 	bl	8004d34 <pxPortInitialiseStack>
 8004324:	0002      	movs	r2, r0
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	b006      	add	sp, #24
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	3fffffff 	.word	0x3fffffff

08004344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800434c:	f000 fd88 	bl	8004e60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <prvAddNewTaskToReadyList+0xb0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <prvAddNewTaskToReadyList+0xb0>)
 8004358:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800435a:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <prvAddNewTaskToReadyList+0xb4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <prvAddNewTaskToReadyList+0xb4>)
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <prvAddNewTaskToReadyList+0xb0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d110      	bne.n	8004392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004370:	f000 fb56 	bl	8004a20 <prvInitialiseTaskLists>
 8004374:	e00d      	b.n	8004392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <prvAddNewTaskToReadyList+0xb8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800437e:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <prvAddNewTaskToReadyList+0xb4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	429a      	cmp	r2, r3
 800438a:	d802      	bhi.n	8004392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <prvAddNewTaskToReadyList+0xb4>)
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <prvAddNewTaskToReadyList+0xbc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <prvAddNewTaskToReadyList+0xbc>)
 800439a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <prvAddNewTaskToReadyList+0xc0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d903      	bls.n	80043b0 <prvAddNewTaskToReadyList+0x6c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <prvAddNewTaskToReadyList+0xc0>)
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	0013      	movs	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4a12      	ldr	r2, [pc, #72]	; (8004408 <prvAddNewTaskToReadyList+0xc4>)
 80043be:	189a      	adds	r2, r3, r2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	0019      	movs	r1, r3
 80043c6:	0010      	movs	r0, r2
 80043c8:	f7ff faa6 	bl	8003918 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043cc:	f000 fd5a 	bl	8004e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <prvAddNewTaskToReadyList+0xb8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <prvAddNewTaskToReadyList+0xb4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d201      	bcs.n	80043ea <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043e6:	f000 fd2b 	bl	8004e40 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	200003f0 	.word	0x200003f0
 80043f8:	200002f0 	.word	0x200002f0
 80043fc:	200003fc 	.word	0x200003fc
 8004400:	2000040c 	.word	0x2000040c
 8004404:	200003f8 	.word	0x200003f8
 8004408:	200002f4 	.word	0x200002f4

0800440c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <vTaskDelay+0x48>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <vTaskDelay+0x1e>
 8004426:	b672      	cpsid	i
 8004428:	e7fe      	b.n	8004428 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800442a:	f000 f863 	bl	80044f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2100      	movs	r1, #0
 8004432:	0018      	movs	r0, r3
 8004434:	f000 fc2a 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004438:	f000 f868 	bl	800450c <xTaskResumeAll>
 800443c:	0003      	movs	r3, r0
 800443e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004446:	f000 fcfb 	bl	8004e40 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	20000418 	.word	0x20000418

08004458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004466:	003a      	movs	r2, r7
 8004468:	1d39      	adds	r1, r7, #4
 800446a:	2308      	movs	r3, #8
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	0018      	movs	r0, r3
 8004470:	f7fb fed6 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004474:	683c      	ldr	r4, [r7, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4918      	ldr	r1, [pc, #96]	; (80044dc <vTaskStartScheduler+0x84>)
 800447c:	4818      	ldr	r0, [pc, #96]	; (80044e0 <vTaskStartScheduler+0x88>)
 800447e:	9202      	str	r2, [sp, #8]
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	2300      	movs	r3, #0
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	2300      	movs	r3, #0
 8004488:	0022      	movs	r2, r4
 800448a:	f7ff fe52 	bl	8004132 <xTaskCreateStatic>
 800448e:	0002      	movs	r2, r0
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <vTaskStartScheduler+0x8c>)
 8004492:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <vTaskStartScheduler+0x8c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800449c:	2301      	movs	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e001      	b.n	80044a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d10d      	bne.n	80044c8 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80044ac:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <vTaskStartScheduler+0x90>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	4252      	negs	r2, r2
 80044b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <vTaskStartScheduler+0x94>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <vTaskStartScheduler+0x98>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044c2:	f000 fc99 	bl	8004df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044c6:	e004      	b.n	80044d2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3301      	adds	r3, #1
 80044cc:	d101      	bne.n	80044d2 <vTaskStartScheduler+0x7a>
 80044ce:	b672      	cpsid	i
 80044d0:	e7fe      	b.n	80044d0 <vTaskStartScheduler+0x78>
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b005      	add	sp, #20
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	08006274 	.word	0x08006274
 80044e0:	08004a01 	.word	0x08004a01
 80044e4:	20000414 	.word	0x20000414
 80044e8:	20000410 	.word	0x20000410
 80044ec:	200003fc 	.word	0x200003fc
 80044f0:	200003f4 	.word	0x200003f4

080044f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <vTaskSuspendAll+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	4b02      	ldr	r3, [pc, #8]	; (8004508 <vTaskSuspendAll+0x14>)
 8004500:	601a      	str	r2, [r3, #0]
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000418 	.word	0x20000418

0800450c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800451a:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <xTaskResumeAll+0xf8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <xTaskResumeAll+0x1a>
 8004522:	b672      	cpsid	i
 8004524:	e7fe      	b.n	8004524 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004526:	f000 fc9b 	bl	8004e60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <xTaskResumeAll+0xf8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	1e5a      	subs	r2, r3, #1
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <xTaskResumeAll+0xf8>)
 8004532:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004534:	4b33      	ldr	r3, [pc, #204]	; (8004604 <xTaskResumeAll+0xf8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d15b      	bne.n	80045f4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800453c:	4b32      	ldr	r3, [pc, #200]	; (8004608 <xTaskResumeAll+0xfc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d057      	beq.n	80045f4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004544:	e02f      	b.n	80045a6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <xTaskResumeAll+0x100>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3318      	adds	r3, #24
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff fa38 	bl	80039c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3304      	adds	r3, #4
 800455c:	0018      	movs	r0, r3
 800455e:	f7ff fa33 	bl	80039c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <xTaskResumeAll+0x104>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d903      	bls.n	8004576 <xTaskResumeAll+0x6a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	4b27      	ldr	r3, [pc, #156]	; (8004610 <xTaskResumeAll+0x104>)
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	0013      	movs	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	189b      	adds	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a24      	ldr	r2, [pc, #144]	; (8004614 <xTaskResumeAll+0x108>)
 8004584:	189a      	adds	r2, r3, r2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3304      	adds	r3, #4
 800458a:	0019      	movs	r1, r3
 800458c:	0010      	movs	r0, r2
 800458e:	f7ff f9c3 	bl	8003918 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <xTaskResumeAll+0x10c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <xTaskResumeAll+0x110>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <xTaskResumeAll+0x100>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1cb      	bne.n	8004546 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b4:	f000 face 	bl	8004b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <xTaskResumeAll+0x114>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00f      	beq.n	80045e4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c4:	f000 f82e 	bl	8004624 <xTaskIncrementTick>
 80045c8:	1e03      	subs	r3, r0, #0
 80045ca:	d002      	beq.n	80045d2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80045cc:	4b13      	ldr	r3, [pc, #76]	; (800461c <xTaskResumeAll+0x110>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f2      	bne.n	80045c4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <xTaskResumeAll+0x114>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <xTaskResumeAll+0x110>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f0:	f000 fc26 	bl	8004e40 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045f4:	f000 fc46 	bl	8004e84 <vPortExitCritical>

	return xAlreadyYielded;
 80045f8:	68bb      	ldr	r3, [r7, #8]
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	20000418 	.word	0x20000418
 8004608:	200003f0 	.word	0x200003f0
 800460c:	200003b0 	.word	0x200003b0
 8004610:	200003f8 	.word	0x200003f8
 8004614:	200002f4 	.word	0x200002f4
 8004618:	200002f0 	.word	0x200002f0
 800461c:	20000404 	.word	0x20000404
 8004620:	20000400 	.word	0x20000400

08004624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462e:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <xTaskIncrementTick+0x13c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d000      	beq.n	8004638 <xTaskIncrementTick+0x14>
 8004636:	e083      	b.n	8004740 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004638:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <xTaskIncrementTick+0x140>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <xTaskIncrementTick+0x140>)
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d117      	bne.n	800467c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800464c:	4b46      	ldr	r3, [pc, #280]	; (8004768 <xTaskIncrementTick+0x144>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <xTaskIncrementTick+0x36>
 8004656:	b672      	cpsid	i
 8004658:	e7fe      	b.n	8004658 <xTaskIncrementTick+0x34>
 800465a:	4b43      	ldr	r3, [pc, #268]	; (8004768 <xTaskIncrementTick+0x144>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	4b42      	ldr	r3, [pc, #264]	; (800476c <xTaskIncrementTick+0x148>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b40      	ldr	r3, [pc, #256]	; (8004768 <xTaskIncrementTick+0x144>)
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	4b40      	ldr	r3, [pc, #256]	; (800476c <xTaskIncrementTick+0x148>)
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	4b40      	ldr	r3, [pc, #256]	; (8004770 <xTaskIncrementTick+0x14c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <xTaskIncrementTick+0x14c>)
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f000 fa6c 	bl	8004b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800467c:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <xTaskIncrementTick+0x150>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	d34e      	bcc.n	8004724 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004686:	4b38      	ldr	r3, [pc, #224]	; (8004768 <xTaskIncrementTick+0x144>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <xTaskIncrementTick+0x70>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <xTaskIncrementTick+0x72>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <xTaskIncrementTick+0x150>)
 800469c:	2201      	movs	r2, #1
 800469e:	4252      	negs	r2, r2
 80046a0:	601a      	str	r2, [r3, #0]
					break;
 80046a2:	e03f      	b.n	8004724 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <xTaskIncrementTick+0x144>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d203      	bcs.n	80046c4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046bc:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <xTaskIncrementTick+0x150>)
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
						break;
 80046c2:	e02f      	b.n	8004724 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	3304      	adds	r3, #4
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff f97d 	bl	80039c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	3318      	adds	r3, #24
 80046da:	0018      	movs	r0, r3
 80046dc:	f7ff f974 	bl	80039c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <xTaskIncrementTick+0x154>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d903      	bls.n	80046f4 <xTaskIncrementTick+0xd0>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4b21      	ldr	r3, [pc, #132]	; (8004778 <xTaskIncrementTick+0x154>)
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	0013      	movs	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4a1e      	ldr	r2, [pc, #120]	; (800477c <xTaskIncrementTick+0x158>)
 8004702:	189a      	adds	r2, r3, r2
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3304      	adds	r3, #4
 8004708:	0019      	movs	r1, r3
 800470a:	0010      	movs	r0, r2
 800470c:	f7ff f904 	bl	8003918 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <xTaskIncrementTick+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	429a      	cmp	r2, r3
 800471c:	d3b3      	bcc.n	8004686 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800471e:	2301      	movs	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004722:	e7b0      	b.n	8004686 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <xTaskIncrementTick+0x15c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	4914      	ldr	r1, [pc, #80]	; (800477c <xTaskIncrementTick+0x158>)
 800472c:	0013      	movs	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	189b      	adds	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	585b      	ldr	r3, [r3, r1]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d907      	bls.n	800474a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e004      	b.n	800474a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <xTaskIncrementTick+0x160>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <xTaskIncrementTick+0x160>)
 8004748:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <xTaskIncrementTick+0x164>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004756:	697b      	ldr	r3, [r7, #20]
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b006      	add	sp, #24
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000418 	.word	0x20000418
 8004764:	200003f4 	.word	0x200003f4
 8004768:	200003a8 	.word	0x200003a8
 800476c:	200003ac 	.word	0x200003ac
 8004770:	20000408 	.word	0x20000408
 8004774:	20000410 	.word	0x20000410
 8004778:	200003f8 	.word	0x200003f8
 800477c:	200002f4 	.word	0x200002f4
 8004780:	200002f0 	.word	0x200002f0
 8004784:	20000400 	.word	0x20000400
 8004788:	20000404 	.word	0x20000404

0800478c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004792:	4b22      	ldr	r3, [pc, #136]	; (800481c <vTaskSwitchContext+0x90>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <vTaskSwitchContext+0x94>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047a0:	e037      	b.n	8004812 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80047a2:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <vTaskSwitchContext+0x94>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <vTaskSwitchContext+0x98>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	e007      	b.n	80047c0 <vTaskSwitchContext+0x34>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <vTaskSwitchContext+0x2e>
 80047b6:	b672      	cpsid	i
 80047b8:	e7fe      	b.n	80047b8 <vTaskSwitchContext+0x2c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3b01      	subs	r3, #1
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	4919      	ldr	r1, [pc, #100]	; (8004828 <vTaskSwitchContext+0x9c>)
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	0013      	movs	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	585b      	ldr	r3, [r3, r1]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ee      	beq.n	80047b0 <vTaskSwitchContext+0x24>
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	0013      	movs	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	189b      	adds	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a12      	ldr	r2, [pc, #72]	; (8004828 <vTaskSwitchContext+0x9c>)
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d104      	bne.n	8004802 <vTaskSwitchContext+0x76>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <vTaskSwitchContext+0xa0>)
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <vTaskSwitchContext+0x98>)
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b002      	add	sp, #8
 8004818:	bd80      	pop	{r7, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	20000418 	.word	0x20000418
 8004820:	20000404 	.word	0x20000404
 8004824:	200003f8 	.word	0x200003f8
 8004828:	200002f4 	.word	0x200002f4
 800482c:	200002f0 	.word	0x200002f0

08004830 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <vTaskPlaceOnEventList+0x14>
 8004840:	b672      	cpsid	i
 8004842:	e7fe      	b.n	8004842 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <vTaskPlaceOnEventList+0x38>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3318      	adds	r3, #24
 800484a:	001a      	movs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0011      	movs	r1, r2
 8004850:	0018      	movs	r0, r3
 8004852:	f7ff f883 	bl	800395c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	0018      	movs	r0, r3
 800485c:	f000 fa16 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b002      	add	sp, #8
 8004866:	bd80      	pop	{r7, pc}
 8004868:	200002f0 	.word	0x200002f0

0800486c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <xTaskRemoveFromEventList+0x1a>
 8004882:	b672      	cpsid	i
 8004884:	e7fe      	b.n	8004884 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3318      	adds	r3, #24
 800488a:	0018      	movs	r0, r3
 800488c:	f7ff f89c 	bl	80039c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <xTaskRemoveFromEventList+0xa0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11d      	bne.n	80048d4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3304      	adds	r3, #4
 800489c:	0018      	movs	r0, r3
 800489e:	f7ff f893 	bl	80039c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <xTaskRemoveFromEventList+0xa4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d903      	bls.n	80048b6 <xTaskRemoveFromEventList+0x4a>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	4b17      	ldr	r3, [pc, #92]	; (8004910 <xTaskRemoveFromEventList+0xa4>)
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	0013      	movs	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a14      	ldr	r2, [pc, #80]	; (8004914 <xTaskRemoveFromEventList+0xa8>)
 80048c4:	189a      	adds	r2, r3, r2
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3304      	adds	r3, #4
 80048ca:	0019      	movs	r1, r3
 80048cc:	0010      	movs	r0, r2
 80048ce:	f7ff f823 	bl	8003918 <vListInsertEnd>
 80048d2:	e007      	b.n	80048e4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3318      	adds	r3, #24
 80048d8:	001a      	movs	r2, r3
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <xTaskRemoveFromEventList+0xac>)
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f7ff f81a 	bl	8003918 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <xTaskRemoveFromEventList+0xb0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d905      	bls.n	80048fe <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <xTaskRemoveFromEventList+0xb4>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e001      	b.n	8004902 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b004      	add	sp, #16
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000418 	.word	0x20000418
 8004910:	200003f8 	.word	0x200003f8
 8004914:	200002f4 	.word	0x200002f4
 8004918:	200003b0 	.word	0x200003b0
 800491c:	200002f0 	.word	0x200002f0
 8004920:	20000404 	.word	0x20000404

08004924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <vTaskInternalSetTimeOutState+0x20>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <vTaskInternalSetTimeOutState+0x24>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	605a      	str	r2, [r3, #4]
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b002      	add	sp, #8
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000408 	.word	0x20000408
 8004948:	200003f4 	.word	0x200003f4

0800494c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <xTaskCheckForTimeOut+0x14>
 800495c:	b672      	cpsid	i
 800495e:	e7fe      	b.n	800495e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <xTaskCheckForTimeOut+0x1e>
 8004966:	b672      	cpsid	i
 8004968:	e7fe      	b.n	8004968 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800496a:	f000 fa79 	bl	8004e60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <xTaskCheckForTimeOut+0x98>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	d102      	bne.n	800498c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e024      	b.n	80049d6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <xTaskCheckForTimeOut+0x9c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d007      	beq.n	80049a8 <xTaskCheckForTimeOut+0x5c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e016      	b.n	80049d6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d20c      	bcs.n	80049cc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff ffaf 	bl	8004924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e004      	b.n	80049d6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049d2:	2301      	movs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80049d6:	f000 fa55 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 80049da:	697b      	ldr	r3, [r7, #20]
}
 80049dc:	0018      	movs	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	b006      	add	sp, #24
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	200003f4 	.word	0x200003f4
 80049e8:	20000408 	.word	0x20000408

080049ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <vTaskMissedYield+0x10>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000404 	.word	0x20000404

08004a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a08:	f000 f84e 	bl	8004aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <prvIdleTask+0x1c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d9f9      	bls.n	8004a08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a14:	f000 fa14 	bl	8004e40 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004a18:	e7f6      	b.n	8004a08 <prvIdleTask+0x8>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	200002f4 	.word	0x200002f4

08004a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	e00c      	b.n	8004a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	0013      	movs	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <prvInitialiseTaskLists+0x68>)
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7fe ff43 	bl	80038c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3301      	adds	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d9ef      	bls.n	8004a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <prvInitialiseTaskLists+0x6c>)
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fe ff39 	bl	80038c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <prvInitialiseTaskLists+0x70>)
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fe ff35 	bl	80038c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <prvInitialiseTaskLists+0x74>)
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f7fe ff31 	bl	80038c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a64:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <prvInitialiseTaskLists+0x78>)
 8004a66:	0018      	movs	r0, r3
 8004a68:	f7fe ff2d 	bl	80038c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <prvInitialiseTaskLists+0x7c>)
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7fe ff29 	bl	80038c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <prvInitialiseTaskLists+0x80>)
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <prvInitialiseTaskLists+0x6c>)
 8004a78:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <prvInitialiseTaskLists+0x84>)
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <prvInitialiseTaskLists+0x70>)
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200002f4 	.word	0x200002f4
 8004a8c:	20000380 	.word	0x20000380
 8004a90:	20000394 	.word	0x20000394
 8004a94:	200003b0 	.word	0x200003b0
 8004a98:	200003c4 	.word	0x200003c4
 8004a9c:	200003dc 	.word	0x200003dc
 8004aa0:	200003a8 	.word	0x200003a8
 8004aa4:	200003ac 	.word	0x200003ac

08004aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aae:	e01a      	b.n	8004ae6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004ab0:	f000 f9d6 	bl	8004e60 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <prvCheckTasksWaitingTermination+0x50>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fe ff81 	bl	80039c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <prvCheckTasksWaitingTermination+0x54>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	1e5a      	subs	r2, r3, #1
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <prvCheckTasksWaitingTermination+0x54>)
 8004ace:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <prvCheckTasksWaitingTermination+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <prvCheckTasksWaitingTermination+0x58>)
 8004ad8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004ada:	f000 f9d3 	bl	8004e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 f80f 	bl	8004b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <prvCheckTasksWaitingTermination+0x58>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e0      	bne.n	8004ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	200003c4 	.word	0x200003c4
 8004afc:	200003f0 	.word	0x200003f0
 8004b00:	200003d8 	.word	0x200003d8

08004b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2251      	movs	r2, #81	; 0x51
 8004b10:	5c9b      	ldrb	r3, [r3, r2]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 fade 	bl	80050dc <vPortFree>
				vPortFree( pxTCB );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 fada 	bl	80050dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b28:	e010      	b.n	8004b4c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2251      	movs	r2, #81	; 0x51
 8004b2e:	5c9b      	ldrb	r3, [r3, r2]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d104      	bne.n	8004b3e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fad0 	bl	80050dc <vPortFree>
	}
 8004b3c:	e006      	b.n	8004b4c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2251      	movs	r2, #81	; 0x51
 8004b42:	5c9b      	ldrb	r3, [r3, r2]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d001      	beq.n	8004b4c <prvDeleteTCB+0x48>
 8004b48:	b672      	cpsid	i
 8004b4a:	e7fe      	b.n	8004b4a <prvDeleteTCB+0x46>
	}
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <prvResetNextTaskUnblockTime+0x40>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <prvResetNextTaskUnblockTime+0x14>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <prvResetNextTaskUnblockTime+0x16>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvResetNextTaskUnblockTime+0x44>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	4252      	negs	r2, r2
 8004b74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b76:	e008      	b.n	8004b8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <prvResetNextTaskUnblockTime+0x40>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <prvResetNextTaskUnblockTime+0x44>)
 8004b88:	601a      	str	r2, [r3, #0]
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b002      	add	sp, #8
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	200003a8 	.word	0x200003a8
 8004b98:	20000410 	.word	0x20000410

08004b9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <xTaskGetSchedulerState+0x30>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004baa:	2301      	movs	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e008      	b.n	8004bc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <xTaskGetSchedulerState+0x34>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	e001      	b.n	8004bc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bc2:	687b      	ldr	r3, [r7, #4]
	}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200003fc 	.word	0x200003fc
 8004bd0:	20000418 	.word	0x20000418

08004bd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d044      	beq.n	8004c74 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bea:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <xTaskPriorityDisinherit+0xac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <xTaskPriorityDisinherit+0x24>
 8004bf4:	b672      	cpsid	i
 8004bf6:	e7fe      	b.n	8004bf6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <xTaskPriorityDisinherit+0x30>
 8004c00:	b672      	cpsid	i
 8004c02:	e7fe      	b.n	8004c02 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d02c      	beq.n	8004c74 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d128      	bne.n	8004c74 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3304      	adds	r3, #4
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7fe fece 	bl	80039c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	2207      	movs	r2, #7
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <xTaskPriorityDisinherit+0xb0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d903      	bls.n	8004c54 <xTaskPriorityDisinherit+0x80>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <xTaskPriorityDisinherit+0xb0>)
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	0013      	movs	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	189b      	adds	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <xTaskPriorityDisinherit+0xb4>)
 8004c62:	189a      	adds	r2, r3, r2
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3304      	adds	r3, #4
 8004c68:	0019      	movs	r1, r3
 8004c6a:	0010      	movs	r0, r2
 8004c6c:	f7fe fe54 	bl	8003918 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c74:	68fb      	ldr	r3, [r7, #12]
	}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b004      	add	sp, #16
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	200002f0 	.word	0x200002f0
 8004c84:	200003f8 	.word	0x200003f8
 8004c88:	200002f4 	.word	0x200002f4

08004c8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c96:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x90>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c9c:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7fe fe90 	bl	80039c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3301      	adds	r3, #1
 8004cac:	d10b      	bne.n	8004cc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1d1a      	adds	r2, r3, #4
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cbc:	0011      	movs	r1, r2
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f7fe fe2a 	bl	8003918 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cc4:	e026      	b.n	8004d14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	18d3      	adds	r3, r2, r3
 8004ccc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cce:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d209      	bcs.n	8004cf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	0019      	movs	r1, r3
 8004cea:	0010      	movs	r0, r2
 8004cec:	f7fe fe36 	bl	800395c <vListInsert>
}
 8004cf0:	e010      	b.n	8004d14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	0010      	movs	r0, r2
 8004d00:	f7fe fe2c 	bl	800395c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d202      	bcs.n	8004d14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b004      	add	sp, #16
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200003f4 	.word	0x200003f4
 8004d20:	200002f0 	.word	0x200002f0
 8004d24:	200003dc 	.word	0x200003dc
 8004d28:	200003ac 	.word	0x200003ac
 8004d2c:	200003a8 	.word	0x200003a8
 8004d30:	20000410 	.word	0x20000410

08004d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b04      	subs	r3, #4
 8004d44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2280      	movs	r2, #128	; 0x80
 8004d4a:	0452      	lsls	r2, r2, #17
 8004d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b04      	subs	r3, #4
 8004d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d60:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <pxPortInitialiseStack+0x50>)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b14      	subs	r3, #20
 8004d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3b20      	subs	r3, #32
 8004d76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	08004d89 	.word	0x08004d89

08004d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <prvTaskExitError+0x28>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	d001      	beq.n	8004d9e <prvTaskExitError+0x16>
 8004d9a:	b672      	cpsid	i
 8004d9c:	e7fe      	b.n	8004d9c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004d9e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0fc      	beq.n	8004da2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000014 	.word	0x20000014

08004db4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004dc0:	4a0b      	ldr	r2, [pc, #44]	; (8004df0 <pxCurrentTCBConst2>)
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	3020      	adds	r0, #32
 8004dc8:	f380 8809 	msr	PSP, r0
 8004dcc:	2002      	movs	r0, #2
 8004dce:	f380 8814 	msr	CONTROL, r0
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004dd8:	46ae      	mov	lr, r5
 8004dda:	bc08      	pop	{r3}
 8004ddc:	bc04      	pop	{r2}
 8004dde:	b662      	cpsie	i
 8004de0:	4718      	bx	r3
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46c0      	nop			; (mov r8, r8)

08004df0 <pxCurrentTCBConst2>:
 8004df0:	200002f0 	.word	0x200002f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46c0      	nop			; (mov r8, r8)

08004df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <xPortStartScheduler+0x40>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <xPortStartScheduler+0x40>)
 8004e02:	21ff      	movs	r1, #255	; 0xff
 8004e04:	0409      	lsls	r1, r1, #16
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <xPortStartScheduler+0x40>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <xPortStartScheduler+0x40>)
 8004e10:	21ff      	movs	r1, #255	; 0xff
 8004e12:	0609      	lsls	r1, r1, #24
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004e18:	f000 f898 	bl	8004f4c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <xPortStartScheduler+0x44>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004e22:	f7ff ffcd 	bl	8004dc0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e26:	f7ff fcb1 	bl	800478c <vTaskSwitchContext>
	prvTaskExitError();
 8004e2a:	f7ff ffad 	bl	8004d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	e000ed20 	.word	0xe000ed20
 8004e3c:	20000014 	.word	0x20000014

08004e40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <vPortYield+0x1c>)
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	0552      	lsls	r2, r2, #21
 8004e4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004e4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e50:	f3bf 8f6f 	isb	sy
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004e64:	b672      	cpsid	i
    uxCriticalNesting++;
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <vPortEnterCritical+0x20>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <vPortEnterCritical+0x20>)
 8004e6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004e70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e74:	f3bf 8f6f 	isb	sy
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	20000014 	.word	0x20000014

08004e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <vPortExitCritical+0x2c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <vPortExitCritical+0x10>
 8004e90:	b672      	cpsid	i
 8004e92:	e7fe      	b.n	8004e92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <vPortExitCritical+0x2c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1e5a      	subs	r2, r3, #1
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <vPortExitCritical+0x2c>)
 8004e9c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vPortExitCritical+0x2c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d100      	bne.n	8004ea8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004ea6:	b662      	cpsie	i
    }
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	20000014 	.word	0x20000014

08004eb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004eb4:	f3ef 8010 	mrs	r0, PRIMASK
 8004eb8:	b672      	cpsid	i
 8004eba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	0018      	movs	r0, r3

08004ec0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004ec0:	f380 8810 	msr	PRIMASK, r0
 8004ec4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004ec6:	46c0      	nop			; (mov r8, r8)
	...

08004ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ed0:	f3ef 8009 	mrs	r0, PSP
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <pxCurrentTCBConst>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	3820      	subs	r0, #32
 8004eda:	6010      	str	r0, [r2, #0]
 8004edc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ede:	4644      	mov	r4, r8
 8004ee0:	464d      	mov	r5, r9
 8004ee2:	4656      	mov	r6, sl
 8004ee4:	465f      	mov	r7, fp
 8004ee6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ee8:	b508      	push	{r3, lr}
 8004eea:	b672      	cpsid	i
 8004eec:	f7ff fc4e 	bl	800478c <vTaskSwitchContext>
 8004ef0:	b662      	cpsie	i
 8004ef2:	bc0c      	pop	{r2, r3}
 8004ef4:	6811      	ldr	r1, [r2, #0]
 8004ef6:	6808      	ldr	r0, [r1, #0]
 8004ef8:	3010      	adds	r0, #16
 8004efa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004efc:	46a0      	mov	r8, r4
 8004efe:	46a9      	mov	r9, r5
 8004f00:	46b2      	mov	sl, r6
 8004f02:	46bb      	mov	fp, r7
 8004f04:	f380 8809 	msr	PSP, r0
 8004f08:	3820      	subs	r0, #32
 8004f0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f0c:	4718      	bx	r3
 8004f0e:	46c0      	nop			; (mov r8, r8)

08004f10 <pxCurrentTCBConst>:
 8004f10:	200002f0 	.word	0x200002f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	46c0      	nop			; (mov r8, r8)

08004f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f1e:	f7ff ffc9 	bl	8004eb4 <ulSetInterruptMaskFromISR>
 8004f22:	0003      	movs	r3, r0
 8004f24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f26:	f7ff fb7d 	bl	8004624 <xTaskIncrementTick>
 8004f2a:	1e03      	subs	r3, r0, #0
 8004f2c:	d003      	beq.n	8004f36 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SysTick_Handler+0x30>)
 8004f30:	2280      	movs	r2, #128	; 0x80
 8004f32:	0552      	lsls	r2, r2, #21
 8004f34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ffc1 	bl	8004ec0 <vClearInterruptMaskFromISR>
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b002      	add	sp, #8
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <prvSetupTimerInterrupt+0x34>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <prvSetupTimerInterrupt+0x38>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <prvSetupTimerInterrupt+0x3c>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	23fa      	movs	r3, #250	; 0xfa
 8004f62:	0099      	lsls	r1, r3, #2
 8004f64:	0010      	movs	r0, r2
 8004f66:	f7fb f8cf 	bl	8000108 <__udivsi3>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <prvSetupTimerInterrupt+0x40>)
 8004f70:	3a01      	subs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004f74:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <prvSetupTimerInterrupt+0x34>)
 8004f76:	2207      	movs	r2, #7
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	e000e010 	.word	0xe000e010
 8004f84:	e000e018 	.word	0xe000e018
 8004f88:	2000000c 	.word	0x2000000c
 8004f8c:	e000e014 	.word	0xe000e014

08004f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004f9c:	f7ff faaa 	bl	80044f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fa0:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <pvPortMalloc+0x138>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fa8:	f000 f8e0 	bl	800516c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fac:	4b47      	ldr	r3, [pc, #284]	; (80050cc <pvPortMalloc+0x13c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d000      	beq.n	8004fb8 <pvPortMalloc+0x28>
 8004fb6:	e079      	b.n	80050ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d012      	beq.n	8004fe4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00a      	beq.n	8004fe4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	4393      	bics	r3, r2
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2207      	movs	r2, #7
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d001      	beq.n	8004fe4 <pvPortMalloc+0x54>
 8004fe0:	b672      	cpsid	i
 8004fe2:	e7fe      	b.n	8004fe2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d060      	beq.n	80050ac <pvPortMalloc+0x11c>
 8004fea:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <pvPortMalloc+0x140>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d85b      	bhi.n	80050ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ff4:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <pvPortMalloc+0x144>)
 8004ff6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <pvPortMalloc+0x144>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffe:	e004      	b.n	800500a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <pvPortMalloc+0x8c>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800501c:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <pvPortMalloc+0x138>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	429a      	cmp	r2, r3
 8005024:	d042      	beq.n	80050ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	189b      	adds	r3, r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	2308      	movs	r3, #8
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	429a      	cmp	r2, r3
 8005046:	d916      	bls.n	8005076 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	18d3      	adds	r3, r2, r3
 800504e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2207      	movs	r2, #7
 8005054:	4013      	ands	r3, r2
 8005056:	d001      	beq.n	800505c <pvPortMalloc+0xcc>
 8005058:	b672      	cpsid	i
 800505a:	e7fe      	b.n	800505a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 f8db 	bl	800522c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <pvPortMalloc+0x140>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <pvPortMalloc+0x140>)
 8005082:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005084:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <pvPortMalloc+0x140>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <pvPortMalloc+0x148>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d203      	bcs.n	8005098 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <pvPortMalloc+0x140>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <pvPortMalloc+0x148>)
 8005096:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <pvPortMalloc+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050ac:	f7ff fa2e 	bl	800450c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2207      	movs	r2, #7
 80050b4:	4013      	ands	r3, r2
 80050b6:	d001      	beq.n	80050bc <pvPortMalloc+0x12c>
 80050b8:	b672      	cpsid	i
 80050ba:	e7fe      	b.n	80050ba <pvPortMalloc+0x12a>
	return pvReturn;
 80050bc:	68fb      	ldr	r3, [r7, #12]
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b006      	add	sp, #24
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	20001024 	.word	0x20001024
 80050cc:	20001030 	.word	0x20001030
 80050d0:	20001028 	.word	0x20001028
 80050d4:	2000101c 	.word	0x2000101c
 80050d8:	2000102c 	.word	0x2000102c

080050dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d035      	beq.n	800515a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050ee:	2308      	movs	r3, #8
 80050f0:	425b      	negs	r3, r3
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	18d3      	adds	r3, r2, r3
 80050f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <vPortFree+0x88>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4013      	ands	r3, r2
 8005106:	d101      	bne.n	800510c <vPortFree+0x30>
 8005108:	b672      	cpsid	i
 800510a:	e7fe      	b.n	800510a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <vPortFree+0x3c>
 8005114:	b672      	cpsid	i
 8005116:	e7fe      	b.n	8005116 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <vPortFree+0x88>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	d01a      	beq.n	800515a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d116      	bne.n	800515a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <vPortFree+0x88>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	43db      	mvns	r3, r3
 8005136:	401a      	ands	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800513c:	f7ff f9da 	bl	80044f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	4b08      	ldr	r3, [pc, #32]	; (8005168 <vPortFree+0x8c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	18d2      	adds	r2, r2, r3
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <vPortFree+0x8c>)
 800514c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	0018      	movs	r0, r3
 8005152:	f000 f86b 	bl	800522c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005156:	f7ff f9d9 	bl	800450c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	20001030 	.word	0x20001030
 8005168:	20001028 	.word	0x20001028

0800516c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005172:	23c0      	movs	r3, #192	; 0xc0
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005178:	4b26      	ldr	r3, [pc, #152]	; (8005214 <prvHeapInit+0xa8>)
 800517a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2207      	movs	r2, #7
 8005180:	4013      	ands	r3, r2
 8005182:	d00c      	beq.n	800519e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3307      	adds	r3, #7
 8005188:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2207      	movs	r2, #7
 800518e:	4393      	bics	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <prvHeapInit+0xa8>)
 800519a:	18d3      	adds	r3, r2, r3
 800519c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <prvHeapInit+0xac>)
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <prvHeapInit+0xac>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	18d3      	adds	r3, r2, r3
 80051b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051b6:	2208      	movs	r2, #8
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2207      	movs	r2, #7
 80051c2:	4393      	bics	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <prvHeapInit+0xb0>)
 80051ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80051cc:	4b13      	ldr	r3, [pc, #76]	; (800521c <prvHeapInit+0xb0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2200      	movs	r2, #0
 80051d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051d4:	4b11      	ldr	r3, [pc, #68]	; (800521c <prvHeapInit+0xb0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <prvHeapInit+0xb0>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <prvHeapInit+0xb4>)
 80051f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvHeapInit+0xb8>)
 8005200:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <prvHeapInit+0xbc>)
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	0612      	lsls	r2, r2, #24
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b004      	add	sp, #16
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	2000041c 	.word	0x2000041c
 8005218:	2000101c 	.word	0x2000101c
 800521c:	20001024 	.word	0x20001024
 8005220:	2000102c 	.word	0x2000102c
 8005224:	20001028 	.word	0x20001028
 8005228:	20001030 	.word	0x20001030

0800522c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e002      	b.n	8005240 <prvInsertBlockIntoFreeList+0x14>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d8f7      	bhi.n	800523a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	d108      	bne.n	800526e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	18d2      	adds	r2, r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	18d2      	adds	r2, r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d118      	bne.n	80052b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <prvInsertBlockIntoFreeList+0xac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d00d      	beq.n	80052aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	18d2      	adds	r2, r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e008      	b.n	80052bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052aa:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <prvInsertBlockIntoFreeList+0xac>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e003      	b.n	80052bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d002      	beq.n	80052ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b004      	add	sp, #16
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	2000101c 	.word	0x2000101c
 80052d8:	20001024 	.word	0x20001024

080052dc <__errno>:
 80052dc:	4b01      	ldr	r3, [pc, #4]	; (80052e4 <__errno+0x8>)
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	4770      	bx	lr
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20000018 	.word	0x20000018

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	2600      	movs	r6, #0
 80052ec:	4d0c      	ldr	r5, [pc, #48]	; (8005320 <__libc_init_array+0x38>)
 80052ee:	4c0d      	ldr	r4, [pc, #52]	; (8005324 <__libc_init_array+0x3c>)
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	2600      	movs	r6, #0
 80052fa:	f000 ff43 	bl	8006184 <_init>
 80052fe:	4d0a      	ldr	r5, [pc, #40]	; (8005328 <__libc_init_array+0x40>)
 8005300:	4c0a      	ldr	r4, [pc, #40]	; (800532c <__libc_init_array+0x44>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	00b3      	lsls	r3, r6, #2
 800530e:	58eb      	ldr	r3, [r5, r3]
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	00b3      	lsls	r3, r6, #2
 8005318:	58eb      	ldr	r3, [r5, r3]
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	0800632c 	.word	0x0800632c
 8005324:	0800632c 	.word	0x0800632c
 8005328:	0800632c 	.word	0x0800632c
 800532c:	08006330 	.word	0x08006330

08005330 <memcpy>:
 8005330:	2300      	movs	r3, #0
 8005332:	b510      	push	{r4, lr}
 8005334:	429a      	cmp	r2, r3
 8005336:	d100      	bne.n	800533a <memcpy+0xa>
 8005338:	bd10      	pop	{r4, pc}
 800533a:	5ccc      	ldrb	r4, [r1, r3]
 800533c:	54c4      	strb	r4, [r0, r3]
 800533e:	3301      	adds	r3, #1
 8005340:	e7f8      	b.n	8005334 <memcpy+0x4>

08005342 <memset>:
 8005342:	0003      	movs	r3, r0
 8005344:	1812      	adds	r2, r2, r0
 8005346:	4293      	cmp	r3, r2
 8005348:	d100      	bne.n	800534c <memset+0xa>
 800534a:	4770      	bx	lr
 800534c:	7019      	strb	r1, [r3, #0]
 800534e:	3301      	adds	r3, #1
 8005350:	e7f9      	b.n	8005346 <memset+0x4>
	...

08005354 <iprintf>:
 8005354:	b40f      	push	{r0, r1, r2, r3}
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <iprintf+0x30>)
 8005358:	b513      	push	{r0, r1, r4, lr}
 800535a:	681c      	ldr	r4, [r3, #0]
 800535c:	2c00      	cmp	r4, #0
 800535e:	d005      	beq.n	800536c <iprintf+0x18>
 8005360:	69a3      	ldr	r3, [r4, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <iprintf+0x18>
 8005366:	0020      	movs	r0, r4
 8005368:	f000 f850 	bl	800540c <__sinit>
 800536c:	ab05      	add	r3, sp, #20
 800536e:	9a04      	ldr	r2, [sp, #16]
 8005370:	68a1      	ldr	r1, [r4, #8]
 8005372:	0020      	movs	r0, r4
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	f000 f963 	bl	8005640 <_vfiprintf_r>
 800537a:	bc16      	pop	{r1, r2, r4}
 800537c:	bc08      	pop	{r3}
 800537e:	b004      	add	sp, #16
 8005380:	4718      	bx	r3
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	20000018 	.word	0x20000018

08005388 <std>:
 8005388:	2300      	movs	r3, #0
 800538a:	b510      	push	{r4, lr}
 800538c:	0004      	movs	r4, r0
 800538e:	6003      	str	r3, [r0, #0]
 8005390:	6043      	str	r3, [r0, #4]
 8005392:	6083      	str	r3, [r0, #8]
 8005394:	8181      	strh	r1, [r0, #12]
 8005396:	6643      	str	r3, [r0, #100]	; 0x64
 8005398:	81c2      	strh	r2, [r0, #14]
 800539a:	6103      	str	r3, [r0, #16]
 800539c:	6143      	str	r3, [r0, #20]
 800539e:	6183      	str	r3, [r0, #24]
 80053a0:	0019      	movs	r1, r3
 80053a2:	2208      	movs	r2, #8
 80053a4:	305c      	adds	r0, #92	; 0x5c
 80053a6:	f7ff ffcc 	bl	8005342 <memset>
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <std+0x38>)
 80053ac:	6224      	str	r4, [r4, #32]
 80053ae:	6263      	str	r3, [r4, #36]	; 0x24
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <std+0x3c>)
 80053b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <std+0x40>)
 80053b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <std+0x44>)
 80053ba:	6323      	str	r3, [r4, #48]	; 0x30
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	08005b7d 	.word	0x08005b7d
 80053c4:	08005ba5 	.word	0x08005ba5
 80053c8:	08005bdd 	.word	0x08005bdd
 80053cc:	08005c09 	.word	0x08005c09

080053d0 <_cleanup_r>:
 80053d0:	b510      	push	{r4, lr}
 80053d2:	4902      	ldr	r1, [pc, #8]	; (80053dc <_cleanup_r+0xc>)
 80053d4:	f000 f88c 	bl	80054f0 <_fwalk_reent>
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	08005f0d 	.word	0x08005f0d

080053e0 <__sfmoreglue>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	2568      	movs	r5, #104	; 0x68
 80053e4:	1e4a      	subs	r2, r1, #1
 80053e6:	4355      	muls	r5, r2
 80053e8:	000e      	movs	r6, r1
 80053ea:	0029      	movs	r1, r5
 80053ec:	3174      	adds	r1, #116	; 0x74
 80053ee:	f000 f8a1 	bl	8005534 <_malloc_r>
 80053f2:	1e04      	subs	r4, r0, #0
 80053f4:	d008      	beq.n	8005408 <__sfmoreglue+0x28>
 80053f6:	2100      	movs	r1, #0
 80053f8:	002a      	movs	r2, r5
 80053fa:	6001      	str	r1, [r0, #0]
 80053fc:	6046      	str	r6, [r0, #4]
 80053fe:	300c      	adds	r0, #12
 8005400:	60a0      	str	r0, [r4, #8]
 8005402:	3268      	adds	r2, #104	; 0x68
 8005404:	f7ff ff9d 	bl	8005342 <memset>
 8005408:	0020      	movs	r0, r4
 800540a:	bd70      	pop	{r4, r5, r6, pc}

0800540c <__sinit>:
 800540c:	6983      	ldr	r3, [r0, #24]
 800540e:	b513      	push	{r0, r1, r4, lr}
 8005410:	0004      	movs	r4, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d128      	bne.n	8005468 <__sinit+0x5c>
 8005416:	6483      	str	r3, [r0, #72]	; 0x48
 8005418:	64c3      	str	r3, [r0, #76]	; 0x4c
 800541a:	6503      	str	r3, [r0, #80]	; 0x50
 800541c:	4b13      	ldr	r3, [pc, #76]	; (800546c <__sinit+0x60>)
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <__sinit+0x64>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6282      	str	r2, [r0, #40]	; 0x28
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	4298      	cmp	r0, r3
 8005428:	d101      	bne.n	800542e <__sinit+0x22>
 800542a:	2301      	movs	r3, #1
 800542c:	6183      	str	r3, [r0, #24]
 800542e:	0020      	movs	r0, r4
 8005430:	f000 f820 	bl	8005474 <__sfp>
 8005434:	6060      	str	r0, [r4, #4]
 8005436:	0020      	movs	r0, r4
 8005438:	f000 f81c 	bl	8005474 <__sfp>
 800543c:	60a0      	str	r0, [r4, #8]
 800543e:	0020      	movs	r0, r4
 8005440:	f000 f818 	bl	8005474 <__sfp>
 8005444:	2200      	movs	r2, #0
 8005446:	60e0      	str	r0, [r4, #12]
 8005448:	2104      	movs	r1, #4
 800544a:	6860      	ldr	r0, [r4, #4]
 800544c:	f7ff ff9c 	bl	8005388 <std>
 8005450:	2201      	movs	r2, #1
 8005452:	2109      	movs	r1, #9
 8005454:	68a0      	ldr	r0, [r4, #8]
 8005456:	f7ff ff97 	bl	8005388 <std>
 800545a:	2202      	movs	r2, #2
 800545c:	2112      	movs	r1, #18
 800545e:	68e0      	ldr	r0, [r4, #12]
 8005460:	f7ff ff92 	bl	8005388 <std>
 8005464:	2301      	movs	r3, #1
 8005466:	61a3      	str	r3, [r4, #24]
 8005468:	bd13      	pop	{r0, r1, r4, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	08006294 	.word	0x08006294
 8005470:	080053d1 	.word	0x080053d1

08005474 <__sfp>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <__sfp+0x74>)
 8005478:	0007      	movs	r7, r0
 800547a:	681e      	ldr	r6, [r3, #0]
 800547c:	69b3      	ldr	r3, [r6, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <__sfp+0x14>
 8005482:	0030      	movs	r0, r6
 8005484:	f7ff ffc2 	bl	800540c <__sinit>
 8005488:	3648      	adds	r6, #72	; 0x48
 800548a:	68b4      	ldr	r4, [r6, #8]
 800548c:	6873      	ldr	r3, [r6, #4]
 800548e:	3b01      	subs	r3, #1
 8005490:	d504      	bpl.n	800549c <__sfp+0x28>
 8005492:	6833      	ldr	r3, [r6, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <__sfp+0x34>
 8005498:	6836      	ldr	r6, [r6, #0]
 800549a:	e7f6      	b.n	800548a <__sfp+0x16>
 800549c:	220c      	movs	r2, #12
 800549e:	5ea5      	ldrsh	r5, [r4, r2]
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	d00d      	beq.n	80054c0 <__sfp+0x4c>
 80054a4:	3468      	adds	r4, #104	; 0x68
 80054a6:	e7f2      	b.n	800548e <__sfp+0x1a>
 80054a8:	2104      	movs	r1, #4
 80054aa:	0038      	movs	r0, r7
 80054ac:	f7ff ff98 	bl	80053e0 <__sfmoreglue>
 80054b0:	6030      	str	r0, [r6, #0]
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d1f0      	bne.n	8005498 <__sfp+0x24>
 80054b6:	230c      	movs	r3, #12
 80054b8:	0004      	movs	r4, r0
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	0020      	movs	r0, r4
 80054be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c0:	0020      	movs	r0, r4
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <__sfp+0x78>)
 80054c4:	6665      	str	r5, [r4, #100]	; 0x64
 80054c6:	6025      	str	r5, [r4, #0]
 80054c8:	6065      	str	r5, [r4, #4]
 80054ca:	60a5      	str	r5, [r4, #8]
 80054cc:	60e3      	str	r3, [r4, #12]
 80054ce:	6125      	str	r5, [r4, #16]
 80054d0:	6165      	str	r5, [r4, #20]
 80054d2:	61a5      	str	r5, [r4, #24]
 80054d4:	2208      	movs	r2, #8
 80054d6:	0029      	movs	r1, r5
 80054d8:	305c      	adds	r0, #92	; 0x5c
 80054da:	f7ff ff32 	bl	8005342 <memset>
 80054de:	6365      	str	r5, [r4, #52]	; 0x34
 80054e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80054e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80054e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80054e6:	e7e9      	b.n	80054bc <__sfp+0x48>
 80054e8:	08006294 	.word	0x08006294
 80054ec:	ffff0001 	.word	0xffff0001

080054f0 <_fwalk_reent>:
 80054f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054f2:	0004      	movs	r4, r0
 80054f4:	0007      	movs	r7, r0
 80054f6:	2600      	movs	r6, #0
 80054f8:	9101      	str	r1, [sp, #4]
 80054fa:	3448      	adds	r4, #72	; 0x48
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	d101      	bne.n	8005504 <_fwalk_reent+0x14>
 8005500:	0030      	movs	r0, r6
 8005502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	68a5      	ldr	r5, [r4, #8]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	9b00      	ldr	r3, [sp, #0]
 800550c:	3b01      	subs	r3, #1
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	d501      	bpl.n	8005516 <_fwalk_reent+0x26>
 8005512:	6824      	ldr	r4, [r4, #0]
 8005514:	e7f2      	b.n	80054fc <_fwalk_reent+0xc>
 8005516:	89ab      	ldrh	r3, [r5, #12]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d908      	bls.n	800552e <_fwalk_reent+0x3e>
 800551c:	220e      	movs	r2, #14
 800551e:	5eab      	ldrsh	r3, [r5, r2]
 8005520:	3301      	adds	r3, #1
 8005522:	d004      	beq.n	800552e <_fwalk_reent+0x3e>
 8005524:	0029      	movs	r1, r5
 8005526:	0038      	movs	r0, r7
 8005528:	9b01      	ldr	r3, [sp, #4]
 800552a:	4798      	blx	r3
 800552c:	4306      	orrs	r6, r0
 800552e:	3568      	adds	r5, #104	; 0x68
 8005530:	e7eb      	b.n	800550a <_fwalk_reent+0x1a>
	...

08005534 <_malloc_r>:
 8005534:	2303      	movs	r3, #3
 8005536:	b570      	push	{r4, r5, r6, lr}
 8005538:	1ccd      	adds	r5, r1, #3
 800553a:	439d      	bics	r5, r3
 800553c:	3508      	adds	r5, #8
 800553e:	0006      	movs	r6, r0
 8005540:	2d0c      	cmp	r5, #12
 8005542:	d21e      	bcs.n	8005582 <_malloc_r+0x4e>
 8005544:	250c      	movs	r5, #12
 8005546:	42a9      	cmp	r1, r5
 8005548:	d81d      	bhi.n	8005586 <_malloc_r+0x52>
 800554a:	0030      	movs	r0, r6
 800554c:	f000 fd95 	bl	800607a <__malloc_lock>
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <_malloc_r+0xb4>)
 8005552:	6814      	ldr	r4, [r2, #0]
 8005554:	0021      	movs	r1, r4
 8005556:	2900      	cmp	r1, #0
 8005558:	d119      	bne.n	800558e <_malloc_r+0x5a>
 800555a:	4c24      	ldr	r4, [pc, #144]	; (80055ec <_malloc_r+0xb8>)
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <_malloc_r+0x36>
 8005562:	0030      	movs	r0, r6
 8005564:	f000 faf8 	bl	8005b58 <_sbrk_r>
 8005568:	6020      	str	r0, [r4, #0]
 800556a:	0029      	movs	r1, r5
 800556c:	0030      	movs	r0, r6
 800556e:	f000 faf3 	bl	8005b58 <_sbrk_r>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	d12b      	bne.n	80055ce <_malloc_r+0x9a>
 8005576:	230c      	movs	r3, #12
 8005578:	0030      	movs	r0, r6
 800557a:	6033      	str	r3, [r6, #0]
 800557c:	f000 fd7e 	bl	800607c <__malloc_unlock>
 8005580:	e003      	b.n	800558a <_malloc_r+0x56>
 8005582:	2d00      	cmp	r5, #0
 8005584:	dadf      	bge.n	8005546 <_malloc_r+0x12>
 8005586:	230c      	movs	r3, #12
 8005588:	6033      	str	r3, [r6, #0]
 800558a:	2000      	movs	r0, #0
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	680b      	ldr	r3, [r1, #0]
 8005590:	1b5b      	subs	r3, r3, r5
 8005592:	d419      	bmi.n	80055c8 <_malloc_r+0x94>
 8005594:	2b0b      	cmp	r3, #11
 8005596:	d903      	bls.n	80055a0 <_malloc_r+0x6c>
 8005598:	600b      	str	r3, [r1, #0]
 800559a:	18cc      	adds	r4, r1, r3
 800559c:	6025      	str	r5, [r4, #0]
 800559e:	e003      	b.n	80055a8 <_malloc_r+0x74>
 80055a0:	684b      	ldr	r3, [r1, #4]
 80055a2:	428c      	cmp	r4, r1
 80055a4:	d10d      	bne.n	80055c2 <_malloc_r+0x8e>
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	0030      	movs	r0, r6
 80055aa:	f000 fd67 	bl	800607c <__malloc_unlock>
 80055ae:	0020      	movs	r0, r4
 80055b0:	2207      	movs	r2, #7
 80055b2:	300b      	adds	r0, #11
 80055b4:	1d23      	adds	r3, r4, #4
 80055b6:	4390      	bics	r0, r2
 80055b8:	1ac3      	subs	r3, r0, r3
 80055ba:	d0e7      	beq.n	800558c <_malloc_r+0x58>
 80055bc:	425a      	negs	r2, r3
 80055be:	50e2      	str	r2, [r4, r3]
 80055c0:	e7e4      	b.n	800558c <_malloc_r+0x58>
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	000c      	movs	r4, r1
 80055c6:	e7ef      	b.n	80055a8 <_malloc_r+0x74>
 80055c8:	000c      	movs	r4, r1
 80055ca:	6849      	ldr	r1, [r1, #4]
 80055cc:	e7c3      	b.n	8005556 <_malloc_r+0x22>
 80055ce:	2303      	movs	r3, #3
 80055d0:	1cc4      	adds	r4, r0, #3
 80055d2:	439c      	bics	r4, r3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d0e1      	beq.n	800559c <_malloc_r+0x68>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	0030      	movs	r0, r6
 80055dc:	f000 fabc 	bl	8005b58 <_sbrk_r>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d1db      	bne.n	800559c <_malloc_r+0x68>
 80055e4:	e7c7      	b.n	8005576 <_malloc_r+0x42>
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	20001034 	.word	0x20001034
 80055ec:	20001038 	.word	0x20001038

080055f0 <__sfputc_r>:
 80055f0:	6893      	ldr	r3, [r2, #8]
 80055f2:	b510      	push	{r4, lr}
 80055f4:	3b01      	subs	r3, #1
 80055f6:	6093      	str	r3, [r2, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da04      	bge.n	8005606 <__sfputc_r+0x16>
 80055fc:	6994      	ldr	r4, [r2, #24]
 80055fe:	42a3      	cmp	r3, r4
 8005600:	db07      	blt.n	8005612 <__sfputc_r+0x22>
 8005602:	290a      	cmp	r1, #10
 8005604:	d005      	beq.n	8005612 <__sfputc_r+0x22>
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	1c58      	adds	r0, r3, #1
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	7019      	strb	r1, [r3, #0]
 800560e:	0008      	movs	r0, r1
 8005610:	bd10      	pop	{r4, pc}
 8005612:	f000 faff 	bl	8005c14 <__swbuf_r>
 8005616:	0001      	movs	r1, r0
 8005618:	e7f9      	b.n	800560e <__sfputc_r+0x1e>

0800561a <__sfputs_r>:
 800561a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561c:	0006      	movs	r6, r0
 800561e:	000f      	movs	r7, r1
 8005620:	0014      	movs	r4, r2
 8005622:	18d5      	adds	r5, r2, r3
 8005624:	42ac      	cmp	r4, r5
 8005626:	d101      	bne.n	800562c <__sfputs_r+0x12>
 8005628:	2000      	movs	r0, #0
 800562a:	e007      	b.n	800563c <__sfputs_r+0x22>
 800562c:	7821      	ldrb	r1, [r4, #0]
 800562e:	003a      	movs	r2, r7
 8005630:	0030      	movs	r0, r6
 8005632:	f7ff ffdd 	bl	80055f0 <__sfputc_r>
 8005636:	3401      	adds	r4, #1
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d1f3      	bne.n	8005624 <__sfputs_r+0xa>
 800563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005640 <_vfiprintf_r>:
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	b0a1      	sub	sp, #132	; 0x84
 8005644:	9003      	str	r0, [sp, #12]
 8005646:	000f      	movs	r7, r1
 8005648:	0016      	movs	r6, r2
 800564a:	001d      	movs	r5, r3
 800564c:	2800      	cmp	r0, #0
 800564e:	d005      	beq.n	800565c <_vfiprintf_r+0x1c>
 8005650:	6983      	ldr	r3, [r0, #24]
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <_vfiprintf_r+0x1c>
 8005658:	f7ff fed8 	bl	800540c <__sinit>
 800565c:	4b7b      	ldr	r3, [pc, #492]	; (800584c <_vfiprintf_r+0x20c>)
 800565e:	429f      	cmp	r7, r3
 8005660:	d15c      	bne.n	800571c <_vfiprintf_r+0xdc>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	685f      	ldr	r7, [r3, #4]
 8005666:	89bb      	ldrh	r3, [r7, #12]
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	d563      	bpl.n	8005734 <_vfiprintf_r+0xf4>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d060      	beq.n	8005734 <_vfiprintf_r+0xf4>
 8005672:	2300      	movs	r3, #0
 8005674:	ac08      	add	r4, sp, #32
 8005676:	6163      	str	r3, [r4, #20]
 8005678:	3320      	adds	r3, #32
 800567a:	7663      	strb	r3, [r4, #25]
 800567c:	3310      	adds	r3, #16
 800567e:	76a3      	strb	r3, [r4, #26]
 8005680:	9507      	str	r5, [sp, #28]
 8005682:	0035      	movs	r5, r6
 8005684:	782b      	ldrb	r3, [r5, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <_vfiprintf_r+0x4e>
 800568a:	2b25      	cmp	r3, #37	; 0x25
 800568c:	d15c      	bne.n	8005748 <_vfiprintf_r+0x108>
 800568e:	1bab      	subs	r3, r5, r6
 8005690:	9305      	str	r3, [sp, #20]
 8005692:	d00c      	beq.n	80056ae <_vfiprintf_r+0x6e>
 8005694:	0032      	movs	r2, r6
 8005696:	0039      	movs	r1, r7
 8005698:	9803      	ldr	r0, [sp, #12]
 800569a:	f7ff ffbe 	bl	800561a <__sfputs_r>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d100      	bne.n	80056a4 <_vfiprintf_r+0x64>
 80056a2:	e0c4      	b.n	800582e <_vfiprintf_r+0x1ee>
 80056a4:	6962      	ldr	r2, [r4, #20]
 80056a6:	9b05      	ldr	r3, [sp, #20]
 80056a8:	4694      	mov	ip, r2
 80056aa:	4463      	add	r3, ip
 80056ac:	6163      	str	r3, [r4, #20]
 80056ae:	782b      	ldrb	r3, [r5, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d100      	bne.n	80056b6 <_vfiprintf_r+0x76>
 80056b4:	e0bb      	b.n	800582e <_vfiprintf_r+0x1ee>
 80056b6:	2201      	movs	r2, #1
 80056b8:	2300      	movs	r3, #0
 80056ba:	4252      	negs	r2, r2
 80056bc:	6062      	str	r2, [r4, #4]
 80056be:	a904      	add	r1, sp, #16
 80056c0:	3254      	adds	r2, #84	; 0x54
 80056c2:	1852      	adds	r2, r2, r1
 80056c4:	1c6e      	adds	r6, r5, #1
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	60e3      	str	r3, [r4, #12]
 80056ca:	60a3      	str	r3, [r4, #8]
 80056cc:	7013      	strb	r3, [r2, #0]
 80056ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80056d0:	7831      	ldrb	r1, [r6, #0]
 80056d2:	2205      	movs	r2, #5
 80056d4:	485e      	ldr	r0, [pc, #376]	; (8005850 <_vfiprintf_r+0x210>)
 80056d6:	f000 fcc5 	bl	8006064 <memchr>
 80056da:	1c75      	adds	r5, r6, #1
 80056dc:	2800      	cmp	r0, #0
 80056de:	d135      	bne.n	800574c <_vfiprintf_r+0x10c>
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	06d3      	lsls	r3, r2, #27
 80056e4:	d504      	bpl.n	80056f0 <_vfiprintf_r+0xb0>
 80056e6:	2353      	movs	r3, #83	; 0x53
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	185b      	adds	r3, r3, r1
 80056ec:	2120      	movs	r1, #32
 80056ee:	7019      	strb	r1, [r3, #0]
 80056f0:	0713      	lsls	r3, r2, #28
 80056f2:	d504      	bpl.n	80056fe <_vfiprintf_r+0xbe>
 80056f4:	2353      	movs	r3, #83	; 0x53
 80056f6:	a904      	add	r1, sp, #16
 80056f8:	185b      	adds	r3, r3, r1
 80056fa:	212b      	movs	r1, #43	; 0x2b
 80056fc:	7019      	strb	r1, [r3, #0]
 80056fe:	7833      	ldrb	r3, [r6, #0]
 8005700:	2b2a      	cmp	r3, #42	; 0x2a
 8005702:	d02c      	beq.n	800575e <_vfiprintf_r+0x11e>
 8005704:	0035      	movs	r5, r6
 8005706:	2100      	movs	r1, #0
 8005708:	200a      	movs	r0, #10
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	782a      	ldrb	r2, [r5, #0]
 800570e:	1c6e      	adds	r6, r5, #1
 8005710:	3a30      	subs	r2, #48	; 0x30
 8005712:	2a09      	cmp	r2, #9
 8005714:	d964      	bls.n	80057e0 <_vfiprintf_r+0x1a0>
 8005716:	2900      	cmp	r1, #0
 8005718:	d02e      	beq.n	8005778 <_vfiprintf_r+0x138>
 800571a:	e026      	b.n	800576a <_vfiprintf_r+0x12a>
 800571c:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <_vfiprintf_r+0x214>)
 800571e:	429f      	cmp	r7, r3
 8005720:	d102      	bne.n	8005728 <_vfiprintf_r+0xe8>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	689f      	ldr	r7, [r3, #8]
 8005726:	e79e      	b.n	8005666 <_vfiprintf_r+0x26>
 8005728:	4b4b      	ldr	r3, [pc, #300]	; (8005858 <_vfiprintf_r+0x218>)
 800572a:	429f      	cmp	r7, r3
 800572c:	d19b      	bne.n	8005666 <_vfiprintf_r+0x26>
 800572e:	9b03      	ldr	r3, [sp, #12]
 8005730:	68df      	ldr	r7, [r3, #12]
 8005732:	e798      	b.n	8005666 <_vfiprintf_r+0x26>
 8005734:	0039      	movs	r1, r7
 8005736:	9803      	ldr	r0, [sp, #12]
 8005738:	f000 fad6 	bl	8005ce8 <__swsetup_r>
 800573c:	2800      	cmp	r0, #0
 800573e:	d098      	beq.n	8005672 <_vfiprintf_r+0x32>
 8005740:	2001      	movs	r0, #1
 8005742:	4240      	negs	r0, r0
 8005744:	b021      	add	sp, #132	; 0x84
 8005746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005748:	3501      	adds	r5, #1
 800574a:	e79b      	b.n	8005684 <_vfiprintf_r+0x44>
 800574c:	4b40      	ldr	r3, [pc, #256]	; (8005850 <_vfiprintf_r+0x210>)
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	1ac0      	subs	r0, r0, r3
 8005752:	2301      	movs	r3, #1
 8005754:	4083      	lsls	r3, r0
 8005756:	4313      	orrs	r3, r2
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	002e      	movs	r6, r5
 800575c:	e7b8      	b.n	80056d0 <_vfiprintf_r+0x90>
 800575e:	9b07      	ldr	r3, [sp, #28]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	9107      	str	r1, [sp, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	db01      	blt.n	800576e <_vfiprintf_r+0x12e>
 800576a:	930b      	str	r3, [sp, #44]	; 0x2c
 800576c:	e004      	b.n	8005778 <_vfiprintf_r+0x138>
 800576e:	425b      	negs	r3, r3
 8005770:	60e3      	str	r3, [r4, #12]
 8005772:	2302      	movs	r3, #2
 8005774:	4313      	orrs	r3, r2
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	782b      	ldrb	r3, [r5, #0]
 800577a:	2b2e      	cmp	r3, #46	; 0x2e
 800577c:	d10a      	bne.n	8005794 <_vfiprintf_r+0x154>
 800577e:	786b      	ldrb	r3, [r5, #1]
 8005780:	2b2a      	cmp	r3, #42	; 0x2a
 8005782:	d135      	bne.n	80057f0 <_vfiprintf_r+0x1b0>
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	3502      	adds	r5, #2
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	9207      	str	r2, [sp, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db2b      	blt.n	80057ea <_vfiprintf_r+0x1aa>
 8005792:	9309      	str	r3, [sp, #36]	; 0x24
 8005794:	4e31      	ldr	r6, [pc, #196]	; (800585c <_vfiprintf_r+0x21c>)
 8005796:	7829      	ldrb	r1, [r5, #0]
 8005798:	2203      	movs	r2, #3
 800579a:	0030      	movs	r0, r6
 800579c:	f000 fc62 	bl	8006064 <memchr>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d006      	beq.n	80057b2 <_vfiprintf_r+0x172>
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	1b80      	subs	r0, r0, r6
 80057a8:	4083      	lsls	r3, r0
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	3501      	adds	r5, #1
 80057ae:	4313      	orrs	r3, r2
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	7829      	ldrb	r1, [r5, #0]
 80057b4:	2206      	movs	r2, #6
 80057b6:	482a      	ldr	r0, [pc, #168]	; (8005860 <_vfiprintf_r+0x220>)
 80057b8:	1c6e      	adds	r6, r5, #1
 80057ba:	7621      	strb	r1, [r4, #24]
 80057bc:	f000 fc52 	bl	8006064 <memchr>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d03a      	beq.n	800583a <_vfiprintf_r+0x1fa>
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <_vfiprintf_r+0x224>)
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d125      	bne.n	8005816 <_vfiprintf_r+0x1d6>
 80057ca:	2207      	movs	r2, #7
 80057cc:	9b07      	ldr	r3, [sp, #28]
 80057ce:	3307      	adds	r3, #7
 80057d0:	4393      	bics	r3, r2
 80057d2:	3308      	adds	r3, #8
 80057d4:	9307      	str	r3, [sp, #28]
 80057d6:	6963      	ldr	r3, [r4, #20]
 80057d8:	9a04      	ldr	r2, [sp, #16]
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	6163      	str	r3, [r4, #20]
 80057de:	e750      	b.n	8005682 <_vfiprintf_r+0x42>
 80057e0:	4343      	muls	r3, r0
 80057e2:	2101      	movs	r1, #1
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	0035      	movs	r5, r6
 80057e8:	e790      	b.n	800570c <_vfiprintf_r+0xcc>
 80057ea:	2301      	movs	r3, #1
 80057ec:	425b      	negs	r3, r3
 80057ee:	e7d0      	b.n	8005792 <_vfiprintf_r+0x152>
 80057f0:	2300      	movs	r3, #0
 80057f2:	200a      	movs	r0, #10
 80057f4:	001a      	movs	r2, r3
 80057f6:	3501      	adds	r5, #1
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	7829      	ldrb	r1, [r5, #0]
 80057fc:	1c6e      	adds	r6, r5, #1
 80057fe:	3930      	subs	r1, #48	; 0x30
 8005800:	2909      	cmp	r1, #9
 8005802:	d903      	bls.n	800580c <_vfiprintf_r+0x1cc>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0c5      	beq.n	8005794 <_vfiprintf_r+0x154>
 8005808:	9209      	str	r2, [sp, #36]	; 0x24
 800580a:	e7c3      	b.n	8005794 <_vfiprintf_r+0x154>
 800580c:	4342      	muls	r2, r0
 800580e:	2301      	movs	r3, #1
 8005810:	1852      	adds	r2, r2, r1
 8005812:	0035      	movs	r5, r6
 8005814:	e7f1      	b.n	80057fa <_vfiprintf_r+0x1ba>
 8005816:	ab07      	add	r3, sp, #28
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	003a      	movs	r2, r7
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <_vfiprintf_r+0x228>)
 800581e:	0021      	movs	r1, r4
 8005820:	9803      	ldr	r0, [sp, #12]
 8005822:	e000      	b.n	8005826 <_vfiprintf_r+0x1e6>
 8005824:	bf00      	nop
 8005826:	9004      	str	r0, [sp, #16]
 8005828:	9b04      	ldr	r3, [sp, #16]
 800582a:	3301      	adds	r3, #1
 800582c:	d1d3      	bne.n	80057d6 <_vfiprintf_r+0x196>
 800582e:	89bb      	ldrh	r3, [r7, #12]
 8005830:	065b      	lsls	r3, r3, #25
 8005832:	d500      	bpl.n	8005836 <_vfiprintf_r+0x1f6>
 8005834:	e784      	b.n	8005740 <_vfiprintf_r+0x100>
 8005836:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005838:	e784      	b.n	8005744 <_vfiprintf_r+0x104>
 800583a:	ab07      	add	r3, sp, #28
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	003a      	movs	r2, r7
 8005840:	4b09      	ldr	r3, [pc, #36]	; (8005868 <_vfiprintf_r+0x228>)
 8005842:	0021      	movs	r1, r4
 8005844:	9803      	ldr	r0, [sp, #12]
 8005846:	f000 f87f 	bl	8005948 <_printf_i>
 800584a:	e7ec      	b.n	8005826 <_vfiprintf_r+0x1e6>
 800584c:	080062b8 	.word	0x080062b8
 8005850:	080062f8 	.word	0x080062f8
 8005854:	080062d8 	.word	0x080062d8
 8005858:	08006298 	.word	0x08006298
 800585c:	080062fe 	.word	0x080062fe
 8005860:	08006302 	.word	0x08006302
 8005864:	00000000 	.word	0x00000000
 8005868:	0800561b 	.word	0x0800561b

0800586c <_printf_common>:
 800586c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800586e:	0015      	movs	r5, r2
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	688a      	ldr	r2, [r1, #8]
 8005874:	690b      	ldr	r3, [r1, #16]
 8005876:	9000      	str	r0, [sp, #0]
 8005878:	000c      	movs	r4, r1
 800587a:	4293      	cmp	r3, r2
 800587c:	da00      	bge.n	8005880 <_printf_common+0x14>
 800587e:	0013      	movs	r3, r2
 8005880:	0022      	movs	r2, r4
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	3243      	adds	r2, #67	; 0x43
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	2a00      	cmp	r2, #0
 800588a:	d001      	beq.n	8005890 <_printf_common+0x24>
 800588c:	3301      	adds	r3, #1
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	069b      	lsls	r3, r3, #26
 8005894:	d502      	bpl.n	800589c <_printf_common+0x30>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	3302      	adds	r3, #2
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	2706      	movs	r7, #6
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	401f      	ands	r7, r3
 80058a2:	d027      	beq.n	80058f4 <_printf_common+0x88>
 80058a4:	0023      	movs	r3, r4
 80058a6:	3343      	adds	r3, #67	; 0x43
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	4193      	sbcs	r3, r2
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	0692      	lsls	r2, r2, #26
 80058b2:	d430      	bmi.n	8005916 <_printf_common+0xaa>
 80058b4:	0022      	movs	r2, r4
 80058b6:	9901      	ldr	r1, [sp, #4]
 80058b8:	3243      	adds	r2, #67	; 0x43
 80058ba:	9800      	ldr	r0, [sp, #0]
 80058bc:	9e08      	ldr	r6, [sp, #32]
 80058be:	47b0      	blx	r6
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d025      	beq.n	8005910 <_printf_common+0xa4>
 80058c4:	2306      	movs	r3, #6
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	682a      	ldr	r2, [r5, #0]
 80058ca:	68e1      	ldr	r1, [r4, #12]
 80058cc:	4003      	ands	r3, r0
 80058ce:	2500      	movs	r5, #0
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d103      	bne.n	80058dc <_printf_common+0x70>
 80058d4:	1a8d      	subs	r5, r1, r2
 80058d6:	43eb      	mvns	r3, r5
 80058d8:	17db      	asrs	r3, r3, #31
 80058da:	401d      	ands	r5, r3
 80058dc:	68a3      	ldr	r3, [r4, #8]
 80058de:	6922      	ldr	r2, [r4, #16]
 80058e0:	4293      	cmp	r3, r2
 80058e2:	dd01      	ble.n	80058e8 <_printf_common+0x7c>
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	18ed      	adds	r5, r5, r3
 80058e8:	2700      	movs	r7, #0
 80058ea:	42bd      	cmp	r5, r7
 80058ec:	d120      	bne.n	8005930 <_printf_common+0xc4>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e010      	b.n	8005914 <_printf_common+0xa8>
 80058f2:	3701      	adds	r7, #1
 80058f4:	68e3      	ldr	r3, [r4, #12]
 80058f6:	682a      	ldr	r2, [r5, #0]
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	42bb      	cmp	r3, r7
 80058fc:	ddd2      	ble.n	80058a4 <_printf_common+0x38>
 80058fe:	0022      	movs	r2, r4
 8005900:	2301      	movs	r3, #1
 8005902:	3219      	adds	r2, #25
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	9800      	ldr	r0, [sp, #0]
 8005908:	9e08      	ldr	r6, [sp, #32]
 800590a:	47b0      	blx	r6
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d1f0      	bne.n	80058f2 <_printf_common+0x86>
 8005910:	2001      	movs	r0, #1
 8005912:	4240      	negs	r0, r0
 8005914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005916:	2030      	movs	r0, #48	; 0x30
 8005918:	18e1      	adds	r1, r4, r3
 800591a:	3143      	adds	r1, #67	; 0x43
 800591c:	7008      	strb	r0, [r1, #0]
 800591e:	0021      	movs	r1, r4
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	3145      	adds	r1, #69	; 0x45
 8005924:	7809      	ldrb	r1, [r1, #0]
 8005926:	18a2      	adds	r2, r4, r2
 8005928:	3243      	adds	r2, #67	; 0x43
 800592a:	3302      	adds	r3, #2
 800592c:	7011      	strb	r1, [r2, #0]
 800592e:	e7c1      	b.n	80058b4 <_printf_common+0x48>
 8005930:	0022      	movs	r2, r4
 8005932:	2301      	movs	r3, #1
 8005934:	321a      	adds	r2, #26
 8005936:	9901      	ldr	r1, [sp, #4]
 8005938:	9800      	ldr	r0, [sp, #0]
 800593a:	9e08      	ldr	r6, [sp, #32]
 800593c:	47b0      	blx	r6
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d0e6      	beq.n	8005910 <_printf_common+0xa4>
 8005942:	3701      	adds	r7, #1
 8005944:	e7d1      	b.n	80058ea <_printf_common+0x7e>
	...

08005948 <_printf_i>:
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	9204      	str	r2, [sp, #16]
 800594e:	000a      	movs	r2, r1
 8005950:	3243      	adds	r2, #67	; 0x43
 8005952:	9305      	str	r3, [sp, #20]
 8005954:	9003      	str	r0, [sp, #12]
 8005956:	9202      	str	r2, [sp, #8]
 8005958:	7e0a      	ldrb	r2, [r1, #24]
 800595a:	000c      	movs	r4, r1
 800595c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800595e:	2a6e      	cmp	r2, #110	; 0x6e
 8005960:	d100      	bne.n	8005964 <_printf_i+0x1c>
 8005962:	e086      	b.n	8005a72 <_printf_i+0x12a>
 8005964:	d81f      	bhi.n	80059a6 <_printf_i+0x5e>
 8005966:	2a63      	cmp	r2, #99	; 0x63
 8005968:	d033      	beq.n	80059d2 <_printf_i+0x8a>
 800596a:	d808      	bhi.n	800597e <_printf_i+0x36>
 800596c:	2a00      	cmp	r2, #0
 800596e:	d100      	bne.n	8005972 <_printf_i+0x2a>
 8005970:	e08c      	b.n	8005a8c <_printf_i+0x144>
 8005972:	2a58      	cmp	r2, #88	; 0x58
 8005974:	d04d      	beq.n	8005a12 <_printf_i+0xca>
 8005976:	0025      	movs	r5, r4
 8005978:	3542      	adds	r5, #66	; 0x42
 800597a:	702a      	strb	r2, [r5, #0]
 800597c:	e030      	b.n	80059e0 <_printf_i+0x98>
 800597e:	2a64      	cmp	r2, #100	; 0x64
 8005980:	d001      	beq.n	8005986 <_printf_i+0x3e>
 8005982:	2a69      	cmp	r2, #105	; 0x69
 8005984:	d1f7      	bne.n	8005976 <_printf_i+0x2e>
 8005986:	6819      	ldr	r1, [r3, #0]
 8005988:	6825      	ldr	r5, [r4, #0]
 800598a:	1d0a      	adds	r2, r1, #4
 800598c:	0628      	lsls	r0, r5, #24
 800598e:	d529      	bpl.n	80059e4 <_printf_i+0x9c>
 8005990:	6808      	ldr	r0, [r1, #0]
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	2800      	cmp	r0, #0
 8005996:	da03      	bge.n	80059a0 <_printf_i+0x58>
 8005998:	232d      	movs	r3, #45	; 0x2d
 800599a:	9a02      	ldr	r2, [sp, #8]
 800599c:	4240      	negs	r0, r0
 800599e:	7013      	strb	r3, [r2, #0]
 80059a0:	4e6b      	ldr	r6, [pc, #428]	; (8005b50 <_printf_i+0x208>)
 80059a2:	270a      	movs	r7, #10
 80059a4:	e04f      	b.n	8005a46 <_printf_i+0xfe>
 80059a6:	2a73      	cmp	r2, #115	; 0x73
 80059a8:	d074      	beq.n	8005a94 <_printf_i+0x14c>
 80059aa:	d808      	bhi.n	80059be <_printf_i+0x76>
 80059ac:	2a6f      	cmp	r2, #111	; 0x6f
 80059ae:	d01f      	beq.n	80059f0 <_printf_i+0xa8>
 80059b0:	2a70      	cmp	r2, #112	; 0x70
 80059b2:	d1e0      	bne.n	8005976 <_printf_i+0x2e>
 80059b4:	2220      	movs	r2, #32
 80059b6:	6809      	ldr	r1, [r1, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	6022      	str	r2, [r4, #0]
 80059bc:	e003      	b.n	80059c6 <_printf_i+0x7e>
 80059be:	2a75      	cmp	r2, #117	; 0x75
 80059c0:	d016      	beq.n	80059f0 <_printf_i+0xa8>
 80059c2:	2a78      	cmp	r2, #120	; 0x78
 80059c4:	d1d7      	bne.n	8005976 <_printf_i+0x2e>
 80059c6:	0022      	movs	r2, r4
 80059c8:	2178      	movs	r1, #120	; 0x78
 80059ca:	3245      	adds	r2, #69	; 0x45
 80059cc:	7011      	strb	r1, [r2, #0]
 80059ce:	4e61      	ldr	r6, [pc, #388]	; (8005b54 <_printf_i+0x20c>)
 80059d0:	e022      	b.n	8005a18 <_printf_i+0xd0>
 80059d2:	0025      	movs	r5, r4
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	3542      	adds	r5, #66	; 0x42
 80059d8:	1d11      	adds	r1, r2, #4
 80059da:	6019      	str	r1, [r3, #0]
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	702b      	strb	r3, [r5, #0]
 80059e0:	2301      	movs	r3, #1
 80059e2:	e065      	b.n	8005ab0 <_printf_i+0x168>
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	0669      	lsls	r1, r5, #25
 80059ea:	d5d3      	bpl.n	8005994 <_printf_i+0x4c>
 80059ec:	b200      	sxth	r0, r0
 80059ee:	e7d1      	b.n	8005994 <_printf_i+0x4c>
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	6825      	ldr	r5, [r4, #0]
 80059f4:	1d08      	adds	r0, r1, #4
 80059f6:	6018      	str	r0, [r3, #0]
 80059f8:	6808      	ldr	r0, [r1, #0]
 80059fa:	062e      	lsls	r6, r5, #24
 80059fc:	d505      	bpl.n	8005a0a <_printf_i+0xc2>
 80059fe:	4e54      	ldr	r6, [pc, #336]	; (8005b50 <_printf_i+0x208>)
 8005a00:	2708      	movs	r7, #8
 8005a02:	2a6f      	cmp	r2, #111	; 0x6f
 8005a04:	d01b      	beq.n	8005a3e <_printf_i+0xf6>
 8005a06:	270a      	movs	r7, #10
 8005a08:	e019      	b.n	8005a3e <_printf_i+0xf6>
 8005a0a:	066d      	lsls	r5, r5, #25
 8005a0c:	d5f7      	bpl.n	80059fe <_printf_i+0xb6>
 8005a0e:	b280      	uxth	r0, r0
 8005a10:	e7f5      	b.n	80059fe <_printf_i+0xb6>
 8005a12:	3145      	adds	r1, #69	; 0x45
 8005a14:	4e4e      	ldr	r6, [pc, #312]	; (8005b50 <_printf_i+0x208>)
 8005a16:	700a      	strb	r2, [r1, #0]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	1d01      	adds	r1, r0, #4
 8005a1e:	6800      	ldr	r0, [r0, #0]
 8005a20:	6019      	str	r1, [r3, #0]
 8005a22:	0615      	lsls	r5, r2, #24
 8005a24:	d521      	bpl.n	8005a6a <_printf_i+0x122>
 8005a26:	07d3      	lsls	r3, r2, #31
 8005a28:	d502      	bpl.n	8005a30 <_printf_i+0xe8>
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	6022      	str	r2, [r4, #0]
 8005a30:	2710      	movs	r7, #16
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d103      	bne.n	8005a3e <_printf_i+0xf6>
 8005a36:	2320      	movs	r3, #32
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	439a      	bics	r2, r3
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	0023      	movs	r3, r4
 8005a40:	2200      	movs	r2, #0
 8005a42:	3343      	adds	r3, #67	; 0x43
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	60a3      	str	r3, [r4, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	db58      	blt.n	8005b00 <_printf_i+0x1b8>
 8005a4e:	2204      	movs	r2, #4
 8005a50:	6821      	ldr	r1, [r4, #0]
 8005a52:	4391      	bics	r1, r2
 8005a54:	6021      	str	r1, [r4, #0]
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d154      	bne.n	8005b04 <_printf_i+0x1bc>
 8005a5a:	9d02      	ldr	r5, [sp, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d05a      	beq.n	8005b16 <_printf_i+0x1ce>
 8005a60:	0025      	movs	r5, r4
 8005a62:	7833      	ldrb	r3, [r6, #0]
 8005a64:	3542      	adds	r5, #66	; 0x42
 8005a66:	702b      	strb	r3, [r5, #0]
 8005a68:	e055      	b.n	8005b16 <_printf_i+0x1ce>
 8005a6a:	0655      	lsls	r5, r2, #25
 8005a6c:	d5db      	bpl.n	8005a26 <_printf_i+0xde>
 8005a6e:	b280      	uxth	r0, r0
 8005a70:	e7d9      	b.n	8005a26 <_printf_i+0xde>
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	680d      	ldr	r5, [r1, #0]
 8005a76:	1d10      	adds	r0, r2, #4
 8005a78:	6949      	ldr	r1, [r1, #20]
 8005a7a:	6018      	str	r0, [r3, #0]
 8005a7c:	6813      	ldr	r3, [r2, #0]
 8005a7e:	062e      	lsls	r6, r5, #24
 8005a80:	d501      	bpl.n	8005a86 <_printf_i+0x13e>
 8005a82:	6019      	str	r1, [r3, #0]
 8005a84:	e002      	b.n	8005a8c <_printf_i+0x144>
 8005a86:	066d      	lsls	r5, r5, #25
 8005a88:	d5fb      	bpl.n	8005a82 <_printf_i+0x13a>
 8005a8a:	8019      	strh	r1, [r3, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9d02      	ldr	r5, [sp, #8]
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	e04f      	b.n	8005b34 <_printf_i+0x1ec>
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	1d11      	adds	r1, r2, #4
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	6815      	ldr	r5, [r2, #0]
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	0028      	movs	r0, r5
 8005aa2:	f000 fadf 	bl	8006064 <memchr>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d001      	beq.n	8005aae <_printf_i+0x166>
 8005aaa:	1b40      	subs	r0, r0, r5
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9a02      	ldr	r2, [sp, #8]
 8005ab6:	7013      	strb	r3, [r2, #0]
 8005ab8:	e03c      	b.n	8005b34 <_printf_i+0x1ec>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	002a      	movs	r2, r5
 8005abe:	9904      	ldr	r1, [sp, #16]
 8005ac0:	9803      	ldr	r0, [sp, #12]
 8005ac2:	9d05      	ldr	r5, [sp, #20]
 8005ac4:	47a8      	blx	r5
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	d03e      	beq.n	8005b48 <_printf_i+0x200>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	079b      	lsls	r3, r3, #30
 8005ace:	d415      	bmi.n	8005afc <_printf_i+0x1b4>
 8005ad0:	9b07      	ldr	r3, [sp, #28]
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	4298      	cmp	r0, r3
 8005ad6:	da39      	bge.n	8005b4c <_printf_i+0x204>
 8005ad8:	0018      	movs	r0, r3
 8005ada:	e037      	b.n	8005b4c <_printf_i+0x204>
 8005adc:	0022      	movs	r2, r4
 8005ade:	2301      	movs	r3, #1
 8005ae0:	3219      	adds	r2, #25
 8005ae2:	9904      	ldr	r1, [sp, #16]
 8005ae4:	9803      	ldr	r0, [sp, #12]
 8005ae6:	9e05      	ldr	r6, [sp, #20]
 8005ae8:	47b0      	blx	r6
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d02c      	beq.n	8005b48 <_printf_i+0x200>
 8005aee:	3501      	adds	r5, #1
 8005af0:	68e3      	ldr	r3, [r4, #12]
 8005af2:	9a07      	ldr	r2, [sp, #28]
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	42ab      	cmp	r3, r5
 8005af8:	dcf0      	bgt.n	8005adc <_printf_i+0x194>
 8005afa:	e7e9      	b.n	8005ad0 <_printf_i+0x188>
 8005afc:	2500      	movs	r5, #0
 8005afe:	e7f7      	b.n	8005af0 <_printf_i+0x1a8>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0ad      	beq.n	8005a60 <_printf_i+0x118>
 8005b04:	9d02      	ldr	r5, [sp, #8]
 8005b06:	0039      	movs	r1, r7
 8005b08:	f7fa fb84 	bl	8000214 <__aeabi_uidivmod>
 8005b0c:	5c73      	ldrb	r3, [r6, r1]
 8005b0e:	3d01      	subs	r5, #1
 8005b10:	702b      	strb	r3, [r5, #0]
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1f7      	bne.n	8005b06 <_printf_i+0x1be>
 8005b16:	2f08      	cmp	r7, #8
 8005b18:	d109      	bne.n	8005b2e <_printf_i+0x1e6>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	07db      	lsls	r3, r3, #31
 8005b1e:	d506      	bpl.n	8005b2e <_printf_i+0x1e6>
 8005b20:	6863      	ldr	r3, [r4, #4]
 8005b22:	6922      	ldr	r2, [r4, #16]
 8005b24:	4293      	cmp	r3, r2
 8005b26:	dc02      	bgt.n	8005b2e <_printf_i+0x1e6>
 8005b28:	2330      	movs	r3, #48	; 0x30
 8005b2a:	3d01      	subs	r5, #1
 8005b2c:	702b      	strb	r3, [r5, #0]
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	1b5b      	subs	r3, r3, r5
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	9b05      	ldr	r3, [sp, #20]
 8005b36:	aa07      	add	r2, sp, #28
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	0021      	movs	r1, r4
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	9803      	ldr	r0, [sp, #12]
 8005b40:	f7ff fe94 	bl	800586c <_printf_common>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d1b8      	bne.n	8005aba <_printf_i+0x172>
 8005b48:	2001      	movs	r0, #1
 8005b4a:	4240      	negs	r0, r0
 8005b4c:	b009      	add	sp, #36	; 0x24
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	08006309 	.word	0x08006309
 8005b54:	0800631a 	.word	0x0800631a

08005b58 <_sbrk_r>:
 8005b58:	2300      	movs	r3, #0
 8005b5a:	b570      	push	{r4, r5, r6, lr}
 8005b5c:	4c06      	ldr	r4, [pc, #24]	; (8005b78 <_sbrk_r+0x20>)
 8005b5e:	0005      	movs	r5, r0
 8005b60:	0008      	movs	r0, r1
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	f7fb f9f2 	bl	8000f4c <_sbrk>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d103      	bne.n	8005b74 <_sbrk_r+0x1c>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d000      	beq.n	8005b74 <_sbrk_r+0x1c>
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	2000115c 	.word	0x2000115c

08005b7c <__sread>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	000c      	movs	r4, r1
 8005b80:	250e      	movs	r5, #14
 8005b82:	5f49      	ldrsh	r1, [r1, r5]
 8005b84:	f000 fac6 	bl	8006114 <_read_r>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	db03      	blt.n	8005b94 <__sread+0x18>
 8005b8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b8e:	181b      	adds	r3, r3, r0
 8005b90:	6563      	str	r3, [r4, #84]	; 0x54
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	4a02      	ldr	r2, [pc, #8]	; (8005ba0 <__sread+0x24>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	e7f9      	b.n	8005b92 <__sread+0x16>
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	ffffefff 	.word	0xffffefff

08005ba4 <__swrite>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	001f      	movs	r7, r3
 8005ba8:	898b      	ldrh	r3, [r1, #12]
 8005baa:	0005      	movs	r5, r0
 8005bac:	000c      	movs	r4, r1
 8005bae:	0016      	movs	r6, r2
 8005bb0:	05db      	lsls	r3, r3, #23
 8005bb2:	d505      	bpl.n	8005bc0 <__swrite+0x1c>
 8005bb4:	230e      	movs	r3, #14
 8005bb6:	5ec9      	ldrsh	r1, [r1, r3]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2302      	movs	r3, #2
 8005bbc:	f000 f9d2 	bl	8005f64 <_lseek_r>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	4a05      	ldr	r2, [pc, #20]	; (8005bd8 <__swrite+0x34>)
 8005bc4:	0028      	movs	r0, r5
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	0032      	movs	r2, r6
 8005bcc:	230e      	movs	r3, #14
 8005bce:	5ee1      	ldrsh	r1, [r4, r3]
 8005bd0:	003b      	movs	r3, r7
 8005bd2:	f000 f875 	bl	8005cc0 <_write_r>
 8005bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd8:	ffffefff 	.word	0xffffefff

08005bdc <__sseek>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	000c      	movs	r4, r1
 8005be0:	250e      	movs	r5, #14
 8005be2:	5f49      	ldrsh	r1, [r1, r5]
 8005be4:	f000 f9be 	bl	8005f64 <_lseek_r>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	1c42      	adds	r2, r0, #1
 8005bec:	d103      	bne.n	8005bf6 <__sseek+0x1a>
 8005bee:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <__sseek+0x28>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	0152      	lsls	r2, r2, #5
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8005c00:	e7f8      	b.n	8005bf4 <__sseek+0x18>
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	ffffefff 	.word	0xffffefff

08005c08 <__sclose>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	230e      	movs	r3, #14
 8005c0c:	5ec9      	ldrsh	r1, [r1, r3]
 8005c0e:	f000 f8e1 	bl	8005dd4 <_close_r>
 8005c12:	bd10      	pop	{r4, pc}

08005c14 <__swbuf_r>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	0005      	movs	r5, r0
 8005c18:	000e      	movs	r6, r1
 8005c1a:	0014      	movs	r4, r2
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d004      	beq.n	8005c2a <__swbuf_r+0x16>
 8005c20:	6983      	ldr	r3, [r0, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <__swbuf_r+0x16>
 8005c26:	f7ff fbf1 	bl	800540c <__sinit>
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <__swbuf_r+0xa0>)
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	d12d      	bne.n	8005c8c <__swbuf_r+0x78>
 8005c30:	686c      	ldr	r4, [r5, #4]
 8005c32:	69a3      	ldr	r3, [r4, #24]
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	071b      	lsls	r3, r3, #28
 8005c3a:	d531      	bpl.n	8005ca0 <__swbuf_r+0x8c>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02e      	beq.n	8005ca0 <__swbuf_r+0x8c>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	6922      	ldr	r2, [r4, #16]
 8005c46:	b2f7      	uxtb	r7, r6
 8005c48:	1a98      	subs	r0, r3, r2
 8005c4a:	6963      	ldr	r3, [r4, #20]
 8005c4c:	b2f6      	uxtb	r6, r6
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	dc05      	bgt.n	8005c5e <__swbuf_r+0x4a>
 8005c52:	0021      	movs	r1, r4
 8005c54:	0028      	movs	r0, r5
 8005c56:	f000 f959 	bl	8005f0c <_fflush_r>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d126      	bne.n	8005cac <__swbuf_r+0x98>
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	3001      	adds	r0, #1
 8005c62:	3b01      	subs	r3, #1
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	701f      	strb	r7, [r3, #0]
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	4283      	cmp	r3, r0
 8005c72:	d004      	beq.n	8005c7e <__swbuf_r+0x6a>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	07db      	lsls	r3, r3, #31
 8005c78:	d51a      	bpl.n	8005cb0 <__swbuf_r+0x9c>
 8005c7a:	2e0a      	cmp	r6, #10
 8005c7c:	d118      	bne.n	8005cb0 <__swbuf_r+0x9c>
 8005c7e:	0021      	movs	r1, r4
 8005c80:	0028      	movs	r0, r5
 8005c82:	f000 f943 	bl	8005f0c <_fflush_r>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d012      	beq.n	8005cb0 <__swbuf_r+0x9c>
 8005c8a:	e00f      	b.n	8005cac <__swbuf_r+0x98>
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <__swbuf_r+0xa4>)
 8005c8e:	429c      	cmp	r4, r3
 8005c90:	d101      	bne.n	8005c96 <__swbuf_r+0x82>
 8005c92:	68ac      	ldr	r4, [r5, #8]
 8005c94:	e7cd      	b.n	8005c32 <__swbuf_r+0x1e>
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <__swbuf_r+0xa8>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d1ca      	bne.n	8005c32 <__swbuf_r+0x1e>
 8005c9c:	68ec      	ldr	r4, [r5, #12]
 8005c9e:	e7c8      	b.n	8005c32 <__swbuf_r+0x1e>
 8005ca0:	0021      	movs	r1, r4
 8005ca2:	0028      	movs	r0, r5
 8005ca4:	f000 f820 	bl	8005ce8 <__swsetup_r>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d0ca      	beq.n	8005c42 <__swbuf_r+0x2e>
 8005cac:	2601      	movs	r6, #1
 8005cae:	4276      	negs	r6, r6
 8005cb0:	0030      	movs	r0, r6
 8005cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb4:	080062b8 	.word	0x080062b8
 8005cb8:	080062d8 	.word	0x080062d8
 8005cbc:	08006298 	.word	0x08006298

08005cc0 <_write_r>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	0005      	movs	r5, r0
 8005cc4:	0008      	movs	r0, r1
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4c06      	ldr	r4, [pc, #24]	; (8005ce4 <_write_r+0x24>)
 8005ccc:	6022      	str	r2, [r4, #0]
 8005cce:	001a      	movs	r2, r3
 8005cd0:	f7fa fd20 	bl	8000714 <_write>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d103      	bne.n	8005ce0 <_write_r+0x20>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d000      	beq.n	8005ce0 <_write_r+0x20>
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	2000115c 	.word	0x2000115c

08005ce8 <__swsetup_r>:
 8005ce8:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <__swsetup_r+0xdc>)
 8005cea:	b570      	push	{r4, r5, r6, lr}
 8005cec:	681d      	ldr	r5, [r3, #0]
 8005cee:	0006      	movs	r6, r0
 8005cf0:	000c      	movs	r4, r1
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	d005      	beq.n	8005d02 <__swsetup_r+0x1a>
 8005cf6:	69ab      	ldr	r3, [r5, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <__swsetup_r+0x1a>
 8005cfc:	0028      	movs	r0, r5
 8005cfe:	f7ff fb85 	bl	800540c <__sinit>
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <__swsetup_r+0xe0>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	d10f      	bne.n	8005d28 <__swsetup_r+0x40>
 8005d08:	686c      	ldr	r4, [r5, #4]
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	5ee2      	ldrsh	r2, [r4, r3]
 8005d0e:	b293      	uxth	r3, r2
 8005d10:	0719      	lsls	r1, r3, #28
 8005d12:	d42d      	bmi.n	8005d70 <__swsetup_r+0x88>
 8005d14:	06d9      	lsls	r1, r3, #27
 8005d16:	d411      	bmi.n	8005d3c <__swsetup_r+0x54>
 8005d18:	2309      	movs	r3, #9
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	6033      	str	r3, [r6, #0]
 8005d1e:	3337      	adds	r3, #55	; 0x37
 8005d20:	4313      	orrs	r3, r2
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	4240      	negs	r0, r0
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <__swsetup_r+0xe4>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d101      	bne.n	8005d32 <__swsetup_r+0x4a>
 8005d2e:	68ac      	ldr	r4, [r5, #8]
 8005d30:	e7eb      	b.n	8005d0a <__swsetup_r+0x22>
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <__swsetup_r+0xe8>)
 8005d34:	429c      	cmp	r4, r3
 8005d36:	d1e8      	bne.n	8005d0a <__swsetup_r+0x22>
 8005d38:	68ec      	ldr	r4, [r5, #12]
 8005d3a:	e7e6      	b.n	8005d0a <__swsetup_r+0x22>
 8005d3c:	075b      	lsls	r3, r3, #29
 8005d3e:	d513      	bpl.n	8005d68 <__swsetup_r+0x80>
 8005d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d42:	2900      	cmp	r1, #0
 8005d44:	d008      	beq.n	8005d58 <__swsetup_r+0x70>
 8005d46:	0023      	movs	r3, r4
 8005d48:	3344      	adds	r3, #68	; 0x44
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	d002      	beq.n	8005d54 <__swsetup_r+0x6c>
 8005d4e:	0030      	movs	r0, r6
 8005d50:	f000 f996 	bl	8006080 <_free_r>
 8005d54:	2300      	movs	r3, #0
 8005d56:	6363      	str	r3, [r4, #52]	; 0x34
 8005d58:	2224      	movs	r2, #36	; 0x24
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	4393      	bics	r3, r2
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	2300      	movs	r3, #0
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	2308      	movs	r3, #8
 8005d6a:	89a2      	ldrh	r2, [r4, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <__swsetup_r+0xa6>
 8005d76:	21a0      	movs	r1, #160	; 0xa0
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	0089      	lsls	r1, r1, #2
 8005d7e:	0092      	lsls	r2, r2, #2
 8005d80:	400b      	ands	r3, r1
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <__swsetup_r+0xa6>
 8005d86:	0021      	movs	r1, r4
 8005d88:	0030      	movs	r0, r6
 8005d8a:	f000 f927 	bl	8005fdc <__smakebuf_r>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	89a2      	ldrh	r2, [r4, #12]
 8005d92:	4013      	ands	r3, r2
 8005d94:	d011      	beq.n	8005dba <__swsetup_r+0xd2>
 8005d96:	2300      	movs	r3, #0
 8005d98:	60a3      	str	r3, [r4, #8]
 8005d9a:	6963      	ldr	r3, [r4, #20]
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	61a3      	str	r3, [r4, #24]
 8005da0:	2000      	movs	r0, #0
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	4283      	cmp	r3, r0
 8005da6:	d1be      	bne.n	8005d26 <__swsetup_r+0x3e>
 8005da8:	230c      	movs	r3, #12
 8005daa:	5ee2      	ldrsh	r2, [r4, r3]
 8005dac:	0613      	lsls	r3, r2, #24
 8005dae:	d5ba      	bpl.n	8005d26 <__swsetup_r+0x3e>
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	4313      	orrs	r3, r2
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	3801      	subs	r0, #1
 8005db8:	e7b5      	b.n	8005d26 <__swsetup_r+0x3e>
 8005dba:	0792      	lsls	r2, r2, #30
 8005dbc:	d400      	bmi.n	8005dc0 <__swsetup_r+0xd8>
 8005dbe:	6963      	ldr	r3, [r4, #20]
 8005dc0:	60a3      	str	r3, [r4, #8]
 8005dc2:	e7ed      	b.n	8005da0 <__swsetup_r+0xb8>
 8005dc4:	20000018 	.word	0x20000018
 8005dc8:	080062b8 	.word	0x080062b8
 8005dcc:	080062d8 	.word	0x080062d8
 8005dd0:	08006298 	.word	0x08006298

08005dd4 <_close_r>:
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	b570      	push	{r4, r5, r6, lr}
 8005dd8:	4c06      	ldr	r4, [pc, #24]	; (8005df4 <_close_r+0x20>)
 8005dda:	0005      	movs	r5, r0
 8005ddc:	0008      	movs	r0, r1
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	f7fb f887 	bl	8000ef2 <_close>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d103      	bne.n	8005df0 <_close_r+0x1c>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d000      	beq.n	8005df0 <_close_r+0x1c>
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	2000115c 	.word	0x2000115c

08005df8 <__sflush_r>:
 8005df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfa:	898a      	ldrh	r2, [r1, #12]
 8005dfc:	0005      	movs	r5, r0
 8005dfe:	000c      	movs	r4, r1
 8005e00:	0713      	lsls	r3, r2, #28
 8005e02:	d460      	bmi.n	8005ec6 <__sflush_r+0xce>
 8005e04:	684b      	ldr	r3, [r1, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dc04      	bgt.n	8005e14 <__sflush_r+0x1c>
 8005e0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dc01      	bgt.n	8005e14 <__sflush_r+0x1c>
 8005e10:	2000      	movs	r0, #0
 8005e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	d0fa      	beq.n	8005e10 <__sflush_r+0x18>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	682e      	ldr	r6, [r5, #0]
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	015b      	lsls	r3, r3, #5
 8005e24:	6a21      	ldr	r1, [r4, #32]
 8005e26:	401a      	ands	r2, r3
 8005e28:	d034      	beq.n	8005e94 <__sflush_r+0x9c>
 8005e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	075b      	lsls	r3, r3, #29
 8005e30:	d506      	bpl.n	8005e40 <__sflush_r+0x48>
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	1ac0      	subs	r0, r0, r3
 8005e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <__sflush_r+0x48>
 8005e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e3e:	1ac0      	subs	r0, r0, r3
 8005e40:	0002      	movs	r2, r0
 8005e42:	6a21      	ldr	r1, [r4, #32]
 8005e44:	2300      	movs	r3, #0
 8005e46:	0028      	movs	r0, r5
 8005e48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e4a:	47b8      	blx	r7
 8005e4c:	89a1      	ldrh	r1, [r4, #12]
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d106      	bne.n	8005e60 <__sflush_r+0x68>
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	2b1d      	cmp	r3, #29
 8005e56:	d830      	bhi.n	8005eba <__sflush_r+0xc2>
 8005e58:	4a2b      	ldr	r2, [pc, #172]	; (8005f08 <__sflush_r+0x110>)
 8005e5a:	40da      	lsrs	r2, r3
 8005e5c:	07d3      	lsls	r3, r2, #31
 8005e5e:	d52c      	bpl.n	8005eba <__sflush_r+0xc2>
 8005e60:	2300      	movs	r3, #0
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	04cb      	lsls	r3, r1, #19
 8005e6a:	d505      	bpl.n	8005e78 <__sflush_r+0x80>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <__sflush_r+0x7e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d100      	bne.n	8005e78 <__sflush_r+0x80>
 8005e76:	6560      	str	r0, [r4, #84]	; 0x54
 8005e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7a:	602e      	str	r6, [r5, #0]
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d0c7      	beq.n	8005e10 <__sflush_r+0x18>
 8005e80:	0023      	movs	r3, r4
 8005e82:	3344      	adds	r3, #68	; 0x44
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d002      	beq.n	8005e8e <__sflush_r+0x96>
 8005e88:	0028      	movs	r0, r5
 8005e8a:	f000 f8f9 	bl	8006080 <_free_r>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	6360      	str	r0, [r4, #52]	; 0x34
 8005e92:	e7be      	b.n	8005e12 <__sflush_r+0x1a>
 8005e94:	2301      	movs	r3, #1
 8005e96:	0028      	movs	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	d1c6      	bne.n	8005e2c <__sflush_r+0x34>
 8005e9e:	682b      	ldr	r3, [r5, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0c3      	beq.n	8005e2c <__sflush_r+0x34>
 8005ea4:	2b1d      	cmp	r3, #29
 8005ea6:	d001      	beq.n	8005eac <__sflush_r+0xb4>
 8005ea8:	2b16      	cmp	r3, #22
 8005eaa:	d101      	bne.n	8005eb0 <__sflush_r+0xb8>
 8005eac:	602e      	str	r6, [r5, #0]
 8005eae:	e7af      	b.n	8005e10 <__sflush_r+0x18>
 8005eb0:	2340      	movs	r3, #64	; 0x40
 8005eb2:	89a2      	ldrh	r2, [r4, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	e7ab      	b.n	8005e12 <__sflush_r+0x1a>
 8005eba:	2340      	movs	r3, #64	; 0x40
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	4240      	negs	r0, r0
 8005ec4:	e7a5      	b.n	8005e12 <__sflush_r+0x1a>
 8005ec6:	690f      	ldr	r7, [r1, #16]
 8005ec8:	2f00      	cmp	r7, #0
 8005eca:	d0a1      	beq.n	8005e10 <__sflush_r+0x18>
 8005ecc:	680b      	ldr	r3, [r1, #0]
 8005ece:	600f      	str	r7, [r1, #0]
 8005ed0:	1bdb      	subs	r3, r3, r7
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	0792      	lsls	r2, r2, #30
 8005ed8:	d100      	bne.n	8005edc <__sflush_r+0xe4>
 8005eda:	694b      	ldr	r3, [r1, #20]
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	dc00      	bgt.n	8005ee6 <__sflush_r+0xee>
 8005ee4:	e794      	b.n	8005e10 <__sflush_r+0x18>
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	003a      	movs	r2, r7
 8005eea:	6a21      	ldr	r1, [r4, #32]
 8005eec:	0028      	movs	r0, r5
 8005eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef0:	47b0      	blx	r6
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	dc03      	bgt.n	8005efe <__sflush_r+0x106>
 8005ef6:	2340      	movs	r3, #64	; 0x40
 8005ef8:	89a2      	ldrh	r2, [r4, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	e7df      	b.n	8005ebe <__sflush_r+0xc6>
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	183f      	adds	r7, r7, r0
 8005f02:	1a1b      	subs	r3, r3, r0
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	e7ea      	b.n	8005ede <__sflush_r+0xe6>
 8005f08:	20400001 	.word	0x20400001

08005f0c <_fflush_r>:
 8005f0c:	690b      	ldr	r3, [r1, #16]
 8005f0e:	b570      	push	{r4, r5, r6, lr}
 8005f10:	0005      	movs	r5, r0
 8005f12:	000c      	movs	r4, r1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <_fflush_r+0x10>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d004      	beq.n	8005f2a <_fflush_r+0x1e>
 8005f20:	6983      	ldr	r3, [r0, #24]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <_fflush_r+0x1e>
 8005f26:	f7ff fa71 	bl	800540c <__sinit>
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <_fflush_r+0x4c>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	d109      	bne.n	8005f44 <_fflush_r+0x38>
 8005f30:	686c      	ldr	r4, [r5, #4]
 8005f32:	220c      	movs	r2, #12
 8005f34:	5ea3      	ldrsh	r3, [r4, r2]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0ee      	beq.n	8005f18 <_fflush_r+0xc>
 8005f3a:	0021      	movs	r1, r4
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	f7ff ff5b 	bl	8005df8 <__sflush_r>
 8005f42:	e7ea      	b.n	8005f1a <_fflush_r+0xe>
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <_fflush_r+0x50>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d101      	bne.n	8005f4e <_fflush_r+0x42>
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	e7f1      	b.n	8005f32 <_fflush_r+0x26>
 8005f4e:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <_fflush_r+0x54>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	d1ee      	bne.n	8005f32 <_fflush_r+0x26>
 8005f54:	68ec      	ldr	r4, [r5, #12]
 8005f56:	e7ec      	b.n	8005f32 <_fflush_r+0x26>
 8005f58:	080062b8 	.word	0x080062b8
 8005f5c:	080062d8 	.word	0x080062d8
 8005f60:	08006298 	.word	0x08006298

08005f64 <_lseek_r>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	0005      	movs	r5, r0
 8005f68:	0008      	movs	r0, r1
 8005f6a:	0011      	movs	r1, r2
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4c06      	ldr	r4, [pc, #24]	; (8005f88 <_lseek_r+0x24>)
 8005f70:	6022      	str	r2, [r4, #0]
 8005f72:	001a      	movs	r2, r3
 8005f74:	f7fa ffde 	bl	8000f34 <_lseek>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d103      	bne.n	8005f84 <_lseek_r+0x20>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d000      	beq.n	8005f84 <_lseek_r+0x20>
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	2000115c 	.word	0x2000115c

08005f8c <__swhatbuf_r>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	000e      	movs	r6, r1
 8005f90:	001d      	movs	r5, r3
 8005f92:	230e      	movs	r3, #14
 8005f94:	5ec9      	ldrsh	r1, [r1, r3]
 8005f96:	b096      	sub	sp, #88	; 0x58
 8005f98:	0014      	movs	r4, r2
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	da07      	bge.n	8005fae <__swhatbuf_r+0x22>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	89b3      	ldrh	r3, [r6, #12]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	d411      	bmi.n	8005fcc <__swhatbuf_r+0x40>
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	e00f      	b.n	8005fce <__swhatbuf_r+0x42>
 8005fae:	466a      	mov	r2, sp
 8005fb0:	f000 f8c4 	bl	800613c <_fstat_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	dbf2      	blt.n	8005f9e <__swhatbuf_r+0x12>
 8005fb8:	22f0      	movs	r2, #240	; 0xf0
 8005fba:	9b01      	ldr	r3, [sp, #4]
 8005fbc:	0212      	lsls	r2, r2, #8
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <__swhatbuf_r+0x4c>)
 8005fc2:	189b      	adds	r3, r3, r2
 8005fc4:	425a      	negs	r2, r3
 8005fc6:	4153      	adcs	r3, r2
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	e7ed      	b.n	8005fa8 <__swhatbuf_r+0x1c>
 8005fcc:	2340      	movs	r3, #64	; 0x40
 8005fce:	2000      	movs	r0, #0
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	b016      	add	sp, #88	; 0x58
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	ffffe000 	.word	0xffffe000

08005fdc <__smakebuf_r>:
 8005fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fde:	2602      	movs	r6, #2
 8005fe0:	898b      	ldrh	r3, [r1, #12]
 8005fe2:	0005      	movs	r5, r0
 8005fe4:	000c      	movs	r4, r1
 8005fe6:	4233      	tst	r3, r6
 8005fe8:	d006      	beq.n	8005ff8 <__smakebuf_r+0x1c>
 8005fea:	0023      	movs	r3, r4
 8005fec:	3347      	adds	r3, #71	; 0x47
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	6123      	str	r3, [r4, #16]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	6163      	str	r3, [r4, #20]
 8005ff6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005ff8:	ab01      	add	r3, sp, #4
 8005ffa:	466a      	mov	r2, sp
 8005ffc:	f7ff ffc6 	bl	8005f8c <__swhatbuf_r>
 8006000:	9900      	ldr	r1, [sp, #0]
 8006002:	0007      	movs	r7, r0
 8006004:	0028      	movs	r0, r5
 8006006:	f7ff fa95 	bl	8005534 <_malloc_r>
 800600a:	2800      	cmp	r0, #0
 800600c:	d108      	bne.n	8006020 <__smakebuf_r+0x44>
 800600e:	220c      	movs	r2, #12
 8006010:	5ea3      	ldrsh	r3, [r4, r2]
 8006012:	059a      	lsls	r2, r3, #22
 8006014:	d4ef      	bmi.n	8005ff6 <__smakebuf_r+0x1a>
 8006016:	2203      	movs	r2, #3
 8006018:	4393      	bics	r3, r2
 800601a:	431e      	orrs	r6, r3
 800601c:	81a6      	strh	r6, [r4, #12]
 800601e:	e7e4      	b.n	8005fea <__smakebuf_r+0xe>
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <__smakebuf_r+0x84>)
 8006022:	62ab      	str	r3, [r5, #40]	; 0x28
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	89a2      	ldrh	r2, [r4, #12]
 8006028:	6020      	str	r0, [r4, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	9b00      	ldr	r3, [sp, #0]
 8006030:	6120      	str	r0, [r4, #16]
 8006032:	6163      	str	r3, [r4, #20]
 8006034:	9b01      	ldr	r3, [sp, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <__smakebuf_r+0x7a>
 800603a:	230e      	movs	r3, #14
 800603c:	5ee1      	ldrsh	r1, [r4, r3]
 800603e:	0028      	movs	r0, r5
 8006040:	f000 f88e 	bl	8006160 <_isatty_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	d006      	beq.n	8006056 <__smakebuf_r+0x7a>
 8006048:	2203      	movs	r2, #3
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	4393      	bics	r3, r2
 800604e:	001a      	movs	r2, r3
 8006050:	2301      	movs	r3, #1
 8006052:	4313      	orrs	r3, r2
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	89a0      	ldrh	r0, [r4, #12]
 8006058:	4338      	orrs	r0, r7
 800605a:	81a0      	strh	r0, [r4, #12]
 800605c:	e7cb      	b.n	8005ff6 <__smakebuf_r+0x1a>
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	080053d1 	.word	0x080053d1

08006064 <memchr>:
 8006064:	b2c9      	uxtb	r1, r1
 8006066:	1882      	adds	r2, r0, r2
 8006068:	4290      	cmp	r0, r2
 800606a:	d101      	bne.n	8006070 <memchr+0xc>
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr
 8006070:	7803      	ldrb	r3, [r0, #0]
 8006072:	428b      	cmp	r3, r1
 8006074:	d0fb      	beq.n	800606e <memchr+0xa>
 8006076:	3001      	adds	r0, #1
 8006078:	e7f6      	b.n	8006068 <memchr+0x4>

0800607a <__malloc_lock>:
 800607a:	4770      	bx	lr

0800607c <__malloc_unlock>:
 800607c:	4770      	bx	lr
	...

08006080 <_free_r>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	0005      	movs	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d010      	beq.n	80060aa <_free_r+0x2a>
 8006088:	1f0c      	subs	r4, r1, #4
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	da00      	bge.n	8006092 <_free_r+0x12>
 8006090:	18e4      	adds	r4, r4, r3
 8006092:	0028      	movs	r0, r5
 8006094:	f7ff fff1 	bl	800607a <__malloc_lock>
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <_free_r+0x90>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <_free_r+0x2c>
 80060a0:	6063      	str	r3, [r4, #4]
 80060a2:	6014      	str	r4, [r2, #0]
 80060a4:	0028      	movs	r0, r5
 80060a6:	f7ff ffe9 	bl	800607c <__malloc_unlock>
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d909      	bls.n	80060c4 <_free_r+0x44>
 80060b0:	6821      	ldr	r1, [r4, #0]
 80060b2:	1860      	adds	r0, r4, r1
 80060b4:	4283      	cmp	r3, r0
 80060b6:	d1f3      	bne.n	80060a0 <_free_r+0x20>
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	1841      	adds	r1, r0, r1
 80060be:	6021      	str	r1, [r4, #0]
 80060c0:	e7ee      	b.n	80060a0 <_free_r+0x20>
 80060c2:	0013      	movs	r3, r2
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	d001      	beq.n	80060ce <_free_r+0x4e>
 80060ca:	42a2      	cmp	r2, r4
 80060cc:	d9f9      	bls.n	80060c2 <_free_r+0x42>
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	1858      	adds	r0, r3, r1
 80060d2:	42a0      	cmp	r0, r4
 80060d4:	d10b      	bne.n	80060ee <_free_r+0x6e>
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	1809      	adds	r1, r1, r0
 80060da:	1858      	adds	r0, r3, r1
 80060dc:	6019      	str	r1, [r3, #0]
 80060de:	4282      	cmp	r2, r0
 80060e0:	d1e0      	bne.n	80060a4 <_free_r+0x24>
 80060e2:	6810      	ldr	r0, [r2, #0]
 80060e4:	6852      	ldr	r2, [r2, #4]
 80060e6:	1841      	adds	r1, r0, r1
 80060e8:	6019      	str	r1, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e7da      	b.n	80060a4 <_free_r+0x24>
 80060ee:	42a0      	cmp	r0, r4
 80060f0:	d902      	bls.n	80060f8 <_free_r+0x78>
 80060f2:	230c      	movs	r3, #12
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	e7d5      	b.n	80060a4 <_free_r+0x24>
 80060f8:	6821      	ldr	r1, [r4, #0]
 80060fa:	1860      	adds	r0, r4, r1
 80060fc:	4282      	cmp	r2, r0
 80060fe:	d103      	bne.n	8006108 <_free_r+0x88>
 8006100:	6810      	ldr	r0, [r2, #0]
 8006102:	6852      	ldr	r2, [r2, #4]
 8006104:	1841      	adds	r1, r0, r1
 8006106:	6021      	str	r1, [r4, #0]
 8006108:	6062      	str	r2, [r4, #4]
 800610a:	605c      	str	r4, [r3, #4]
 800610c:	e7ca      	b.n	80060a4 <_free_r+0x24>
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	20001034 	.word	0x20001034

08006114 <_read_r>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	0005      	movs	r5, r0
 8006118:	0008      	movs	r0, r1
 800611a:	0011      	movs	r1, r2
 800611c:	2200      	movs	r2, #0
 800611e:	4c06      	ldr	r4, [pc, #24]	; (8006138 <_read_r+0x24>)
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	001a      	movs	r2, r3
 8006124:	f7fa fec8 	bl	8000eb8 <_read>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d103      	bne.n	8006134 <_read_r+0x20>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d000      	beq.n	8006134 <_read_r+0x20>
 8006132:	602b      	str	r3, [r5, #0]
 8006134:	bd70      	pop	{r4, r5, r6, pc}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	2000115c 	.word	0x2000115c

0800613c <_fstat_r>:
 800613c:	2300      	movs	r3, #0
 800613e:	b570      	push	{r4, r5, r6, lr}
 8006140:	4c06      	ldr	r4, [pc, #24]	; (800615c <_fstat_r+0x20>)
 8006142:	0005      	movs	r5, r0
 8006144:	0008      	movs	r0, r1
 8006146:	0011      	movs	r1, r2
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	f7fa fedc 	bl	8000f06 <_fstat>
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d103      	bne.n	800615a <_fstat_r+0x1e>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d000      	beq.n	800615a <_fstat_r+0x1e>
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	2000115c 	.word	0x2000115c

08006160 <_isatty_r>:
 8006160:	2300      	movs	r3, #0
 8006162:	b570      	push	{r4, r5, r6, lr}
 8006164:	4c06      	ldr	r4, [pc, #24]	; (8006180 <_isatty_r+0x20>)
 8006166:	0005      	movs	r5, r0
 8006168:	0008      	movs	r0, r1
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	f7fa fed9 	bl	8000f22 <_isatty>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d103      	bne.n	800617c <_isatty_r+0x1c>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d000      	beq.n	800617c <_isatty_r+0x1c>
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	2000115c 	.word	0x2000115c

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
