
CV02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800035c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800035c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000054e  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000297  00000000  00000000  000108d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  00010b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  00010c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000487c  00000000  00000000  00010c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000dc3  00000000  00000000  000154e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000182bd  00000000  00000000  000162a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002e564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  0002e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800033c 	.word	0x0800033c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800033c 	.word	0x0800033c

08000108 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	 sct_init();
 800010c:	f000 f848 	bl	80001a0 <sct_init>
	 sct_led(0x7A5C36DE);
 8000110:	4b04      	ldr	r3, [pc, #16]	; (8000124 <main+0x1c>)
 8000112:	0018      	movs	r0, r3
 8000114:	f000 f808 	bl	8000128 <sct_led>

	while(1)
	{
		 sct_led(0x7A5C36DE);
 8000118:	4b02      	ldr	r3, [pc, #8]	; (8000124 <main+0x1c>)
 800011a:	0018      	movs	r0, r3
 800011c:	f000 f804 	bl	8000128 <sct_led>
 8000120:	e7fa      	b.n	8000118 <main+0x10>
 8000122:	46c0      	nop			; (mov r8, r8)
 8000124:	7a5c36de 	.word	0x7a5c36de

08000128 <sct_led>:
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)

#define led(x) do { if (x) GPIOA->BSRR = (1 << 5); else GPIOA->BRR = (1 << 5); } while (0)
void sct_led(uint32_t value)
{
 8000128:	b580      	push	{r7, lr}
 800012a:	b084      	sub	sp, #16
 800012c:	af00      	add	r7, sp, #0
 800012e:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j<32; j++)
 8000130:	230f      	movs	r3, #15
 8000132:	18fb      	adds	r3, r7, r3
 8000134:	2200      	movs	r2, #0
 8000136:	701a      	strb	r2, [r3, #0]
 8000138:	e021      	b.n	800017e <sct_led+0x56>
	{
		sct_sdi(value&1);
 800013a:	687b      	ldr	r3, [r7, #4]
 800013c:	2201      	movs	r2, #1
 800013e:	4013      	ands	r3, r2
 8000140:	d003      	beq.n	800014a <sct_led+0x22>
 8000142:	4b16      	ldr	r3, [pc, #88]	; (800019c <sct_led+0x74>)
 8000144:	2210      	movs	r2, #16
 8000146:	619a      	str	r2, [r3, #24]
 8000148:	e002      	b.n	8000150 <sct_led+0x28>
 800014a:	4b14      	ldr	r3, [pc, #80]	; (800019c <sct_led+0x74>)
 800014c:	2210      	movs	r2, #16
 800014e:	629a      	str	r2, [r3, #40]	; 0x28
		value=value>>1;
 8000150:	687b      	ldr	r3, [r7, #4]
 8000152:	085b      	lsrs	r3, r3, #1
 8000154:	607b      	str	r3, [r7, #4]
		sct_clk(1);
 8000156:	4b11      	ldr	r3, [pc, #68]	; (800019c <sct_led+0x74>)
 8000158:	2208      	movs	r2, #8
 800015a:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 800015c:	4b0f      	ldr	r3, [pc, #60]	; (800019c <sct_led+0x74>)
 800015e:	2208      	movs	r2, #8
 8000160:	629a      	str	r2, [r3, #40]	; 0x28
		led(1);
 8000162:	2390      	movs	r3, #144	; 0x90
 8000164:	05db      	lsls	r3, r3, #23
 8000166:	2220      	movs	r2, #32
 8000168:	619a      	str	r2, [r3, #24]
		led(0);
 800016a:	2390      	movs	r3, #144	; 0x90
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	2220      	movs	r2, #32
 8000170:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint8_t j = 0; j<32; j++)
 8000172:	210f      	movs	r1, #15
 8000174:	187b      	adds	r3, r7, r1
 8000176:	781a      	ldrb	r2, [r3, #0]
 8000178:	187b      	adds	r3, r7, r1
 800017a:	3201      	adds	r2, #1
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	230f      	movs	r3, #15
 8000180:	18fb      	adds	r3, r7, r3
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b1f      	cmp	r3, #31
 8000186:	d9d8      	bls.n	800013a <sct_led+0x12>
	}
	sct_nla(1);
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <sct_led+0x74>)
 800018a:	2220      	movs	r2, #32
 800018c:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 800018e:	4b03      	ldr	r3, [pc, #12]	; (800019c <sct_led+0x74>)
 8000190:	2220      	movs	r2, #32
 8000192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000194:	46c0      	nop			; (mov r8, r8)
 8000196:	46bd      	mov	sp, r7
 8000198:	b004      	add	sp, #16
 800019a:	bd80      	pop	{r7, pc}
 800019c:	48000400 	.word	0x48000400

080001a0 <sct_init>:

void sct_init(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN|RCC_AHBENR_GPIOAEN; // enable CLK
 80001a4:	4b1a      	ldr	r3, [pc, #104]	; (8000210 <sct_init+0x70>)
 80001a6:	695a      	ldr	r2, [r3, #20]
 80001a8:	4b19      	ldr	r3, [pc, #100]	; (8000210 <sct_init+0x70>)
 80001aa:	21c0      	movs	r1, #192	; 0xc0
 80001ac:	02c9      	lsls	r1, r1, #11
 80001ae:	430a      	orrs	r2, r1
 80001b0:	615a      	str	r2, [r3, #20]
	GPIOB->MODER |= GPIO_MODER_MODER5_0; // nLA = PB5, output
 80001b2:	4b18      	ldr	r3, [pc, #96]	; (8000214 <sct_init+0x74>)
 80001b4:	681a      	ldr	r2, [r3, #0]
 80001b6:	4b17      	ldr	r3, [pc, #92]	; (8000214 <sct_init+0x74>)
 80001b8:	2180      	movs	r1, #128	; 0x80
 80001ba:	00c9      	lsls	r1, r1, #3
 80001bc:	430a      	orrs	r2, r1
 80001be:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_0; // SDI = PB4, output
 80001c0:	4b14      	ldr	r3, [pc, #80]	; (8000214 <sct_init+0x74>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <sct_init+0x74>)
 80001c6:	2180      	movs	r1, #128	; 0x80
 80001c8:	0049      	lsls	r1, r1, #1
 80001ca:	430a      	orrs	r2, r1
 80001cc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_0; // CLK = PB3, output
 80001ce:	4b11      	ldr	r3, [pc, #68]	; (8000214 <sct_init+0x74>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <sct_init+0x74>)
 80001d4:	2140      	movs	r1, #64	; 0x40
 80001d6:	430a      	orrs	r2, r1
 80001d8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER10_0; // nOE = PB10, output
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <sct_init+0x74>)
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <sct_init+0x74>)
 80001e0:	2180      	movs	r1, #128	; 0x80
 80001e2:	0349      	lsls	r1, r1, #13
 80001e4:	430a      	orrs	r2, r1
 80001e6:	601a      	str	r2, [r3, #0]

	GPIOA->MODER |= GPIO_MODER_MODER5_0; // nOE = PB10, output
 80001e8:	2390      	movs	r3, #144	; 0x90
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	2390      	movs	r3, #144	; 0x90
 80001f0:	05db      	lsls	r3, r3, #23
 80001f2:	2180      	movs	r1, #128	; 0x80
 80001f4:	00c9      	lsls	r1, r1, #3
 80001f6:	430a      	orrs	r2, r1
 80001f8:	601a      	str	r2, [r3, #0]
	sct_noe(0);
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <sct_init+0x74>)
 80001fc:	2280      	movs	r2, #128	; 0x80
 80001fe:	00d2      	lsls	r2, r2, #3
 8000200:	629a      	str	r2, [r3, #40]	; 0x28
	sct_led(0);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ff90 	bl	8000128 <sct_led>
}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	40021000 	.word	0x40021000
 8000214:	48000400 	.word	0x48000400

08000218 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <SystemInit+0x70>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <SystemInit+0x70>)
 8000222:	2101      	movs	r1, #1
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <SystemInit+0x70>)
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <SystemInit+0x70>)
 800022e:	4917      	ldr	r1, [pc, #92]	; (800028c <SystemInit+0x74>)
 8000230:	400a      	ands	r2, r1
 8000232:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <SystemInit+0x70>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <SystemInit+0x70>)
 800023a:	4915      	ldr	r1, [pc, #84]	; (8000290 <SystemInit+0x78>)
 800023c:	400a      	ands	r2, r1
 800023e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <SystemInit+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <SystemInit+0x70>)
 8000246:	4913      	ldr	r1, [pc, #76]	; (8000294 <SystemInit+0x7c>)
 8000248:	400a      	ands	r2, r1
 800024a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800024c:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <SystemInit+0x70>)
 800024e:	685a      	ldr	r2, [r3, #4]
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <SystemInit+0x70>)
 8000252:	4911      	ldr	r1, [pc, #68]	; (8000298 <SystemInit+0x80>)
 8000254:	400a      	ands	r2, r1
 8000256:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <SystemInit+0x70>)
 800025a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <SystemInit+0x70>)
 800025e:	210f      	movs	r1, #15
 8000260:	438a      	bics	r2, r1
 8000262:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <SystemInit+0x70>)
 8000266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <SystemInit+0x70>)
 800026a:	490c      	ldr	r1, [pc, #48]	; (800029c <SystemInit+0x84>)
 800026c:	400a      	ands	r2, r1
 800026e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <SystemInit+0x70>)
 8000272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <SystemInit+0x70>)
 8000276:	2101      	movs	r1, #1
 8000278:	438a      	bics	r2, r1
 800027a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <SystemInit+0x70>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]

}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40021000 	.word	0x40021000
 800028c:	08ffb80c 	.word	0x08ffb80c
 8000290:	fef6ffff 	.word	0xfef6ffff
 8000294:	fffbffff 	.word	0xfffbffff
 8000298:	ffc0ffff 	.word	0xffc0ffff
 800029c:	fffffeec 	.word	0xfffffeec

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490e      	ldr	r1, [pc, #56]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0b      	ldr	r4, [pc, #44]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ca:	f7ff ffa5 	bl	8000218 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff19 	bl	8000108 <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	2600      	movs	r6, #0
 80002f8:	4d0c      	ldr	r5, [pc, #48]	; (800032c <__libc_init_array+0x38>)
 80002fa:	4c0d      	ldr	r4, [pc, #52]	; (8000330 <__libc_init_array+0x3c>)
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	2600      	movs	r6, #0
 8000306:	f000 f819 	bl	800033c <_init>
 800030a:	4d0a      	ldr	r5, [pc, #40]	; (8000334 <__libc_init_array+0x40>)
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <__libc_init_array+0x44>)
 800030e:	1b64      	subs	r4, r4, r5
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	00b3      	lsls	r3, r6, #2
 800031a:	58eb      	ldr	r3, [r5, r3]
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	00b3      	lsls	r3, r6, #2
 8000324:	58eb      	ldr	r3, [r5, r3]
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
